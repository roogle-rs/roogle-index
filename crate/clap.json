{"root":"0:0:1686","crate_version":"4.2.4","includes_private":false,"index":{"2:11923:34178":{"id":"2:11923:34178","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:34187":{"id":"2:11946:34187","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:7775"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11576:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:28535":{"id":"2:11914:28535","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:7775","str::rsplitn":"2:11917:28537"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42754:7764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:24319":{"id":"2:11970:24319","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11855:34170":{"id":"2:11855:34170","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11853:34169"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:24315":{"id":"2:11969:24315","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11852:34168":{"id":"2:11852:34168","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11850:802":{"id":"2:11850:802","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11896:412"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11871:34173":{"id":"2:11871:34173","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11902:1380","crate::ops::IndexMut":"2:2992:2173","str::slice_unchecked":"2:11870:34172"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11862:28496":{"id":"2:11862:28496","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40660:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11858:22942":{"id":"2:11858:22942","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11119:7779"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11881:31245":{"id":"2:11881:31245","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42942:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11880:34174":{"id":"2:11880:34174","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42914:7789","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:28531":{"id":"2:11902:28531","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:7775"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11375:7766","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:34179":{"id":"2:11929:34179","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11551:7775","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::matches":"2:11926:1902"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42872:7793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11851:27962":{"id":"2:11851:27962","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:24321":{"id":"2:11972:24321","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:34181":{"id":"2:11935:34181","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11551:7775","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::match_indices":"2:11932:34180"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42818:7791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5328:34844":{"id":"5:5328:34844","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11955:28540":{"id":"2:11955:28540","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:7775"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11870:34172":{"id":"2:11870:34172","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11902:1380","str::slice_mut_unchecked":"2:11871:34173","crate::ops::Index":"2:2988:2172"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:34193":{"id":"2:11973:34193","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4513:34193"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42949:7786","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11866:28498":{"id":"2:11866:28498","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11859:34171":{"id":"2:11859:34171","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:34175":{"id":"2:11908:34175","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11551:7775","str::split":"2:11899:26440","prim@char":"1:11896:412","`DoubleEndedIterator`":"2:7173:120","str::rsplit_terminator":"2:11911:34176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42700:7795","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5340:34847":{"id":"5:5340:34847","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:1997","`String`":"5:7192:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1997","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5341:2314":{"id":"5:5341:2314","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:30960":{"id":"2:11875:30960","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11896:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42626:7781","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11864:28497":{"id":"2:11864:28497","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40660:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11860:312":{"id":"2:11860:312","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11861:28500","`u8`":"1:11913:1477"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:28533":{"id":"2:11905:28533","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11551:7775","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::split":"2:11899:26440"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42668:7760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:34183":{"id":"2:11940:34183","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11853:34169":{"id":"2:11853:34169","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5339:34846":{"id":"5:5339:34846","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5342:24317":{"id":"5:5342:24317","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11971:24320"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:28500":{"id":"2:11861:28500","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11913:1477"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:34185":{"id":"2:11944:34185","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5324:34843":{"id":"5:5324:34843","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1997","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1997","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:28110":{"id":"2:11888:28110","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:7775"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:34177":{"id":"2:11920:34177","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:19482":{"id":"2:11895:19482","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40660:177","prim@char":"1:11896:412","self::pattern":"2:11551:7775"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:34182":{"id":"2:11938:34182","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:34189":{"id":"2:11958:34189","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:7775"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11891:19481":{"id":"2:11891:19481","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40660:177","prim@char":"1:11896:412","self::pattern":"2:11551:7775"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11868:28499":{"id":"2:11868:28499","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:31252":{"id":"2:11878:31252","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11877:31246"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42933:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11964:34191":{"id":"2:11964:34191","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:7775"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:28539":{"id":"2:11882:28539","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:7775"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11879:26441":{"id":"2:11879:26441","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42904:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:22941":{"id":"2:11952:22941","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:7775"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11877:31246":{"id":"2:11877:31246","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11878:31252"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42924:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11949:34188":{"id":"2:11949:34188","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:7775"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:26440":{"id":"2:11899:26440","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11551:7775","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::split_whitespace":"2:11877:31246","str::rsplit":"2:11905:28533"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42650:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:1902":{"id":"2:11926:1902","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11551:7775","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::matches":"2:11926:1902"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42854:7792","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11849":{"id":"2:11849","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11850:802","2:11851:27962","2:11852:34168","2:11853:34169","2:11855:34170","2:11858:22942","2:11859:34171","2:11860:312","2:11861:28500","2:11862:28496","2:11864:28497","2:11866:28498","2:11868:28499","2:11870:34172","2:11871:34173","2:11872:28522","2:11873:28523","2:11874:31244","2:11875:30960","2:11876:22950","2:11877:31246","2:11878:31252","2:11879:26441","2:11880:34174","2:11881:31245","2:11882:28539","2:11885:28108","2:11888:28110","2:11891:19481","2:11895:19482","2:11899:26440","2:11902:28531","2:11905:28533","2:11908:34175","2:11911:34176","2:11914:28535","2:11917:28537","2:11920:34177","2:11923:34178","2:11926:1902","2:11929:34179","2:11932:34180","2:11935:34181","2:11938:34182","2:11940:34183","2:11942:34184","2:11944:34185","2:11945:34186","2:11946:34187","2:11949:34188","2:11952:22941","2:11955:28540","2:11958:34189","2:11961:34190","2:11964:34191","2:11967:34192","2:11969:24315","2:11970:24319","2:11971:24320","2:11972:24321","2:11973:34193","2:11975:2093","2:11976:34194"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11945:34186":{"id":"2:11945:34186","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:2093":{"id":"2:11975:2093","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4514:2093"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42958:2094","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11885:28108":{"id":"2:11885:28108","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:7775"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:34184":{"id":"2:11942:34184","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:22950":{"id":"2:11876:22950","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42636:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:34194":{"id":"2:11976:34194","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4511:34194"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42967:7787","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:28522":{"id":"2:11872:28522","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11873:28523"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3-20:0:1676":{"id":"0:3-20:0:1676","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[98,0],"end":[98,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"clap_builder","name":"clap_builder","id":"20:0:1676","glob":true}},"2:11911:34176":{"id":"2:11911:34176","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11551:7775","str::split":"2:11899:26440","prim@char":"1:11896:412","str::split_terminator":"2:11908:34175"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42718:7794","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:28537":{"id":"2:11917:28537","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11896:412","str::splitn":"2:11914:28535","self::pattern":"2:11551:7775"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42772:7762","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1686":{"id":"0:0:1686","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[119,1]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.64.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:3-20:0:1676"],"is_stripped":false}},"2:11932:34180":{"id":"2:11932:34180","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11551:7775","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::rmatch_indices":"2:11935:34181"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42800:7790","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:28523":{"id":"2:11873:28523","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11872:28522"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11967:34192":{"id":"2:11967:34192","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11513:126","`FromStr`":"2:11512:2460"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40802:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11512:2460","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11512:2460","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11971:24320":{"id":"2:11971:24320","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5325:8122":{"id":"5:5325:8122","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:34845":{"id":"5:5331:34845","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5343:24318":{"id":"5:5343:24318","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11972:24321"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5323":{"id":"5:5323","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5324:34843","5:5325:8122","5:5328:34844","5:5331:34845","5:5339:34846","5:5340:34847","5:5341:2314","5:5342:24317","5:5343:24318"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11961:34190":{"id":"2:11961:34190","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:7775"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:31244":{"id":"2:11874:31244","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11896:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42620:7782","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"31:2990:19692":{"crate_id":31,"path":["rustix","backend","io","poll_fd","PollFd"],"kind":"struct"},"32:5739:12205":{"crate_id":32,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"16:7042:35943":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:9088:2268":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"20:3657:37293":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"2:42377:31255":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"22:34:2290":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"1:620:2095":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:2208:2235":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:6791:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:50299:31177":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"23:208:19601":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"2:5920:8106":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:2830:14268":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9721:15414":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:41773:8236":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:2812:8142":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"32:5263:12322":{"crate_id":32,"path":["linux_raw_sys","general","in6_pktinfo"],"kind":"struct"},"30:2093:9831":{"crate_id":30,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:12167:32955":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4248:12283":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:11907:634":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"30:4927:12296":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"30:5117:12306":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"30:806:8584":{"crate_id":30,"path":["libc","unix","FILE"],"kind":"enum"},"2:46365:2630":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:10555:15529":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"23:262:19600":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"20:4007:36056":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"1:2537:2300":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:4037:14457":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"31:2839:19676":{"crate_id":31,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"1:4324:2384":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10527:15564":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:42800:7790":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:7578:2369":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"30:4945:12297":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:1520:9814":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:2206:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"20:3343:19541":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"1:3436:2214":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"7:79:14023":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"31:2625:19706":{"crate_id":31,"path":["rustix","backend","io","epoll","CreateFlags"],"kind":"struct"},"1:5553:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:7115:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:9895:15437":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"30:7345:13019":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:8773:33208":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11946:18636":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"30:745:8915":{"crate_id":30,"path":["libc","unix","tms"],"kind":"struct"},"30:7265:13016":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:2296:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:9107:2550":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:9443:15384":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"12:0:1789":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"14:165:14176":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:43381:8285":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:41215:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:6381:34944":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:10412:2309":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"20:4647:1950":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"6:4649:12321":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:3205:2311":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:4702:14882":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:9006:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:3063:14276":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"32:4599:21051":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"2:44462:30497":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"32:6431:21135":{"crate_id":32,"path":["linux_raw_sys","general","oldold_utsname"],"kind":"struct"},"16:4596:14824":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"31:3779:37794":{"crate_id":31,"path":["rustix","backend","process","types","RawCpuSet"],"kind":"struct"},"30:5611:12328":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:2470:14253":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:6544:15212":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"20:2875:1944":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"32:4510:21046":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"30:5033:12302":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"31:4668:37801":{"crate_id":31,"path":["rustix","process","prctl","TimingMethod"],"kind":"enum"},"1:11001:2474":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:2744:7696":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"18:574:36997":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:39413:8218":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:10655:2254":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"31:5075:37776":{"crate_id":31,"path":["rustix","process","prctl","PointerAuthenticationKeys"],"kind":"struct"},"5:35:2177":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13181:19402":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:8816:2514":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"18:481:19494":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:6831:25270":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"32:6357:13971":{"crate_id":32,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"2:44563:30655":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:39640:8086":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:8823:15348":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:7635:15248":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"32:6578:21142":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:6530:13427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:5741:15178":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"28:5:2296":{"crate_id":28,"path":["is_terminal","IsTerminal"],"kind":"trait"},"30:8440:13440":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:11879:18632":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:4789:14897":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:43657:7689":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"32:6711:21157":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_2"],"kind":"union"},"11:353:35816":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:46115:2606":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:8185:2440":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:6575:15214":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:10833:2469":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4218:12280":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:39460:2234":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:45347:2632":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:9875:2118":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10840:15363":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"32:7369:13002":{"crate_id":32,"path":["linux_raw_sys","general","cmsghdr"],"kind":"struct"},"18:538:19498":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"30:8458:13441":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4549:12313":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:4850:2420":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"30:5225:12311":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:1645:9826":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:39541:8084":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:1567:2120":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:3057:2319":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:20626:2571":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:39948:2105":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:12466:2175":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:9265:15356":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:8244:2336":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:41949:7935":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:22174:2080":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:8548:15343":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:8753:15346":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:7843:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:1050:2133":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"32:6473:21137":{"crate_id":32,"path":["linux_raw_sys","general","new_utsname"],"kind":"struct"},"6:6079:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"30:5513:12323":{"crate_id":30,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:40524:2330":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5000:14940":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:4510:14810":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11060:15372":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:5436:2469":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:7616:2075":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:14:1905":{"crate_id":2,"path":["core","write"],"kind":"macro"},"32:5634:8904":{"crate_id":32,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"2:3988:31210":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"30:2005:9827":{"crate_id":30,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:7675:2138":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:2668:14261":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:2756:8112":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"30:5817:12339":{"crate_id":30,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"31:4969:37789":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeatureState"],"kind":"struct"},"31:4024:37785":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdTimerFlags"],"kind":"struct"},"2:2824:8140":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"13:110:35874":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:8195:15317":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13564:19435":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:11906:633":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:7659:2102":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"29:19:19639":{"crate_id":29,"path":["io_lifetimes","portability","AsFilelike"],"kind":"trait"},"2:4231:205":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:43389:8287":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:3379:2262":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:6290:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:4489:12309":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4261:12284":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:48977:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:44937:2596":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"30:2113:9832":{"crate_id":30,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:22108:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:1840:2123":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13857:19454":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:7813:2255":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:7498:15239":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11910:734":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5716:12998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:20366:7920":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:2799:8137":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13639:19438":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:21356:2563":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:6488:8953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"30:5433:12319":{"crate_id":30,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:43619:2639":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:7511:13999":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:2829:25296":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"30:8253:13433":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"11:1085:14165":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11220:15581":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:11903:1459":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:39712:8087":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:9826:15411":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"29:183:19664":{"crate_id":29,"path":["io_lifetimes","views","FilelikeView"],"kind":"struct"},"2:3931:2275":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:41996:31658":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"32:6660:21152":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"16:5418:36207":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:3640:14281":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"30:1822:9819":{"crate_id":30,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:7196:1995":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:6218:15192":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:6983:33372":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:949:2130":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:12194:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:9523:15395":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"30:4564:12280":{"crate_id":30,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:6643:13431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"33:0:1935":{"crate_id":33,"path":["anstyle_query"],"kind":"module"},"2:50278:31181":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:3244:2307":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:5920:204":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"20:4205:1949":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"6:4662:12323":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:5786:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:11696:28092":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:8940:22933":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"25:23:14084":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"6:119:8584":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:8144:2288":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:12293:18657":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:39380:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:9431:8255":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"14:202:7816":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"30:5763:12336":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10270:15479":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:507:36997":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"30:4558:9975":{"crate_id":30,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:8113:2264":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6201:15191":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:41697:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"30:4770:12289":{"crate_id":30,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:491:37019":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"31:4451:37780":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointEmulationControl"],"kind":"struct"},"17:9322:36975":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"20:4620:37280":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"1:1787:2182":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:9653:15430":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:4560:2357":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:3665:2158":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:1704:9832":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:40794:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"23:348:19603":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"5:6958:2146":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:39737:8103":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:46511:2633":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4416:12300":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:46701:7680":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:7702:22853":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"30:1687:8965":{"crate_id":30,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:21698:30491":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"20:3624:37277":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"11:1852:2139":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:20680:2369":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:5759:2504":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"31:438:7879":{"crate_id":31,"path":["rustix","backend","io","epoll","Ref"],"kind":"struct"},"32:5658:8914":{"crate_id":32,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"17:10681:15569":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:1677:9829":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"31:2854:19693":{"crate_id":31,"path":["rustix","backend","io","poll_fd","PollFlags"],"kind":"struct"},"6:4743:12333":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7572:36081":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:7434:12506":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"32:4528:21048":{"crate_id":32,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"2:42933:7777":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"30:7246:13015":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:12372:18663":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4687:12326":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11969:18637":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6132:15189":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:20434:33204":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:8880:2516":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:8420:2455":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:8605:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:39304:2094":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:44723:2628":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:7135:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"30:8351:13436":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:11921:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:4277:34923":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:2130:581":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11355:18124":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:2404:14250":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13411:19422":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"30:6986:13004":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:8085:2316":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"20:4470:37289":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"30:4788:12131":{"crate_id":30,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:2343:2241":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"32:5851:21114":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"1:4172:2389":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:8495:2458":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"32:5332:21093":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_3"],"kind":"enum"},"17:9275:36971":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"20:4267:19571":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"11:387:35825":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"32:5009:21078":{"crate_id":32,"path":["linux_raw_sys","general","group_filter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"30:8924:13812":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"32:6343:13003":{"crate_id":32,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"1:2611:2302":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:20563:2569":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"30:9297:14000":{"crate_id":30,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10580:15565":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5722:12999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:20600:2570":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:812:2144":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:6594:9753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5990:13019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:9959:15467":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:6728:13436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:11920:1112":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:12634:18680":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:9822:15424":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"11:119:35811":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4828:12343":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:13194:19403":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:2936:1993":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:4932:14920":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:2404:33341":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"32:6923:21163":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_cqe"],"kind":"struct"},"20:4530:19549":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"2:40644:2333":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"30:6813:12998":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:1919:15452":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:6981:15227":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10923:15367":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"20:4627:1951":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"2:9052:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:39611:8096":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"30:1693:9812":{"crate_id":30,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"32:5251:21086":{"crate_id":32,"path":["linux_raw_sys","general","in6_flowlabel_req"],"kind":"struct"},"1:504:2065":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:9047:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"32:6325:21132":{"crate_id":32,"path":["linux_raw_sys","general","tcp_zerocopy_receive"],"kind":"struct"},"5:1419:2125":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"32:7117:21172":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_update"],"kind":"struct"},"1:3445:24160":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:39723:2288":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:3170:7868":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:11770:18627":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"20:36:1955":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"2:40975:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11339:18123":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"30:8163:13429":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13309:19412":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"32:4762:21064":{"crate_id":32,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"1:10222:25698":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:3207:2312":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"11:2184:30399":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"30:1802:9818":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:48964:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"29:56:19649":{"crate_id":29,"path":["io_lifetimes","portability","FromSocketlike"],"kind":"trait"},"1:8917:24812":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:44839:2604":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"27:282:19633":{"crate_id":27,"path":["anstyle","color","RgbColor"],"kind":"struct"},"17:12085:18645":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"30:4865:12293":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:39427:2220":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:20411:33206":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:3324:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:4121:2388":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"9:445:14045":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:46587:7672":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"29:137:19658":{"crate_id":29,"path":["io_lifetimes","raw","IntoRawFilelike"],"kind":"trait"},"1:5567:2509":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:5648:2123":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:12146:7929":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:9054:7707":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:10205:1945":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:0:1792":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:12307:18658":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:6904:15224":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:8979:36986":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:12419:18666":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:3397:2261":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:12354:2641":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:5904:2508":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:10929:19637":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:46225:2626":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:7467:15334":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:21760:2348":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:10006:7753":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"32:5990:21122":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_4"],"kind":"enum"},"16:5724:15177":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:2359:2246":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:2341:2240":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:9577:15399":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"20:3999:19538":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"9:325:14100":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:41789:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"30:5412:12318":{"crate_id":30,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"0:0:1686":{"crate_id":0,"path":["clap"],"kind":"module"},"2:45271:2625":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5690:12996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10283:15480":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:2080:2135":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:1583:9821":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:1574:2124":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"30:4884:12294":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"30:9212:12509":{"crate_id":30,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"20:3396:37028":{"crate_id":20,"path":["clap_builder","builder","arg_settings","Flags"],"kind":"struct"},"9:174:14148":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"29:42:19651":{"crate_id":29,"path":["io_lifetimes","portability","IntoSocketlike"],"kind":"trait"},"32:5860:21115":{"crate_id":32,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"17:12126:18648":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:3782:14298":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:12033:18641":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:10700:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"32:5865:21116":{"crate_id":32,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"17:420:14220":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:46473:2613":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"30:9263:12515":{"crate_id":30,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:2524:14255":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"30:7355:13020":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:3991:2362":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"30:5054:12303":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:733:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4812:990":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:10649:15568":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:8025:15259":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"30:8402:13438":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:11258:18119":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:7786:2256":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:11422:18128":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"30:4651:12284":{"crate_id":30,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"20:3327:19515":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"6:4890:12350":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"20:3634:37276":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"1:7796:2254":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:5643:15172":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:286:1997":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:2933:15478":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:5759:13003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10052:15496":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:4108:2275":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:8270:2422":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:2829:8141":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"30:5154:12308":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4346:12291":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:2895:37069":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"17:13763:19447":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12072:18644":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6520:15211":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:7094:8081":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:7192:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"30:8856:8862":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7411:15233":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:10820:2201":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:6476:2501":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:8479:2457":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:2571:2292":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:20432:33207":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"30:5536:12324":{"crate_id":30,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"30:539:8904":{"crate_id":30,"path":["libc","unix","timespec"],"kind":"struct"},"2:43228:7813":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:42208:7742":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:39510:2170":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:9038:36974":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:3300:14278":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"11:861:2132":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:46648:7677":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"30:1929:9824":{"crate_id":30,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"30:5955:12357":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:7528:8079":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:2905:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:2808:14267":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"30:4581:12281":{"crate_id":30,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"31:466:19701":{"crate_id":31,"path":["rustix","backend","io","epoll","Borrowing"],"kind":"struct"},"32:4674:21059":{"crate_id":32,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"1:8746:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:6767:15218":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:10747:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:9148:36980":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:2764:14265":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"32:7126:21173":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_update2"],"kind":"struct"},"16:8047:15260":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:274:35821":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"32:6081:21126":{"crate_id":32,"path":["linux_raw_sys","general","tcp_fastopen_client_fail"],"kind":"enum"},"17:13426:19424":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:572:8914":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:4400:14772":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"31:4339:37811":{"crate_id":31,"path":["rustix","process","prctl","DumpableBehavior"],"kind":"enum"},"2:21636:31182":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"32:4827:21071":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1"],"kind":"union"},"17:10478:15533":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:6919:35947":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:11895:926":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:6403:2505":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5843:13008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"32:6998:21168":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_10"],"kind":"enum"},"32:6569:21141":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"16:154:14223":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"30:728:8914":{"crate_id":30,"path":["libc","unix","itimerval"],"kind":"struct"},"11:738:2122":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4697:12327":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13506:19433":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:1785:2181":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:5386:14214":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"32:5029:9817":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_in"],"kind":"struct"},"5:6115:34953":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:4571:12315":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:7386:13971":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"30:7953:8785":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:44292:2634":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:12158:18650":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:11785:18628":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:10415:2311":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:43239:7814":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"30:7228:13014":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:22141:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:7040:2120":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:6512:8785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"32:7157:21176":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_restriction"],"kind":"struct"},"29:28:19645":{"crate_id":29,"path":["io_lifetimes","portability","AsSocketlike"],"kind":"trait"},"2:40467:153":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"23:153:19589":{"crate_id":23,"path":["anstream","lockable","Lockable"],"kind":"trait"},"20:3963:19527":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"1:8274:2424":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:11845:23261":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"20:4196:19575":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"16:7509:15240":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"20:2718:2119":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"17:9748:15355":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"31:4196:37843":{"crate_id":31,"path":["rustix","process","id","Cpuid"],"kind":"struct"},"31:4686:37863":{"crate_id":31,"path":["rustix","process","prctl","EndianMode"],"kind":"enum"},"6:1652:9827":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11911:735":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:10458:2075":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:46549:2598":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"32:7174:21178":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_12"],"kind":"enum"},"16:7029:36255":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:11544:18137":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:13399:19421":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:2795:2554":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11471:18132":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:4962:12357":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:7146:30669":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4727:12331":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"32:7235:2424":{"crate_id":32,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"16:6442:15206":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:4327:14723":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:38979:8152":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:9218:15355":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:903:2123":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:2113:33369":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:9383:25696":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:4900:12351":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"11:669:2126":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"24:132:2454":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"20:1180:19535":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"14:31:14175":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"31:356:37918":{"crate_id":31,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"32:6389:8911":{"crate_id":32,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"5:1410:2122":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"30:5321:12315":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13169:19401":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:42636:2289":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6460:15207":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"27:360:19637":{"crate_id":27,"path":["anstyle","reset","Reset"],"kind":"struct"},"17:9907:15466":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:0:1372":{"crate_id":1,"path":["std"],"kind":"module"},"2:2840:8144":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:5813:13006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11069:15373":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:4572:22966":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:4504:2412":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:2731:1990":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:6910:2487":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"32:5551:8910":{"crate_id":32,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"16:6179:15190":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:7487:12514":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:5594:15169":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:12607:18679":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"23:0:1926":{"crate_id":23,"path":["anstream"],"kind":"module"},"2:45507:2605":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:7201:13811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:7293:15231":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"31:4145:37812":{"crate_id":31,"path":["rustix","process","id","Uid"],"kind":"struct"},"17:11902:18634":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:2803:8136":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:6939:2176":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"32:4651:21057":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"6:1541:9817":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"23:301:19597":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"17:10316:15477":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:487:15333":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:42718:7794":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:38821:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:8772:2475":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:7065:36213":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:12345:18661":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"32:5626:21102":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"2:4386:2078":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:10142:15520":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"31:3822:19721":{"crate_id":31,"path":["rustix","backend","termios","types","QueueSelector"],"kind":"enum"},"16:4728:14884":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:43034:7805":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:10418:2307":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"30:7476:13048":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:43282:7797":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:8397:2454":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:6793:15219":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:39672:8100":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"32:5070:21080":{"crate_id":32,"path":["linux_raw_sys","general","ip_auth_hdr"],"kind":"struct"},"16:5998:15187":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:3935:2357":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11813:15523":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:8835:2512":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"32:6980:21167":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_params"],"kind":"struct"},"30:7042:13007":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:822:2129":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"23:423:37539":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"20:4244:2122":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"2:7565:33209":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:43627:2640":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"32:7318:21182":{"crate_id":32,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"30:4846:12292":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"27:261:19632":{"crate_id":27,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"30:1845:9820":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:360:2089":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:44338:2614":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:9641:15404":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13516:19434":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:11070:23034":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:40743:2437":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:5890:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:8269:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6390:15203":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:2765:2553":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"11:777:14162":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:21553:30648":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:41095:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"32:4635:21055":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"32:6202:21129":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_6"],"kind":"enum"},"2:44891:2611":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"32:7167:21177":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_restriction__bindgen_ty_1"],"kind":"union"},"2:22042:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:4583:12316":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:11229:23268":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"31:4746:37842":{"crate_id":31,"path":["rustix","process","prctl","VirtualMemoryMapAddress"],"kind":"enum"},"2:40718:2118":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:12411:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:3266:15501":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"32:6705:21156":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_1"],"kind":"union"},"6:4611:2351":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:7173:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:44314:2622":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:40734:2120":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:42538:7759":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:31807:8113":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"30:5836:12340":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"32:6138:21128":{"crate_id":32,"path":["linux_raw_sys","general","tcp_info"],"kind":"struct"},"16:6293:15195":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:7175:2217":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:3246:2308":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13667:19441":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"20:3895:19532":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"2:41255:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:12219:7930":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"30:7502:13049":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:9064:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"30:5783:12337":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:7697:15251":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:123:8585":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:1075:33966":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:2850:8146":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:11897:1493":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:7475:12512":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:11565:7773":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:21447:31137":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:3167:2310":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:42650:2290":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:1451:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"31:3294:19674":{"crate_id":31,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"2:43576:209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"30:5938:12355":{"crate_id":30,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:9340:15358":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"11:1859:2140":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:766:19485":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"31:3671:37903":{"crate_id":31,"path":["rustix","backend","process","types","Signal"],"kind":"enum"},"1:8970:24805":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:6888:24424":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:9732:220":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:44693:2624":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"20:4390:19567":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"2:38759:7701":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"32:4996:21076":{"crate_id":32,"path":["linux_raw_sys","general","group_req"],"kind":"struct"},"16:4540:14816":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:7173:8862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:8170:15267":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13488:19431":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:39279:7787":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:4624:14828":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:31798:8199":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:3147:2141":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:45113:30554":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:42456:7750":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"30:8181:13430":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:2319:14246":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:1872:2142":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:40935:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"30:5903:12352":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:6675:34953":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:6474:15208":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"30:7906:8953":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:4570:22964":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:242:36981":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"30:5454:12320":{"crate_id":30,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:3446:14279":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:13777:19448":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:22807:2341":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"30:5650:12330":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:5571:15168":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13469:19429":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"20:3939:19526":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"20:3357:19542":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"1:11013:2475":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12433:18667":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:540:8909":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12388:18664":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:2338:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:7644:2101":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:6127:24804":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"31:3087:19694":{"crate_id":31,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"11:1120:14166":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:45553:2609":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:11301:8295":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:10172:7762":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:11551:7775":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:9512:15396":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:39941:31247":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:2854:8147":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:9696:15400":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:2573:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:39397:30669":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8786:2476":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:2357:14248":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:44268:30524":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:11508:14202":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"30:9158:12505":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:5317:2465":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"32:6623:21148":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"32:5226:21085":{"crate_id":32,"path":["linux_raw_sys","general","in6_addr__bindgen_ty_1"],"kind":"union"},"11:2205:2116":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:9188:36990":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:42004:31657":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"20:3887:19531":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"2:10186:7765":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12403:18665":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:3289:2296":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:39560:8091":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"11:1065:35810":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:1926:2213":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:1801:2161":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:2426:14251":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10845:23138":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:4100:2386":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"32:5913:12937":{"crate_id":32,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"16:2720:14263":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"31:2530:37940":{"crate_id":31,"path":["rustix","process","uname","Uname"],"kind":"struct"},"2:39006:15269":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:12915:19386":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:9488:15401":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"32:4742:21062":{"crate_id":32,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"15:198:14194":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:10079:7760":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:1363:2119":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"32:6597:21145":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"32:7138:21174":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_probe_op"],"kind":"struct"},"17:10721:15536":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"18:614:37001":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:320:35812":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:644:36997":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:20841:2565":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:955:2131":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:5132:34944":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:7937:25251":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:5716:2496":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:12138:18649":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:586:8916":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:4756:2367":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4751:12334":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:38861:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:2775:8132":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:10516:15528":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:11037:15371":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:7521:14000":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:44493:2615":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:48990:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"11:60:35824":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:44523:2603":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:6628:13429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:5346:15166":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"32:7148:21175":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_probe"],"kind":"struct"},"31:534:2118":{"crate_id":31,"path":["rustix","backend","io","epoll","Iter"],"kind":"struct"},"18:719:19483":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:11105:8245":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:7366:15232":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:8443:15340":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:11615:18142":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"30:9234:12510":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4468:12306":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"23:402:19592":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"17:8389:15338":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13791:19449":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4871:12347":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:3899:14343":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:6518:8082":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:13376:19419":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"31:3909:37927":{"crate_id":31,"path":["rustix","backend","time","types","DynamicClockId"],"kind":"enum"},"2:46671:7678":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:8740:2473":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:40870:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:42189:8274":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"22:130:19582":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"30:783:8917":{"crate_id":30,"path":["libc","unix","protoent"],"kind":"struct"},"1:3969:2358":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:5064:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:11915:1475":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:2902:7691":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5967:35307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:3030:14274":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10104:15475":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8922:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:4910:12352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:46607:7674":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"23:170:2369":{"crate_id":23,"path":["anstream","raw","private","Sealed"],"kind":"trait"},"6:4877:12348":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:5180:7733":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:44360:2602":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"26:21:1950":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"16:6061:14217":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6488:15209":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:10761:15360":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:8983:15230":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"30:6847:13000":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:2846:8145":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5878:13009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:8184:2441":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:40553:31178":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"22:114:19581":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"2:43249:7815":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:39333:7903":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"31:3476:19677":{"crate_id":31,"path":["rustix","backend","io","types","EventfdFlags"],"kind":"struct"},"17:13659:19440":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:1596:2142":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"9:234:2454":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:13865:19455":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13803:19450":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:4677:2372":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:4921:12353":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13066:19395":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:9683:15415":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12059:18643":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:8858:15349":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:9796:15417":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"30:5094:12305":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:2229:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"30:1913:9823":{"crate_id":30,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:39013:30764":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:4818:14902":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:7217:7818":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"32:5696:8905":{"crate_id":32,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"31:457:106":{"crate_id":31,"path":["rustix","backend","io","epoll","Context"],"kind":"trait"},"5:5754:2492":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"20:4277:37075":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"1:8134:2287":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12318:18659":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:11556:18138":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:48925:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"32:6606:21146":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"2:20639:2369":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:8347:2453":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"30:7443:12196":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:7440:12507":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:7682:2200":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"32:5618:21101":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"5:271:34944":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"27:347:19636":{"crate_id":27,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"20:4189:19562":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"5:1401:2121":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:3375:7846":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:42924:7778":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"32:5773:21105":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"1:2864:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"32:4547:13426":{"crate_id":32,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"1:2215:2237":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7803:15256":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:1609:9824":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:41431:7715":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"30:5136:12307":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4795:12340":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"32:4536:8785":{"crate_id":32,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"17:10452:15535":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:3142:15483":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:2674:1989":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"29:47:19648":{"crate_id":29,"path":["io_lifetimes","portability","FromFilelike"],"kind":"trait"},"2:48951:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"32:5085:21082":{"crate_id":32,"path":["linux_raw_sys","general","ip_comp_hdr"],"kind":"struct"},"16:7519:15241":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"32:5079:21081":{"crate_id":32,"path":["linux_raw_sys","general","ip_esp_hdr"],"kind":"struct"},"31:3873:37830":{"crate_id":31,"path":["rustix","backend","time","types","ClockId"],"kind":"enum"},"2:39631:8097":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"20:1609:19554":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"2:43373:8284":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6000:13020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:6521:13426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"18:690:19489":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:40490:2328":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:1987:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:11136:15578":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:1082:2136":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"20:2696:2118":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"17:9409:15382":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:8794:2118":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"31:3380:19689":{"crate_id":31,"path":["rustix","backend","io","types","PipeFlags"],"kind":"struct"},"30:4675:12285":{"crate_id":30,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:9200:32668":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"26:41:19624":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"20:59:1952":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"25:0:1928":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"2:11777:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:7743:15253":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:4092:2385":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:5938:13015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:1611:580":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:1379:2120":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:1550:9818":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:10158:7764":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:49003:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4720:12330":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:42626:7781":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11993:18638":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"11:1518:14167":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:9060:7716":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"32:4723:12339":{"crate_id":32,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"6:5752:13002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4237:12282":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"32:6950:21165":{"crate_id":32,"path":["linux_raw_sys","general","io_sqring_offsets"],"kind":"struct"},"2:2679:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"30:2052:9829":{"crate_id":30,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"31:2713:19707":{"crate_id":31,"path":["rustix","backend","io","epoll","EventFlags"],"kind":"struct"},"2:8778:32282":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:40609:2331":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:7535:29992":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:41657:31180":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:6607:8089":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:4307:2275":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:7837:15257":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:11914:1474":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:7478:24427":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"20:1607:19553":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"17:10303:15476":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"30:5478:12321":{"crate_id":30,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:9058:7715":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:640:2098":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"30:7120:13009":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:3653:2157":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"32:5704:12280":{"crate_id":32,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"32:6932:21164":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_9"],"kind":"enum"},"1:10824:23039":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:5331:2466":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:7251:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"11:762:2124":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:4757:12335":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13324:19414":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:38947:2110":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:5779:15179":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:557:2072":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:6743:13437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12510:18672":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:2862:14269":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:8598:15345":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:8971:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:11844:18630":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"30:7302:13018":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:40632:2332":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:22372:2347":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:4432:2395":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:7524:2151":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"30:5171:12309":{"crate_id":30,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:5976:15186":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:6967:2123":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:10863:2476":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"20:4554:37285":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"2:9967:7766":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:45429:2617":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:2384:1801":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:44600:30492":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"32:5104:21084":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_2"],"kind":"enum"},"2:39227:30651":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:412:163":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:13219:19405":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:9312:15357":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"20:3956:19528":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"17:9973:15440":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:42466:7751":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:7335:36320":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:2301:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:13033:19392":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:3976:31256":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:44422:2623":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:45317:2629":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"20:734:37292":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"2:9056:7706":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"32:6717:21158":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_3"],"kind":"union"},"6:6571:9779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"25:53:2454":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"17:10626:15567":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:2879:14270":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:11919:1530":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"30:621:8908":{"crate_id":30,"path":["libc","unix","hostent"],"kind":"struct"},"18:96:19469":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:7767:15255":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12194:18652":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:567:8913":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"30:1887:9822":{"crate_id":30,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:1695:9831":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:877:2118":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"31:3611:37858":{"crate_id":31,"path":["rustix","backend","process","types","Resource"],"kind":"enum"},"31:4829:37824":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointMode"],"kind":"enum"},"30:5883:12350":{"crate_id":30,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:8186:2439":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:7098:8080":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:38806:8150":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:3132:26282":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:8864:2513":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"30:7925:9752":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:7034:2120":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:4483:12308":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"30:5993:12361":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"20:4594:37175":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"10:36:35803":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"9:502:14048":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:4574:22968":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"20:3686:19516":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"2:7521:2148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11891:18633":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:12113:18647":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:3877:2352":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:7467:15236":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:12236:18654":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:4969:14933":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:7698:2201":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:8975:24794":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"15:0:1791":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:10545:15370":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"32:5814:21110":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"30:1726:9814":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:8651:14214":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:846:2118":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:4274:12285":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"32:5580:21096":{"crate_id":32,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"11:98:35820":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"20:4329:37078":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"17:13625:19437":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:5426:7841":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:8632:15316":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:7272:2124":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:13367:19418":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"32:6669:21153":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"17:12522:18673":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4981:12358":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"27:182:19630":{"crate_id":27,"path":["anstyle","color","Color"],"kind":"enum"},"1:6479:2502":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:9917:15463":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:386:15332":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:1978:2157":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"32:5521:21094":{"crate_id":32,"path":["linux_raw_sys","general","socket_state"],"kind":"enum"},"5:6514:7841":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:9722:2369":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4322:12289":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"31:4810:37912":{"crate_id":31,"path":["rustix","process","prctl","PTracer"],"kind":"enum"},"32:7356:13001":{"crate_id":32,"path":["linux_raw_sys","general","msghdr"],"kind":"struct"},"11:1628:35818":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:860:2145":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:7259:2437":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:493:8904":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:1992:2158":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:8142:15265":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"24:113:19614":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"17:13879:19456":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11628:18143":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:5683:2494":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:5920:15183":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:1440:2127":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5660:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"23:382:2454":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"2:43669:7687":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4929:12354":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"30:4979:12299":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11372:18125":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"11:1003:2134":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"32:6413:8909":{"crate_id":32,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"5:5843:2275":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:7005:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:21734:2346":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:43584:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:9866:15431":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"24:304:19612":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"7:32:14016":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:9886:15438":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"32:6421:2380":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_un"],"kind":"struct"},"32:5712:13811":{"crate_id":32,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"30:7074:13008":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:5351:2467":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:3165:2309":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"20:2909:37061":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"32:7097:21170":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_files_update"],"kind":"struct"},"2:3204:7698":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"23:417:19588":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"2:43377:8286":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"30:9176:12506":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"32:5300:21090":{"crate_id":32,"path":["linux_raw_sys","general","rt2_hdr"],"kind":"struct"},"2:2834:8143":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:39570:8092":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:41737:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:4775:12337":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"32:4645:21056":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"17:13159:19400":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:38720:7866":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"27:305:33209":{"crate_id":27,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"16:5104:14972":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:1687:9830":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:39934:8072":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:4987:25264":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"32:5825:21111":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"32:4558:13999":{"crate_id":32,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"30:9194:12507":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:9064:7713":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:21609:2344":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5951:13017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:42428:7749":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"30:4805:12290":{"crate_id":30,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13211:19404":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:8214:15269":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:6230:204":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"20:3681:2069":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"6:5910:13012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:6400:15204":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:13121:19397":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"20:3652:37291":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"30:5685:12332":{"crate_id":30,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:4635:2421":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:2863:8149":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4334:12290":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:4023:7695":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"32:6737:21159":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_4"],"kind":"union"},"23:319:19612":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"30:1781:9817":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"30:8134:9756":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8230:2392":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:8953:15350":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:11241:23044":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:12496:18671":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:7469:12511":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13292:19411":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"11:1832:2118":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"29:147:19660":{"crate_id":29,"path":["io_lifetimes","raw","FromRawFilelike"],"kind":"trait"},"6:4952:12356":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:5616:15170":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:20413:33202":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:8291:7771":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6351:15200":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"32:6632:21149":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"16:5071:14963":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:1727:31174":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:39206:7870":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:62:8530":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:1239:2136":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:5797:36078":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"32:6373:21133":{"crate_id":32,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"6:4379:12295":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:30026:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:9596:15397":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"31:0:1933":{"crate_id":31,"path":["rustix"],"kind":"module"},"17:1978:15436":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:1589:9822":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:8610:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:7711:15252":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:9380:15381":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:7144:1996":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:42772:7762":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:11340:8294":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:44869:2608":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:2918:2154":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:960:34944":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:4568:14820":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"20:4113:2303":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"6:4439:12303":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10660:15372":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:6053:13047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12894:19384":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"22:0:1925":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"32:5888:21118":{"crate_id":32,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"5:6700:34934":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:44745:2631":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10015:15515":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:7803:2258":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:3155:2139":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:3225:14277":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:41685:109":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:30010:8125":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:3983:2360":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:9772:15419":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"22:5:2352":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"2:2681:226":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11585:18140":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:6094:13049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12006:18639":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:43397:8282":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:1609:34944":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"20:67:1957":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"17:13812:19451":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4539:12312":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:6236:15193":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:1559:9819":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11909:733":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:13419:19423":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:5902:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:8252:2393":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:8181:2327":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:12592:18678":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"30:8890:13810":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:1947:15412":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:928:2127":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:6059:12196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:11917:1473":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:7428:12505":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:10310:2473":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"31:4115:37807":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdClockId"],"kind":"enum"},"17:12835:19383":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:533:2070":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:6764:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4501:12310":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"30:764:8916":{"crate_id":30,"path":["libc","unix","servent"],"kind":"struct"},"2:22273:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"32:6677:21154":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"30:6893:13002":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:4078:2275":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:7942:24788":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"32:5946:12196":{"crate_id":32,"path":["linux_raw_sys","general","sysinfo"],"kind":"struct"},"2:10117:7761":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"30:5725:12334":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"30:6871:13001":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"31:4791:37928":{"crate_id":31,"path":["rustix","process","prctl","PrctlMmMap"],"kind":"struct"},"17:975:15398":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:9874:23963":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:43640:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:10989:15370":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:7289:7838":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:41015:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:660:19486":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:11912:731":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"4:0:1784":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10705:15571":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:11410:18127":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:11576:7770":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:4000:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"11:0:1788":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:9028:15351":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"20:3946:19524":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"1:11899:1037":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"27:0:1930":{"crate_id":27,"path":["anstyle"],"kind":"module"},"23:286:19596":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"1:8218:2331":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:6363:2105":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"32:5594:21098":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"32:5245:8907":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_mreq"],"kind":"struct"},"17:11163:15579":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:3979:2359":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:40507:2329":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:4741:33013":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:2499:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:11862:24809":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"32:6542:21139":{"crate_id":32,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"17:13015:19390":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"11:985:2133":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"31:479:19702":{"crate_id":31,"path":["rustix","backend","io","epoll","Owning"],"kind":"struct"},"18:582:7920":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7529:15242":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:961:2132":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:13249:19408":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"32:4501:21045":{"crate_id":32,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"16:2967:14273":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:45583:2612":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:1731:9835":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"32:7378:2351":{"crate_id":32,"path":["linux_raw_sys","general","ucred"],"kind":"struct"},"30:8420:13439":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"11:1836:2120":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"30:6721:12937":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:43177:7811":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:7452:12509":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"31:3846:14084":{"crate_id":31,"path":["rustix","backend","termios","types","Action"],"kind":"enum"},"17:12563:18676":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"20:4492:37096":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"30:8105:9753":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"7:0:1520":{"crate_id":7,"path":["unwind"],"kind":"module"},"30:4749:12288":{"crate_id":30,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:39963:2317":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"30:5015:12301":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"29:189:19665":{"crate_id":29,"path":["io_lifetimes","views","SocketlikeView"],"kind":"struct"},"1:10690:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:3504:2123":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:21644:30544":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"20:4185:2095":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"17:13082:19396":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10798:15361":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"23:63:19609":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"17:10569:15531":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4841:12344":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"9:0:1786":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"31:4707:37861":{"crate_id":31,"path":["rustix","process","prctl","TimeStampCounterReadability"],"kind":"enum"},"2:2929:1991":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"11:751:2123":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"32:5282:21088":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_rt_hdr"],"kind":"struct"},"20:3718:19519":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"6:4733:12332":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:39602:8095":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:637:2097":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:9069:2518":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:9066:7714":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:45090:30642":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:12358:18662":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"30:5893:12351":{"crate_id":30,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5886:15182":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:1055:33912":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"20:3308:1948":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"2:40709:8155":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:13499:19432":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"32:4843:21073":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_1"],"kind":"enum"},"17:12282:18656":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:43056:7806":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:12646:18681":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"20:4296:37077":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"17:9478:15403":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"30:604:8907":{"crate_id":30,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:2678:223":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:7449:15235":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:42529:7756":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"32:6686:21155":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe"],"kind":"struct"},"1:5244:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:42503:7739":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:5847:15181":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"14:187:14183":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:41424:7707":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:4679:2373":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:40573:30679":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"32:4988:21075":{"crate_id":32,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"1:6367:2498":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"18:531:19497":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"32:5314:21092":{"crate_id":32,"path":["linux_raw_sys","general","ipv6hdr"],"kind":"struct"},"30:5914:12353":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:7317:36294":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"30:5945:12356":{"crate_id":30,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"20:2980:37028":{"crate_id":20,"path":["clap_builder","builder","app_settings","Flags"],"kind":"struct"},"2:1527:2275":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"32:5020:9826":{"crate_id":32,"path":["linux_raw_sys","general","in_pktinfo"],"kind":"struct"},"17:13651:19439":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"27:313:19634":{"crate_id":27,"path":["anstyle","effect","Effects"],"kind":"struct"},"17:9469:15386":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11861:18631":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:1514:9813":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:1618:8061":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"30:8896:13811":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:6541:13428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"30:4998:12300":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:481:8902":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"23:231:19598":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"32:5236:9818":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_in6"],"kind":"struct"},"1:354:2088":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13332:19415":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8437:2456":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:42904:2286":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:44915:2593":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"30:8203:13431":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:21248:2557":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"30:5875:12349":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6667:13433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:43150:7810":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"32:7204:21179":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_getevents_arg"],"kind":"struct"},"30:5594:12327":{"crate_id":30,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"32:5292:21089":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_opt_hdr"],"kind":"struct"},"5:4148:2118":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:932:2128":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:45617:2594":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:4410:2394":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:11512:2460":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"30:5572:12326":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:4656:12322":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"22:30:2369":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"6:1534:9816":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:3907:2354":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:561:8912":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:40785:8227":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:42854:7792":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6243:36293":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:8176:2335":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"26:0:1929":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"2:43393:8288":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:4872:14908":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:1866:2141":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:9839:15410":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"30:6911:13003":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:43085:7808":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:39257:7908":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:2787:8134":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"29:182:19663":{"crate_id":29,"path":["io_lifetimes","views","SocketlikeViewType"],"kind":"trait"},"2:9310:7932":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:22306:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:6615:25261":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"10:0:1787":{"crate_id":10,"path":["adler"],"kind":"module"},"2:9315:7933":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:10068:15517":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"32:5275:12341":{"crate_id":32,"path":["linux_raw_sys","general","in6_ifreq"],"kind":"struct"},"2:42204:30411":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:42942:7776":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12259:18655":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:0:489":{"crate_id":2,"path":["core"],"kind":"module"},"30:2167:9836":{"crate_id":30,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:9545:15393":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:30004:7837":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"32:5049:21079":{"crate_id":32,"path":["linux_raw_sys","general","iphdr"],"kind":"struct"},"2:4302:7878":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:39620:8105":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"32:4949:9813":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreq"],"kind":"struct"},"6:4369:12294":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:6890:15223":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:6302:2120":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"20:4368:19574":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"18:755:19492":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"14:221:14185":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"32:4733:21061":{"crate_id":32,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"30:8377:13437":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:1897:2212":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:5655:15173":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"28:0:1931":{"crate_id":28,"path":["is_terminal"],"kind":"module"},"30:8017:13428":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13689:19443":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"30:5857:12341":{"crate_id":30,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"32:5650:12286":{"crate_id":32,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"2:40895:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:9617:15392":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:7087:2116":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:31758:2477":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:2905:14271":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"30:486:8901":{"crate_id":30,"path":["libc","unix","group"],"kind":"struct"},"16:7077:15229":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4457:12305":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:10897:15366":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"15:180:14193":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:7757:15254":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:9670:15416":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:41715:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"18:609:37026":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:42700:7795":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:8928:2069":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:6182:2508":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"31:549:19705":{"crate_id":31,"path":["rustix","backend","io","epoll","EventVec"],"kind":"struct"},"20:3992:19521":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"14:160:14175":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"18:699:19490":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:11867:2103":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:2198:35806":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"31:5306:37924":{"crate_id":31,"path":["rustix","process","wait","WaitStatus"],"kind":"struct"},"30:5298:12314":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:1770:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"30:4828:12291":{"crate_id":30,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:40726:2119":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:2931:14272":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:39653:8098":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13461:19428":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:10668:23168":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:12019:18640":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:10735:15573":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:594:8917":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:2226:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:5917:13013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"20:4235:19570":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"2:42558:7758":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:39663:8099":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:2332:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"11:646:2119":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"30:9252:12514":{"crate_id":30,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11832:15522":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"30:6783:12997":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:4559:12314":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10626:2423":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:2909:33915":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:8072:15261":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:3749:14289":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"30:5922:12354":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"30:5800:12338":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11502:18134":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:3741:34944":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:39982:8076":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:2337:14247":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6819:15220":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:45767:2618":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:10685:7754":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:11384:2337":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"15:219:14198":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:1747:9836":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:5402:14212":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:6935:15225":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:6975:2147":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:43102:7809":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:41135:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"30:5277:12313":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"18:636:37007":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:6533:7842":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:6336:15199":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:5032:14948":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:10000:15514":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:44545:2607":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4408:12299":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:3946:34944":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"20:3796:19544":{"crate_id":20,"path":["clap_builder","builder","styled_str","Styles"],"kind":"struct"},"1:587:2092":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:9350:36987":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"30:7203:13013":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"30:4605:12282":{"crate_id":30,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"31:4179:37795":{"crate_id":31,"path":["rustix","process","id","Pid"],"kind":"struct"},"29:67:19644":{"crate_id":29,"path":["io_lifetimes","traits","IntoFd"],"kind":"trait"},"20:1631:37248":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"30:5987:12360":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:2791:2552":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12046:18642":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"32:7227:21180":{"crate_id":32,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"1:4252:2390":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:38903:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:10823:15362":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:2786:14266":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"11:697:2127":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"32:5754:21103":{"crate_id":32,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"1:11025:25021":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:11556:7771":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:20808:2369":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:6095:29996":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:11166:2480":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:7016:36251":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:20651:2560":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:39532:8083":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:8101:2260":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"30:4905:12295":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:12133:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:1570:2123":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:7488:15238":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:7683:15250":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:6634:13430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"32:5307:21091":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_destopt_hao"],"kind":"struct"},"2:41438:7716":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:11901:1350":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"20:1361:19537":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"2:20813:2561":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:3126:24641":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:11501:14202":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:7579:2090":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:677:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:7162:2216":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:5945:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:10134:2479":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"27:382:19638":{"crate_id":27,"path":["anstyle","style","Style"],"kind":"struct"},"1:5499:2472":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:13053:19394":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:630:33317":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:1716:2380":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"31:4725:37869":{"crate_id":31,"path":["rustix","process","prctl","MachineCheckMemoryCorruptionKillPolicy"],"kind":"enum"},"20:4162:19545":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"17:11641:18144":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"31:5210:37777":{"crate_id":31,"path":["rustix","process","wait","WaitOptions"],"kind":"struct"},"6:6719:13435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"18:521:19493":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4994:12360":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:10940:29990":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:624:36996":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:43071:7807":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:11264:8293":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4361:12293":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"30:4731:12287":{"crate_id":30,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:1039:33965":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"31:3193:19691":{"crate_id":31,"path":["rustix","backend","io","types","SpliceFlags"],"kind":"struct"},"20:3860:19529":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"5:7099:2117":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:21748:2345":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"20:1362:1955":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"32:4796:21067":{"crate_id":32,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"17:8283:15335":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:913:2124":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"5:3121:2140":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:1527:9815":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:4174:19546":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"6:4681:12325":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:8090:15262":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4328:12131":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:2988:2172":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:9498:15400":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:46763:7682":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"30:7322:35307":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:21682:30553":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"30:7282:13017":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"20:0:1676":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"17:11109:15375":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:3159:232":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:1579:2139":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:5693:15175":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:39366:7900":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2248:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:11052:2268":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:20688:2564":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:505:8906":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:21091:2566":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"32:5748:8913":{"crate_id":32,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"17:9946:15439":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"31:3572:37821":{"crate_id":31,"path":["rustix","backend","process","types","MembarrierCommand"],"kind":"enum"},"17:11532:18136":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:9978:2192":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:11913:1477":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:2781:8135":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:247:36977":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:6717:14190":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10465:15534":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:6631:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:1585:2140":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"32:5805:21109":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"1:8296:2371":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:46576:7671":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:11600:18141":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:7516:29988":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"32:6043:21124":{"crate_id":32,"path":["linux_raw_sys","general","tcp_repair_window"],"kind":"struct"},"2:45012:30643":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:11199:23043":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:1713:2124":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:13265:19410":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"32:4467:21044":{"crate_id":32,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"2:21621:30559":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"20:3866:19530":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"1:7595:2077":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:2807:8138":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:4862:12346":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:11571:7772":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:1899:9975":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:6506:15210":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:859:2119":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11299:18121":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"27:173:37635":{"crate_id":27,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"17:9853:15464":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9566:15356":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"32:6054:21125":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_5"],"kind":"enum"},"32:4782:21066":{"crate_id":32,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"1:8329:2433":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"29:181:19662":{"crate_id":29,"path":["io_lifetimes","views","FilelikeViewType"],"kind":"trait"},"6:1723:9834":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"32:4519:21047":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"17:13842:19453":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:42967:7787":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:10720:25016":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13101:19380":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:30602:7920":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:25617:2342":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11090:15374":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:10377:15482":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"31:3001:19681":{"crate_id":31,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"30:7002:13005":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"30:573:8906":{"crate_id":30,"path":["libc","unix","rusage"],"kind":"struct"},"17:8667:14212":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"30:676:8911":{"crate_id":30,"path":["libc","unix","winsize"],"kind":"struct"},"32:5729:8953":{"crate_id":32,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"2:42872:7793":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:11089:2518":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"20:4407:37095":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"30:4627:12283":{"crate_id":30,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:10645:23128":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"32:6749:21161":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_7"],"kind":"enum"},"2:45059:30541":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"30:5668:12331":{"crate_id":30,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:1429:2126":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4224:12281":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:2819:8139":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:3126:33876":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"32:5586:21097":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"16:6321:15197":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:10650:23141":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:39550:8090":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:1435:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:5176:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"20:4222:19564":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"2:41295:2493":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:11908:736":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:10615:15557":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"29:132:19657":{"crate_id":29,"path":["io_lifetimes","raw","AsRawSocketlike"],"kind":"trait"},"32:7219:8912":{"crate_id":32,"path":["linux_raw_sys","general","linger"],"kind":"struct"},"2:9924:2290":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:8151:2289":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:3872:14340":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:1460:2156":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:4412:7882":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"11:725:2121":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:10200:7763":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:2742:14264":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:7588:15245":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:6079:2641":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:43405:8301":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:7131:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:9534:15394":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"18:707:7773":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:217:7705":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:10691:15570":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:39020:7879":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"30:658:8910":{"crate_id":30,"path":["libc","unix","pollfd"],"kind":"struct"},"20:4287:37073":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"17:12331:18660":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"14:40:18120":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"30:9276:13999":{"crate_id":30,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:13135:19398":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"11:1029:2135":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:3604:34944":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"14:215:14184":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:8129:15264":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"32:5983:21121":{"crate_id":32,"path":["linux_raw_sys","general","tcp_word_hdr"],"kind":"union"},"30:5194:12310":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"18:681:19488":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:562:15334":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"30:8295:13434":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:3129:26281":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:11160:23092":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:4597:12317":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"3:229:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:5698:12997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:4850:12345":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10428:15561":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"30:2130:9833":{"crate_id":30,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"9:352:14061":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:2186:33335":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"20:3703:19517":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"30:5974:12358":{"crate_id":30,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:7867:2157":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"30:5633:12329":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:5811:15180":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10257:15481":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:4820:12342":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:13821:19452":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:2506:235":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:20682:2562":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:7851:25280":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"22:100:19580":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"32:7076:21169":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_11"],"kind":"enum"},"11:853:2131":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:780:2143":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"14:0:1790":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"30:695:8912":{"crate_id":30,"path":["libc","unix","linger"],"kind":"struct"},"20:3662:182":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"2:41055:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"11:632:2118":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:55:14213":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"17:0:1793":{"crate_id":17,"path":["object"],"kind":"module"},"2:44961:2597":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:8109:15263":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:2474:2299":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:924:2126":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4703:12328":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:4757:14889":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"32:5610:21100":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"2:21500:31138":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:1848:2198":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:12799:19382":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:4480:14804":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:578:8915":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:41667:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"32:4567:9833":{"crate_id":32,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"1:2211:2236":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:39957:8074":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:40658:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:39267:7909":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:9062:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:8788:15347":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"30:6763:12996":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"11:1845:2124":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"5:3722:2124":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:11263:25270":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"30:1987:9826":{"crate_id":30,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12622:15372":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:13453:19427":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:6003:29893":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:5959:13018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:10710:2260":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:43262:7796":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:6032:2643":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:42668:7760":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:20832:2369":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:11405:2339":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:2490:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:6535:35901":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:4733:2374":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"31:4868:37781":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeatureControl"],"kind":"struct"},"16:2694:14262":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:7478:15237":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:1348:2118":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:39215:7907":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"30:5256:12312":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:1073:2135":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"32:5602:21099":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"16:7437:15234":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"32:4957:9814":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreqn"],"kind":"struct"},"2:20839:2567":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:20394:33175":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10743:15359":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10353:29897":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:1713:8177":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"32:5094:21083":{"crate_id":32,"path":["linux_raw_sys","general","ip_beet_phdr"],"kind":"struct"},"16:6307:15196":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:2547:29998":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"30:505:8902":{"crate_id":30,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11721:18626":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4301:12286":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"30:7993:13427":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"31:4162:37904":{"crate_id":31,"path":["rustix","process","id","Gid"],"kind":"struct"},"20:4033:19555":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"1:938:2129":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:9371:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:11119:7779":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"32:6108:21127":{"crate_id":32,"path":["linux_raw_sys","general","tcp_ca_state"],"kind":"enum"},"2:3086:2174":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"23:434:19591":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"1:3676:2337":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:4366:7881":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:4841:2419":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:7947:2303":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:2770:8133":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:43457:8302":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6854:15221":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:5305:15149":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"30:7425:13047":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"30:9240:12511":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4476:12307":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:11894:369":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"11:2190:35805":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:11011:15319":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"31:3798:19720":{"crate_id":31,"path":["rustix","backend","termios","types","OptionalActions"],"kind":"enum"},"16:2572:14257":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:30204:30607":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:41986:2454":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:499:8905":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:473:8901":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"20:4507:37087":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"30:6936:12965":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:3160:33871":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12461:18669":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:1736:8176":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:9453:15385":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6327:15198":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"11:393:35826":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:42914:7789":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:4121:7885":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"20:3933:19523":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"32:6399:21134":{"crate_id":32,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"6:4429:12302":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:4163:7728":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"24:26:19615":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"17:8573:15344":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:42594:7788":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:11916:1476":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"30:2143:9834":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5805:13005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5728:13000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"23:366:37536":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"1:4108:2387":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"32:4771:21065":{"crate_id":32,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"8:0:1785":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"9:421:14047":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4396:12297":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"20:4338:37076":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"2:3176:7867":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:7218:13812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:2502:14254":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:6548:2424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:4720:2104":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:5963:15185":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:2496:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:39326:7786":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:10598:15369":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:6654:30410":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:645:2099":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:869:2120":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:6022:15188":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"9:388:14046":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:1617:9825":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:5557:15167":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:2992:2173":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:7590:2076":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:3273:2124":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:8903:2497":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"30:9246:12512":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:5367:2468":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:3988:2119":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:5741:13001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:1823:2192":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"30:4714:12286":{"crate_id":30,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:10505:15563":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"24:0:1927":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"16:3815:14307":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:9228:36985":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:8236:2383":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"30:556:8905":{"crate_id":30,"path":["libc","unix","rlimit"],"kind":"struct"},"17:10402:15548":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10885:15365":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:9138:15353":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:9734:15413":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"30:7185:13012":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:6876:15222":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:7103:15230":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:9181:1952":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:2594:14258":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:44582:2592":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:7791:2257":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:1509:9812":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"32:6640:21150":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"1:6751:2556":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:3085:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"29:37:19650":{"crate_id":29,"path":["io_lifetimes","portability","IntoFilelike"],"kind":"trait"},"2:43445:2555":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:9424:15383":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:10047:24425":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"32:4575:21049":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"32:4942:9812":{"crate_id":32,"path":["linux_raw_sys","general","in_addr"],"kind":"struct"},"17:8420:15339":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"32:6965:21166":{"crate_id":32,"path":["linux_raw_sys","general","io_cqring_offsets"],"kind":"struct"},"2:2493:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"32:4588:21050":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"20:3274:1947":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"2:8996:2214":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12483:18670":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"30:2027:9828":{"crate_id":30,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:4:1002":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"30:0:807":{"crate_id":30,"path":["libc"],"kind":"module"},"6:4945:12355":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:4313:12288":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"29:142:19659":{"crate_id":29,"path":["io_lifetimes","raw","IntoRawSocketlike"],"kind":"trait"},"31:3933:37782":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdFlags"],"kind":"struct"},"5:3916:2123":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:3513:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:5770:8504":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:4976:2492":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"30:5555:12325":{"crate_id":30,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:653:8965":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"20:51:1953":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"32:4975:21074":{"crate_id":32,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:2587:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"20:4347:19573":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"17:12449:18668":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:39972:8075":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:39243:7906":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:38986:7854":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:4312:7879":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:5677:15174":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:3322:2317":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"32:5799:21108":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"2:42608:7785":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"30:4962:12298":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"30:5706:12333":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:40776:2438":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10936:15368":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:8310:15336":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"18:727:19491":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"30:5369:12317":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:11320:25693":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"30:1948:9825":{"crate_id":30,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6361:15201":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"32:7214:9816":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr"],"kind":"struct"},"17:11821:15521":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11520:18135":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12098:18646":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:6930:25111":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"14:7:14175":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:1846:1952":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:5708:15176":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:5772:12965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:11343:2338":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:4766:12336":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:39287:7901":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:4673:12324":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"20:3584:1945":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"2:20729:2565":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6164:36234":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:2633:33345":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6696:15216":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:8521:15342":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13316:19413":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"30:641:8909":{"crate_id":30,"path":["libc","unix","iovec"],"kind":"struct"},"2:39027:7863":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:7669:15249":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:9068:36979":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:39588:31240":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:3461:2284":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:3181:2142":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"32:6590:21144":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"32:4713:21060":{"crate_id":32,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"1:3871:2353":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"13:226:35875":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8758:2474":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"18:0:1794":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:1044:14164":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:39340:7904":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"30:2074:9830":{"crate_id":30,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:9275:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:39579:8093":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"10:44:14153":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:41965:7934":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:4402:12298":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:1591:2141":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:8810:2120":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:7481:12513":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"20:3777:19520":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"2:46622:7675":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"20:916:19518":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"1:11902:1380":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"27:334:19635":{"crate_id":27,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"17:8909:2289":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:6543:7843":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"11:300:35814":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:38925:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:5630:15171":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"32:6785:21162":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_8"],"kind":"enum"},"2:43214:7812":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:4767:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"30:712:8913":{"crate_id":30,"path":["libc","unix","sigval"],"kind":"struct"},"6:4988:12359":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12902:19385":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:39385:2219":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:8963:25245":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6990:15228":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"32:4753:21063":{"crate_id":32,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"1:11896:412":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:11900:310":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:13024:19391":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"30:1709:9813":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:4845:14905":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"32:5269:21087":{"crate_id":32,"path":["linux_raw_sys","general","ip6_mtuinfo"],"kind":"struct"},"32:4966:9815":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreq_source"],"kind":"struct"},"32:7298:9753":{"crate_id":32,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"5:2905:33331":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:1555:14169":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:8489:2118":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"32:5835:21112":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"6:6757:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:3778:2339":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"32:7278:9752":{"crate_id":32,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"30:8329:13435":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:4340:34923":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:22240:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"32:4621:21053":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"1:4070:27956":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:10044:7767":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"34:0:1936":{"crate_id":34,"path":["strsim"],"kind":"module"},"2:38881:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"32:5002:21077":{"crate_id":32,"path":["linux_raw_sys","general","group_source_req"],"kind":"struct"},"32:4806:21068":{"crate_id":32,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"2:46427:2595":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:7859:15258":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:1311:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"20:4357:19563":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"1:9997:25692":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:21585:30569":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:3047:14275":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"32:6035:21123":{"crate_id":32,"path":["linux_raw_sys","general","tcp_repair_opt"],"kind":"struct"},"2:43385:8289":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:8718:15321":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:39702:8102":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:3164:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11193:15580":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:6850:2316":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:39470:2233":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:7826:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:13612:19436":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:7206:7817":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:5367:14216":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:45973:2637":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"34:32:22637":{"crate_id":34,"path":["strsim","StringWrapper"],"kind":"struct"},"11:2053:2133":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:3387:7850":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:8490:15341":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"32:7338:21183":{"crate_id":32,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"32:4822:21070":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage"],"kind":"struct"},"32:6585:21143":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"2:22339:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:11143:29985":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"30:7143:13010":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"18:599:37005":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"20:3872:19525":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"1:11476:23175":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:1787:15418":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:8360:15337":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"32:5964:21120":{"crate_id":32,"path":["linux_raw_sys","general","tcphdr"],"kind":"struct"},"6:6773:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:39688:8101":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:3114:2118":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"32:5560:21095":{"crate_id":32,"path":["linux_raw_sys","general","prctl_mm_map"],"kind":"struct"},"1:8164:2286":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:13721:19445":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"20:3853:19534":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"2:2760:2551":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:9059:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:8170:2336":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"11:444:141":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"30:5077:12304":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:13477:19430":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:7463:12510":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:8052:2259":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:3189:30371":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:6948:7686":{"crate_id":5,"path":["alloc","alloc","AllocErrorPanicPayload"],"kind":"struct"},"32:6649:21151":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"11:1534:14168":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:4675:2368":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:4307:12287":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"32:5880:9836":{"crate_id":32,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"1:5560:2508":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:7244:36296":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:9098:15352":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:6229:34944":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"30:480:8530":{"crate_id":30,"path":["libc","unix","DIR"],"kind":"enum"},"11:1138:2136":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:1034:15402":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:13257:19409":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:2642:14260":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:1064:2134":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:890:2122":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"31:4847:37910":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeature"],"kind":"enum"},"30:5981:12359":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:41974:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:43369:8281":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"32:5843:21113":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"2:22009:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"30:522:8903":{"crate_id":30,"path":["libc","unix","timeval"],"kind":"struct"},"18:80:19468":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"30:5344:12316":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7557:15244":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:2546:14256":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"9:481:14044":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"32:5642:8903":{"crate_id":32,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"20:4479:25270":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"31:5181:37913":{"crate_id":31,"path":["rustix","process","rlimit","Rlimit"],"kind":"struct"},"2:1895:7702":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:877:2121":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:8683:15320":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:6943:15226":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"20:4437:19566":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"2:9899:2119":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"11:810:2125":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:3537:2119":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12536:18674":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:6546:2507":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:12980:19389":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"32:5904:12996":{"crate_id":32,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"20:4546:19548":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"17:13344:19416":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:10635:15558":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"24:96:19609":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"2:2686:2079":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:10125:15495":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:44647:2559":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"32:7261:21181":{"crate_id":32,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"17:9933:15441":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:10334:15355":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:11878:23029":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:12550:18675":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:5526:8085":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"32:6452:21136":{"crate_id":32,"path":["linux_raw_sys","general","old_utsname"],"kind":"struct"},"17:10080:15518":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4451:12304":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:1984:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10589:15566":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:46567:7670":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:39200:2094":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"34:72:22651":{"crate_id":34,"path":["strsim","StrSimError"],"kind":"enum"},"6:5823:13007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"32:6310:21131":{"crate_id":32,"path":["linux_raw_sys","general","tcp_diag_md5sig"],"kind":"struct"},"32:6614:21147":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"2:46596:7673":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10857:15364":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:39490:7739":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:11033:8301":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"29:127:19656":{"crate_id":29,"path":["io_lifetimes","raw","AsRawFilelike"],"kind":"trait"},"1:11214:22949":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:3149:8151":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:9108:36982":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:4353:12292":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:11461:7684":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4787:12339":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:2448:14252":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"20:3644:37278":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"5:5176:7732":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:1563:2118":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"30:2136:2380":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13145:19399":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"23:163:19590":{"crate_id":23,"path":["anstream","raw","RawStream"],"kind":"trait"},"2:42548:7757":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:20379:33175":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"20:4254:19572":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"2:44392:2635":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"29:69:19643":{"crate_id":29,"path":["io_lifetimes","traits","FromFd"],"kind":"trait"},"17:9628:15391":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:7543:15243":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"30:8070:9779":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:11089:8243":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10967:15369":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:531:8908":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"20:3808:1946":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"17:13678:19442":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:13385:19420":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11234:18118":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"20:3772:2069":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"30:6830:12999":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"32:5041:12324":{"crate_id":32,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"2:39990:8078":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"20:54:1954":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"1:6326:25261":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:22075:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:1710:9833":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"32:6743:21160":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_5"],"kind":"union"},"2:6701:8070":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:4855:2275":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:3352:2275":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2677:224":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:3454:2263":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:7596:15246":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"30:9104:13971":{"crate_id":30,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:7665:2137":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:4240:7873":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13698:19444":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:11653:18145":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:44793:2616":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"32:5666:8965":{"crate_id":32,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"2:9513:32890":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:39519:2287":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:8931:15318":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"32:6560:21140":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"24:290:19611":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"20:4305:37071":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"20:3753:19514":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"30:1869:9821":{"crate_id":30,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"30:5496:12322":{"crate_id":30,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:3585:14280":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"32:4660:21058":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"18:564:19499":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"22:159:19583":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"17:10491:15532":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:7195:13810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:10026:15516":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:9267:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:7446:12508":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"32:7387:9832":{"crate_id":32,"path":["linux_raw_sys","general","mmsghdr"],"kind":"struct"},"6:7498:12515":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"11:815:2128":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"30:809:8585":{"crate_id":30,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:13240:19407":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6728:15217":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4389:12296":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:255:1955":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"2:42620:7782":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"31:5194:37796":{"crate_id":31,"path":["rustix","process","sched","CpuSet"],"kind":"struct"},"2:43401:8283":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:43566:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"29:152:19661":{"crate_id":29,"path":["io_lifetimes","raw","FromRawSocketlike"],"kind":"trait"},"17:10440:15562":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:12770:19381":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:21260:33179":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11446:18130":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:30098:30488":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:46686:7679":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:1225:2134":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"18:590:31649":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:2858:8148":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:3921:2355":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:29970:2153":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:4357:7880":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:8506:2459":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"24:192:14084":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"16:2298:14218":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11800:18629":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:8997:23051":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"20:63:1956":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"2:3241:7699":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:535:36242":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:39347:7905":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:4759:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:3929:2356":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"11:1681:143":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"20:4613:2465":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"2:3639:2120":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:7038:27957":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:2667:218":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"20:4317:37072":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"17:10039:15474":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:40596:2340":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:41417:7706":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:42437:7748":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4781:12338":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"32:5221:14000":{"crate_id":32,"path":["linux_raw_sys","general","in6_addr"],"kind":"struct"},"32:4813:21069":{"crate_id":32,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"2:42958:2094":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:42949:7786":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:46633:7676":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13433:19425":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13443:19426":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:6183:2123":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"11:659:2120":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"30:8221:13432":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:8157:2290":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:6580:215":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"30:7021:13006":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4637:12320":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6431:15205":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:7268:24789":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:6662:15215":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:5496:2470":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:5800:13004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:2903:33916":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"21:0:1924":{"crate_id":21,"path":["bitflags"],"kind":"module"},"2:2453:2369":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:2933:1992":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:9530:29998":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"31:4360:37783":{"crate_id":31,"path":["rustix","process","prctl","UnalignedAccessControl"],"kind":"struct"},"20:4452:19565":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"16:6671:14191":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:1663:9828":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:3611:2334":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:21569:31672":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:12343:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:11282:18120":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:8156:15266":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:8225:2391":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:43424:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:5582:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10354:15484":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:11573:18139":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"30:1744:9815":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:777:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:4638:2394":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:42818:7791":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:2378:14249":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6558:15213":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:5690:2495":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:483:29994":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:48938:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:48568:2638":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:1571:9820":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10092:15519":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"32:5781:21106":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"2:1648:1075":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"27:127:37633":{"crate_id":27,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"30:7166:13011":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4618:12318":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:678:2100":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:9986:15468":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"18:736:19484":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:9876:15465":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:40845:2118":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"30:8035:2424":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:41957:31648":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:8256:15270":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"32:176:19728":{"crate_id":32,"path":["linux_raw_sys","general","__BindgenUnionField"],"kind":"struct"},"1:8802:2517":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:40861:2120":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:2913:33918":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:553:8911":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:2502:236":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:919:2125":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:4899:2429":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"24:89:19607":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"32:7106:21171":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_register"],"kind":"struct"},"2:12385:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"20:4082:19556":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"20:1109:19536":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"5:4262:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:8092:2318":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:546:8910":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5000:12361":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:4235:7872":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:13744:19446":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:1194:2133":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:40853:2119":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"23:333:19602":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"20:4566:8094":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"17:12224:18653":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:8256:15315":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:11375:7766":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"20:4560:37150":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"5:7132:2218":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11434:18129":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6254:15194":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"11:2069:2134":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"32:5872:21117":{"crate_id":32,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"5:2074:2065":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:515:19496":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"32:4833:21072":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:5931:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"20:3914:19533":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"1:7859:2301":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:44248:30550":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"13:0:1783":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:42477:7741":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"30:1762:9816":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:4576:7894":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:45193:2636":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:5449:8094":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12576:18677":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"23:245:19599":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"1:2866:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:42446:7752":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6868:36248":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"30:5742:12335":{"crate_id":30,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:11622:7799":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:42516:7740":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:21727:31646":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13233:19406":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12959:19388":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:6997:2120":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:8848:2515":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"32:5788:21107":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"17:10670:15559":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6376:15202":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"29:0:1932":{"crate_id":29,"path":["io_lifetimes"],"kind":"module"},"2:21096:2589":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:11324:8292":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:4904:14916":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"20:1653:127":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"17:11391:18126":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11319:18122":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:10946:29991":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"19:0:1019":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:9018:23096":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:29781:2343":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"32:5896:21119":{"crate_id":32,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"17:10416:15560":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:6496:9752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:113:19470":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:11484:18133":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:5944:15184":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:2970:7700":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:12178:18651":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"20:1614:19557":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"2:10718:7755":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:9557:15355":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"31:4542:37788":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointExceptionMode"],"kind":"struct"},"17:11924:18635":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:4091:7884":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"18:652:36997":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:9115:23121":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"1:9378:2257":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"31:498:19703":{"crate_id":31,"path":["rustix","backend","io","epoll","Epoll"],"kind":"struct"},"5:3524:2118":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:2084:33343":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7626:15247":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:9178:15354":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"32:5765:21104":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"2:38837:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:2454:7924":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:5696:31088":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"6:4882:12349":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13041:19393":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"11:834:2130":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"32:4628:21054":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"16:2616:14259":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:11247:23124":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10712:15572":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:4445:14793":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"30:6961:12966":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:30040:30525":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:6952:2120":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:5734:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"25:89:1955":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"2:2939:1994":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:6611:9756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:31794:22853":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:39310:7902":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:3673:2338":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"20:3976:37286":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"2:46724:7681":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:41175:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:1210:2135":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:4520:12311":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:10680:2258":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"18:671:19487":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"32:0:1934":{"crate_id":32,"path":["linux_raw_sys"],"kind":"module"},"32:4615:21052":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"11:2178:35808":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:6698:13434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4714:12329":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13356:19417":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"31:4213:37786":{"crate_id":31,"path":["rustix","process","membarrier","MembarrierQuery"],"kind":"struct"},"30:7973:13426":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:9545:30702":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:2675:7697":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:8180:15268":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:44444:2627":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:6532:2506":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"30:5394:2351":{"crate_id":30,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:42754:7764":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"32:5674:8906":{"crate_id":32,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"6:4628:12319":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"32:6298:21130":{"crate_id":32,"path":["linux_raw_sys","general","tcp_md5sig"],"kind":"struct"},"27:210:19631":{"crate_id":27,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"32:6497:21138":{"crate_id":32,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"5:7013:33351":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:487:8903":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:39751:8104":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:6649:13432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:5382:1945":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:22207:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4422:12301":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:21354:2369":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:11918:780":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"30:2151:9835":{"crate_id":30,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"9:52:14064":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:11459:18131":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:9048:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:525:8907":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:2166:33332":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:46303:2610":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:21661:30534":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"27:113:37634":{"crate_id":27,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"1:5018:25264":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2369:2251":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:2357:2245":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4805:12341":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:40802:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:30574:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:12923:19387":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:1604:9823":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"}},"external_crates":{"34":{"name":"strsim","html_root_url":null},"31":{"name":"rustix","html_root_url":null},"28":{"name":"is_terminal","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"linux_raw_sys","html_root_url":null},"29":{"name":"io_lifetimes","html_root_url":null},"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"anstyle_query","html_root_url":null},"30":{"name":"libc","html_root_url":null},"27":{"name":"anstyle","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/1.3.2/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}