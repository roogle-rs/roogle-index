{"root":"0:0:2457","crate_version":"4.5.13","includes_private":false,"index":{"2:13828:22834":{"id":"2:13828:22834","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13776:22791":{"id":"2:13776:22791","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13807:21656":{"id":"2:13807:21656","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42735:203","prim@char":"1:12642:492","self::pattern":"2:13452:9096"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13770:22730":{"id":"2:13770:22730","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12975:9104"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:2450":{"id":"0:3-20:0:2450","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:2450","glob":true}}},"2:13786:22822":{"id":"2:13786:22822","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13787:22823"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:31511","5:5713:8965","5:5715:31512","5:5717:31513","5:5725:31514","5:5726:31515","5:5727:3226","5:5728:22430","5:5729:22429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13783:30780":{"id":"2:13783:30780","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12648:1771","crate::ops::IndexMut":"2:3628:3071","str::slice_unchecked":"2:13782:30779"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:3226":{"id":"5:5727:3226","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:31515":{"id":"5:5726:31515","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:299:2844","`String`":"5:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:2844","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13872:22734":{"id":"2:13872:22734","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40629:8757","Self::is_ascii":"2:13871:22431"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40629:8757","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:22737":{"id":"2:13876:22737","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:37853"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:30775":{"id":"2:13764:30775","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761":{"id":"2:13761","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13762:1027","2:13763:22364","2:13764:30775","2:13765:30776","2:13767:30777","2:13770:22730","2:13771:30778","2:13772:352","2:13773:22794","2:13774:22790","2:13776:22791","2:13778:22792","2:13780:22793","2:13782:30779","2:13783:30780","2:13784:22818","2:13785:22819","2:13786:22822","2:13787:22823","2:13789:28514","2:13790:28523","2:13791:22129","2:13792:28512","2:13793:28513","2:13794:27223","2:13795:30781","2:13796:28515","2:13797:22836","2:13799:22837","2:13801:22838","2:13804:21655","2:13807:21656","2:13811:22824","2:13813:22826","2:13815:22828","2:13818:30782","2:13820:30783","2:13823:22830","2:13825:22832","2:13828:22834","2:13830:22835","2:13833:2757","2:13835:30784","2:13838:30785","2:13840:30786","2:13843:30787","2:13845:30788","2:13847:30789","2:13849:30790","2:13850:30791","2:13851:30792","2:13854:30793","2:13856:22035","2:13858:22839","2:13861:30794","2:13864:30795","2:13866:30796","2:13869:30797","2:13871:22431","2:13872:22734","2:13873:22432","2:13874:22428","2:13875:22427","2:13876:22737","2:13877:22738","2:13878:22739","2:13879:30798","2:13881:2987","2:13882:30799","2:13883:24044"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13793:28513":{"id":"2:13793:28513","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13792:28512"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45016:9102","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13797:22836":{"id":"2:13797:22836","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9096"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13845:30788":{"id":"2:13845:30788","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13858:22839":{"id":"2:13858:22839","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9096"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13794:27223":{"id":"2:13794:27223","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44987:3196","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:22364":{"id":"2:13763:22364","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13856:22035":{"id":"2:13856:22035","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9096"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2457":{"id":"0:0:2457","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[102,18]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial::chapter_0] and [reference][_derive]\n- Builder [tutorial][_tutorial::chapter_0] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n- [CHANGELOG](https://github.com/clap-rs/clap/blob/v4.5.13/CHANGELOG.md) (includes major version migration\n  guides)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.74)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name);\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![forbid(unsafe_code)]","#![warn(missing_docs)]","#![warn(clippy::print_stderr)]","#![warn(clippy::print_stdout)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:2450"],"is_stripped":false}}},"2:13784:22818":{"id":"2:13784:22818","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13786:22822","str::split_at_mut":"2:13785:22819"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725:31514":{"id":"5:5725:31514","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13785:22819":{"id":"2:13785:22819","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13784:22818","str::split_at_mut_checked":"2:13787:22823"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13767:30777":{"id":"2:13767:30777","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13765:30776"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13801:22838":{"id":"2:13801:22838","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9096"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:8965":{"id":"5:5713:8965","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13833:2757":{"id":"2:13833:2757","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13452:9096","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::rmatches":"2:13835:30784"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44937:9115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13778:22792":{"id":"2:13778:22792","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13840:30786":{"id":"2:13840:30786","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13452:9096","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::match_indices":"2:13838:30785"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44901:9114","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13782:30779":{"id":"2:13782:30779","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12648:1771","str::slice_mut_unchecked":"2:13783:30780","crate::ops::Index":"2:40276:3070"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13850:30791":{"id":"2:13850:30791","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13792:28512":{"id":"2:13792:28512","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13793:28513"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45007:9103","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13820:30783":{"id":"2:13820:30783","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13452:9096","str::split":"2:13811:22824","prim@char":"1:12642:492","str::split_terminator":"2:13818:30782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44801:9117","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13869:30797":{"id":"2:13869:30797","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13411:149","`FromStr`":"2:13410:3132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13410:3132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13410:3132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13874:22428":{"id":"2:13874:22428","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13838:30785":{"id":"2:13838:30785","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13452:9096","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::rmatch_indices":"2:13840:30786"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44883:9113","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13882:30799":{"id":"2:13882:30799","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5066:30799"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45050:8723","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13871:22431":{"id":"2:13871:22431","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13790:28523":{"id":"2:13790:28523","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44709:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13873:22432":{"id":"2:13873:22432","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13796:28515":{"id":"2:13796:28515","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45025:9101","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13881:2987":{"id":"2:13881:2987","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5069:2987"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45041:2988","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:22430":{"id":"5:5728:22430","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13874:22428"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13864:30795":{"id":"2:13864:30795","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9096"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13875:22427":{"id":"2:13875:22427","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712:31511":{"id":"5:5712:31511","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:2844","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:299:2844","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:22823":{"id":"2:13787:22823","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13786:22822"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13866:30796":{"id":"2:13866:30796","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9096"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13877:22738":{"id":"2:13877:22738","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:37853"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:31513":{"id":"5:5717:31513","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13847:30789":{"id":"2:13847:30789","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:22429":{"id":"5:5729:22429","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13875:22427"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13823:22830":{"id":"2:13823:22830","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9096","str::rsplitn":"2:13825:22832"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44837:9090","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13795:30781":{"id":"2:13795:30781","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44997:9112","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:30776":{"id":"2:13765:30776","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13849:30790":{"id":"2:13849:30790","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13835:30784":{"id":"2:13835:30784","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13452:9096","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::matches":"2:13833:2757"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44955:9116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13789:28514":{"id":"2:13789:28514","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44703:9107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13774:22790":{"id":"2:13774:22790","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13878:22739":{"id":"2:13878:22739","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:37853"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13799:22837":{"id":"2:13799:22837","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9096"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13843:30787":{"id":"2:13843:30787","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13851:30792":{"id":"2:13851:30792","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9096"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13481:9097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13818:30782":{"id":"2:13818:30782","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13452:9096","str::split":"2:13811:22824","prim@char":"1:12642:492","`DoubleEndedIterator`":"2:8393:134","str::rsplit_terminator":"2:13820:30783"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44783:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13861:30794":{"id":"2:13861:30794","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9096"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:22794":{"id":"2:13773:22794","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13804:21655":{"id":"2:13804:21655","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42735:203","prim@char":"1:12642:492","self::pattern":"2:13452:9096"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13762:1027":{"id":"2:13762:1027","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12642:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:22129":{"id":"2:13791:22129","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44719:3199","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13771:30778":{"id":"2:13771:30778","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13813:22826":{"id":"2:13813:22826","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9096"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13239:9092","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13772:352":{"id":"2:13772:352","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13773:22794","`u8`":"1:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13825:22832":{"id":"2:13825:22832","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12642:492","str::splitn":"2:13823:22830","self::pattern":"2:13452:9096"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44855:9088","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13830:22835":{"id":"2:13830:22835","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13879:30798":{"id":"2:13879:30798","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5068:30798"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45032:8724","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:31512":{"id":"5:5715:31512","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13815:22828":{"id":"2:13815:22828","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13452:9096","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::split":"2:13811:22824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44751:9086","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13811:22824":{"id":"2:13811:22824","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13452:9096","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::split_whitespace":"2:13792:28512","str::rsplit":"2:13815:22828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44733:3200","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13854:30793":{"id":"2:13854:30793","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9096"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13883:24044":{"id":"2:13883:24044","crate_id":2,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"2:13811:22824","`str::find`":"2:13804:21655"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:40308:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13780:22793":{"id":"2:13780:22793","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:578:10005":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:15928:21425":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:11882:9081":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6638:16954":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:23495:28437":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:2374:3018":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:8977:3376":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:596:17101":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:3965:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:7013:16978":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:6300:16944":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:6571:16952":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:10664:24745":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"20:3861:21755":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"17:12737:17379":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:14008:20131":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:3874:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:1382:3034":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:6727:14756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:6197:8928":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:7762:16999":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:4513:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:40:3072":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4842:13959":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:41041:2988":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:9596:9098":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:3334:26985":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:10883:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:8148:17018":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:23014:9012":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:15324:21389":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:4239:16099":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:10604:3109":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"24:26:21802":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"17:11438:17164":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12836:17382":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:9552:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:11576:252":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:7668:3007":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:15771:21411":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:23136:3601":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:45167:9132":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:8393:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:41722:3198":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:16744:21626":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:12661:1902":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:43882:9022":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:11200:17132":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:42473:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:8162:17019":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:3596:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:3809:8685":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:3303:30556":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:16329:21455":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:48061:8645":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:1667:10909":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13219:17399":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:44783:9118":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:901:33181":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:10840:3199":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:11118:3161":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:43899:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:4725:3316":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:3046:16029":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"18:515:21670":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:663:3018":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13052:17406":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:34390:8979":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:4473:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:42908:9226":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"17:15884:21421":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:44719:3199":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:23108:3600":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:6802:14762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:16269:21451":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:14431:20634":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:5346:16700":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12008:17216":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:6513:14736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:3832:16037":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:14955:20667":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11540:17171":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"20:4140:34545":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"18:481:21668":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"18:613:34270":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:2877:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:2750:9257":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"14:213:15935":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:2344:3137":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:545:10000":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11939:17225":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:45781:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6171:16939":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:6820:16964":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:8278:14214":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:6779:16961":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"0:0:2457":{"crate_id":0,"path":["clap"],"kind":"module"},"26:21:2800":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"17:11814:17210":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:6026:16930":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:3679:3109":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:13195:17394":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:12243:15959":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:2043:3180":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:9287:3019":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:45681:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:7902:22256":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"17:12663:17300":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:4963:3288":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:754:21666":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:5282:14003":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:4322:3180":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11102:17130":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:12608:17292":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:47612:28372":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:2820:8739":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"5:3090:30564":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:40308:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:45508:9279":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10283:17109":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"18:765:21659":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:40280:8998":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:12022:22216":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:9293:3434":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:4703:3315":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:5871:3390":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:6669:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"27:0:2786":{"crate_id":27,"path":["is_terminal_polyfill"],"kind":"module"},"1:6296:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:23515:3256":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5241:13998":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:3858:3056":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:16838:20128":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:11977:3398":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:5295:14005":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:44541:9077":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:6441:14731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:47322:3520":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:6438:16950":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"23:144:21790":{"crate_id":23,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"6:8243:14209":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:491:9994":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:5139:3335":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:2504:16005":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:48171:8653":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:22256:3166":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"11:1866:3022":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13120:17133":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:22652:3479":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:3622:3163":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:43572:9040":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:517:9996":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5521:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:3782:8999":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:40196:8684":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:12666:996":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:7619:3019":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:47396:3532":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:47138:3491":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:4199:3277":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:3331:26984":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:11083:29230":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"20:3144:21719":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"1:5940:3428":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:45698:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13757:17438":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:1411:3035":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:1114:3033":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:2618:16010":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:6459:14733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:12654:782":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:15389:21391":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:23409:28436":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:8446:2841":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12214:17278":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:1123:3034":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:14443:20635":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:12263:17282":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:8231:14207":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:13459:9098":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:47077:3531":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:10670:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"10:36:32986":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:940:3021":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:15578:21399":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:44937:9115":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6387:16947":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:42695:3244":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11728:17178":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:13996:20130":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5623:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:9373:3414":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:14350:20631":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"10:44:15902":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:2787:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4881:13962":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:3012:16028":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:41472:28463":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:14690:20651":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:5222:16668":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:508:22327":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:80:21644":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:3797:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:44801:9117":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:6850:16967":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:7009:21777":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"11:1878:3036":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6864:16968":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:6500:14734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:6775:3416":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:8272:3157":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:42860:2974":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:5007:13977":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:7407:11019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:44569:9078":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"20:3062:2797":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"5:5134:3180":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:7580:15179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:7570:26265":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:6737:14757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:5874:3392":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:7209:15944":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:10879:3223":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:6366:16946":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:44579:9079":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:6631:14744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:9263:3395":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:4896:13795":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:22175:30033":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:12546:9074":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"20:3710:3215":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"6:5057:13983":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:11920:9093":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:2784:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:6121:16936":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:1011:3031":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:4959:8704":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:42960:226":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"2:42851:9222":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:4947:13969":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"23:420:21788":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"2:46849:3489":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:4536:8688":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:3086:30563":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:5717:3387":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:5395:14018":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:4127:3022":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:4965:3291":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"24:276:21798":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"2:41525:8922":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:47094:3537":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:43206:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"20:4095:34542":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"2:44088:28494":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"20:3234:34453":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"2:7741:8736":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:2493:3141":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"21:427:34708":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"2:40276:3070":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:11794:17209":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:3843:3055":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:1632:10906":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:1883:3076":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:14165:20142":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:41163:8725":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"20:3581:21696":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"2:45041:2988":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:41587:8936":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"23:0:2782":{"crate_id":23,"path":["anstream"],"kind":"module"},"1:11383:3394":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13157:17400":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"9:318:15848":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"11:292:32996":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:7990:15549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:23547:3166":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:42661:3239":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"11:983:3032":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:33003:8957":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:41126:8731":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:8325:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"11:2540:3007":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8765:3290":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:7966:17007":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:12217:8662":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:31704:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:7935:17004":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:45530:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:10875:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"25:51:3371":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"16:4764:16532":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:2448:16002":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:16315:21454":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:6623:33159":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:7519:3019":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"20:57:2802":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"2:12076:9089":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"20:3224:34452":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"11:1136:3035":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10898:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:48072:8646":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:3291:3017":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:8304:14217":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:41352:3111":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"23:244:26510":{"crate_id":23,"path":["anstream","fmt","Adapter"],"kind":"struct"},"6:5349:14012":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:44135:28499":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:15198:20683":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"20:3454:21700":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"2:42868:9224":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"2:45480:9272":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:7317:15165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:7973:17102":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:7430:15169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:3528:21699":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"17:16058:21439":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:22924:3605":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"20:3817:21748":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"5:1227:30562":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:5494:14029":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:45739:3615":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:8175:15711":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:22205:3477":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:6711:16958":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:5381:14016":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:16005:21433":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"11:2126:3034":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:16051:21438":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:537:2952":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:42713:3245":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:9835:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:23694:28197":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:14710:20652":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:6523:14737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:2156:3056":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4875:13961":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:3431:8984":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:519:15974":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"23:436:34779":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"20:52:2804":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"1:8739:3338":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:1211:31969":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:14054:28613":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"23:99:21789":{"crate_id":23,"path":["anstream","stream","RawStream"],"kind":"trait"},"2:3322:261":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:12990:17387":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12898:17384":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:47013:3557":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:465:9990":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:12669:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:5019:13978":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:5311:14007":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:9506:3415":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"18:608:34284":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:982:3027":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:383:2982":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:33002:2843":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:4247:3280":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13360:17141":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:12065:17273":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"18:726:21665":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:6746:30322":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:8543:17030":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:38983:8993":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:7413:16993":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:2534:3154":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"16:5170:16662":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:23065:9012":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:23683:28196":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:988:3028":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:15659:21387":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:589:28525":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:8153:2995":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:8316:15747":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:43805:28482":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"20:3129:21718":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"17:16700:21623":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:15456:21393":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"13:0:2636":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:1573:3020":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:12161:3251":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:7559:3058":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:16013:21434":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:1366:3032":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:10505:22107":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:15861:21418":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:3069:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:13093:17188":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:11059:22194":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:13700:17436":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:16219:21447":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:507:34257":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:41961:3229":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:7694:3131":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:14021:20132":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11512:17170":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"20:3435:21709":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"16:7355:16990":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:5707:16927":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:5749:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:1005:3030":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:6148:3411":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:12814:17381":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:13162:9283":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"24:108:21801":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"29:34:21825":{"crate_id":29,"path":["strsim","StringWrapper"],"kind":"struct"},"16:2588:16009":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:11053:17129":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:41516:8931":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:8637:3196":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:14545:20640":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:8331:3016":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"3:2062:9416":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"11:1558:15918":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:6422:14729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2671:697":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:5319:14008":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:6747:16960":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:3925:3023":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:3803:8686":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:4808:16553":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:14137:20140":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"3:1785:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:12668:1460":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:3327:2972":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"20:4152:8928":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"17:16068:21440":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:581:8751":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:7515:15174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:10674:9046":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:1632:3054":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:12686:17298":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:23650:28193":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"20:4043:21749":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"18:689:21663":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11576:17188":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:1233:17185":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:41047:8690":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:45050:8723":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"11:859:3031":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:4701:2969":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:1122:30322":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:47176:3503":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:14883:20662":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:14413:20633":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:6280:3428":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:6406:16948":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:46785:3482":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:14985:20669":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:8277:3158":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:3043:8756":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:698:21664":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:9226:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:3063:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:8272:14213":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:16341:21456":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:7710:3130":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:2433:16001":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:45688:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"11:2099:3032":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:12800:17350":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:5136:8716":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:5697:3386":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:2235:9025":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:8352:3213":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:1675:10910":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:10405:17113":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:22674:3469":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:6887:16970":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:11256:22367":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:41312:3199":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:41746:8938":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:497:9995":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6806:16963":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:42777:3019":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:14069:20135":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:2878:16022":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"11:832:3029":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5025:13979":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7904:17002":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:13231:17398":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:3199:3108":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:22203:3166":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:1494:10892":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:41236:8727":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:15624:21402":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13575:17151":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:42926:9225":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"2:4771:8692":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:2663:3211":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:7302:16988":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:15186:20682":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:13476:9099":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:10923:3173":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:45337:9137":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:7398:33257":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:15062:20674":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:7367:11036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13592:17158":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:7890:22255":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"11:808:3024":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:2099:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:7562:15178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:8176:17020":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:11660:3133":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:14730:20653":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12357:17312":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:42820:3344":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:15995:21432":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:41140:8723":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:16802:21631":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:9446:9214":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:31293:2973":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:2507:32987":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:5683:3385":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:3467:3219":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:8649:3247":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5196:13993":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5051:13982":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:47993:3505":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11485:17167":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13014:17389":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"11:1885:3037":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8311:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:6610:14742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:45025:9101":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:14122:20139":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"11:1118:15916":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:5022:3293":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:22787:3166":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:43815:9022":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:5366:14014":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"22:0:2781":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"6:7424:15168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:6911:16972":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:586:10006":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:15115:20678":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:978:3026":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:8289:3159":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:41425:8920":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:45684:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:9432:22070":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:1665:3039":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:45500:9276":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:12825:17346":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:45760:28618":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"5:3686:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:47367:3526":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:47027:3471":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:4171:3274":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"20:3911:34514":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"2:23617:28190":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:16380:21459":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"23:489:21777":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"11:1858:3017":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:12331:17290":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:44333:28502":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:41486:8929":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:9279:3437":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:8623:17035":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:702:2992":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13795:20118":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:41243:8728":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:48014:3539":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:45771:3613":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:10553:17118":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12944:17376":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:1711:10914":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:6503:22076":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:22647:3166":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:8336:3015":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:16191:21444":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:7553:15177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:6617:14743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:45323:9136":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:473:9991":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13630:17085":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12711:17366":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:4890:13963":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:7279:16987":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:7494:15173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:7502:22377":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:2344:30438":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4792:13955":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:7956:17006":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:10431:17114":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:1648:3036":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:2914:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12344:17334":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"20:1707:150":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"16:7713:33322":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"20:1661:21741":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"11:1652:33015":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:7334:16989":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:5405:14019":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:909:3018":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:5224:13996":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:3108:16030":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:13529:9123":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:4193:3276":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3640:3162":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:5462:14024":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:7369:16991":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:553:10001":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:41251:8722":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:9864:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:8807:3351":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:14746:20654":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:12236:15959":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13387:17142":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12272:17330":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"11:750:3020":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:3042:3166":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:15159:20681":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:377:2981":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:5604:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11643:17132":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:8206:17021":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7575:16998":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11259:17133":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:5560:9063":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:8500:17028":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:8230:17023":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:2568:2654":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:43565:9039":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:15971:21429":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:7983:22144":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"20:3389:2796":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"1:3688:26510":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:9337:3433":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"20:3758:21730":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"16:7041:16980":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11502:17169":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"16:5196:16665":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:22:845":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:8429:21935":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:14258:20627":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:4488:30340":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:45747:3616":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:155:15977":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:8220:17022":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12022:17270":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6995:16977":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:3079:9030":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:15035:20672":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:5341:14011":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"26:40:21810":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"2:41548:8933":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:9271:3017":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:5222:3347":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5058:16642":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:2521:3152":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:7256:16986":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"14:0:2643":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:2858:16021":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:8276:8952":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"21:370:21765":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"2:45484:9274":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:11455:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:43354:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:14081:20136":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:11151:3094":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:40232:8997":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:8654:3238":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"29:130:21844":{"crate_id":29,"path":["strsim","GrowingHashmapMapElemChar"],"kind":"struct"},"1:8282:3155":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:3097:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:46952:3490":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:10622:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:3540:8996":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:31331:8891":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:23361:28158":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:5529:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:16650:21619":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"24:247:2805":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"6:5107:13986":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:888:3040":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:12667:1966":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:1569:10901":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:16116:21441":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:15088:20676":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:4848:22179":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"18:651:34257":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:6566:3612":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"28:0:2787":{"crate_id":28,"path":["anstyle_query"],"kind":"module"},"11:2340:15920":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:42981:224":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"16:2484:16004":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:14665:20649":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12409:17291":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4902:13964":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:2229:3141":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"17:16755:21627":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:6505:14735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:7055:16981":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:3306:16033":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:2746:16016":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:16828:21633":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:12649:1861":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:47529:3504":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:14384:17340":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:42673:3243":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"25:21:15831":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"1:11099:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:5947:3429":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:2838:16020":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"12:0:2642":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:43430:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:43243:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:23468:28181":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:10965:17128":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:41088:28289":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:10647:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"20:3301:21691":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"2:44652:9083":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:41148:2988":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:10655:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:7806:29400":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"20:3801:2799":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"2:48186:8654":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:6543:14738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11855:17221":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:16766:21628":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"20:3521:21701":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:44337:9070":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:2115:3033":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:10664:9039":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:5045:3287":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:15013:20671":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13909:20124":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:11106:22104":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:41116:8730":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"20:3448:21705":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"2:3837:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:5630:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:38873:8991":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:12652:763":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"11:2525:32991":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8028:22386":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"9:470:15791":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:14365:17341":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:14624:20646":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"20:3371:21694":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"1:4355:3307":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:11751:3017":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:15985:21431":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:5415:16723":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:15074:20675":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:6254:33098":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7551:16997":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:11262:22368":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"7:31:15764":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:9352:3436":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:1514:10895":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:12579:9075":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:5585:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:9483:3355":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:3719:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:15144:20680":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:14454:20636":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:16395:21460":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:2772:3203":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:11800:3200":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:39617:8995":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:2424:9028":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:619:2961":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:9539:3426":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:8030:3228":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:8134:17017":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:4591:3304":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13730:17437":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"23:472:34784":{"crate_id":23,"path":["anstream","adapter","wincon","ColorTarget"],"kind":"enum"},"1:2511:3147":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:9534:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:5375:14015":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:10311:17110":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11552:17198":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"20:1178:21711":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"6:6390:14726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12242:17280":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:12653:766":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:7326:15166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12854:17148":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:38928:8992":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:15801:21414":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:2810:30407":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:45706:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:31325:8682":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:4501:28589":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:14859:20660":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:1551:3019":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"20:1656:21738":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"16:6981:16976":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"20:3496:21708":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"16:6694:16957":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:47662:3487":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:5151:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12229:17279":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:7627:3019":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"23:377:21782":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"17:13489:17147":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:12035:17237":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:8102:2965":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:46864:3519":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:683:2989":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:14388:3614":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:46931:3484":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:14190:20144":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:41416:8919":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"20:3285:21690":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"2:23672:28195":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:12621:17293":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:44987:3196":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:16791:21630":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:12146:17275":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"20:3923:34515":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"11:2206:15910":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:3426:3224":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:46902:3530":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:6030:3022":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:22141:30027":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:12656:939":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:12958:17386":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:7308:9872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:11437:22200":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"11:2323:3034":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"15:306:15951":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"29:120:21843":{"crate_id":29,"path":["strsim","RowId"],"kind":"struct"},"5:7583:3019":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:7878:22253":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:22151:30027":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:4182:16065":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:570:10004":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:4850:8701":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:3072:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:7108:9164":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"24:84:21794":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"20:3890:34512":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"6:6710:14754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:6203:16941":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:3593:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:1352:17193":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:45117:9129":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:48081:8647":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:2988:16027":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:963:3023":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"20:4146:34547":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"6:559:10002":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:16777:21629":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:436:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11423:17163":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:7728:3354":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12430:17311":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"29:0:2788":{"crate_id":29,"path":["strsim"],"kind":"module"},"6:5450:14023":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7997:17010":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11629:17180":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:22133:8751":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:44611:8918":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"11:1027:3034":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:47861:3527":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:11014:33587":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"23:326:21784":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"5:3080:30565":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:15128:20679":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:15951:21427":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"11:2275:3032":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:6486:14693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:15868:21419":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:2261:30433":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:6416:14728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:10524:17117":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"2:42769:3018":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:8280:8951":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:1582:3021":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7383:16992":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"29:87:21836":{"crate_id":29,"path":["strsim","HybridGrowingHashmapChar"],"kind":"struct"},"2:23628:28191":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:2226:9026":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:5687:16926":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:623:34273":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:13971:20128":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:4990:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:11483:22203":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:7549:3044":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:44117:3371":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:41264:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:6873:16969":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:43874:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:10815:17124":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"16:8708:17038":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:5420:14020":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:6967:16975":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:8063:17014":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:15534:21397":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:3082:30405":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:6452:14732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:4140:3272":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:3357:8954":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:2898:16023":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"11:102:32994":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:12609:24820":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:562:2984":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"18:491:34256":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:15587:21400":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:6578:14739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"7:78:15771":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"11:1042:15914":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:1727:10915":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:3699:3017":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"20:4081:34540":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"1:2258:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:47109:3485":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:33917:8978":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"21:358:21726":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"16:7518:33274":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:3328:26837":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:6954:3424":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:7220:16985":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:13328:17139":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:5755:33079":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12081:17244":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:7539:33276":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"9:345:15808":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"20:3962:21758":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"1:9529:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"15:327:15955":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"20:3280:2958":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"1:10925:2964":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"5:7787:9141":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:8630:3200":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:22177:30035":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13529:17149":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:40293:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"20:4201:34558":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"2:41988:8949":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:22258:3472":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12160:17246":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:15817:21416":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:7591:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:4922:3337":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:4871:16570":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:7738:3128":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:635:34274":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:46800:3518":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:3697:3164":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:2465:16003":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:9514:3180":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:14373:17339":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:3139:16032":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:7189:16984":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4869:13960":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:2533:32992":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:4039:3251":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:5154:3336":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:23395:28165":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:1654:3037":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:6088:3353":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:22789:3475":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:35121:8989":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:9215:3382":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"1:595:2959":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:6852:14789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12103:17269":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:7946:17005":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:42527:3242":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5447:16732":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:4900:16576":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13648:17153":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:44997:9112":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:22685:30038":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:14910:20664":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:9425:22068":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:16848:20130":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:12201:17277":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:5482:14027":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:5740:16929":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:15844:21417":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:14057:20134":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:47269:28352":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:7023:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:7472:22375":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:11564:17192":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:6169:9589":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:41980:8947":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:6749:14759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:12979:17377":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:40438:9000":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:6719:14755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:15513:21396":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:2364:30439":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:43920:9038":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:41495:8930":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:6896:3421":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:7273:30399":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:8284:14215":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"20:2950:2795":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"20:4208:2801":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"5:7872:9159":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:41274:3127":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12924:17375":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:14178:20143":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:523:9997":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:32944:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:7880:17001":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:8360:3055":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:4957:13970":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:10662:9040":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:14476:20637":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:6687:14751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:13947:20126":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:9842:3158":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:6082:16933":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:15908:21423":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:8007:15550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11654:17133":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:14094:8929":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:12133:17245":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:43095:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14834:20658":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:4921:13966":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:12642:492":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:12593:22146":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:22187:30036":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:44105:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"20:4117:21734":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"2:23606:28189":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"6:6398:14727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:23012:30263":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:16403:21461":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:11995:17217":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:6638:14745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:11770:17208":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:4990:13975":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13983:20129":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:43132:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8569:3230":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:13819:20119":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:10860:17126":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:7539:3022":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:598:34267":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5249:13999":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:1132:3035":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"11:321:32999":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:8560:3228":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:16525:20118":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"2:45358:9139":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"23:520:21776":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"1:2811:3214":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:5356:454":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:8803:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:46998:3551":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10202:17107":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:16211:21446":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:3872:3246":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:927:3020":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:43393:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"20:3442:21704":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"1:8125:2964":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:14585:20643":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:2964:16026":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:15001:20670":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:5255:14000":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"20:4132:21733":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"2:41394:3068":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:7835:17000":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:11901:17219":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10700:17121":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:1696:3300":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:45138:9130":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11395:17162":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:357:33005":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:11328:33592":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:6472:14692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:10918:3171":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:11997:22135":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:4565:30340":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:1591:3024":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"22:152:21771":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"1:12664:1896":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:47223:3559":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:1944:3091":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:15048:20673":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:15569:21398":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:214:9035":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:44642:9085":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:47434:3486":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:1247:31970":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"11:123:32995":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"20:3515:21698":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"11:676:3019":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"11:2440:3023":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:32868:3396":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:15733:21408":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"20:3848:21756":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"2:3792:268":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"15:288:15950":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:44955:9116":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:12562:17297":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"20:3596:28490":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"17:13465:17146":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:11775:3018":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:1520:3017":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:41454:8926":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:6096:16934":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:1589:10903":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:1601:3025":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:16177:21443":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:44837:9090":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7468:16996":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:1660:3038":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:11179:22117":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:31357:28269":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"5:4552:3180":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:11563:3166":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:15469:21394":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:33032:8871":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:47508:3498":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:12062:9091":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:41103:8737":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"11:813:3027":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:48092:8648":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:6810:8940":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"20:3620:21695":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"1:9237:3339":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:45504:9271":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:47641:28373":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"5:7200:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5271:14002":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:44490:28611":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:44751:9086":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:47964:3554":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:14322:20629":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:2685:9012":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:4803:3333":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"20:3770:21731":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"1:999:3029":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8872:3371":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:1623:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"11:1579:15919":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"21:348:34704":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"17:15763:21410":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"14:40:20119":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:6054:3412":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:5575:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:47290:28353":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:6656:16955":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:10255:17108":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:11983:22133":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:5083:16644":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13585:17152":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"5:7723:9207":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13553:17150":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:7463:15172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:7750:3129":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:11594:3134":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:45554:3463":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:40456:8680":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11346:17135":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:4150:16056":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:23595:28188":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:10571:16928":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:4171:3019":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:47567:28371":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:8344:21932":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:8093:17015":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:1489:10891":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:563:21673":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6939:16973":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:40330:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:14811:20657":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:15785:21412":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12093:17274":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:8188:3094":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:7856:3023":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:23417:28166":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11318:17134":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5217:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"23:341:21785":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"17:14039:20133":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12173:17276":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:7916:22257":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"16:894:33180":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:11164:3389":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"20:3999:34534":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"1:11143:3338":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"17:12889:17383":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12575:17295":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"20:3469:21706":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"16:7916:17003":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:15353:21390":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:14396:20632":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:11069:3155":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:16203:21445":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"20:3558:21710":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"16:5377:16708":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:7074:9162":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:906:33182":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"16:4842:16564":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6901:16971":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:8299:3156":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:47056:3525":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"20:3574:21712":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"2:4776:8693":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:1632:3017":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:12048:9088":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:2908:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:284:30322":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:7962:9950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:5205:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:3628:3071":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:7337:15167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:41573:8935":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:41202:8726":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:22962:3606":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:4997:13976":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:16230:21448":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:47417:3538":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:8107:2966":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"9:380:15793":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:13410:3132":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:48118:8650":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:40445:8670":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:3061:21977":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:8092:2983":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:4371:3309":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:5088:13985":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:3599:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"3:0:527":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:8294:14216":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"23:181:3166":{"crate_id":23,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:15713:21406":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:41332:3124":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"2:11843:9092":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:0:585":{"crate_id":2,"path":["core"],"kind":"module"},"24:289:21799":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"2:4413:3180":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:8090:3405":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:3693:16036":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:4384:3310":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:2129:8901":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:4653:2970":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:12935:17385":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:2341:3136":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:8225:14206":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13044:17391":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:14870:20661":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:23384:3255":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13423:17144":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:41504:8939":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11603:17182":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:1506:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:7439:15170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:3075:272":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:4981:16588":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13183:17395":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:6500:15971":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6736:33178":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13247:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:42639:28307":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:23000:3609":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:15699:21405":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:0:2647":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:5253:16676":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:321:33182":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5165:13991":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:2793:3018":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"2:8806:3049":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:10455:17115":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:12646:351":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:14971:20668":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13030:17354":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:3401:3466":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:47208:3558":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:45389:9120":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:43049:3018":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:5334:14010":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"20:3680:21740":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"1:1643:3023":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:3985:16039":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:7251:3468":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:42789:3354":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:4914:13965":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:2722:16015":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:12100:3250":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:5186:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:3590:3180":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:2167:3057":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:4489:28587":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:3469:3220":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:12447:17338":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:12287:17331":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:8249:14210":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:6826:3019":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:43860:28492":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:12945:9240":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:41463:8927":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:3426:8983":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:7797:9142":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:47816:3493":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:4767:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:14598:20644":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:5664:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"20:2771:3017":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"16:8666:17037":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:12254:17281":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:8617:3198":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:45007:9103":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"20:4177:34548":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"1:5506:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:41377:8918":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:39038:8994":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:538:21672":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:2528:16006":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:7248:30395":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:0:2645":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:9391:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:34256:3467":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:7987:17009":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:11749:22371":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:33705:8975":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:7390:11021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:1690:10912":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:4202:3018":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:45820:28557":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:6792:14761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:7774:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:9847:22365":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:23502:3257":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12643:17132":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:8950:3374":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:6729:16959":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:9675:2802":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:14637:20647":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:4840:8700":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:16730:21625":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:3587:2840":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:44709:9106":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:16717:21624":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:4906:8703":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:14521:20639":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:4185:3275":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:15937:21426":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:8087:3166":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"18:521:21667":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:909:3253":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:15:2760":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:47906:3499":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12864:17347":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:0:2637":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"23:313:21783":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"2:45565:9296":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"11:787:3023":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:10440:9037":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:42829:2998":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:1942:2802":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"20:4060:34537":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"2:46817:3523":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"9:412:15794":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:40368:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:15611:21401":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:5230:13997":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11757:17207":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:46917:3536":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"20:1370:21714":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"1:3517:3206":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"11:1871:3023":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:8624:3199":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:4829:13958":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11825:17236":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:43057:3019":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:16512:20117":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:2810:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:8055:17013":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:44662:9084":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:6779:3417":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:13079:17396":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:13673:17435":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:14788:20656":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"23:406:21787":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"1:8695:3313":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:2948:16025":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:4233:3278":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:5417:1007":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:5733:3388":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:8609:17034":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"14:164:15927":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:48248:8656":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:31731:8751":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:5289:3411":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:41434:8925":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:11888:17220":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:9310:3432":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:44080:3172":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:8317:17026":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:13856:20121":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:12662:1884":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:13470:9100":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"20:1109:21713":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"20:4029:21750":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"1:4925:3315":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:9544:3427":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:8334:2842":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:3337:30560":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:3315:277":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:707:2993":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:12318:17333":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"11:389:33007":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:34189:3465":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:8434:21936":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:44096:3174":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:43832:28483":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:10369:17112":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:32928:8701":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:1539:10898":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"20:1371:2805":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"assoc_type"},"1:12140:3249":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:44901:9114":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:15174:17151":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:4362:3017":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:41285:9207":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:22164:30032":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"29:112:21842":{"crate_id":29,"path":["strsim","StrSimError"],"kind":"enum"},"17:16250:21450":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:4517:3312":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:34948:8987":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:5960:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:5288:14004":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"22:125:21770":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"6:8260:14211":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:8578:3161":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:16573:21618":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:9437:22071":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:6817:3419":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:7527:3043":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"20:3477:21707":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"1:11394:22233":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"27:3:3206":{"crate_id":27,"path":["is_terminal_polyfill","IsTerminal"],"kind":"trait"},"2:23276:28155":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12969:17151":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:6998:8923":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:7857:8941":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12588:17296":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:13481:9097":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"20:2974:34388":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"17:14678:20650":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"14:31:15926":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11715:17179":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:7292:10847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:2142:3055":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:44320:28500":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"6:7445:15171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:14307:20628":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:2770:16017":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:46969:3496":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:5515:30322":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:724:30545":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:6899:3422":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"22:97:21768":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"2:44633:9082":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:13185:9280":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:15677:17187":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:6513:9597":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"17:15448:21392":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"11:1542:15917":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:912:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:45512:9295":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"20:3983:21751":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"2:42830:3356":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:6670:14749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"20:4194:3385":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"6:1657:10908":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:8798:3352":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:45488:9273":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:7344:3342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:649:3017":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:9210:3381":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"16:2638:16011":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:15919:21424":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:16684:21622":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:3423:8982":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:3324:3038":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12725:17378":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:10113:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:32945:251":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:12298:17332":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"2:42733:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:47935:3533":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:22384:3473":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:3411:8977":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:3560:3229":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:14337:20630":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"5:6700:3022":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:4850:22181":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:6659:14748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10132:17104":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:12645:1352":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:11402:9295":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:13771:20117":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:1612:3026":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:1919:3085":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:43169:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:1996:3104":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:41322:3125":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1:4243:3279":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:13201:9281":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:299:2844":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:11135:22230":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:0:2646":{"crate_id":17,"path":["object"],"kind":"module"},"2:47191:3552":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"23:363:21781":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"17:16241:21449":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:2736:3212":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:10295:29796":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:7409:22252":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"5:4157:30322":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:6419:16949":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"21:184:21721":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"2:41970:8946":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:4970:13972":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:718:3026":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:11971:22130":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:11358:29234":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1:2509:3146":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:5036:13980":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"9:168:15897":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:45180:9133":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:8266:14212":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:8706:3303":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"10:0:2640":{"crate_id":10,"path":["adler"],"kind":"module"},"2:10666:9047":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:15691:21404":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"21:382:21727":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"11:686:3025":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12761:17353":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"22:110:21769":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"1:5130:3334":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:5265:14001":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5512:14031":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:8895:3372":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:44679:9111":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:14211:8763":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:2413:15972":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:3079:271":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:7569:30431":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:23331:28157":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:2495:3142":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:12663:1890":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:14186:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:896:3017":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:45496:9275":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:43317:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5640:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:11127:22227":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:3558:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:1584:10902":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:44127:28498":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"27:6:3166":{"crate_id":27,"path":["is_terminal_polyfill","sealed","Sealed"],"kind":"trait"},"1:10876:3221":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:11667:17186":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:9404:22067":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:5139:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:16613:20120":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:7539:15176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:11221:29233":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:12648:1771":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:4692:16483":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:6310:8921":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:11196:3395":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:4118:16047":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:5550:14035":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:1625:10905":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:22372:3166":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:48107:8649":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:13066:17397":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:4402:16216":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"11:423:33009":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:1885:3077":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:8011:17011":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:12643:1924":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"24:91:21796":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"2:10668:9048":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6040:16931":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:4:1292":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:11868:17188":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:1100:3032":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:5344:22033":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5316:16693":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:4805:13956":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:12975:9104":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11469:17166":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:11955:9086":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:6835:16965":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:22880:3604":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:11089:3159":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:2702:16014":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"24:132:3371":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"16:6157:16938":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:3571:3051":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:5488:14028":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"24:0:2783":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"16:8562:17031":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:22382:3474":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:7786:33323":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:4363:3308":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7027:16979":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:9478:22191":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:3364:8956":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5568:14037":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11151:17131":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5611:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:7599:30440":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:2303:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:3712:3018":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13436:17145":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:3371:3221":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:9386:22063":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:12657:921":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:6274:3180":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:11993:9087":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:42495:3240":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:1639:3022":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10821:33573":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:12260:22383":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"17:11690:17184":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:9501:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:3448:3023":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:40348:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:3262:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"9:226:3371":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"20:0:2450":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"2:41597:8924":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:15978:21430":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:5179:3299":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:3937:3249":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:7072:16982":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"11:2394:3019":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:43579:9047":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"20:4069:34539":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"20:1654:21737":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"16:6142:16937":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:9458:22075":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:14558:20641":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:1001:3017":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13207:17430":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:5313:22033":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:44622:9068":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:8812:8950":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:969:3024":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:13892:20123":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:15746:21409":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:544:33118":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:6744:14758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:3481:8988":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:4134:3273":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:3124:16031":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:16814:21632":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:3934:3250":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:3396:3464":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:3877:17317":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:11063:33588":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:12640:436":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"20:759:34456":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"11:2513:30042":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:12647:1737":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:11040:3340":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:5387:14017":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:45153:9131":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:8264:17024":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:538:9999":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13021:17390":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:14426:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:1535:3018":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:5821:9162":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:15876:21420":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12787:17351":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"11:2354:3017":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:33035:278":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"16:7459:16995":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"23:61:21796":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"20:3348:21688":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"17:14897:20663":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"11:1001:3033":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:1919:8869":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:10603:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:4333:26264":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:13243:17136":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"20:3932:34516":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"21:303:29795":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"17:10830:17125":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1:10486:3085":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:3707:3191":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:15809:21415":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:14650:20648":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:7679:3008":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:11080:22098":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"20:1685:22629":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"20:3538:21703":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"17:11963:17223":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:45676:28534":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:22986:3166":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:12618:9023":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:43280:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:12428:22385":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:4897:8702":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10062:17103":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:3792:30322":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:789:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:7635:8917":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:41955:8945":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:10586:16929":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"20:3951:21747":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12665:1878":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:8326:15748":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:6858:13870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:43586:9048":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:3298:3037":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13344:17140":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:1636:3019":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:2414:3022":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:12072:15910":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:16350:21457":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:40388:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:10378:24747":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"5:984:3042":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"20:3096:2798":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"17:11590:17183":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:11210:33591":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:479:9992":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"20:3257:34458":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"16:7804:33331":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13133:17402":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:44590:9069":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:14776:20655":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:13399:17143":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:2159:1397":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:41946:3416":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:16658:21620":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:10634:17088":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:12659:933":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:34323:8980":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"14:7:15926":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:8633:17036":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:9397:2958":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:7347:33253":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:12658:927":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:7505:33271":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:2251:2952":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:42936:222":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"1:3095:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:13876:20122":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:10108:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:32914:17037":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:33034:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"2:42555:28480":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"20:3632:21739":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"2:13687:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:8102:17016":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:1521:10896":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:5111:16649":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:8824:3370":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:6602:14741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:6455:3617":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:3743:17299":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8607:3197":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:13125:9282":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:44703:9107":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"20:3545:21702":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"9:0:2639":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:41300:3126":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:8643:3248":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:23141:3599":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:42752:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:4964:13971":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:23051:3610":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"24:193:15831":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"16:6109:16935":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:5357:14013":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:13108:17132":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:3066:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:11161:33590":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:14159:29845":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:14611:20645":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:6968:3425":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"6:6769:32769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15896:21422":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:3439:16034":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:6756:14760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:5323:29220":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"6:6645:14746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11458:17165":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:15640:21403":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13509:17148":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:41732:8937":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:6841:16966":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:41932:28470":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:2834:8740":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"5:4292:3180":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:2658:16012":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:7165:15945":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:718:21657":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:34602:8985":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:778:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"20:4227:2800":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"14:186:15934":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:16029:21436":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:10672:9045":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10975:33586":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:9250:3394":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:1781:30322":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:11575:22209":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"17:11356:33593":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:32946:258":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:32910:22283":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:8439:3215":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:43844:28490":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:23453:28179":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:4265:16102":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:48133:8651":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"21:211:21722":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"1:12229:22141":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:14093:20137":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:43001:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"21:0:2780":{"crate_id":21,"path":["anstyle"],"kind":"module"},"2:10660:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:16301:21453":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12878:17349":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:787:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:32921:28583":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:23584:28187":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:8851:29795":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"11:427:33010":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:5301:14006":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:8498:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:22264:3476":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7421:16994":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:4976:13973":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"21:281:21724":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"2:43071:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:14482:3045":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:48035:3560":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:44559:9080":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:2548:16007":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:5477:14026":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:11214:29232":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:12749:17380":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8587:3165":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:974:3025":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:5154:17401":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:2682:16013":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:14110:20138":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:14345:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:6586:16953":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:8714:3248":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13304:17138":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:9445:16998":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:7284:10043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"20:3792:21759":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"6:5539:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:8700:3314":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:2394:17258":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6695:14752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:6679:14750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:5328:17407":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:6335:16945":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:12077:22379":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:1885:3023":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:953:3022":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:45348:9138":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:4927:16580":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:1500:10893":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:4519:3180":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:9570:3169":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:9322:3435":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:5142:16657":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:14152:20141":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:23661:28194":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:13452:9096":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:5375:3201":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:6558:3428":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:42761:3017":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"23:292:21786":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"1:12011:22137":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"18:706:9100":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:3585:16035":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"17:15595:21388":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"18:659:21660":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"11:344:33002":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:564:10003":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:6678:16956":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"13:110:33026":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:48156:8652":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:16672:21621":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"26:0:2785":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"2:48209:8655":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:5725:16928":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:7762:9061":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:41156:8724":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:3332:3036":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:47307:28354":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:2348:3138":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:5933:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:43041:3017":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:8295:17025":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:12373:17335":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:1862:3019":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:23221:28154":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:919:3019":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:41444:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:3576:8706":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"6:6702:14753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"21:261:21723":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"17:14498:20638":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"13:229:33027":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"15:394:15962":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:2032:813":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"11:1898:3039":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:41538:8932":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:316:33181":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:2687:9013":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:7820:24819":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"18:680:21662":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:2243:17224":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4937:13968":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:45492:9277":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:4255:3282":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"11:820:3028":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:4954:16584":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"11:763:3021":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:41557:8934":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:7524:15175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:5652:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:45476:9278":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:9588:3462":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:2794:16018":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"20:3941:21757":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"6:7984:15548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:5390:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:16538:21617":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:6267:16943":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12774:17352":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:735:21658":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:2297:3033":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"20:3899:34513":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"2:6121:3180":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:4071:3022":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"23:114:3206":{"crate_id":23,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"1:10756:3393":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"20:61:2806":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"17:11269:17170":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:16417:21462":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:5044:13981":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:12614:2997":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:15963:21428":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"18:643:34257":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:2568:16008":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11112:33589":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:16164:21442":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"20:3114:21689":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"17:16288:21452":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"21:328:21725":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"2:41077:8729":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:14924:20665":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4984:13974":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"7:0:1956":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:47479:3492":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:6651:14747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:13836:20120":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:36997:8990":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:11155:3384":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:10882:3219":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:3147:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"15:0:2644":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:44692:9110":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:14940:20666":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11743:17206":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:1063:33018":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:44550:9076":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:44733:3200":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:1643:10907":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13928:20125":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:12034:9090":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:34457:8981":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"20:3781:2989":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"16:6950:16974":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"22:30:3200":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"16:7977:17008":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:8582:17032":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:15792:21413":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:31346:9022":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"20:3315:21693":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"2:4555:8689":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:12028:22217":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"20:34:2805":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"1:3373:3222":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:13260:17137":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:33493:8976":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:8237:14208":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:5325:14009":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:1530:10897":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:4967:3292":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:47546:3553":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:12660:914":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4929:13967":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:15102:20677":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:2096:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:699:2991":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:41939:8943":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"20:3252:34457":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"9:490:15795":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:928:3041":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:47159:3497":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11370:3339":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"11:776:3022":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:12625:22224":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"20:3366:2958":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"2:23094:3166":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:3822:29471":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:0:1763":{"crate_id":1,"path":["std"],"kind":"module"},"17:16040:21437":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8720:3306":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"9:49:15811":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:2228:9027":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:10733:17122":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:1563:10900":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"14:219:15936":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:45016:9102":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:46885:3524":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:1507:10894":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:573:34257":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:2122:696":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:2422:17218":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"11:1083:15915":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"11:851:3030":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:6471:22363":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:11420:3169":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:4838:3277":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:8167:2996":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:3887:16038":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:1551:10899":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10667:17120":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:24259:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:11842:17222":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:532:9998":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:8325:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11907:3371":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"2:45238:9134":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12055:17272":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:5647:16909":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"18:531:21671":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:10300:28678":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"23:393:21799":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"5:6547:3611":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:11989:17230":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:44883:9113":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:13000:17388":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:8480:17027":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:32935:9198":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"23:509:34787":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"1:6379:22356":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"20:65:2807":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"16:6460:16951":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:14571:20642":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:14845:20659":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:1597:10904":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:34775:8986":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:7492:33269":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"22:28:3166":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"25:0:2784":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"1:6133:2999":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:12120:17247":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:7740:8735":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:2579:30402":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:22276:3473":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:16631:20121":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"5:6915:30322":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:45272:9135":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:2291:30434":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:6062:16932":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:650:2985":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:2918:16024":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:6606:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12045:17271":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:1892:3038":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:14368:3617":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10601:17119":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:43467:3410":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:15477:21395":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:45808:8666":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:5576:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:10150:17105":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:1703:10913":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11915:17132":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:3317:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:8025:17012":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"11:0:2641":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"18:670:21661":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12187:17242":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"20:2989:34421":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"6:5617:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:5441:14022":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:3358:3039":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:9220:3393":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:5428:14021":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11616:17181":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:6360:14664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5658:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:1867:722":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:680:17102":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:4852:22183":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"25:88:2805":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"17:12385:17336":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:5503:14030":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:10479:17116":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:41370:3160":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:46770:3517":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:8688:3243":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:10800:22369":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"14:201:9140":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:7510:3052":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:47739:3521":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:12641:1208":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13959:20127":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:15721:21407":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:10880:17127":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:6893:14791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:4928:2971":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:13239:9092":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11494:17168":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"21:403:21728":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"1:5803:3389":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"20:3871:34510":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"16:6186:16940":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:10507:22106":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:8525:17029":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"29:69:21835":{"crate_id":29,"path":["strsim","GrowingHashmapChar"],"kind":"struct"},"2:40408:3014":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:12655:761":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:23639:28192":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"18:113:21646":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:8966:3375":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:1397:3033":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:8314:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:5280:16680":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:4436:3311":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:11241:21727":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:16021:21435":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"20:3183:116":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"5:5414:9060":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"2:41403:3197":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:3588:21715":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"6:5117:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"23:451:3371":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"6:5557:14036":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:46832:3483":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"11:2519:32989":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:44855:9088":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"20:3838:3021":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"5:5564:9064":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:7098:9163":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:22162:30030":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:48052:8644":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1684:10911":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"3:2077:9415":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"6:485:9993":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:23433:28176":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8743:3342":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6428:14730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"20:3829:21754":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"2:47240:28351":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:23346:28431":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:7156:16983":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:3424:3223":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:3524:17294":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:16359:21458":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6590:14740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:1483:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:11064:22196":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:26659:283":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:2453:17243":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:8960:3017":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"18:96:21645":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10176:17106":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6237:16942":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:2818:16019":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:10333:17111":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"20:3785:21746":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"2:23705:28198":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"20:3262:209":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"6:5127:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6878:14790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:2872:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:12959:9242":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:42511:3241":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"20:49:2803":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"17:13608:17086":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"9:435:15792":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:4621:8707":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"21:313:34703":{"crate_id":21,"path":["anstyle","color","NullFormatter"],"kind":"struct"},"2:40629:8757":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:7004:28467":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:2025:3105":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:5069:13984":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6792:16962":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:45797:8668":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4816:13957":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12907:17147":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:485:17100":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:8040:33354":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:10766:17123":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"8:0:2638":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"14:159:15926":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:3158:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:2339:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"20:3881:34511":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"16:8595:17033":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12397:17337":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:8173:3093":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:45032:8724":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:46984:3502":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"22:5:3272":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"20:3244:34454":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"2:23526:3252":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:8910:3373":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:14071:8762":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:31061:3254":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"23:503:21775":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"2:45371:9119":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:6061:3413":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"20:938:21692":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"6:5471:14025":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"}},"external_crates":{"28":{"name":"anstyle_query","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"strsim","html_root_url":null},"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"is_terminal_polyfill","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}