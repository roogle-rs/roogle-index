{"root":"0:0:1857","crate_version":"4.4.13","includes_private":false,"index":{"2:12888:2083":{"id":"2:12888:2083","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12508:8052","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::rmatches":"2:12891:28703"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44125:8069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12823:23442":{"id":"2:12823:23442","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12836:27035":{"id":"2:12836:27035","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43891:8059","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12820:23420":{"id":"2:12820:23420","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12063:8056"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12891:28703":{"id":"2:12891:28703","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12508:8052","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::matches":"2:12888:2083"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44143:8070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:8049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12936:23214":{"id":"2:12936:23214","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:33784"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:23216":{"id":"2:12938:23216","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:33784"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:29393":{"id":"5:5543:29393","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:2535":{"id":"5:5553:2535","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12876:23478":{"id":"2:12876:23478","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:8052","str::rsplitn":"2:12879:23480"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44025:8041","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12882:23482":{"id":"2:12882:23482","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:28705":{"id":"2:12897:28705","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12508:8052","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::match_indices":"2:12894:28704"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44089:8068","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:8049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12908:28711":{"id":"2:12908:28711","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:8052"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12533:8047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12914:22707":{"id":"2:12914:22707","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:8052"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:28713":{"id":"2:12920:28713","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:8052"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:8049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:28708":{"id":"2:12904:28708","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12811":{"id":"2:12811","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12812:873","2:12813:23053","2:12814:28694","2:12815:28695","2:12817:28696","2:12820:23420","2:12821:28697","2:12822:339","2:12823:23442","2:12824:23438","2:12826:23439","2:12828:23440","2:12830:23441","2:12832:28698","2:12833:28699","2:12834:23464","2:12835:23465","2:12836:27035","2:12837:26889","2:12838:20609","2:12839:26623","2:12840:26624","2:12841:25992","2:12842:28700","2:12843:27036","2:12844:23484","2:12847:22709","2:12850:22711","2:12853:20259","2:12857:20260","2:12861:23472","2:12864:23474","2:12867:23476","2:12870:28701","2:12873:28702","2:12876:23478","2:12879:23480","2:12882:23482","2:12885:23483","2:12888:2083","2:12891:28703","2:12894:28704","2:12897:28705","2:12900:28706","2:12902:28707","2:12904:28708","2:12906:28709","2:12907:28710","2:12908:28711","2:12911:28712","2:12914:22707","2:12917:23485","2:12920:28713","2:12923:28714","2:12926:28715","2:12929:28716","2:12931:23061","2:12932:23211","2:12933:23062","2:12934:23058","2:12935:23057","2:12936:23214","2:12937:23215","2:12938:23216","2:12939:28717","2:12941:2301","2:12942:28718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5537:8403":{"id":"5:5537:8403","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:29391","5:5537:8403","5:5540:29392","5:5543:29393","5:5551:29394","5:5552:29395","5:5553:2535","5:5554:23060","5:5555:23059"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1857":{"id":"0:0:1857","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[115,18]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial::chapter_0] and [reference][_derive]\n- Builder [tutorial][_tutorial::chapter_0] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n- [CHANGELOG](https://github.com/clap-rs/clap/blob/v4.4.13/CHANGELOG.md) (includes major version migration\n  guides)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.70.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy::single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy::single_component_path_imports)]","#![allow(clippy::branches_sharing_code)]","#![allow(clippy::if_same_then_else)]","#![allow(clippy::collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1849"],"is_stripped":false}}},"2:12850:22711":{"id":"2:12850:22711","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:8052"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:8049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:29391":{"id":"5:5536:29391","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2170","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2170","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:23485":{"id":"2:12917:23485","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:8052"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:8049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12814:28694":{"id":"2:12814:28694","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12843:27036":{"id":"2:12843:27036","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44213:8053","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:25992":{"id":"2:12841:25992","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44175:2507","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:28716":{"id":"2:12929:28716","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12469:133","`FromStr`":"2:12468:2676"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42168:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12468:2676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12468:2676","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:28706":{"id":"2:12900:28706","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:28707":{"id":"2:12902:28707","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12894:28704":{"id":"2:12894:28704","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12508:8052","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::rmatch_indices":"2:12897:28705"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44071:8067","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12937:23215":{"id":"2:12937:23215","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:33784"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12840:26624":{"id":"2:12840:26624","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12839:26623"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44204:8054","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12828:23440":{"id":"2:12828:23440","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:29392":{"id":"5:5540:29392","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:29395":{"id":"5:5552:29395","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2170","`String`":"5:7534:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2170","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:23057":{"id":"2:12935:23057","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12844:23484":{"id":"2:12844:23484","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:8052"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12835:23465":{"id":"2:12835:23465","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12834:23464"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12885:23483":{"id":"2:12885:23483","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:8049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12834:23464":{"id":"2:12834:23464","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12835:23465"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:23438":{"id":"2:12824:23438","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42025:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:23211":{"id":"2:12932:23211","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39972:23346","Self::is_ascii":"2:12931:23061"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39972:23346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12911:28712":{"id":"2:12911:28712","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:8052"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:28699":{"id":"2:12833:28699","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1536","crate::ops::IndexMut":"2:3236:2385","str::slice_unchecked":"2:12832:28698"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:23476":{"id":"2:12867:23476","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12508:8052","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::split":"2:12861:23472"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43939:8037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:8049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:26889":{"id":"2:12837:26889","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43897:8058","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:28709":{"id":"2:12906:28709","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:26623":{"id":"2:12839:26623","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12840:26624"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44195:8055","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12813:23053":{"id":"2:12813:23053","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12817:28696":{"id":"2:12817:28696","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12815:28695"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12838:20609":{"id":"2:12838:20609","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43907:2510","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12842:28700":{"id":"2:12842:28700","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44185:8066","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12907:28710":{"id":"2:12907:28710","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:23062":{"id":"2:12933:23062","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12812:873":{"id":"2:12812:873","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:451"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12822:339":{"id":"2:12822:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12823:23442","`u8`":"1:12049:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12826:23439":{"id":"2:12826:23439","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42025:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:23058":{"id":"2:12934:23058","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12857:20260":{"id":"2:12857:20260","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42025:197","prim@char":"1:12032:451","self::pattern":"2:12508:8052"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:8049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864:23474":{"id":"2:12864:23474","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:8052"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12324:8043","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12832:28698":{"id":"2:12832:28698","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1536","str::slice_mut_unchecked":"2:12833:28699","crate::ops::Index":"2:3232:2384"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:28702":{"id":"2:12873:28702","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12508:8052","str::split":"2:12861:23472","prim@char":"1:12032:451","str::split_terminator":"2:12870:28701"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43989:8071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:8049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:2301":{"id":"2:12941:2301","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4745:2301"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44229:2302","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:23441":{"id":"2:12830:23441","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:23059":{"id":"5:5555:23059","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12935:23057"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:28715":{"id":"2:12926:28715","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:8052"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:8049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:23061":{"id":"2:12931:23061","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12815:28695":{"id":"2:12815:28695","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12853:20259":{"id":"2:12853:20259","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42025:197","prim@char":"1:12032:451","self::pattern":"2:12508:8052"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:29394":{"id":"5:5551:29394","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:23060":{"id":"5:5554:23060","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12934:23058"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:28701":{"id":"2:12870:28701","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12508:8052","str::split":"2:12861:23472","prim@char":"1:12032:451","`DoubleEndedIterator`":"2:7900:127","str::rsplit_terminator":"2:12873:28702"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43971:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942:28718":{"id":"2:12942:28718","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4742:28718"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44238:8064","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12847:22709":{"id":"2:12847:22709","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:8052"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12939:28717":{"id":"2:12939:28717","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4744:28717"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44220:8063","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:28714":{"id":"2:12923:28714","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:8052"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1849":{"id":"0:3-20:0:1849","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[101,0],"end":[101,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:1849","glob":true}}},"2:12879:23480":{"id":"2:12879:23480","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:451","str::splitn":"2:12876:23478","self::pattern":"2:12508:8052"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44043:8039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:8049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12861:23472":{"id":"2:12861:23472","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12508:8052","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::split_whitespace":"2:12839:26623","str::rsplit":"2:12867:23476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43921:2511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12821:28697":{"id":"2:12821:28697","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"26:21:2127":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"6:6700:13865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10102:15774":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:12202:16044":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"20:0:1849":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"2:3200:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:7343:9145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:8001:25219":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:5829:13369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11991:15957":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:6086:13450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:12213:8576":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11767:15999":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"20:1181:20316":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"2:2996:7970":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:15337:20046":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:40731:8373":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10813:32372":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:11066:8040":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:42456:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:5004:12760":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:30891:27208":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:11727:15976":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:5085:12769":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11014:15847":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:9014:25181":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:5859:13433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"20:65:2134":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"2:43764:8018":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:21949:2765":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"10:0:1970":{"crate_id":10,"path":["adler"],"kind":"module"},"16:6401:15654":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:548:9193":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5910:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:43074:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:15224:20034":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:4703:2612":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13504:18758":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:9954:7991":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:15903:20219":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:47778:2789":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:5761:2492":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:1286:2348":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:7534:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:3323:2517":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:2256:29708":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4854:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"11:2443:2336":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:4578:12716":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4947:12754":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:5004:2492":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"11:1051:2348":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"20:3248:32606":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"2:4588:8150":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:6012:13445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:11816:24723":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:12289:8577":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:7136:22348":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:4092:2332":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:15589:20062":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:8050:15711":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:7855:2470":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:9962:7990":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"18:113:20248":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:736:20262":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:1107:14606":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:9952:7983":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:23351:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"20:935:20297":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"2:7577:2537":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:2722:14710":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:903:2331":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"20:3775:20335":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"2:3197:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:6898:13874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:44175:2507":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:119:8866":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:43311:26988":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:11612:14650":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"11:1087:31119":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:1516:2340":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:8137:2537":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:11523:15913":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:3491:26470":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:6781:10208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11469:15939":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:6696:14636":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:836:2331":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:5588:15620":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"20:57:2129":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"2:4460:8140":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:10608:15813":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:1743:658":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:4740:2587":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:7067:31356":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"20:3508:20313":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"23:265:20392":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"17:12153:16013":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"20:3835:20354":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"16:6545:15663":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:7582:15696":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:39521:8132":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:44664:8565":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:4:1113":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:1151:28648":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:41220:8352":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:6136:30463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:489:9186":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:10095:22356":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:3040:2762":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:2421:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"23:423:32905":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"20:1669:20347":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"21:313:20330":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"23:480:32909":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"5:7306:2358":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:6604:2333":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"8:0:1968":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:7568:15695":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:39636:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:3074:8422":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:0:878":{"crate_id":6,"path":["libc"],"kind":"module"},"6:6228:12609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4686:12726":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:40460:2302":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12701:15779":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:1072:2349":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:10247:2695":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:44529:8073":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:23165:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:4666:12724":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:12739:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:9474:2469":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:11632:15945":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:43264:26945":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:4252:2331":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"14:40:18734":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6189:31516":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:12046:796":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:10953:2685":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:21643:2769":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"11:811:2337":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:3065:14723":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:6070:25585":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:5419:15618":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:39724:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:40863:8383":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:12560:16092":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:5939:15635":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13989:19262":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10785:32368":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:46934:2822":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:3044:8418":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11449:15937":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:40833:8381":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7613:15697":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:5743:15629":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7792:15707":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:14312:19282":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:15367:20049":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:12035:1150":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:43825:8036":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:4579:8149":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13285:18742":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:44301:8082":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"23:491:20382":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"16:5322:15598":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:1131:29756":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:521:20271":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:922:2341":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13516:18759":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"20:3285:2276":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"6:6114:13453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:7848:2466":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:41213:26943":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:6373:8387":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:14346:19284":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:5712:15627":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:15301:20042":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:48090:2850":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"18:707:8050":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:4862:15354":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:2324:635":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"20:3918:32564":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:15493:20054":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:3482:2422":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:47216:2794":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12572:16061":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:10510:15811":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:12052:1640":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:5068:12767":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:10473:25591":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:4764:12732":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13478:18756":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:11355:20608":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:8286:2610":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:10076:2401":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:12244:16011":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:39560:7974":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:1664:10097":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:621:2304":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:8220:2507":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:4968:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:4755:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:11052:8042":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:580:9198":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:12049:8530":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:8891:2728":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:42575:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:43939:8037":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:15671:20067":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:15027:20017":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"20:4233:32707":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"1:11388:20560":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:5696:15626":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:4231:2607":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:7692:14437":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:3994:2576":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:3095:8427":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:7604:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:903:2337":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"22:129:20376":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"1:4700:2639":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:7580:25602":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6467:15658":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:40494:8173":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"23:474:20381":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"6:4955:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:42099:2333":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:6563:27209":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"11:1910:2351":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:4789:12735":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:1477:2334":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:15117:20025":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:21250:8193":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:39746:2321":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4529:12710":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:3201:2531":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:2304:2346":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"20:4173:32542":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"2:10587:2477":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:40644:2471":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:4676:12725":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"21:382:20333":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"2:8009:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"15:0:1974":{"crate_id":15,"path":["addr2line"],"kind":"module"},"28:0:2115":{"crate_id":28,"path":["strsim"],"kind":"module"},"1:1550:2350":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:46055:2815":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11065:15852":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:7838:2468":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:3079:8424":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"11:351:31102":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:13083:16100":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:1815:1187":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:40814:8379":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4939:1100":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:41013:8384":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:43835:8034":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:10872:8030":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11088:15850":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:10790:2511":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6531:15662":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:43891:8059":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"18:590:27040":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:4480:12704":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:7510:2428":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13695:16002":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:39972:23346":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:13684:16001":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:11584:8032":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:7768:15705":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4808:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:32593:8394":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:8352:2589":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:9607:28267":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:41227:2714":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:9651:15797":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:15384:20051":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:3966:2573":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:13334:18746":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:7610:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:47010:2834":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:4993:27590":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"20:4179:8375":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"11:2326:2347":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:7862:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:4383:2602":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:40651:8016":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"11:856:2343":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:557:2279":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:7267:2368":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:2670:14708":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:43496:8557":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:5140:12775":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6742:14635":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"20:3527:20303":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"6:6718:2642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13909:19256":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:12115:16042":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:3818:2337":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:7276:2333":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:10538:2528":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:6156:15641":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6268:31623":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"7:0:1686":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:22073:2771":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"20:3290:20295":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"2:23196:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:3099:8428":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:595:15796":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4922:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:563:9195":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"11:2542:28461":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:3230:29774":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:5033:12764":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:44847:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:10925:15838":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:40452:8064":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:48296:7944":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"18:507:32391":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"15:394:14653":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:12014:25447":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:5648:15623":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:11226:15902":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"23:319:20391":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"17:12797:15824":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:5415:2683":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:640:2307":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:46263:2853":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:2574:14704":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"20:3586:20317":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"2:21287:27270":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"11:1603:14610":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:3670:2555":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:2474:29747":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:7003:30157":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:6059:13447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11507:15935":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"20:4120:32527":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"17:13633:19241":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:6194:24989":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:46722:26938":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:2948:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:11370:22683":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11144:2690":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:4744:2591":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:12828:15825":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4724:12729":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:542:9192":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:14778:20005":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"20:3460:20310":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"20:3809:20365":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"2:48136:2801":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:11290:25588":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:2766:14712":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:16032:20224":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:12366:16050":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:13961:19260":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:10983:8038":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:7015:15680":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:3108:8430":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:39702:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:4038:2578":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:44506:8091":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"21:182:20326":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"2:46386:2827":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:10395:25554":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:12127:16015":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:8205:15720":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10293:2510":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:22071:2477":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:42211:2331":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:41947:2561":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"20:3228:32569":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"16:7554:15694":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:22790:27210":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:1596:10092":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:14485:15784":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14786:20006":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:1558:10088":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:15037:20018":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:2810:14714":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10941:15839":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:6610:2723":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:5384:15616":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:3797:14745":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"9:507:14486":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"20:4003:20357":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"2:48387:7949":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:44911:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:44220:8063":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:7754:2410":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:5974:13442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4830:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:42417:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:9956:7992":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:42219:2332":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"20:4092:25214":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"10:36:31094":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:10312:8540":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:4556:12714":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:43790:8016":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6261:15645":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"9:237:2670":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:44495:8090":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"18:599:32397":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4616:12721":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13407:18751":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:40824:8380":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:501:9188":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:5435:31546":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:256:32373":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:46600:2854":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:48334:7946":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:1545:2337":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:11998:24975":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:3015:8414":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"20:1373:20319":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"2:21515:2768":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:44143:8070":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:7668:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:4212:2492":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:2228:15909":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:41840:27132":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:7284:2655":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"20:4167:32639":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"2:44089:8068":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:2354:2453":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4932:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:47170:2788":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10471:32369":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:12255:16045":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5992:13444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:15961:18736":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:43056:7980":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:48259:7941":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:4177:26944":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:12038:1536":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:11645:15946":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:507:9189":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:2209:2449":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:11045:25560":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:48270:7942":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:690:20267":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"23:101:20395":{"crate_id":23,"path":["anstream","stream","RawStream"],"kind":"trait"},"2:40749:26608":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:2659:8197":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:6896:25595":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"20:3880:20361":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"17:16146:20233":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:11459:15938":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"26:0:2113":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"2:9958:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:11170:25455":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:42074:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:5571:2688":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:10757:25131":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:23072:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:22425:2897":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"11:2231:14601":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:48028:2829":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:44025:8041":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:46356:2821":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:40680:2508":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:41924:27003":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:22823:2567":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:483:9185":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13436:18753":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13882:19254":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:44898:2908":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:11932:15961":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:5897:13437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:48311:7945":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:6813:13869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:48174:2835":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:12051:1639":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:6351:2911":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:11590:15908":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:4516:12708":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:3057:8423":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:6798:13867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:15:2086":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:1639:10095":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"9:52:14502":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:2504:14701":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:4469:2612":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"20:3634:20300":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"14:202:8093":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:8476:2671":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:40671:2382":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2998:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:4719:15331":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:2202:2447":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:30699:8406":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13754:19247":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6107:13452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:8274:2552":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"15:306:14642":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:13463:18755":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"24:304:20405":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"6:6169:13457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:15842:18732":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:2969:14720":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:21272:27262":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:15101:20023":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:2983:28621":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"20:3238:32640":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"6:6128:13455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:15287:20040":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"23:439:2670":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"20:3557:20307":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"17:10618:32376":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12784:15823":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:4461:12702":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:22282:2905":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:7597:31497":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12324:16048":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"20:49:2130":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"2:46023:2785":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:14041:19265":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:1697:10101":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:609:32414":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:3988:2575":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:5727:15628":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:7026:20611":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:43845:8035":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"18:755:20270":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:10896:15836":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:11497:15940":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"22:0:2109":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"11:1007:2346":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:1682:10099":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:12056:1246":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:21534:2769":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:3568:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:0:1976":{"crate_id":17,"path":["object"],"kind":"module"},"2:10202:2483":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:22159:2900":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:4566:12715":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:10840:25452":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:4625:2576":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:3026:8416":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:644:32391":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:7616:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"18:727:20269":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:6204:15642":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:8330:2642":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:14251:19278":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:5921:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:14296:19281":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:2093:7976":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13395:18750":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:22632:27134":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:5044:12765":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:7450:2287":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:1063:2348":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"11:2423:2333":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:10765:2332":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:14266:19279":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:42378:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11168:15874":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:4543:12712":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:5971:2724":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:3184:2331":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:23134:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"11:742:2340":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:46107:2826":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13856:19252":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"20:3357:20293":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"5:7497:2427":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"20:3187:111":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"6:4908:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:5673:15625":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:6943:13878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:30785:27221":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"11:2151:2348":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:43743:8027":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:15062:20020":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:13145:18734":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:511:15795":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:7316:29761":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13162:18735":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11399:15883":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:2154:29776":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:43096:7982":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:6844:15672":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:13352:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:43515:8019":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:4020:2336":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:8936:2732":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12510:16062":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:5015:12762":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:14385:19287":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:700:2333":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:12049:1641":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:2031:15890":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:6811:2764":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:918:2340":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:16087:20228":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:12054:848":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:3239:2532":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:3182:2367":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:1537:10086":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:1891:2336":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:11657:15947":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:14878:20009":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:12031:1033":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:43715:8026":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:9147:2758":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:2205:2448":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:5830:15632":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12999:16097":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:12758:15822":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:588:2300":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"23:163:2477":{"crate_id":23,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"2:4309:8154":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:43907:2510":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6346:15649":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"21:210:20327":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"17:13448:18754":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:12103:16041":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:2973:29753":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"21:360:20332":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"6:6666:10040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:7738:2409":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:0:1528":{"crate_id":1,"path":["std"],"kind":"module"},"2:2993:2166":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:1650:10096":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:14921:20012":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:8134:15715":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:45911:2813":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:6960:15677":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:15267:20038":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6279:15646":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:401:15794":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:4783:12734":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:21521:2772":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:9943:15782":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:2864:14716":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"20:4240:2128":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"16:3461:14726":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:6318:15647":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:5130:12774":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:2336:8443":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:12474:15814":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"18:766:20263":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4375:12695":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"11:774:2334":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:14426:19290":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:1778:634":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:8226:2557":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:5746:2710":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:22396:2896":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:13254:18740":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13347:18747":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:32499:8148":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:12659:15776":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:10945:8037":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12953:15781":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:3447:7972":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:12042:691":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:12387:16052":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:7821:8361":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:2492:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:40501:8174":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:44660:8571":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:22204:2901":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:7434:2328":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:2696:14709":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"20:1688:23245":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"17:15855:18733":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:40581:2432":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:44444:8088":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:41269:8358":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:23413:2566":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:9813:15801":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:7338:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:2548:14703":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:2975:28622":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:6456:15657":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:5995:15638":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:7953:2168":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:2380:14696":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:7901:2330":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:5146:12776":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:3032:8415":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:6913:13875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:4340:8155":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:5075:12768":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:5639:2725":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"20:1374:2132":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"20:4105:32460":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"2:4635:8151":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:3432:27578":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:4798:2592":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:41027:8385":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:41794:2550":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:15311:20043":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:5392:8010":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:8195:15719":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:44125:8069":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:6079:13449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:44369:8086":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:11307:24978":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:4745:12730":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:2701:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:7660:15700":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:6017:15639":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:3930:2572":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:21919:2477":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:6792:15670":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:12048:793":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:44940:7960":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:2370:2458":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"20:1106:20318":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"1:1534:2331":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11141:15872":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:2383:2331":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:40702:8364":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:5666:2492":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:4411:2492":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:40468:8063":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:13297:18743":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6944:31435":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:14001:19263":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:43733:8029":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:12898:15827":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:2788:14713":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:40693:8363":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:6721:15668":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:5891:13436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:44071:8067":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:7375:2333":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:4105:2492":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"20:3787:20336":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"6:1691:10100":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:15087:20022":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11345:15891":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:46085:2820":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:8850:2331":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:6426:2714":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:10172:15806":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:2830:2425":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:7185:8362":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:5431:2684":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6915:15675":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:3203:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"20:3132:20323":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"5:3753:2372":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:22350:8442":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"11:710:2339":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:21318:27257":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:8866:2333":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"20:3376:2276":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"2:46502:2787":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:11625:8024":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:11313:2696":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12029:15964":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:3655:14728":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:40721:8372":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:6243:15644":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:9196:25441":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:10831:25449":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:1710:10102":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:9021:24946":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"11:430:31121":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:11551:8031":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"11:837:2341":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:1906:8452":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:538:20276":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:46310:2767":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"11:2469:2337":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:6596:2722":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:4639:25491":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:42236:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:7346:28619":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:652:32391":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:40440:8178":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"20:3909:32568":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"17:12536:16057":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:4893:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:5612:15621":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:1424:2331":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:1604:10093":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:9968:15804":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:40873:8368":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"14:31:14617":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:3600:14727":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:44323:8083":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:12310:16038":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:6804:13868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:3687:30147":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"7:31:14454":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13765:19248":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:5568:2686":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:6386:15653":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:8154:15716":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:14122:19269":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12684:15778":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:13663:19243":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:7900:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"24:255:2132":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"6:1514:10083":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:3607:2332":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:11321:15814":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:43281:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:45955:2814":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:13742:19246":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"20:4207:32519":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"6:1913:10268":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:9730:15798":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:5877:2336":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"20:3951:32608":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"16:4745:15333":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:22648:26981":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:39680:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:830:2355":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:5825:2315":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"18:564:20277":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:7503:15689":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:11537:2560":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:4972:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:8920:2729":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:9106:8048":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:43511:27142":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:12053:1637":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:4417:15221":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:3151:7973":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:2426:1984":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:10338:25104":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:2933:14719":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:9678:15783":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:14373:19286":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"14:215:14626":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:4921:15365":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:1501:10081":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:4641:15277":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:5052:12766":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:4806:15346":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:2662:2523":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"19:0:1130":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11593:7956":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:12921:15784":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:10167:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:10762:25495":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"20:3148:20324":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:5104:12770":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:6352:15650":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:4383:8005":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:4497:15253":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:875:2344":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:3402:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:7651:15699":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:7871:2169":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:3732:2559":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:10410:26818":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:11178:8584":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:40567:2430":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:42168:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:11701:15996":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:12746:15821":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6083:14663":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:21632:2477":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:15235:20035":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:5363:15615":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:40763:8376":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:21260:27262":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:9479:25100":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:7862:15709":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:7634:8113":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7436:15685":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:14934:20013":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:46776:26884":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:8535:2673":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:13407:2359":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:3048:8417":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:2704:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:7284:2357":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4989:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:5928:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:48364:7948":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:12445:16058":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:4053:14905":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"0:0:1857":{"crate_id":0,"path":["clap"],"kind":"module"},"1:9048:25031":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:6687:15667":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:7360:31603":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:40781:8386":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"20:4020:32624":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"6:4814:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13948:19259":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:4811:8164":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:6927:13876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:8239:15721":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:0:533":{"crate_id":2,"path":["core"],"kind":"module"},"6:4440:12700":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:46208:2792":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"18:582:8193":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"24:113:20407":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"1:482:25597":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:6583:15665":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:48426:7950":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:3020:8413":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:8319:2364":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"20:3550:20308":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"2:30659:2366":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"15:327:14646":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:9026:24964":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:5023:12763":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:10422:15810":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:14822:20007":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:43293:2670":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:9943:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4878:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:43879:8062":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"20:3857:2335":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"20:4083:32636":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"2:11038:8039":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:11001:15848":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:6430:2715":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:2368:2457":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:46753:26980":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:8281:15722":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:1556:2351":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:6868:13872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:42495:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:1632:10094":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:6861:8117":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"11:2554:31118":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:22430:2895":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:15244:20036":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:212:7979":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:26260:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:2305:14692":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:46675:26915":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:10242:15808":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:42141:2656":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:42300:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:4364:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:6041:15640":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:44516:8092":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:7702:14438":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:15108:20024":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"12:0:1972":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:123:31110":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:6983:24933":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:6842:8116":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"14:221:14627":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:7651:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:1591:10091":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:32492:27018":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"28:72:20444":{"crate_id":28,"path":["strsim","StrSimError"],"kind":"enum"},"1:9128:2481":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:12039:1622":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:4584:12717":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:2472:14700":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:1455:2333":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"25:53:2670":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"17:16109:20230":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:5117:12772":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:2707:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:6819:13870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:5388:8009":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:909:2338":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:15612:20063":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:41003:2509":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:2518:2520":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:39799:8129":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:3169:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11549:15941":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:5051:25225":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:46125:2832":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"20:3266:203":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"6:4603:12719":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4535:12711":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:5982:13443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:10792:2470":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:43753:8028":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:21462:2773":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:4915:2638":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:7269:31593":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:43865:8065":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:14989:15853":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"14:187:14625":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11536:15911":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:13809:19250":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4473:12703":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:8181:15718":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:7367:2333":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"20:3608:27220":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"2:41236:8354":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:4434:12699":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:4042:2579":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:12140:16014":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"11:1903:2350":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4388:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10962:15858":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:44352:8085":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:7342:31624":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:46532:2793":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:1301:2347":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:5403:15617":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8453:2670":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:6485:15659":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:21460:2477":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:8167:15717":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"11:2403:2332":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:5152:12777":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"13:0:1966":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:9960:7989":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:8097:15713":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:7534:15692":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:80:20246":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"24:192:14522":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"1:8551:2674":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"18:636:32387":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:7556:14409":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"24:26:20408":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"2:6557:8367":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:2943:2165":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:645:2308":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:10986:2692":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:40772:8377":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4841:12741":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"20:3447:20314":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"11:1883:2331":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11426:15936":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:6568:20383":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:951:2345":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:16134:20232":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:6425:15656":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:8493:2672":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:44656:8570":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12335:15784":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:6658:9235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:1796:2401":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:2339:14694":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:3232:14724":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:12033:1657":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:13922:19257":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"25:23:14522":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"2:40400:26919":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10207:15807":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:1896:2337":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:1734:10104":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:3191:2351":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:15631:20064":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12052:15962":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:1094:15851":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:4129:22341":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:7622:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"28:32:20430":{"crate_id":28,"path":["strsim","StringWrapper"],"kind":"struct"},"17:9860:15802":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:3419:8133":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:12047:797":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:6361:15651":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"20:4159:20338":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"16:5634:15622":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:13707:19244":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"18:660:20264":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:7663:2283":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:48285:7943":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:2352:2452":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:7391:15684":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:867:2334":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:44716:2763":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:2946:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"22:28:2477":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"2:22811:2564":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"11:102:31112":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"11:687:2332":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8545:2331":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:22616:26934":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"11:1142:14607":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:7041:31523":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:4964:2647":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:13112:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:6540:2718":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:15557:20060":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:5867:13434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"20:3867:20362":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"20:1664:20344":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:1054:2347":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:23858:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:5123:12773":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:12290:16037":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"11:1676:31095":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:6415:15655":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"24:290:20404":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"5:281:2170":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12410:16053":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:6837:13871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:12055:1696":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:4428:12698":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:886:2356":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:43001:7980":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:12486:16064":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"11:0:1971":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:9759:15799":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:44728:8585":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:40614:2446":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"20:3307:20296":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"2:41960:2552":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:7467:2429":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:3811:2333":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:10944:24940":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"24:96:20402":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11041:15814":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:22296:8442":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:7825:8360":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:10155:24945":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:3052:8419":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:42751:7983":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"20:3489:20312":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"1:7923:2522":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:14765:20004":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:3199:2530":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:40539:2431":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:14969:19998":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:3484:7975":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:7637:2703":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:48212:2856":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:3217:2352":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:9891:15775":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"22:99:20374":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"17:11978:15956":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:42160:2289":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:7782:15706":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:3166:22596":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:41261:8356":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:44837:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:43047:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:11485:15910":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:9069:20614":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:4776:12733":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:2979:28620":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:4889:15357":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:2048:2371":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:22707:27021":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:15177:20029":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"20:3097:2125":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"23:63:20402":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"1:8011:2524":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:15725:20071":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11690:15995":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:1821:2407":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:4151:2603":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:6569:15664":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12230:16009":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:1562:2352":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:4491:2613":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:15184:20030":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:4928:16069":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:10315:15770":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11307:15885":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10016:15769":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:3584:15981":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12459:15854":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:1546:10087":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:5072:854":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:44195:8055":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:10833:8043":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:588:9199":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:6753:15669":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:634:29672":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:8115:15714":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11755:15998":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:10915:15837":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:43256:2484":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:44238:8064":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"20:3960:20363":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"6:6889:13873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:1528:10085":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:6100:13451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:11453:20483":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:4949:15369":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:40624:2445":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:11605:25228":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:16180:18745":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:11158:2691":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:2586:2521":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:13218:18738":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:2778:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"11:883:2345":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:9950:7984":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:14662:20001":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:14145:19270":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:3392:8432":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13322:18745":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"9:357:14499":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:2284:14664":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:8994:2658":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:4986:15382":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:12037:1503":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:47888:2823":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"22:32:2511":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"2:1897:27139":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:42227:2333":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:7388:14250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:40379:8137":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:48230:7938":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:928:2342":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:11958:15960":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:3160:26351":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:12032:451":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:2418:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:1115:28647":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:10535:2532":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:16004:20222":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"9:426:14485":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:43303:27004":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:3001:8393":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:23258:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:44043:8039":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:4977:12757":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:4381:30154":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:9415:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:11194:15875":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:3413:8134":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:46856:2816":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:10910:8044":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4610:12720":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:11981:25209":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:12273:15825":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:7529:15796":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11269:15854":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7492:15688":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:39660:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:3069:8421":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:42758:7984":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"20:3900:32627":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"16:5816:31223":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:504:2272":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:533:2277":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"18:624:32390":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:8006:24972":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:10597:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12850:15826":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"23:343:20387":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"2:2698:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:4455:12542":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:13724:19245":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:699:20268":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:5395:2682":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:13099:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4710:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:44640:8567":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"22:113:20375":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"18:614:32402":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12432:16059":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:10741:2331":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:15253:20037":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12584:16060":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:7657:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:1718:10103":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"21:261:20328":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"20:3540:20304":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"1:11619:14650":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12380:16051":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"20:3400:2123":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"1:7644:2299":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:14887:20010":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:10726:32366":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:11563:15912":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:11051:25557":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:14324:19283":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"20:3695:20346":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"1:10097:25224":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"16:2644:14707":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:2440:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"20:3593:20301":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"17:13026:16098":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:8995:2657":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:4534:8148":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"14:0:1973":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:10767:2466":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:15710:20070":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:3049:14722":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:3837:2560":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"20:4143:20339":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"2:47280:2849":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:4050:30147":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:15645:20065":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:6818:15671":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"20:3570:20315":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"1:11197:2481":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:15659:20066":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:5344:30147":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:8308:2611":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"20:3942:32638":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"5:266:30147":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"11:328:31098":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:7380:24973":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:47966:2795":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:1538:2333":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:4444:30154":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:13309:18744":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:7668:2285":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:22336:2906":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:6682:9068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:14021:19264":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:22745:26997":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"21:347:20371":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"17:16098:20229":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"17:14156:19271":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10881:15835":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:15527:20057":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:14896:20011":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:7330:2333":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:8858:2733":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13787:19249":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:6248:13485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:16049:20225":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:42534:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:7931:2371":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:6934:13877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"11:1582:14609":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"20:4065:20355":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"17:13869:19253":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:43724:8025":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:46245:2847":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:10207:2485":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:15049:20019":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:10988:15849":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"9:330:14539":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:9918:15803":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:3830:14754":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:7639:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:40792:8378":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13121:18733":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:475:9184":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:43971:8072":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:2618:14706":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11779:15955":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:3888:14788":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4628:12722":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:1495:2338":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"11:2352:2348":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:47246:2800":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4647:12723":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:41983:2553":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:22510:26863":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:4527:15259":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:1873:2420":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:14455:19292":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:46156:2780":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:1692:2492":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:3193:2167":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6513:15661":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:1760:2391":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:5088:15412":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:44204:8054":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:13186:8201":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:43803:8017":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:555:9194":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:31261:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11369:15889":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:46226:2798":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:0:1967":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:11476:14601":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:42261:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:7407:8350":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:5009:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:914:2339":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:149:14669":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:14439:19291":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:596:9200":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:11027:15846":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"20:3261:32565":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"2:43921:2511":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:3677:2336":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:4557:15265":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"18:574:32391":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:6871:8118":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:8157:2472":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:40520:8170":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"15:288:14641":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:44229:2302":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8842:2692":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"20:2974:32547":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"2:2711:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:8326:2640":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11604:15943":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:849:2332":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:2487:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:2744:14711":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"23:112:2517":{"crate_id":23,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"6:6691:13864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:5632:2724":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:23227:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:15200:20032":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:2144:2272":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:11395:15896":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:12050:1638":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:123:8867":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:44644:8569":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:1505:2339":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:22381:2477":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:3425:2474":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"11:2536:31115":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:3005:2759":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4351:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:8363:26757":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:13134:26536":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"23:302:20390":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"2:44691:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:7736:15704":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:4847:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:15279:20039":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:10974:15854":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:12972:15780":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:22797:2565":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12301:16047":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:15356:20048":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8237:2548":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:2695:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:10950:15864":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:434:31122":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:3251:15958":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"23:459:20383":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"1:1819:2129":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:43031:27220":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:4860:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:44890:2907":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:5905:15634":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:7633:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:14282:19280":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:3064:8420":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:14399:19288":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:1541:2336":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11294:15886":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:12091:16040":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:32485:15721":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:21304:27271":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"13:226:31127":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:11034:20332":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:13161:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:22:731":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:3091:8426":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:4401:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:14235:19277":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:40388:8176":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:40801:8366":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:14194:19274":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:47430:2783":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"18:0:1977":{"crate_id":18,"path":["memchr"],"kind":"module"},"20:34:2132":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"18:531:20275":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:4774:15338":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4800:12736":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:6071:13448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:41811:2551":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:39607:8431":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:6600:15666":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"20:3818:2126":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"5:7523:8004":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:10337:15809":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"14:7:14617":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"11:844:2342":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11945:15959":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:5031:2540":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:574:9197":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:527:9190":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:3010:2761":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:21306:27265":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"18:719:20261":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:7462:15686":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:8984:2276":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:5780:2712":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:10137:15805":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:3738:2371":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:5950:8365":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:1160:2349":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:46456:2781":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:12522:8050":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:4902:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:14633:20000":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"11:800:2336":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:2124:2346":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:15133:20027":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8562:2675":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:4914:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:9624:15768":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:6484:2336":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"11:2140:2347":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:7828:15708":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:7523:15691":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:893:2336":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:5121:15421":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:40740:8374":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:12009:15814":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:44481:8089":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:2596:14705":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:22243:2902":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:12220:15826":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:44855:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:8828:2691":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:8146:2539":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:14497:19294":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:3280:2529":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4549:12713":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:7474:15687":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"23:376:20405":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"24:132:2670":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:39785:8121":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:7028:30155":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:14509:19295":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:14413:19289":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:15294:20041":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:40849:8382":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:12250:8578":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:96:20247":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:2622:2513":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:2523:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:7717:2311":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:5798:15631":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:1066:14605":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:357:2297":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:1576:10090":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:15519:20056":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:14359:19285":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:23382:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:5982:15637":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:3232:2384":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:533:9191":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:13676:16003":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:2062:2372":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:3315:14725":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:15535:20058":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:14904:19999":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:15943:18735":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:8991:24931":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:9559:15771":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:3936:2571":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:7621:15698":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10520:32367":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:14099:19268":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:4569:2630":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:42023:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"20:3930:32635":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"16:2359:14695":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:40475:8171":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:4167:2605":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:0:1975":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:43272:2486":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:2406:14697":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"11:673:2331":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11412:15882":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:3343:2337":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:681:20266":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:1439:2332":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12872:15772":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:3915:14791":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"27:0:2114":{"crate_id":27,"path":["anstyle_query"],"kind":"module"},"20:3116:20294":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"22:5:2571":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"2:2658:2477":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:2958:2288":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"26:41:20416":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"1:11476:2559":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:10822:2472":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:6222:13484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:10780:25121":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:42151:8513":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12396:16016":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:6263:13486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"20:52:2131":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"2:3329:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:2703:30070":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:62:8812":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:12044:798":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11256:15887":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:6741:10225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:2881:14717":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:1703:2598":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:22294:27421":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:7843:2469":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"20:3798:2304":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"17:14757:20003":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:6249:2724":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:15321:20044":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:43019:27224":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:5049:15397":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:30715:7980":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:15432:20052":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11617:15944":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"20:3533:20306":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"2:9747:7981":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:7296:2336":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"20:3466:20305":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"2:46408:2833":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:23103:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:2197:15884":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12191:16008":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:1566:14608":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:16062:20226":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:3251:2353":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:8281:2609":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:15733:20072":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:14057:19266":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:22761:26990":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:15507:20055":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:4182:2492":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:880:2335":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:3980:2574":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12166:16012":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"9:177:14588":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:7102:15681":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"21:282:20329":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"16:6332:15648":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:4637:25489":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:11576:15942":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:16123:20231":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:5969:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:3407:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:12077:16028":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:7090:31518":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:45931:2778":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:42614:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"20:3454:20309":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"2:44338:8084":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:9274:2129":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:10569:32379":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:6764:10210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13584:19240":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:6047:13446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15212:20033":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:5082:25225":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:305:26757":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"16:6901:15674":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:6226:15643":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:22672:2563":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"20:61:2133":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"16:6499:15660":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:8872:2730":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:11126:15844":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:15480:20053":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:48349:7947":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:1521:10084":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11340:22676":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:7355:26749":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:42653:2709":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:40416:8175":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:2972:7964":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:6879:15673":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:5017:15389":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:7054:31505":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:30693:8112":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:363:2298":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"11:787:2335":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13056:16099":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:6117:2492":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"11:2548:31116":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:7915:22583":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"20:2791:2332":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"20:754:32605":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"17:15680:20068":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:14170:19272":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:6686:30147":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:364:31108":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:12324:8043":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12718:15820":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:6543:2719":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:7865:2467":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:42002:2554":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:3594:2331":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:10716:15815":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:3460:15963":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:3764:14736":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:10738:2641":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:14470:19293":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:10430:2689":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"20:4260:2127":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"17:4773:16063":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:2832:14715":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:4870:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:5837:8375":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:43816:8033":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:2169:15924":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:5650:8116":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11666:15948":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:4821:2586":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:11800:15975":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:44185:8066":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:7858:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:42091:2332":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:4201:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:945:2344":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12264:16046":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:15125:20026":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:12043:693":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13235:18739":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:12003:2313":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:43989:8071":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:1789:2337":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:12356:16049":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:41777:2549":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:12033:8528":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:40551:27047":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:32506:8480":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:637:2306":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"23:221:26470":{"crate_id":23,"path":["anstream","fmt","Adapter"],"kind":"struct"},"17:15980:20220":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:4608:2286":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:8072:15712":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:10667:32371":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:48250:7940":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"18:671:20265":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:42772:7992":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:8403:2669":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:30430:2562":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:5753:2711":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:9900:2422":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"11:1923:2353":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:4884:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:10532:2530":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"10:44:14593":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:536:31249":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:9790:15800":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:11024:8041":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:11052:15815":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:9420:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"21:173:32849":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"16:5760:15630":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:21641:2770":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:15374:20050":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:47636:2817":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:3500:2475":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:7318:15683":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:12063:8056":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:1570:10089":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:5500:2685":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"23:0:2110":{"crate_id":23,"path":["anstream"],"kind":"module"},"2:40487:8172":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:4189:26852":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:261:32370":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:21924:2775":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:4824:12739":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11714:15954":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:4585:15269":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:3036:2760":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:2321:14693":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:13648:19242":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:13365:18748":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:12579:8076":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13383:18749":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:4180:2606":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:7006:15679":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:515:20274":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6968:15678":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"20:3381:20299":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"1:3443:2473":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:4906:2637":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:2911:25105":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:7365:14248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:42083:2331":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13419:18752":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:8232:2556":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"20:3646:20345":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"2:44213:8053":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:8316:2360":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:10940:2410":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:7481:27047":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:6530:30147":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:6146:2909":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:2236:30100":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:15868:20218":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:3236:2385":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"9:450:14483":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:7544:15693":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"24:89:20400":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"1:4311:2608":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:12528:8049":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"9:0:1969":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:16160:20234":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:39620:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13182:18736":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:2569:2327":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"11:832:2338":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:22699:26935":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:22724:27054":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:41242:2538":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4738:2570":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:9602:26759":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:4028:2577":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:7732:2312":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12930:15828":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:4595:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:8993:2314":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:40430:8177":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:1040:2346":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:5574:15619":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:5111:12771":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:12468:2676":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:42108:2655":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"9:486:14482":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:4455:8139":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:42765:7991":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:1203:15859":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:5866:15633":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:40373:2302":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:4050:2581":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:8169:2476":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:10578:2282":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:6159:13456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:859:2333":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:43664:27041":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:13896:19255":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:1025:2347":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:6376:15652":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:1567:2353":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:8814:2690":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:7422:2327":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:3196:29781":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:6162:25558":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:44928:7962":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:3241:2533":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11155:15873":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:2369:14611":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:6929:15676":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:1685:30147":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"11:299:31106":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:46554:2799":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12614:15819":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"18:491:32417":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:8213:2511":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:15990:20221":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:6466:2721":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:2600:25554":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:22684:27033":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:7371:14249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:2526:14702":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:5992:2708":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:10067:15773":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11439:15903":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4523:12709":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:46980:2828":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"20:3481:20311":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"1:9971:20482":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:11215:22687":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:10559:15812":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:4613:15273":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:6711:13866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:3510:2502":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:15160:20028":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:1902:2421":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:2907:14718":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:10432:32380":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:10968:25208":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:43897:8058":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:12418:16068":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:7884:15710":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"20:2769:2331":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"20:4226:2681":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"20:3802:20352":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"1:11516:2558":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:6959:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:9918:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:1785:8338":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:40534:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:46578:2848":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:13935:19258":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:31289:8193":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:11382:22354":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"11:1917:2352":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:42991:27141":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:4462:15242":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:8200:2509":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"21:334:20331":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"6:7598:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:46186:2786":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:1024:30147":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"24:0:2111":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"2:12533:8047":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:44636:8564":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:5955:13398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:14950:20014":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:15546:20059":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:44672:8584":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:15003:20015":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4488:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:8973:24983":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:2947:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:13976:19261":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7513:15690":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:435:14666":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:4635:25487":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:5381:2681":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:15345:20047":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13202:18737":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:30727:27159":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:11215:15876":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:12273:8575":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:21513:2477":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:1883:8453":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:5661:15624":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"22:158:20377":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"20:4050:20356":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"1:4159:2604":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:3163:22585":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:4451:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:7906:2329":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:1674:10098":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:2936:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:2953:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"20:3063:2124":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"17:14087:19267":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:15079:20021":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:13314:2909":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:15747:20073":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:7689:2282":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:12180:16043":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:8207:2510":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:3366:2538":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:5941:13397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:2183:29735":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:9164:25214":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:9948:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:14221:19276":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:3085:8425":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:7548:8094":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:2789:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"9:393:14484":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:42339:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4998:12759":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:15566:20061":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:790:2354":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"18:481:20272":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:44652:8572":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:21289:27268":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:4506:12707":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:40711:8371":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:8385:2651":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:16170:18743":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:22267:2477":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:12045:795":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:32445:2693":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"23:288:20389":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"1:8959:2713":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:3225:2350":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"7:78:14461":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:3032:14721":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"21:113:32850":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"6:654:9247":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:12030:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"20:1710:134":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"2:32481:26403":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:15689:20069":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:4344:15172":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"20:1662:20343":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"20:3890:32567":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"2:39778:8433":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:14181:19273":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"11:2562:31113":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13273:18741":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:4224:7969":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:44549:8074":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12596:15818":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"23:358:20388":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"2:41251:8355":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:46624:2855":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:7291:8370":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:2380:2463":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6560:31573":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"20:3970:20353":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"2:2334:8442":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:14698:20002":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:495:9187":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:2428:14698":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:44417:8087":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:7645:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:21961:27260":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"20:3848:20360":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"1:3735:2558":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6893:31533":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:2529:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:7559:8095":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:7643:2477":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"11:1887:2333":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:9186:25440":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:5963:15636":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:46001:2779":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13491:18757":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:14208:19275":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:16016:20223":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:1758:2390":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:939:2343":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7694:15701":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:44953:26987":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:11113:15845":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:10159:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:12548:16056":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:12508:8052":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:8325:8359":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"21:127:32851":{"crate_id":21,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"2:23320:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:11817:16000":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"14:165:14618":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:41754:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:7540:24922":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"14:160:14617":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:1507:10082":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:8300:2557":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:8904:2731":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10657:15814":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:4243:8136":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:44668:8566":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:1496:10080":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:47092:2782":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:7679:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:6013:8786":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:3103:8429":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"20:3981:20364":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"16:2450:14699":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:15329:20045":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:8796:2689":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:4742:2590":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:14843:20008":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13832:19251":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:15192:20031":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"20:3600:20320":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"25:0:2112":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"17:11243:15888":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7708:15702":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:1315:2349":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:15013:20016":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:569:9196":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:1486:2335":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:6961:13879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"20:3256:32566":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"5:40:2386":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13097:18732":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"23:134:20396":{"crate_id":23,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"17:16076:20227":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"20:2990:32602":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"1:7599:25599":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:4698:12727":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:8292:2601":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11675:15994":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"13:110:31174":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"20:3726:2524":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"5:7618:2337":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:23289:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:12513:8048":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:4835:15351":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:22563:27015":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10803:15817":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:13303:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:10775:15816":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:48239:7939":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:1909:704":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"23:405:20394":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"23:390:20393":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"1:3278:2528":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"20:3322:20298":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"16:7722:15703":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11743:15997":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:3394:2492":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"20:2950:2122":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"5:5154:2708":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:6120:13454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:1270:2346":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:1536:2370":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:45977:2819":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10051:15618":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4449:12701":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:1973:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:7128:15682":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"25:89:2132":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"1:9034:15682":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"11:396:31100":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:4524:8147":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:2944:7971":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"21:0:2108":{"crate_id":21,"path":["anstyle"],"kind":"module"},"6:4496:12706":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12345:16039":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:5885:13435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:10378:27491":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:8190:2508":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:10035:15617":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:44648:8568":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:10852:15834":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"}},"external_crates":{"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"strsim","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"anstyle_query","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}