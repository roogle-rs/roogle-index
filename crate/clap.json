{"root":"0:0:1687","crate_version":"4.2.5","includes_private":false,"index":{"2:11872:802":{"id":"2:11872:802","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11872:411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5373:34240":{"id":"5:5373:34240","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2000","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2000","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:22755":{"id":"2:11873:22755","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1687":{"id":"0:0:1687","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[119,1]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.64.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:3-20:0:1677"],"is_stripped":false}},"2:11917:19525":{"id":"2:11917:19525","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40682:176","prim@char":"1:11872:411","self::pattern":"2:11573:7784"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:7781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11901:27527":{"id":"2:11901:27527","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42899:2291","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:23000":{"id":"2:11924:23000","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:7784"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11397:7775","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:33566":{"id":"2:11875:33566","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:33582":{"id":"2:11966:33582","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:34244":{"id":"5:5389:34244","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:2000","`String`":"5:7239:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2000","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:23008":{"id":"2:11904:23008","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:7784"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:33589":{"id":"2:11989:33589","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11535:125","`FromStr`":"2:11534:2465"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40824:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11534:2465","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11534:2465","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11983:33587":{"id":"2:11983:33587","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:7784"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11994:22758":{"id":"2:11994:22758","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11907:23009":{"id":"2:11907:23009","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:7784"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11962:33580":{"id":"2:11962:33580","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:33565":{"id":"2:11874:33565","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5392:22760":{"id":"5:5392:22760","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11994:22758"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11951:33576":{"id":"2:11951:33576","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11573:7784","`DoubleEndedIterator`":"2:7167:119","prim@char":"1:11872:411","str::matches":"2:11948:1905"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42867:7802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:7781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11883:22966":{"id":"2:11883:22966","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11889:1478"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11971:33585":{"id":"2:11971:33585","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:7784"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11967:33583":{"id":"2:11967:33583","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:23010":{"id":"2:11910:23010","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:7784"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:7781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11871":{"id":"2:11871","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11872:802","2:11873:22755","2:11874:33565","2:11875:33566","2:11877:33567","2:11880:28539","2:11881:33568","2:11882:311","2:11883:22966","2:11884:22962","2:11886:22963","2:11888:22964","2:11890:22965","2:11892:33569","2:11893:33570","2:11894:22990","2:11895:22991","2:11896:31388","2:11897:31403","2:11898:22757","2:11899:31435","2:11900:31407","2:11901:27527","2:11902:33571","2:11903:31389","2:11904:23008","2:11907:23009","2:11910:23010","2:11913:19524","2:11917:19525","2:11921:22998","2:11924:23000","2:11927:23002","2:11930:33572","2:11933:33573","2:11936:23004","2:11939:23006","2:11942:33574","2:11945:33575","2:11948:1905","2:11951:33576","2:11954:33577","2:11957:33578","2:11960:33579","2:11962:33580","2:11964:33581","2:11966:33582","2:11967:33583","2:11968:33584","2:11971:33585","2:11974:23011","2:11977:23012","2:11980:33586","2:11983:33587","2:11986:33588","2:11989:33589","2:11991:22762","2:11992:22763","2:11993:22759","2:11994:22758","2:11995:33590","2:11997:2097","2:11998:33591"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11933:33573":{"id":"2:11933:33573","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11573:7784","str::split":"2:11921:22998","prim@char":"1:11872:411","str::split_terminator":"2:11930:33572"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42713:7803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:7781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11992:22763":{"id":"2:11992:22763","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11877:33567":{"id":"2:11877:33567","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11875:33566"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:311":{"id":"2:11882:311","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11883:22966","`u8`":"1:11889:1478"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:31435":{"id":"2:11899:31435","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11900:31407"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42919:7787","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11903:31389":{"id":"2:11903:31389","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42937:7785","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:33574":{"id":"2:11942:33574","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11991:22762":{"id":"2:11991:22762","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:22990":{"id":"2:11894:22990","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11895:22991"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11893:33570":{"id":"2:11893:33570","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11878:1380","crate::ops::IndexMut":"2:2997:2180","str::slice_unchecked":"2:11892:33569"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:22991":{"id":"2:11895:22991","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11894:22990"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11930:33572":{"id":"2:11930:33572","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11573:7784","str::split":"2:11921:22998","prim@char":"1:11872:411","`DoubleEndedIterator`":"2:7167:119","str::rsplit_terminator":"2:11933:33573"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42695:7804","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11948:1905":{"id":"2:11948:1905","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11573:7784","`DoubleEndedIterator`":"2:7167:119","prim@char":"1:11872:411","str::matches":"2:11948:1905"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42849:7801","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:33577":{"id":"2:11954:33577","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11573:7784","`DoubleEndedIterator`":"2:7167:119","prim@char":"1:11872:411","str::rmatch_indices":"2:11957:33578"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42795:7799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11986:33588":{"id":"2:11986:33588","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:7784"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:7781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:22998":{"id":"2:11921:22998","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11573:7784","`DoubleEndedIterator`":"2:7167:119","prim@char":"1:11872:411","str::split_whitespace":"2:11899:31435","str::rsplit":"2:11927:23002"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42645:2295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11995:33590":{"id":"2:11995:33590","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4519:33590"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42944:7795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11880:28539":{"id":"2:11880:28539","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11141:7788"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11964:33581":{"id":"2:11964:33581","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:31407":{"id":"2:11900:31407","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11899:31435"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42928:7786","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11997:2097":{"id":"2:11997:2097","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4520:2097"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42953:2098","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:33569":{"id":"2:11892:33569","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11878:1380","str::slice_mut_unchecked":"2:11893:33570","crate::ops::Index":"2:2993:2179"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11898:22757":{"id":"2:11898:22757","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42631:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:23006":{"id":"2:11939:23006","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11872:411","str::splitn":"2:11936:23004","self::pattern":"2:11573:7784"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42767:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:7781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:31388":{"id":"2:11896:31388","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11872:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42615:7791","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11890:22965":{"id":"2:11890:22965","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5377:34241":{"id":"5:5377:34241","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11897:31403":{"id":"2:11897:31403","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11872:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42621:7790","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:33575":{"id":"2:11945:33575","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:7781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11968:33584":{"id":"2:11968:33584","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:7784"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11598:7779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11977:23012":{"id":"2:11977:23012","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:7784"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:7781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5372":{"id":"5:5372","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5373:34240","5:5374:8131","5:5377:34241","5:5380:34242","5:5388:34243","5:5389:34244","5:5390:2319","5:5391:22761","5:5392:22760"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5388:34243":{"id":"5:5388:34243","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:22759":{"id":"2:11993:22759","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:33579":{"id":"2:11960:33579","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11957:33578":{"id":"2:11957:33578","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11573:7784","`DoubleEndedIterator`":"2:7167:119","prim@char":"1:11872:411","str::match_indices":"2:11954:33577"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42813:7800","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:7781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:22964":{"id":"2:11888:22964","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11886:22963":{"id":"2:11886:22963","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40682:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11884:22962":{"id":"2:11884:22962","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40682:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5380:34242":{"id":"5:5380:34242","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11936:23004":{"id":"2:11936:23004","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:7784","str::rsplitn":"2:11939:23006"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42749:7773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5390:2319":{"id":"5:5390:2319","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:19524":{"id":"2:11913:19524","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40682:176","prim@char":"1:11872:411","self::pattern":"2:11573:7784"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11998:33591":{"id":"2:11998:33591","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4517:33591"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42962:7796","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5374:8131":{"id":"5:5374:8131","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:23002":{"id":"2:11927:23002","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11573:7784","`DoubleEndedIterator`":"2:7167:119","prim@char":"1:11872:411","str::split":"2:11921:22998"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42663:7769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:7781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11980:33586":{"id":"2:11980:33586","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:7784"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:7781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5391:22761":{"id":"5:5391:22761","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11993:22759"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:33571":{"id":"2:11902:33571","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42909:7798","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11974:23011":{"id":"2:11974:23011","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:7784"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:7780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3-20:0:1677":{"id":"0:3-20:0:1677","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[98,0],"end":[98,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"clap_builder","name":"clap_builder","id":"20:0:1677","glob":true}},"2:11881:33568":{"id":"2:11881:33568","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"17:12113:18690":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:9337:7942":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:5249:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:13516:19477":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:11363:2342":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:11045:2273":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:5998:15230":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:6179:15233":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"22:30:2374":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"17:12236:18697":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:5886:15225":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:2686:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:20861:2572":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:5322:2470":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"20:3956:19571":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"32:7076:21211":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_11"],"kind":"enum"},"1:1930:2218":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:2642:14303":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:46719:7686":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:48563:2643":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"31:3294:19717":{"crate_id":31,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"30:604:8913":{"crate_id":30,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"32:5888:21160":{"crate_id":32,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"2:46696:7685":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"20:1609:19597":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"30:2167:9841":{"crate_id":30,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:3996:2367":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:44263:30489":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:10402:15591":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:8025:15302":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:9917:15506":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"20:4347:19616":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"1:8080:2265":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:12550:18718":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"20:3396:37080":{"crate_id":20,"path":["clap_builder","builder","arg_settings","Flags"],"kind":"struct"},"6:4671:12376":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:12376:2646":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2498:73":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:13145:19442":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:6773:13479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:9086:7722":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:3356:2280":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:3209:2316":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13194:19446":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"32:7157:21218":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_restriction"],"kind":"struct"},"32:4762:21106":{"crate_id":32,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"29:181:19705":{"crate_id":29,"path":["io_lifetimes","views","FilelikeViewType"],"kind":"trait"},"1:10703:2265":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:10939:25205":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:4575:28595":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"30:5800:12396":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:4105:2391":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"20:1362:1958":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"20:1361:19580":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"30:806:8589":{"crate_id":30,"path":["libc","unix","FILE"],"kind":"enum"},"32:5560:21137":{"crate_id":32,"path":["linux_raw_sys","general","prctl_mm_map"],"kind":"struct"},"30:4865:12351":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:8737:2479":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:29803:2348":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:4028:7705":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:20648:2576":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:1655:1075":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:46758:7687":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:39512:7748":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:39724:8111":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:8420:15382":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"30:4805:12348":{"crate_id":30,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:535:36299":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"23:301:19640":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"11:0:1792":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"32:5799:21150":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"2:39237:7916":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"32:6649:21193":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"1:3450:27897":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"32:7318:21224":{"crate_id":32,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"6:4924:12405":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:4810:12393":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:3981:31240":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:7488:15281":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:7682:2206":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11969:18680":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"32:4806:21110":{"crate_id":32,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"17:13469:19472":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:3119:34870":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:5819:8509":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:3384:2267":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:3250:2313":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:41453:7724":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"11:1534:14211":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:6238:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"32:5843:21155":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"30:6721:12979":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:39979:8083":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:7543:15286":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:13842:19496":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"20:36:1958":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"14:160:14218":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"30:6936:13007":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"23:262:19643":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"32:5634:8910":{"crate_id":32,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"2:40883:2124":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:22829:2346":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:12576:18720":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:541:8915":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"20:3753:19557":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"2:20433:33056":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"30:8017:13471":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:2470:14296":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"30:5685:12390":{"crate_id":30,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12433:18710":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:4241:7881":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:4480:14847":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"32:6578:21184":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:4848:12398":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"30:9176:12565":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"20:3999:19581":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"32:5094:21125":{"crate_id":32,"path":["linux_raw_sys","general","ip_beet_phdr"],"kind":"struct"},"1:11893:1474":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:3133:27216":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:537:2075":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"30:5225:12369":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"32:5865:21158":{"crate_id":32,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"5:4197:2122":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:2941:1996":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"31:4725:37881":{"crate_id":31,"path":["rustix","process","prctl","MachineCheckMemoryCorruptionKillPolicy"],"kind":"enum"},"2:9535:32997":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:4482:12360":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:42849:7801":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"29:142:19702":{"crate_id":29,"path":["io_lifetimes","raw","IntoRawSocketlike"],"kind":"trait"},"17:8389:15381":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"32:5002:21119":{"crate_id":32,"path":["linux_raw_sys","general","group_source_req"],"kind":"struct"},"31:2854:19736":{"crate_id":31,"path":["rustix","backend","io","poll_fd","PollFlags"],"kind":"struct"},"11:659:2124":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:13812:19494":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:8269:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:863:2123":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:44558:30582":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:8573:15387":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10885:15408":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:8129:15307":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"20:1180:19578":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"16:6336:15242":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:9839:15453":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:8360:15380":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:2997:2180":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"30:1709:9818":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:4650:12375":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12178:18694":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5831:13008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:10139:7770":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:7633:2105":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:5565:2513":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:481:19537":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:5372:2473":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"30:5742:12393":{"crate_id":30,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"32:5292:21131":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_opt_hdr"],"kind":"struct"},"17:10015:15558":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:5724:15220":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:2691:2084":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12634:18723":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:1602:34641":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:7485:12566":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:9069:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:7293:15274":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"32:5805:21151":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"30:8134:9761":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:39348:7795":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:9312:15400":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:40731:8164":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:7336:7847":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:4311:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:9921:2123":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"11:353:35852":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"30:5412:12376":{"crate_id":30,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"31:4451:37828":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointEmulationControl"],"kind":"struct"},"2:10194:7771":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:3441:2219":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:43571:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"31:4969:37827":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeatureState"],"kind":"struct"},"5:7079:2124":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:1774:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8197:2336":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8725:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:43396:8288":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10080:15561":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:2378:14292":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13101:19423":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:6375:2503":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:2404:14293":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"31:534:2122":{"crate_id":31,"path":["rustix","backend","io","epoll","Iter"],"kind":"struct"},"13:226:35916":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:7787:2263":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"32:7097:21212":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_files_update"],"kind":"struct"},"1:8781:2522":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:7654:2141":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:8204:2396":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:2944:1997":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:2668:14304":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:12915:19429":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:40575:31215":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"20:4507:37084":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"16:5418:36255":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:10670:15602":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:13865:19498":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"32:4771:21107":{"crate_id":32,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"32:5282:21130":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_rt_hdr"],"kind":"struct"},"16:5779:15222":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11339:18166":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:5501:2475":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:44886:2616":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:6919:35951":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12072:18687":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"9:445:14088":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:4573:12369":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:9275:37014":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:3524:2122":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13659:19483":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:6474:15251":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:9523:15438":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11193:15623":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:13181:19445":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:7218:8868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11422:18171":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6662:15258":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:45312:2634":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:7669:15292":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:39532:2177":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:6802:13481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:6321:15240":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:10257:15524":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:3509:2127":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:45108:30513":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"31:3193:19734":{"crate_id":31,"path":["rustix","backend","io","types","SpliceFlags"],"kind":"struct"},"11:1845:2128":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:41117:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"20:734:37109":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"16:2319:14289":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"31:457:105":{"crate_id":31,"path":["rustix","backend","io","epoll","Context"],"kind":"trait"},"2:39265:7915":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"32:4674:21101":{"crate_id":32,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"17:8256:15358":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:21704:30552":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"11:60:35866":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"20:4162:19588":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"20:59:1955":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"1:8308:2438":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"30:4962:12356":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:11892:1477":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"29:183:19707":{"crate_id":29,"path":["io_lifetimes","views","FilelikeView"],"kind":"struct"},"6:7543:12574":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:4418:7891":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"30:9104:14014":{"crate_id":30,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"20:3866:19573":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"17:11544:18180":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:9174:1955":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:12483:18713":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4858:12399":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:39419:30530":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5976:13057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:22097:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:7859:15301":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"30:5136:12365":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"30:712:8919":{"crate_id":30,"path":["libc","unix","sigval"],"kind":"struct"},"17:11037:15414":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"32:7138:21216":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_probe_op"],"kind":"struct"},"1:10405:2314":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:6819:15263":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12403:18708":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:11159:2485":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"11:393:35867":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"20:4205:1952":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"6:573:8920":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"20:3644:37215":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"1:1571:2124":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"32:6343:13046":{"crate_id":32,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"16:6558:15256":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:6909:24625":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:2511:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"32:5070:21122":{"crate_id":32,"path":["linux_raw_sys","general","ip_auth_hdr"],"kind":"struct"},"1:8092:2269":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:9082:7725":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:1988:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"26:0:1932":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"2:46360:2635":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:10028:7762":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:7259:2442":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:21770:2350":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"20:4560:37244":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"32:6389:8917":{"crate_id":32,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"30:6961:13008":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13249:19451":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:48920:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:975:15441":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:8632:15359":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:11872:411":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:12194:18695":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:11861:18674":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:5797:36243":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:3266:2128":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:6623:27491":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"5:4157:2280":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11879:18675":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:9696:15443":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6124:13091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5054:12419":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4935:12407":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13426:19467":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:6588:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:11127:8250":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"23:348:19646":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"16:5741:15221":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:11323:8300":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:13564:19478":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:39994:8084":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:11471:18175":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12331:18703":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:40512:2333":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:13744:19489":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:623:34826":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:7572:36207":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:9488:15444":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:2786:8144":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"9:481:14087":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4780:12389":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:9596:15440":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:43388:8293":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11946:18679":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:5845:13047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"30:4979:12357":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"32:5602:21141":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"1:11440:7693":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:6298:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"27:0:1933":{"crate_id":27,"path":["anstyle"],"kind":"module"},"2:20401:32806":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:7931:2308":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11821:25415":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"32:5020:9831":{"crate_id":32,"path":["linux_raw_sys","general","in_pktinfo"],"kind":"struct"},"30:4998:12358":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:3061:2324":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"24:26:19658":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"1:7921:27513":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:3091:2181":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"10:36:35844":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:3782:14341":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"30:5993:12420":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"32:5245:8913":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_mreq"],"kind":"struct"},"2:2859:8156":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:4169:7737":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:39028:15312":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:42543:7766":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"30:8181:13473":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"30:9297:14043":{"crate_id":30,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:5721:2501":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:11871:926":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:8490:15384":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:46643:7682":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:11006:2480":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:11090:15417":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:8604:85":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"31:3846:14127":{"crate_id":31,"path":["rustix","backend","termios","types","Action"],"kind":"enum"},"17:8931:15361":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:9332:7941":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:6533:8958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:7635:15291":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:9721:15457":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:682:2104":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:10408:2316":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"32:4615:21094":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"5:3153:34876":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:1304:93":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:43277:7806":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:8937:27502":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:4684:2378":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:1604:9828":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"30:9234:12569":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11011:15362":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11821:15564":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:41317:2498":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:43376:8290":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"32:4528:21090":{"crate_id":32,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"2:41707:108":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"20:916:19561":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"2:39710:8110":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:3130:26058":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:3984:2364":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"30:9246:12571":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"30:2143:9839":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10491:15575":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:4992:27492":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:7579:2081":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:43172:7820":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:5976:15229":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:10142:15563":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"30:480:8535":{"crate_id":30,"path":["libc","unix","DIR"],"kind":"enum"},"5:3965:2127":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12046:18685":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:2626:34605":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4554:12368":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5735:13039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"32:4501:21087":{"crate_id":32,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"30:5478:12379":{"crate_id":30,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:1232:2140":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:4075:30016":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:13211:19447":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:7138:1999":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"23:153:19632":{"crate_id":23,"path":["anstream","lockable","Lockable"],"kind":"trait"},"2:39332:7911":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:6793:15262":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:9340:15401":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:599:37059":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"31:4668:37941":{"crate_id":31,"path":["rustix","process","prctl","TimingMethod"],"kind":"enum"},"16:6520:15254":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"32:4660:21100":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"2:3643:2124":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:41744:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4290:12340":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"20:1614:19600":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"2:38828:8159":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:39407:2224":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:7851:2161":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:0:1796":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:7498:15282":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:7556:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12622:15415":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:2804:8146":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"11:751:2127":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"30:5611:12386":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"20:3584:1948":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"6:123:8590":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:43380:8294":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:5677:15217":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:7239:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"31:3572:37931":{"crate_id":31,"path":["rustix","backend","process","types","MembarrierCommand"],"kind":"enum"},"1:8399:2460":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"11:1555:14212":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:6592:7852":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"31:3380:19732":{"crate_id":31,"path":["rustix","backend","io","types","PipeFlags"],"kind":"struct"},"2:38883:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:42928:7786":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"20:2718:2123":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"18:80:19511":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:2616:14302":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"32:5236:9823":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_in6"],"kind":"struct"},"16:3063:14319":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:6103:25172":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:636:37048":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:2862:14312":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:42953:2098":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:7743:15296":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"7:32:14059":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"30:8035:2429":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:2178:35850":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:881:2125":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"30:9158:12564":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:1578:2128":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:5571:15211":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"9:388:14089":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"10:44:14196":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:13309:19455":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"22:159:19626":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"32:5009:21120":{"crate_id":32,"path":["linux_raw_sys","general","group_filter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:45502:2610":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:6146:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:3678:2343":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:7162:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:12365:105":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"30:5277:12371":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:853:2135":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:6695:8079":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:10354:15527":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"30:641:8915":{"crate_id":30,"path":["libc","unix","iovec"],"kind":"struct"},"32:4822:21112":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage"],"kind":"struct"},"32:6932:21206":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_9"],"kind":"enum"},"17:11600:18184":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:44287:2639":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:6351:2124":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:3899:14386":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:42813:7800":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"32:7378:2356":{"crate_id":32,"path":["linux_raw_sys","general","ucred"],"kind":"struct"},"11:1866:2145":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"30:764:8922":{"crate_id":30,"path":["libc","unix","servent"],"kind":"struct"},"2:20863:2570":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:5688:2499":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"27:182:19673":{"crate_id":27,"path":["anstyle","color","Color"],"kind":"enum"},"23:286:19639":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"17:12461:18712":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:46110:2611":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:39653:8106":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:2975:7710":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"32:7214:9821":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr"],"kind":"struct"},"6:7431:14014":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:41037:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:5558:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:5032:14991":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:3246:7709":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:644:37036":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:9772:15462":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:5616:15213":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"20:67:1960":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"17:13667:19484":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"20:4407:37271":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"2:42909:7798":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:7087:2124":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:48972:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6243:36338":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"24:113:19657":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"32:6081:21168":{"crate_id":32,"path":["linux_raw_sys","general","tcp_fastopen_client_fail"],"kind":"enum"},"6:4469:12358":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"32:4510:21088":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"17:12138:18692":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:7522:8088":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4414:12351":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:42944:7795":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:0:1372":{"crate_id":1,"path":["std"],"kind":"module"},"17:11434:18172":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:2138:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4819:12394":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"30:8856:8868":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:25639:2347":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"20:4189:19605":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"4:0:1788":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"15:219:14241":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:45424:2622":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:6728:15260":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:3402:2266":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:304:19655":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"30:7228:13057":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"20:1109:19579":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"2:31780:2482":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:1550:9823":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:45007:30490":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:42472:7750":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:500:8911":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:8178:2446":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"30:1948:9830":{"crate_id":30,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"31:5075:37816":{"crate_id":31,"path":["rustix","process","prctl","PointerAuthenticationKeys"],"kind":"struct"},"9:234:2459":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1559:9824":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:39279:7917":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:9080:7724":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"32:5650:12344":{"crate_id":32,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"6:6035:13062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:43392:8287":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:11299:18164":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"30:7443:12254":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:11477:14245":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:10693:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:4998:12413":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"30:5857:12399":{"crate_id":30,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:11082:2523":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:30026:7846":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:4747:32938":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"30:5974:12416":{"crate_id":30,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:6904:2492":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:5697:2127":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4734:12383":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:9853:15507":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:4113:2392":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:43244:7824":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6442:15249":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:4257:2395":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"33:0:1938":{"crate_id":33,"path":["anstyle_query"],"kind":"module"},"17:9748:15398":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"32:4966:9820":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreq_source"],"kind":"struct"},"6:6694:13475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:41157:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12372:18706":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"23:382:2459":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"16:5693:15218":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:7515:2152":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"20:3657:37110":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"30:556:8911":{"crate_id":30,"path":["libc","unix","rlimit"],"kind":"struct"},"20:2980:37080":{"crate_id":20,"path":["clap_builder","builder","app_settings","Flags"],"kind":"struct"},"17:12033:18684":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:41784:72":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:10683:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"32:6399:21176":{"crate_id":32,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"1:11877:1350":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"31:4145:37932":{"crate_id":31,"path":["rustix","process","id","Uid"],"kind":"struct"},"16:7042:35971":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:1029:2139":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:39289:7918":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:10735:15616":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:2159:34958":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"30:5369:12375":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"11:2190:35847":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:43364:8286":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"30:7185:13055":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5850:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:43652:7699":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10838:25314":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:355:2093":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:42919:7787":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:42867:7802":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"23:434:19634":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"1:9027:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"32:4733:21103":{"crate_id":32,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"32:7167:21219":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_restriction__bindgen_ty_1"],"kind":"union"},"31:4196:37967":{"crate_id":31,"path":["rustix","process","id","Cpuid"],"kind":"struct"},"22:34:2295":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"5:6232:2127":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"31:4162:37841":{"crate_id":31,"path":["rustix","process","id","Gid"],"kind":"struct"},"2:46506:2638":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:9068:37028":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:4432:12353":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:11063:24870":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:907:2127":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:6411:2510":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4529:12365":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:2761:8121":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"23:170:2374":{"crate_id":23,"path":["anstream","raw","private","Sealed"],"kind":"trait"},"32:6686:21197":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe"],"kind":"struct"},"1:6135:25793":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:7050:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:3142:15526":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"31:3779:37906":{"crate_id":31,"path":["rustix","backend","process","types","RawCpuSet"],"kind":"struct"},"2:40765:2442":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:44518:2608":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:39662:8095":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"14:31:14218":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:4510:14853":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"30:6911:13046":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:2347:2246":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:7566:14043":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:20710:2569":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"11:1681:142":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"23:245:19642":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"1:11894:780":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:5695:2500":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"20:2909:37160":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"1:11854:25210":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"30:7282:13060":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:42767:7771":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"27:173:37656":{"crate_id":27,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"2:6844:2321":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"32:6640:21192":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"17:1787:15461":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:10619:2428":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:7532:12573":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"30:2093:9836":{"crate_id":30,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"11:1065:35845":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:9017:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:8789:2124":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:8788:15390":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:7244:36360":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:873:2124":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:42589:7797":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:9350:37027":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"18:590:31416":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:870:2122":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:4894:12402":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:43440:2560":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11556:18181":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13399:19464":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:9034:2219":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:10478:15576":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"30:1929:9829":{"crate_id":30,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:11882:633":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"32:5704:12338":{"crate_id":32,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"20:3808:1949":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"2:43579:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:10334:15398":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13169:19444":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:2906:34824":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"30:2130:9838":{"crate_id":30,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12059:18686":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:5962:13056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:9138:15396":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"32:5594:21140":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"17:9734:15456":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:45085:30514":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:39592:8101":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"30:4828:12349":{"crate_id":30,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:45342:2637":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:39326:2098":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:41969:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:4582:7903":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"30:5836:12398":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:46468:2618":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:507:37036":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"20:4390:19610":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"2:12241:7939":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:46544:2603":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:41960:7943":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:5475:7850":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"29:69:19686":{"crate_id":29,"path":["io_lifetimes","traits","FromFd"],"kind":"trait"},"1:8827:2520":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"32:5788:21149":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"2:10101:7769":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:48959:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4904:14959":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:420:14263":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:7088:8090":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"32:5521:21136":{"crate_id":32,"path":["linux_raw_sys","general","socket_state"],"kind":"enum"},"5:6563:7850":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"30:5633:12387":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:3169:2314":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"29:0:1935":{"crate_id":29,"path":["io_lifetimes"],"kind":"module"},"2:21591:31374":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:2205:2120":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:12189:32700":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"26:41:19667":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"2:2749:7706":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"32:5029:9822":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_in"],"kind":"struct"},"17:9653:15473":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"30:5536:12382":{"crate_id":30,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4375:12347":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:6371:2109":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"22:130:19625":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"30:6986:13047":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:5811:15223":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:3988:2365":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:11813:15566":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"32:6785:21204":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_8"],"kind":"enum"},"6:4592:12370":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:4577:28597":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"32:5580:21138":{"crate_id":32,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"32:6202:21171":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_6"],"kind":"enum"},"17:10303:15519":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:20830:2374":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"32:6623:21190":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"2:39773:8113":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:43622:2645":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:42645:2295":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"32:5814:21152":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"17:13651:19482":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"32:5729:8958":{"crate_id":32,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"2:30226:30624":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"30:9212:12568":{"crate_id":30,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"32:6737:21201":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_4"],"kind":"union"},"2:2808:8145":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:43614:2644":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:3783:2344":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"32:4558:14042":{"crate_id":32,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"17:8521:15385":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"32:5754:21145":{"crate_id":32,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"17:1947:15455":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:2578:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:31816:27354":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"30:4945:12355":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:2830:14311":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"32:7126:21215":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_update2"],"kind":"struct"},"17:13135:19441":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"20:4235:19613":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"2:2792:8143":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"32:7356:13044":{"crate_id":32,"path":["linux_raw_sys","general","msghdr"],"kind":"struct"},"1:2219:2242":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:11888:731":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:10615:15600":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:41197:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"32:5896:21161":{"crate_id":32,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"15:180:14236":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:9990:28069":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:3194:33275":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"30:4770:12347":{"crate_id":30,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10897:15409":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4406:12350":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"20:2895:37221":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"1:11887:735":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"31:3001:19724":{"crate_id":31,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"2:2301:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:653:8970":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:44718:2633":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:7775:2262":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:39008:7863":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:850:2122":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:10125:15538":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10923:15410":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:959:2135":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:10649:15611":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:11902:18677":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"30:8070:9784":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"32:176:19771":{"crate_id":32,"path":["linux_raw_sys","general","__BindgenUnionField"],"kind":"struct"},"20:3853:19577":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"24:290:19654":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"2:40618:2345":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:7264:7827":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"30:5883:12408":{"crate_id":30,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"31:4847:37878":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeature"],"kind":"enum"},"30:5033:12360":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"20:3662:181":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"32:5696:8911":{"crate_id":32,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"11:815:2132":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"30:7042:13050":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"32:5748:8919":{"crate_id":32,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"20:4267:19614":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"17:13324:19457":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:13879:19499":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:41460:7725":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"32:5041:12382":{"crate_id":32,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"17:13678:19485":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"9:352:14104":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:4449:12355":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"32:4723:12397":{"crate_id":32,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"2:2504:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:42795:7799":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:42203:7751":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"32:4621:21095":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"6:4690:12378":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"30:2005:9832":{"crate_id":30,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"14:202:7825":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:40489:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:4715:12381":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4903:12403":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:43029:7814":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"30:5922:12412":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:6688:13474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"32:4536:8791":{"crate_id":32,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"31:3933:37831":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdFlags"],"kind":"struct"},"32:5964:21162":{"crate_id":32,"path":["linux_raw_sys","general","tcphdr"],"kind":"struct"},"1:1054:2137":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:11879:1460":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"32:5990:21164":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_4"],"kind":"enum"},"16:7478:15280":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"24:89:19650":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"17:9409:15425":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:2808:14310":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:22295:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"32:4567:9838":{"crate_id":32,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"32:5913:12979":{"crate_id":32,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"2:39601:8102":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:13857:19497":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:11843:2107":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:2459:7933":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"30:5903:12410":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:4568:14863":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"20:2696:2122":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"2:39554:8092":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:42498:7748":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:119:8589":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"32:5765:21146":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"30:8295:13477":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:10817:26176":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"14:165:14219":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:5557:15210":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:42937:7785":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:5015:12415":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"27:334:19678":{"crate_id":27,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"2:2829:8149":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:20456:33051":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"3:0:435":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:6724:34648":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:6164:34648":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:5955:13055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:6045:13063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:6566:13469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8160:2332":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"32:4796:21109":{"crate_id":32,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"17:9876:15508":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:6278:34641":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:42663:7769":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"30:5015:12359":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"20:1607:19596":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"2:39985:2322":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:7837:15300":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:10707:7763":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"32:5079:21123":{"crate_id":32,"path":["linux_raw_sys","general","ip_esp_hdr"],"kind":"struct"},"1:8376:2459":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:43400:8306":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"30:6783:13040":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"30:7302:13061":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"30:5298:12372":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6764:13478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4612:12372":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:12488:2168":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"32:4547:13469":{"crate_id":32,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"2:8179:2445":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:7659:2142":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:44540:2612":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:4318:7888":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"32:7219:8918":{"crate_id":32,"path":["linux_raw_sys","general","linger"],"kind":"struct"},"2:41679:31214":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:40546:2335":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:2524:14298":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:4865:990":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:1832:2122":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11220:15624":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:7012:2127":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:4757:14932":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:7526:12572":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"31:4179:37907":{"crate_id":31,"path":["rustix","process","id","Pid"],"kind":"struct"},"6:6788:13480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"20:3933:19566":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"6:4974:12411":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"30:7425:13090":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:1520:9819":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:681:19531":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:1068:2138":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:4773:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:2215:2241":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"32:6452:21178":{"crate_id":32,"path":["linux_raw_sys","general","old_utsname"],"kind":"struct"},"6:4915:12404":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:8718:15364":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:386:15375":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:11885:733":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:7557:15287":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10598:15412":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"30:2027:9833":{"crate_id":30,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4786:12390":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:8599:78":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11884:736":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"11:861:2136":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:7129:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"32:5104:21126":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_2"],"kind":"enum"},"32:6998:21210":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_10"],"kind":"enum"},"6:6743:13477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:39492:2238":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:4664:2356":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"32:6108:21169":{"crate_id":32,"path":["linux_raw_sys","general","tcp_ca_state"],"kind":"enum"},"9:174:14191":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:4840:12397":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:42461:7760":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"30:8203:13474":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"30:5987:12419":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"14:0:1794":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"30:7355:13063":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12902:19428":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:7559:30850":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:39435:8226":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"30:5763:12394":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:2592:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"18:96:19512":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"32:6473:21179":{"crate_id":32,"path":["linux_raw_sys","general","new_utsname"],"kind":"struct"},"11:320:35854":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:4389:34643":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:41944:7944":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:7835:27220":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:8275:2376":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"18:582:7929":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:1048:34887":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"20:4222:19607":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"1:5441:2474":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:9028:15394":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"30:2074:9835":{"crate_id":30,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:2679:1992":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:2896:34888":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:1372:2124":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:44595:30580":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11770:18670":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:5336:2471":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:8859:2521":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:5743:13040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"32:5610:21142":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"6:5034:12416":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:6334:27491":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:8971:24728":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:1567:2122":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11410:18170":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"9:52:14107":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:7240:13853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6767:15261":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:1850:1955":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:7077:15272":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:42372:31913":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:8907:2074":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:21756:2351":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:42199:30354":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"30:4788:12189":{"crate_id":30,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"32:4957:9819":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreqn"],"kind":"struct"},"16:4702:14925":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10416:15603":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"32:7369:13045":{"crate_id":32,"path":["linux_raw_sys","general","cmsghdr"],"kind":"struct"},"1:6487:2507":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13041:19436":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:2934:1994":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:4818:14945":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:9032:2523":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:6554:2512":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:9022:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:9453:15428":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"32:6711:21199":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_2"],"kind":"union"},"6:5983:13058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:30596:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:2397:34601":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"20:4305:37075":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"16:7683:15293":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:690:19532":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7509:15283":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"20:3652:37226":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"17:8598:15388":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"32:5658:8920":{"crate_id":32,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"2:20673:2565":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"30:1781:9822":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:4728:14927":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:1901:2217":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"11:1120:14209":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:39563:8093":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:247:37019":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"32:4599:21093":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"32:4651:21099":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"31:4360:37823":{"crate_id":31,"path":["rustix","process","prctl","UnalignedAccessControl"],"kind":"struct"},"6:554:8917":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:1827:2197":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"11:1044:14207":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:9218:15398":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"32:6717:21200":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_3"],"kind":"union"},"1:936:2132":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:4969:14976":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"32:6413:8915":{"crate_id":32,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"1:11838:25789":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:9973:15483":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13791:19492":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:953:34641":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:7103:15273":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:8143:2291":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:5996:13060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:11721:18669":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:1509:9817":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"31:2625:19749":{"crate_id":31,"path":["rustix","backend","io","epoll","CreateFlags"],"kind":"struct"},"2:48933:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:5766:2509":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"23:63:19652":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"2:7125:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"30:5725:12392":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:4624:14871":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:42553:7767":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:11299:25187":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:1704:9837":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"31:4686:37899":{"crate_id":31,"path":["rustix","process","prctl","EndianMode"],"kind":"enum"},"16:2594:14301":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:41991:31242":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:5402:14255":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:2253:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:10740:7764":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:2923:2158":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:44355:2607":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"30:5394:2356":{"crate_id":30,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:9895:15480":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"20:3624:37085":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"30:7953:8791":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"32:5221:14043":{"crate_id":32,"path":["linux_raw_sys","general","in6_addr"],"kind":"struct"},"27:347:19679":{"crate_id":27,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"6:4602:12371":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"31:3822:19764":{"crate_id":31,"path":["rustix","backend","termios","types","QueueSelector"],"kind":"enum"},"1:8474:2463":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12259:18698":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:21607:30483":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"32:5880:9841":{"crate_id":32,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"2:3209:7708":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:6190:2513":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"20:3681:2074":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"17:12282:18699":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:2306:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:39734:8096":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:1735:31201":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"32:4635:21097":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"17:10052:15539":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:1571:9825":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:5181:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:45266:2630":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"32:6660:21194":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"2:4127:7894":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:12085:18688":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:8753:15389":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"30:8221:13475":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:7456:15377":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:6854:15264":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"20:4437:19609":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"20:0:1677":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"2:43209:7821":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"11:1628:35858":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:2501:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:7514:12570":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6390:15246":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:3466:2289":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"30:7021:13049":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6327:15241":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4277:12339":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"31:4339:37885":{"crate_id":31,"path":["rustix","process","prctl","DumpableBehavior"],"kind":"enum"},"30:2151:9840":{"crate_id":30,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:5387:1948":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:3815:14350":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"32:4942:9817":{"crate_id":32,"path":["linux_raw_sys","general","in_addr"],"kind":"struct"},"32:7298:9758":{"crate_id":32,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"1:1991:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13219:19448":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:4445:14836":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"31:0:1936":{"crate_id":31,"path":["rustix"],"kind":"module"},"2:46422:2600":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:3640:14324":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:10643:28607":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"20:3895:19575":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"32:7338:21225":{"crate_id":32,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"30:7502:13092":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"32:5712:13854":{"crate_id":32,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"2:41439:7715":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"18:727:19534":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:12168:7938":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:44439:2632":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:1971:2161":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"32:5739:12263":{"crate_id":32,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"16:6376:15245":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:641:2101":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:43223:7822":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:1652:9832":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:44309:2627":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"32:6590:21186":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"2:38843:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:387:35865":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"32:5263:12380":{"crate_id":32,"path":["linux_raw_sys","general","in6_pktinfo"],"kind":"struct"},"1:3974:2363":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"18:521:19536":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:6201:15234":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"31:4542:37822":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointExceptionMode"],"kind":"struct"},"17:10705:15614":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:2575:2297":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:4127:2280":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:4392:2083":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:4372:7890":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12563:18719":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:7697:15294":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"22:5:2357":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"2:20435:33054":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:1723:9839":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:2053:2137":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"20:4174:19589":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"20:4470:37245":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"17:10068:15560":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:5631:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"11:119:35860":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:9557:15398":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:7666:2205":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:562:15377":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:12433:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:40957:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:1583:2143":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:41689:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:7245:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5041:12417":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4624:12373":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:7467:15279":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"30:658:8916":{"crate_id":30,"path":["libc","unix","pollfd"],"kind":"struct"},"32:7261:21223":{"crate_id":32,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"17:11785:18671":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:2736:1993":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:4399:12349":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:2683:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:3300:14321":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:10026:15559":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:1187:2137":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13433:19468":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"32:5872:21159":{"crate_id":32,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:21469:31175":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:3446:14322":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:46681:7684":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:7711:15295":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:4542:12367":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:7134:2120":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10569:15574":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:39963:31364":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:13689:19486":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:39610:31365":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:43080:7817":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:4308:7887":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:11672:22913":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:2833:25178":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:8458:2462":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:1663:9833":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:11889:1478":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:8773:2122":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"30:2052:9834":{"crate_id":30,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:8283:15378":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:1789:2186":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:6012:35018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:6818:13483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:11286:8298":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:20585:2574":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:9989:7775":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13024:19434":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"32:4813:21111":{"crate_id":32,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"2:4096:7893":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"9:502:14091":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"18:624:37039":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"30:8163:13472":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"32:5251:21128":{"crate_id":32,"path":["linux_raw_sys","general","in6_flowlabel_req"],"kind":"struct"},"2:31820:8207":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:9822:15467":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"32:5666:8970":{"crate_id":32,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"18:0:1798":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:50273:31205":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"20:4452:19608":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"2:40748:2123":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:6512:8091":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:7246:13854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1527:9820":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:11484:14245":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:9078:7715":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"23:319:19655":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"5:7028:34878":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:624:2099":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:10127:2484":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"30:1869:9826":{"crate_id":30,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10527:15607":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:7803:15299":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"32:6597:21187":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"32:4742:21104":{"crate_id":32,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"5:3174:2146":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10316:15520":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10691:15613":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:1731:9840":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"29:147:19703":{"crate_id":29,"path":["io_lifetimes","raw","FromRawFilelike"],"kind":"trait"},"2:44417:2628":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:11598:7779":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13385:19463":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:7524:25192":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:3993:31237":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:8195:15360":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:39694:8109":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"30:5893:12409":{"crate_id":30,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4636:12374":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:38781:7711":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:2615:2307":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:834:2134":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:9084:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"30:7345:13062":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:9297:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"30:5194:12368":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:591:2096":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"29:127:19699":{"crate_id":29,"path":["io_lifetimes","raw","AsRawFilelike"],"kind":"trait"},"17:9566:15399":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:8896:25796":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"30:7993:13470":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:9946:15482":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:1138:2140":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:42432:7757":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"32:7278:9757":{"crate_id":32,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"30:5668:12389":{"crate_id":30,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:10303:2478":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:3459:2268":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"30:4749:12346":{"crate_id":30,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:11362:8299":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:4846:2424":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"29:19:19682":{"crate_id":29,"path":["io_lifetimes","portability","AsFilelike"],"kind":"trait"},"32:6325:21174":{"crate_id":32,"path":["linux_raw_sys","general","tcp_zerocopy_receive"],"kind":"struct"},"18:652:37036":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:44387:2640":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11069:15416":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:13461:19471":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:43051:7815":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13233:19449":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:1609:9829":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:2231:96":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:1618:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:7020:2151":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10721:15579":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:2572:14300":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13033:19435":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:9946:2295":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:3211:2317":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"11:810:2129":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"30:621:8914":{"crate_id":30,"path":["libc","unix","hostent"],"kind":"struct"},"17:12522:18716":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11573:18182":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13639:19481":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"31:479:19745":{"crate_id":31,"path":["rustix","backend","io","epoll","Owning"],"kind":"struct"},"31:4868:37830":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeatureControl"],"kind":"struct"},"6:6004:13061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:6087:2646":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:8957:15273":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:4415:2399":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10681:15612":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"11:2069:2138":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"23:231:19641":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"2:5914:8115":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:3114:2144":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6022:15231":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"32:6138:21170":{"crate_id":32,"path":["linux_raw_sys","general","tcp_info"],"kind":"struct"},"16:5594:15212":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:2817:8151":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:6836:13484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:6867:26719":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:48985:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8914:24930":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:5920:15226":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:7686:27354":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"5:805:2148":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:4400:14815":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:6943:15269":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:39402:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"14:187:14226":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:2910:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:3936:2280":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"32:6569:21183":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"30:5706:12391":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7519:15284":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:7319:2128":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"29:67:19687":{"crate_id":29,"path":["io_lifetimes","traits","IntoFd"],"kind":"trait"},"11:98:35864":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11319:18165":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:3511:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"11:274:35861":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9148:37013":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:482:8908":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:965:2136":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:6484:2506":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"32:5946:12254":{"crate_id":32,"path":["linux_raw_sys","general","sysinfo"],"kind":"struct"},"2:40012:8087":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:3872:14383":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"32:5835:21154":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"2:41077:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:562:8918":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:13082:19439":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"32:6677:21196":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"17:11484:18176":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:8231:2398":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:1203:2139":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:1595:2145":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"30:7002:13048":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"29:47:19691":{"crate_id":29,"path":["io_lifetimes","portability","FromFilelike"],"kind":"trait"},"5:4356:2280":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:43635:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"24:192:14127":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"1:9971:2197":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"30:7906:8958":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"31:4746:37897":{"crate_id":31,"path":["rustix","process","prctl","VirtualMemoryMapAddress"],"kind":"enum"},"20:4296:37077":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"17:12449:18711":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:44864:2613":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:2373:2256":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:9070:2555":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"32:5642:8909":{"crate_id":32,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"2:38859:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"31:466:19744":{"crate_id":31,"path":["rustix","backend","io","epoll","Borrowing"],"kind":"struct"},"2:11141:7788":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:7042:2124":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:3248:2312":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:6557:8791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:44788:2621":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4953:12409":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:42695:7804":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"30:573:8912":{"crate_id":30,"path":["libc","unix","rusage"],"kind":"struct"},"32:6965:21208":{"crate_id":32,"path":["linux_raw_sys","general","io_cqring_offsets"],"kind":"struct"},"29:56:19692":{"crate_id":29,"path":["io_lifetimes","portability","FromSocketlike"],"kind":"trait"},"30:1744:9820":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:853:2149":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:10922:19680":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:3616:2339":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:1068:34979":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"32:4843:21115":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_1"],"kind":"enum"},"1:2345:2245":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"32:6043:21166":{"crate_id":32,"path":["linux_raw_sys","general","tcp_repair_window"],"kind":"struct"},"2:2834:8150":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:4904:2280":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:9108:37026":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"30:486:8907":{"crate_id":30,"path":["libc","unix","group"],"kind":"struct"},"2:2839:8152":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:7843:2306":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:21749:31427":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:3380:7855":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:9545:15436":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:45762:2623":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"11:632:2122":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"20:4329:37071":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"17:13265:19453":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:9567:30632":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:5305:15192":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:20661:2374":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:4314:12342":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10428:15604":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"27:127:37657":{"crate_id":27,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"2:11799:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:0:1797":{"crate_id":17,"path":["object"],"kind":"module"},"6:4381:12189":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:11111:8248":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:1677:9834":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:45578:2617":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:568:8919":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:5104:15015":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4461:12357":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:44910:2598":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"30:1687:8970":{"crate_id":30,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12770:19424":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:7827:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:2898:34604":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13411:19465":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:154:14266":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:7029:36302":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"30:783:8923":{"crate_id":30,"path":["libc","unix","protoent"],"kind":"struct"},"17:13777:19491":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"30:6763:13039":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:1589:2144":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6254:15237":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:13477:19473":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"14:221:14228":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:45548:2614":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:1218:2138":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:9265:15399":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:9051:2273":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:4326:34643":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:2780:8141":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"14:7:14218":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6575:15257":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11258:18162":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"11:697:2131":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"18:531:19540":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:5847:15224":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:40867:2122":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:494:8910":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:1985:2162":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:3181:7876":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:7588:15288":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:7926:25774":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"11:2080:2139":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:3164:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:31829:8122":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:4682:2377":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:1412:2129":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:1077:2139":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:1032:34978":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:4596:14867":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:11593:7781":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"31:5194:37936":{"crate_id":31,"path":["rustix","process","sched","CpuSet"],"kind":"struct"},"2:41952:31437":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:2742:14307":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:10208:7774":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"32:6357:14014":{"crate_id":32,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"16:5708:15219":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:3678:2162":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8944:25773":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:11644:7808":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:7449:15278":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"30:8896:13854":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:7437:15277":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:8843:2518":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"30:1693:9817":{"crate_id":30,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"24:255:1958":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"30:1762:9821":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13356:19460":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:40875:2123":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"20:3308:1951":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"2:39685:8108":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:3686:19559":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"17:13257:19452":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"32:5626:21144":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"2:20704:2567":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"30:9194:12566":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:1403:2126":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:1518:14210":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6132:15232":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:7209:2221":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:7767:15298":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:1453:2160":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:40807:8235":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"30:5650:12388":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"32:4988:21117":{"crate_id":32,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"11:762:2128":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:3136:27215":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:39228:7879":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:2478:2304":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"31:4024:37824":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdTimerFlags"],"kind":"struct"},"2:46582:7677":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:2495:74":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:595:8923":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:41446:7716":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"30:6813:13041":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12126:18691":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:2694:14305":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"12:0:1793":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"34:32:22679":{"crate_id":34,"path":["strsim","StringWrapper"],"kind":"struct"},"5:279:2000":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:46617:7680":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:6430:34641":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4387:12348":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"11:1859:2144":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:2824:8148":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:670:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:39388:7909":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"32:4827:21113":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1"],"kind":"union"},"23:163:19633":{"crate_id":23,"path":["anstream","raw","RawStream"],"kind":"trait"},"2:20751:2570":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11060:15415":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:21683:30525":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"30:7246:13058":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:1439:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"27:261:19675":{"crate_id":27,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"1:11890:1475":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"32:7204:21221":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_getevents_arg"],"kind":"struct"},"2:42423:7758":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:538:19541":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:3681:2342":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:7258:25775":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:9867:25385":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:45612:2599":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:43066:7816":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:2764:14308":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:1695:9836":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"11:444:140":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:4963:12410":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:39042:7888":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:11897:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:6218:15235":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:8858:15392":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"30:539:8910":{"crate_id":30,"path":["libc","unix","timespec"],"kind":"struct"},"1:8149:2341":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:11615:18185":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:8130:2294":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"26:21:1953":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"17:8548:15386":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:11186:25327":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"20:3777:19563":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"30:7074:13051":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"21:0:1927":{"crate_id":21,"path":["bitflags"],"kind":"module"},"2:39309:7910":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:10994:2479":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:7491:12567":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"29:182:19706":{"crate_id":29,"path":["io_lifetimes","views","SocketlikeViewType"],"kind":"trait"},"20:3914:19576":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"20:4196:19618":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"5:4808:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11459:18174":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4681:12377":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:38925:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:11870:368":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:2458:2374":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"30:4905:12353":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"31:3909:37935":{"crate_id":31,"path":["rustix","backend","time","types","DynamicClockId"],"kind":"enum"},"2:9044:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:55:14256":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"5:3743:2128":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:7505:25185":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:2541:2305":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:9826:15454":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"32:5781:21148":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"2:39301:7796":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"20:3860:19572":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"5:1444:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:40824:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"28:5:2301":{"crate_id":28,"path":["is_terminal","IsTerminal"],"kind":"trait"},"17:9866:15474":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:574:37036":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12419:18709":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:4097:2390":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:30624:7929":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:4565:2362":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:1716:2385":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:8142:15308":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:38903:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:8249:2427":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:39001:8161":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:10660:15415":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"30:5256:12370":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:2931:14315":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:11895:1531":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"20:3796:19587":{"crate_id":20,"path":["clap_builder","builder","styled_str","Styles"],"kind":"struct"},"2:1721:8185":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"30:5154:12366":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:9498:15443":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:5181:34641":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:45188:2641":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:4037:2123":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"32:6749:21203":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_7"],"kind":"enum"},"17:10283:15523":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"30:5981:12418":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"32:4588:21092":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"13:0:1787":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:3876:2358":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"30:8458:13484":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:46562:7675":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"30:8105:9758":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"7:0:1521":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:13803:19493":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13499:19475":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:7179:2223":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:1541:9822":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"30:7143:13053":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:40997:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:8072:15304":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:6639:9758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4740:12384":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:4702:12379":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:13121:19440":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:39222:2098":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:564:19542":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"30:5094:12363":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12592:18721":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:13625:19480":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:12158:18693":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:942:2133":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:11201:24267":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:4237:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"25:23:14127":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"2:9074:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:8285:7780":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:48998:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9959:15510":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"8:0:1789":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:3765:34641":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:42184:8279":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"34:0:1939":{"crate_id":34,"path":["strsim"],"kind":"module"},"2:22394:2352":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:40680:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:6488:15252":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:6680:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:2870:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:45968:2642":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:42511:7749":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"30:5496:12380":{"crate_id":30,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4492:12361":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:2361:2250":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:8326:2458":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"20:3718:19562":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"1:737:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"29:28:19688":{"crate_id":29,"path":["io_lifetimes","portability","AsSocketlike"],"kind":"trait"},"30:4884:12352":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:5455:8103":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12307:18701":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:4930:12406":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:12980:19432":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"31:5306:37952":{"crate_id":31,"path":["rustix","process","wait","WaitStatus"],"kind":"struct"},"16:8180:15311":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13506:19476":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:2895:7701":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"20:54:1957":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"17:11891:18676":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"29:42:19694":{"crate_id":29,"path":["io_lifetimes","portability","IntoSocketlike"],"kind":"trait"},"32:6035:21165":{"crate_id":32,"path":["linux_raw_sys","general","tcp_repair_opt"],"kind":"struct"},"5:3107:2122":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"25:53:2459":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"20:4007:31200":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"2:44834:2609":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"23:333:19645":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"32:5332:21135":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_3"],"kind":"enum"},"16:7065:36287":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"32:7117:21214":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_update"],"kind":"struct"},"2:43452:8307":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:20388:7929":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"30:4651:12342":{"crate_id":30,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:4738:2379":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:6997:2124":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"30:8890:13853":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"32:6542:21181":{"crate_id":32,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"16:2502:14297":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:21282:32804":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:1617:9830":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"27:210:19674":{"crate_id":27,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"16:4932:14963":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:40529:2334":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"20:4546:19591":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"1:11875:1037":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4271:12338":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:39572:8099":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:7253:7826":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:5803:2497":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:43234:7823":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"22:114:19624":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"6:6098:13090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"20:3703:19560":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"1:5572:2514":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:13066:19438":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"20:63:1959":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"20:3327:19558":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"17:12293:18700":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:13344:19459":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:6981:15270":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:1422:2130":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"32:5825:21153":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"30:5875:12407":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:6535:36309":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"32:5300:21132":{"crate_id":32,"path":["linux_raw_sys","general","rt2_hdr"],"kind":"struct"},"16:7317:36358":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12923:19430":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"32:6373:21175":{"crate_id":32,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"2:2851:8154":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:5504:2477":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:770:95":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:4363:7889":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:10661:25425":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"32:4467:21086":{"crate_id":32,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"17:13443:19469":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"32:7106:21213":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_register"],"kind":"struct"},"1:11886:734":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5935:13053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:10215:28070":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:9453:8260":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:2938:1995":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"30:4558:9981":{"crate_id":30,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10635:15601":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"18:614:37052":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"32:4713:21102":{"crate_id":32,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"2:9222:31912":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:6717:14233":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:7366:15275":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:10180:7773":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:5912:2513":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:6712:13476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:2388:1805":{"crate_id":1,"path":["std","io"],"kind":"module"},"32:6298:21172":{"crate_id":32,"path":["linux_raw_sys","general","tcp_md5sig"],"kind":"struct"},"1:10411:2312":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:4327:12343":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"32:4519:21089":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"17:10840:15406":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"22:0:1928":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"32:6585:21185":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"17:13159:19443":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13316:19456":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"30:7925:9757":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"30:2113:9837":{"crate_id":30,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:7652:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:39633:8105":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:8992:24628":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"32:5049:21121":{"crate_id":32,"path":["linux_raw_sys","general","iphdr"],"kind":"struct"},"17:8443:15383":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:39482:2239":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"25:0:1931":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"2:43384:8292":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:7190:1998":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:264:34641":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:7222:2222":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:1433:2131":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"30:809:8590":{"crate_id":30,"path":["libc","unix","fpos_t"],"kind":"enum"},"30:522:8909":{"crate_id":30,"path":["libc","unix","timeval"],"kind":"struct"},"6:4756:12386":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:2682:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:8953:15393":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:4726:12382":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:11993:18681":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11372:18168":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:43145:7819":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:1978:15479":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"27:313:19677":{"crate_id":27,"path":["anstyle","effect","Effects"],"kind":"struct"},"20:4479:27517":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"29:37:19693":{"crate_id":29,"path":["io_lifetimes","portability","IntoFilelike"],"kind":"trait"},"1:5928:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"20:51:1956":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"30:5171:12367":{"crate_id":30,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"32:5586:21139":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"1:4579:28599":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:46571:7676":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5767:13042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:10222:7772":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:12318:18702":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:3169:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:5005:12414":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4422:12352":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:4680:2373":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:8667:14255":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:6679:13473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:5643:15215":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"30:1726:9819":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:2551:25174":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"30:5594:12385":{"crate_id":30,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"30:1845:9825":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:7092:8089":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:8109:15306":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:21376:2374":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"34:72:22693":{"crate_id":34,"path":["strsim","StrSimError"],"kind":"enum"},"2:2812:8147":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11355:18167":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:5868:13050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:6656:9761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4301:12341":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:39675:8107":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:43419:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12607:18722":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"32:5983:21163":{"crate_id":32,"path":["linux_raw_sys","general","tcp_word_hdr"],"kind":"union"},"1:1600:2146":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:2363:2251":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"30:8377:13480":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:9577:15442":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:6540:2511":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"31:356:37970":{"crate_id":31,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"1:1791:2187":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12345:18704":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:487:25181":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:21720:30527":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:474:8907":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:4643:2399":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"30:676:8917":{"crate_id":30,"path":["libc","unix","winsize"],"kind":"struct"},"17:10761:15403":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:39449:2225":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:39035:30694":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:2210:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:39355:7912":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"20:4287:37078":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"6:5060:12420":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:13367:19461":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"32:7174:21220":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_12"],"kind":"enum"},"2:20622:2575":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"15:198:14237":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"30:745:8921":{"crate_id":30,"path":["libc","unix","tms"],"kind":"struct"},"6:5786:13044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:1706:2128":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:7529:15285":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:5705:12979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"20:4620:37325":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"1:9371:2262":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"30:1822:9824":{"crate_id":30,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"30:9252:12573":{"crate_id":30,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:561:2077":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"32:5773:21147":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"31:438:7888":{"crate_id":31,"path":["rustix","backend","io","epoll","Ref"],"kind":"struct"},"2:46602:7679":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:488:8909":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"23:402:19635":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"2:2672:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:5963:15228":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:644:2102":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"30:4675:12343":{"crate_id":30,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:8772:32068":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"30:7973:13469":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"30:695:8918":{"crate_id":30,"path":["libc","unix","linger"],"kind":"struct"},"17:10000:15557":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11924:18678":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9986:15511":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:7017:30013":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:8485:2464":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:21575:30584":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:10933:25183":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:4509:2417":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11153:25777":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:11587:7782":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"23:208:19644":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"17:11532:18179":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"30:5555:12383":{"crate_id":30,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:41237:84":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11628:18186":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"31:2713:19750":{"crate_id":31,"path":["rustix","backend","io","epoll","EventFlags"],"kind":"struct"},"2:14:1908":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:40917:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:2845:8153":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:5655:15216":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:3140:2145":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:8971:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:8882:2502":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"20:4530:19592":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"17:8683:15363":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:46666:7683":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"20:4492:37087":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"1:7467:26713":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:10626:15610":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:1341:2122":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:10798:15404":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"30:5938:12413":{"crate_id":30,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:7016:36266":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:4872:14951":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"32:6614:21189":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"1:508:2070":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:1840:2127":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:547:8916":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"11:738:2126":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:4437:2400":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:30120:30549":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:1747:9841":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"29:132:19700":{"crate_id":29,"path":["io_lifetimes","raw","AsRawSocketlike"],"kind":"trait"},"11:2198:35848":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"20:4317:37073":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"17:10505:15606":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:242:37011":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"23:366:37573":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"20:4647:1953":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"30:7265:13059":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:210:7714":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:3078:94":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:4329:2389":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:3329:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:10823:15405":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"30:6893:13045":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:9617:15435":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:6293:15238":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"25:89:1958":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"2:9897:2122":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:9754:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5630:15214":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:41762:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"20:2875:1947":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"2:41999:31241":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:3882:2357":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:7058:34607":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:9670:15459":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:5225:7741":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:13821:19495":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:41719:31200":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:9188:37029":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:5773:13043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:1809:2165":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"20:4613:2470":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"9:325:14143":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:506:8912":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"31:4791:37953":{"crate_id":31,"path":["rustix","process","prctl","PrctlMmMap"],"kind":"struct"},"2:44740:2636":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:8823:15391":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:1085:14208":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:2879:14313":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6616:9784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:5513:8094":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:11578:7780":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:41981:2459":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"32:5618:21143":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"1:8064:2321":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"32:6560:21182":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"15:0:1795":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:10545:15413":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13053:19437":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:2546:14299":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"20:4338:37076":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"17:13612:19479":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13376:19462":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:5797:13045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:5025:2497":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:11896:1112":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:44333:2619":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:8416:2461":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"7:79:14066":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:2448:14295":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:7810:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:21378:2568":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:12006:18682":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"20:4033:19598":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"23:417:19631":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"20:4554:37186":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"6:4504:12362":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:13721:19488":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:2765:2556":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:6541:9757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:9109:25341":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:11878:1380":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:9228:37024":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:2855:8155":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:44642:2564":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"30:1802:9823":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"32:7387:9837":{"crate_id":32,"path":["linux_raw_sys","general","mmsghdr"],"kind":"struct"},"16:7626:15290":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"20:3976:37134":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"0:0:1687":{"crate_id":0,"path":["clap"],"kind":"module"},"31:3873:37951":{"crate_id":31,"path":["rustix","backend","time","types","ClockId"],"kind":"enum"},"2:10066:7776":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"31:4707:37945":{"crate_id":31,"path":["rustix","process","prctl","TimeStampCounterReadability"],"kind":"enum"},"2:38742:7875":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:39745:2293":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:3749:14332":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:8214:15312":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:8751:2480":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:8795:2519":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:40816:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10039:15517":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:526:8913":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:7479:12565":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:10516:15571":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"30:5054:12361":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:7568:2095":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:8651:14257":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:20454:33053":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:6990:15271":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:2770:2558":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:8136:2295":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:8113:2292":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:2337:14290":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:4:1002":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"30:0:807":{"crate_id":30,"path":["libc"],"kind":"module"},"31:3087:19737":{"crate_id":31,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"16:5346:15209":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4834:12396":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:10040:26720":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:9796:15460":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:42603:7794":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"30:4605:12340":{"crate_id":30,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"30:7203:13056":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:11534:2465":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:39956:8081":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7335:36357":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:39970:2109":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:491:37041":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:773:2147":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:44488:2620":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:1687:9835":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:22064:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:42441:7761":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"32:5314:21134":{"crate_id":32,"path":["linux_raw_sys","general","ipv6hdr"],"kind":"struct"},"17:12959:19431":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"32:6497:21180":{"crate_id":32,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"20:4357:19606":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"2:12216:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13015:19433":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:5356:2472":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4796:12391":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:3175:7877":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:4177:2394":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"14:40:18163":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:22031:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"1:8901:105":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:6696:15259":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"20:4368:19617":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"1:3293:2301":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"20:3887:19574":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"2:42899:2291":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:4943:12408":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"9:0:1790":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:7518:2155":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:9380:15424":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:2507:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:5858:13049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"32:5851:21156":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"6:5990:13059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:5048:12418":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:1625:8070":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:579:8921":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:6011:25196":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:39642:8114":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:21522:31169":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"27:282:19676":{"crate_id":27,"path":["anstyle","color","RgbColor"],"kind":"struct"},"6:1645:9831":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:42962:7796":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:1919:15495":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:44577:2597":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:2786:14309":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"11:822:2133":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:10452:15578":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:42749:7773":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"32:6421:2385":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_un"],"kind":"struct"},"2:40004:8085":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:9512:15439":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:1589:9827":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4773:12388":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:8123:2293":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:44243:30561":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"30:8351:13479":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:62:8535":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:13240:19450":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:361:2094":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:5367:14259":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"32:4975:21116":{"crate_id":32,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"17:12835:19426":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:9364:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:2905:14314":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:44688:2629":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:9087:27517":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"31:3611:37922":{"crate_id":31,"path":["rustix","backend","process","types","Resource"],"kind":"enum"},"6:6809:13482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:4005:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"31:4115:37905":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdClockId"],"kind":"enum"},"2:40756:2124":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:6593:2429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:4881:12401":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"30:5454:12378":{"crate_id":30,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:4246:7882":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"31:2530:37975":{"crate_id":31,"path":["rustix","process","uname","Uname"],"kind":"struct"},"17:12358:18705":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"32:6705:21198":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_1"],"kind":"union"},"14:215:14227":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:10813:2206":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"27:113:37655":{"crate_id":27,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"20:3946:19567":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"1:4761:2372":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:11653:18188":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"31:3476:19720":{"crate_id":31,"path":["rustix","backend","io","types","EventfdFlags"],"kind":"struct"},"17:13698:19487":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"20:1653:126":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"1:11873:1494":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:3612:34641":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:9552:25174":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:43368:8289":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:11234:18161":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"29:189:19708":{"crate_id":29,"path":["io_lifetimes","views","SocketlikeView"],"kind":"struct"},"16:6876:15265":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"31:5210:37817":{"crate_id":31,"path":["rustix","process","wait","WaitOptions"],"kind":"struct"},"6:4521:12364":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"32:5085:21124":{"crate_id":32,"path":["linux_raw_sys","general","ip_comp_hdr"],"kind":"struct"},"6:7473:12564":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:1394:2125":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:8765:2481":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:21631:2349":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:8909:2294":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:6582:7851":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"30:9263:12574":{"crate_id":30,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:39369:7914":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:6904:15267":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:7146:2121":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"31:2990:19735":{"crate_id":31,"path":["rustix","backend","io","poll_fd","PollFd"],"kind":"struct"},"31:4213:37825":{"crate_id":31,"path":["rustix","process","membarrier","MembarrierQuery"],"kind":"struct"},"16:6935:15268":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:2684:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:42631:2294":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:3171:2315":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:3537:2123":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:6139:13092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"32:6431:21177":{"crate_id":32,"path":["linux_raw_sys","general","oldold_utsname"],"kind":"struct"},"17:10967:15412":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:11844:18673":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"32:4996:21118":{"crate_id":32,"path":["linux_raw_sys","general","group_req"],"kind":"struct"},"6:4366:12346":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"11:646:2123":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:9088:7723":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:953:2134":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3326:2322":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"18:660:19529":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:11228:28583":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:7605:2080":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:11346:8297":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:7797:2260":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:7648:2106":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"30:5433:12377":{"crate_id":30,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12510:18715":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"11:1836:2124":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"30:9240:12570":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:9907:15509":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:43257:7805":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:6749:34670":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6400:15247":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:7567:2374":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:2933:15521":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"30:6830:13042":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:4113:2308":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"1:5069:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:40666:2338":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:6586:13471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"30:5321:12373":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:41277:91":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:487:15376":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:4726:2108":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:8256:15313":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"30:4627:12341":{"crate_id":30,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"9:421:14090":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:3663:2161":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12224:18696":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:12646:18724":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11163:15622":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"20:3343:19584":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"31:4810:37840":{"crate_id":31,"path":["rustix","process","prctl","PTracer"],"kind":"enum"},"2:40595:30482":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:8090:15305":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:10092:15562":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:40892:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:1574:2127":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:932:2131":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"30:6871:13044":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"11:1003:2138":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:1583:9826":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:7770:2261":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:11026:8306":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:4360:12345":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:13488:19474":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"20:3274:1950":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"6:6575:13470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:9443:15427":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"18:113:19513":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:2720:14306":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11520:18178":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:40740:2122":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:22361:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:8253:2429":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:923:2129":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"11:1852:2143":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:4126:2393":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"27:382:19681":{"crate_id":27,"path":["anstyle","style","Style"],"kind":"struct"},"16:8047:15303":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:3030:14317":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9628:15434":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:3047:14318":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:11891:1476":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6351:15243":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:4855:2425":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:4037:14500":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:8036:2264":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"24:96:19652":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"30:6847:13043":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:43372:8291":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9534:15437":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:9469:15429":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:6671:14234":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:725:2125":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"13:110:35915":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:22229:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:8468:2122":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:9376:25191":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:9886:15481":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:22328:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:12536:18717":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"32:6054:21167":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_5"],"kind":"enum"},"17:9098:15395":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:11384:2344":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"32:6632:21191":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"1:8209:2397":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:10270:15522":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5761:13041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:1034:15445":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:12155:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:10589:15609":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:7167:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:29992:2157":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11641:18187":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:1744:8184":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10440:15605":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"32:6980:21209":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_params"],"kind":"struct"},"1:8155:2340":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:12019:18683":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:10713:25423":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:9933:15484":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:2426:14294":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"20:3992:19564":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"2:6601:8098":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10346:25194":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"11:777:14205":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:7497:12568":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:42713:7803":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"30:7476:13091":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:2234:97":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"20:3772:2074":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"31:4829:37834":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointMode"],"kind":"enum"},"17:10743:15402":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:6506:15253":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:5923:13052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4767:12387":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"32:5904:13039":{"crate_id":32,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"6:4873:12400":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:6988:2169":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:48946:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:22196:2085":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"32:7148:21217":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_probe"],"kind":"struct"},"32:4833:21114":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:21113:2571":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"20:4627:1954":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"1:3940:2362":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"20:4185:2099":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"30:728:8920":{"crate_id":30,"path":["libc","unix","itimerval"],"kind":"struct"},"5:7003:2150":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:43561:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:8719:2478":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:5023:27492":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9683:15458":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"32:4949:9818":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreq"],"kind":"struct"},"1:4904:2434":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:2337:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:3392:7859":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:38947:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:300:35856":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"32:5860:21157":{"crate_id":32,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"6:4354:12344":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:5892:2280":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:7596:15289":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"30:8440:13483":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:10673:2263":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:30048:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:5817:13007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:10465:15577":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"27:360:19680":{"crate_id":27,"path":["anstyle","reset","Reset"],"kind":"struct"},"6:4709:12380":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:20702:2374":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"30:505:8908":{"crate_id":30,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:2067:2070":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4828:12395":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:42524:7765":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"20:3634:37232":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"17:13419:19466":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"24:132:2459":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"1:11876:309":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:35:2182":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:5229:7742":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:2298:14261":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:7520:12571":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"32:7227:21222":{"crate_id":32,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"1:11018:25411":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12496:18714":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9322:37018":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:9478:15446":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:3934:2361":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:6673:13472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"30:5077:12362":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"20:4594:37230":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"20:4082:19599":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"30:7120:13052":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"30:5783:12395":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12098:18689":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:5944:15227":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"18:755:19535":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:46591:7678":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:587:8922":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:6236:15236":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6460:15250":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:21643:30626":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13292:19454":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:22262:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:20835:2566":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:5000:14983":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:39541:2292":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:4566:8103":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"32:4782:21108":{"crate_id":32,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"30:4581:12339":{"crate_id":30,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:928:2130":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:38969:2114":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:20854:2374":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:43097:7818":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2343:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:6164:36292":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:41735:70":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:11397:7775":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:11136:25201":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"27:305:30850":{"crate_id":27,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"16:6890:15266":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:7757:15297":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"28:0:1934":{"crate_id":28,"path":["is_terminal"],"kind":"module"},"2:20416:32806":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:7508:12569":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:10198:1948":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"10:0:1791":{"crate_id":10,"path":["adler"],"kind":"module"},"1:8215:2388":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"32:7235:2429":{"crate_id":32,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"32:6310:21173":{"crate_id":32,"path":["linux_raw_sys","general","tcp_diag_md5sig"],"kind":"struct"},"1:2212:2240":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:1514:9818":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:5947:13054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:42451:7759":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4750:12385":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:42533:7768":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"30:7322:35018":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:10638:27005":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:4327:14766":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:6648:32005":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:11234:27061":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:11585:18183":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"31:5181:37942":{"crate_id":31,"path":["rustix","process","rlimit","Rlimit"],"kind":"struct"},"30:4714:12344":{"crate_id":30,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:5386:14257":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"18:609:37066":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:43664:7697":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:46298:2615":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:1356:2123":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:21658:31206":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:22130:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:11883:634":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:9424:15426":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:4789:14940":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"32:4645:21098":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"2:40798:2443":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10377:15525":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"20:3939:19569":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"20:3357:19585":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"16:6868:36263":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"32:6743:21202":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_5"],"kind":"union"},"16:5071:15006":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:10104:15518":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8071:2323":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"11:1872:2146":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:46628:7681":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:1710:9838":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:3995:34641":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:5783:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"23:0:1929":{"crate_id":23,"path":["anstream"],"kind":"module"},"16:6544:15255":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:1852:2203":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"31:2839:19719":{"crate_id":31,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"17:10936:15411":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:2993:2179":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:3926:2360":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"20:4244:2126":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"16:6431:15248":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:4455:12356":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"31:549:19748":{"crate_id":31,"path":["rustix","backend","io","epoll","EventVec"],"kind":"struct"},"17:8310:15379":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"29:152:19704":{"crate_id":29,"path":["io_lifetimes","raw","FromRawSocketlike"],"kind":"trait"},"2:3154:8160":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:707:7782":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"29:137:19701":{"crate_id":29,"path":["io_lifetimes","raw","IntoRawFilelike"],"kind":"trait"},"1:10826:2474":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"18:515:19539":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:2680:7707":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:4640:2426":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"30:5955:12415":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:8170:15310":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:649:2103":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:11573:7784":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:12388:18707":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:2863:8157":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:6759:2561":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"30:5344:12374":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:39624:8104":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"31:3798:19763":{"crate_id":31,"path":["rustix","backend","termios","types","OptionalActions"],"kind":"enum"},"20:3872:19568":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"6:6104:12254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:10712:15615":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"20:4254:19615":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"2:1534:2280":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:7263:13855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"30:1913:9828":{"crate_id":30,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"30:4846:12350":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:2179:34764":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"30:8924:13855":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11109:15418":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"30:7166:13054":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"30:8329:13478":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"32:6669:21195":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"17:13763:19490":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:45054:30553":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10555:15572":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:894:2126":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6307:15239":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13453:19470":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"32:5269:21129":{"crate_id":32,"path":["linux_raw_sys","general","ip6_mtuinfo"],"kind":"struct"},"18:766:19528":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"18:699:19533":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:917:2128":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"30:5945:12414":{"crate_id":30,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:3225:14320":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:13332:19458":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4536:12366":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:39759:8112":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:3266:15544":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:1534:9821":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:679:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:10580:15608":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:10856:2481":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:10989:15413":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:9178:15397":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"32:5226:21127":{"crate_id":32,"path":["linux_raw_sys","general","in6_addr__bindgen_ty_1"],"kind":"union"},"6:4475:12359":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"30:4731:12345":{"crate_id":30,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:3585:14323":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4804:12392":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:44932:2601":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:2868:8158":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:9038:37012":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"32:5275:12399":{"crate_id":32,"path":["linux_raw_sys","general","in6_ifreq"],"kind":"struct"},"1:8949:25795":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:21118:2594":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:8156:15309":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"32:5307:21133":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_destopt_hao"],"kind":"struct"},"5:6081:2648":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:9076:7716":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"30:5572:12384":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:1086:2140":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6361:15244":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"24:0:1930":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"1:10451:2080":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:11800:18672":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:9641:15447":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"30:8253:13476":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:2800:2559":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:7411:15276":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12894:19427":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:11136:15621":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"32:5551:8916":{"crate_id":32,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"19:0:1019":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:7780:2259":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"30:2136:2385":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:2357:14291":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:3148:2143":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:736:19527":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6061:14260":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"30:4564:12338":{"crate_id":30,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:2902:34823":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:12407:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"5:7193:30530":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:8979:37030":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"20:4277:37079":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"30:5513:12381":{"crate_id":30,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"32:6923:21205":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_cqe"],"kind":"struct"},"2:21666:30504":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:2796:2557":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:10747:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:11452:25329":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:1900:9981":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:39049:7872":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:21782:2353":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:21270:2562":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"11:669:2130":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"32:0:1937":{"crate_id":32,"path":["linux_raw_sys"],"kind":"module"},"30:1987:9831":{"crate_id":30,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:9744:2374":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:3912:2359":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11502:18177":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:30032:8134":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:2077:34860":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:532:8914":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:7584:2082":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:4540:14859":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"32:5674:8912":{"crate_id":32,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"2:44457:30515":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11322:2343":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:39362:7913":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"23:423:37592":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"16:4845:14948":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"30:5914:12411":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:8180:2444":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:8767:30852":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:11216:25408":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:42621:7790":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"30:8402:13481":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:2868:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:40631:2336":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"32:4575:21091":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"11:2184:32702":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12799:19425":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:671:19530":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"30:5117:12364":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:11282:18163":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:1903:2166":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"31:498:19746":{"crate_id":31,"path":["rustix","backend","io","epoll","Epoll"],"kind":"struct"},"2:39249:30560":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"30:8420:13482":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"32:4628:21096":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"1:8223:2341":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"32:4753:21105":{"crate_id":32,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"2:2775:8142":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"32:6950:21207":{"crate_id":32,"path":["linux_raw_sys","general","io_sqring_offsets"],"kind":"struct"},"2:22163:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:5804:13046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:44956:2602":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11391:18169":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8814:2517":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:11832:15565":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"22:100:19623":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"6:5888:13051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:985:2137":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"30:5817:12397":{"crate_id":30,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:30062:30476":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"18:719:19526":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:4510:12363":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:40654:2337":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:50294:31204":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:4442:12354":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:2106:34739":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:39582:8100":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"30:9276:14042":{"crate_id":30,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:2967:14316":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"20:3963:19570":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"30:4927:12354":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:46220:2631":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"30:1887:9827":{"crate_id":30,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11446:18173":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:10648:2259":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:4982:12412":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"32:6606:21188":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"2:9289:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:10857:15407":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:42615:7791":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"31:3671:37874":{"crate_id":31,"path":["rustix","backend","process","types","Signal"],"kind":"enum"},"20:1631:37274":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"}},"external_crates":{"34":{"name":"strsim","html_root_url":null},"31":{"name":"rustix","html_root_url":null},"28":{"name":"is_terminal","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"linux_raw_sys","html_root_url":null},"29":{"name":"io_lifetimes","html_root_url":null},"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"anstyle_query","html_root_url":null},"30":{"name":"libc","html_root_url":null},"27":{"name":"anstyle","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/1.3.2/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}