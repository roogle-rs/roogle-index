{"root":"0:0:1817","crate_version":"4.4.6","includes_private":false,"index":{"2:12483:28308":{"id":"2:12483:28308","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4559:28308"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43728:8006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12368:28288":{"id":"2:12368:28288","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:864":{"id":"2:12359:864","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12051:446"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12482:22187":{"id":"2:12482:22187","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12478:22182":{"id":"2:12478:22182","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12377:20969":{"id":"2:12377:20969","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:28967":{"id":"5:5521:28967","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12361:28285":{"id":"2:12361:28285","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12389:28291":{"id":"2:12389:28291","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43693:8009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12386:27202":{"id":"2:12386:27202","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12387:27199"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43703:7998","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12476:28307":{"id":"2:12476:28307","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12021:131","`FromStr`":"2:12020:2625"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41612:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12020:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12020:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12454:28301":{"id":"2:12454:28301","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12380:28290":{"id":"2:12380:28290","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12057:1496","crate::ops::IndexMut":"2:3076:2342","str::slice_unchecked":"2:12379:28289"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1817":{"id":"0:0:1817","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[113,18]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial::chapter_0] and [reference][_derive]\n- Builder [tutorial][_tutorial::chapter_0] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.70.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1809"],"is_stripped":false}}},"2:12383:27188":{"id":"2:12383:27188","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12051:446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43399:8002","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12426:21009":{"id":"2:12426:21009","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12051:446","str::splitn":"2:12423:21007","self::pattern":"2:12060:7995"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43551:7982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:7992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12441:28295":{"id":"2:12441:28295","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12060:7995","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::rmatch_indices":"2:12444:28296"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43579:8010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12384:27501":{"id":"2:12384:27501","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12051:446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43405:8001","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12375:20968":{"id":"2:12375:20968","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12369:338":{"id":"2:12369:338","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12370:337","`u8`":"1:12068:1602"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12417:28292":{"id":"2:12417:28292","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12060:7995","str::split":"2:12408:21001","prim@char":"1:12051:446","`DoubleEndedIterator`":"2:7476:125","str::rsplit_terminator":"2:12420:28293"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43479:8015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12435:2044":{"id":"2:12435:2044","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12060:7995","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::rmatches":"2:12438:28294"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43633:8012","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12480:22185":{"id":"2:12480:22185","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12447:28297":{"id":"2:12447:28297","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12486:28309":{"id":"2:12486:28309","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4557:28309"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43746:8007","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12394:20422":{"id":"2:12394:20422","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:7995"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12381:20993":{"id":"2:12381:20993","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12382:20994"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:28966","5:5518:8337","5:5521:28967","5:5524:28968","5:5532:28969","5:5533:28970","5:5534:2485","5:5535:22319","5:5536:22320"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12455:28302":{"id":"2:12455:28302","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:7995"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12085:7990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:22319":{"id":"5:5535:22319","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12481:22186"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12390:27189":{"id":"2:12390:27189","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43721:7996","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12385:20132":{"id":"2:12385:20132","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43415:2460","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:28966":{"id":"5:5517:28966","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2132","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2132","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12388:25950":{"id":"2:12388:25950","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43683:2457","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:8337":{"id":"5:5518:8337","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12391:21013":{"id":"2:12391:21013","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:7995"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12420:28293":{"id":"2:12420:28293","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12060:7995","str::split":"2:12408:21001","prim@char":"1:12051:446","str::split_terminator":"2:12417:28292"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43497:8014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:7992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12408:21001":{"id":"2:12408:21001","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12060:7995","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::split_whitespace":"2:12386:27202","str::rsplit":"2:12414:21005"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43429:2461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12382:20994":{"id":"2:12382:20994","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12381:20993"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12387:27199":{"id":"2:12387:27199","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12386:27202"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43712:7997","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:28968":{"id":"5:5524:28968","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12444:28296":{"id":"2:12444:28296","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12060:7995","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::match_indices":"2:12441:28295"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43597:8011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:7992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12423:21007":{"id":"2:12423:21007","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:7995","str::rsplitn":"2:12426:21009"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43533:7984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12481:22186":{"id":"2:12481:22186","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12414:21005":{"id":"2:12414:21005","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12060:7995","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::split":"2:12408:21001"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43447:7980","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:7992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12367:20902":{"id":"2:12367:20902","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11620:7999"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12397:20424":{"id":"2:12397:20424","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:7995"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:7992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12432:21012":{"id":"2:12432:21012","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:7992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12464:21014":{"id":"2:12464:21014","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:7995"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:7992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12400:19917":{"id":"2:12400:19917","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41469:194","prim@char":"1:12051:446","self::pattern":"2:12060:7995"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12458:28303":{"id":"2:12458:28303","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:7995"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12429:21011":{"id":"2:12429:21011","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12449:28298":{"id":"2:12449:28298","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12438:28294":{"id":"2:12438:28294","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12060:7995","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::matches":"2:12435:2044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43651:8013","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:7992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:22320":{"id":"5:5536:22320","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12482:22187"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12473:28306":{"id":"2:12473:28306","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:7995"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:7992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12364:28287":{"id":"2:12364:28287","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12362:28286"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12470:28305":{"id":"2:12470:28305","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:7995"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12370:337":{"id":"2:12370:337","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12068:1602"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12373:20967":{"id":"2:12373:20967","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41469:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:28969":{"id":"5:5532:28969","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12451:28299":{"id":"2:12451:28299","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12467:28304":{"id":"2:12467:28304","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:7995"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:7992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1809":{"id":"0:3-20:0:1809","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:1809","glob":true}}},"2:12360:20949":{"id":"2:12360:20949","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12371:20966":{"id":"2:12371:20966","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41469:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12411:21003":{"id":"2:12411:21003","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:7995"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11876:7986","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12485:2260":{"id":"2:12485:2260","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4560:2260"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43737:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12453:28300":{"id":"2:12453:28300","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404:19918":{"id":"2:12404:19918","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41469:194","prim@char":"1:12051:446","self::pattern":"2:12060:7995"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:7992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:2485":{"id":"5:5534:2485","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12362:28286":{"id":"2:12362:28286","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12461:20220":{"id":"2:12461:20220","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:7995"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12479:22183":{"id":"2:12479:22183","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39501:20901","Self::is_ascii":"2:12478:22182"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39501:20901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12379:28289":{"id":"2:12379:28289","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12057:1496","str::slice_mut_unchecked":"2:12380:28290","crate::ops::Index":"2:3072:2341"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358":{"id":"2:12358","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12359:864","2:12360:20949","2:12361:28285","2:12362:28286","2:12364:28287","2:12367:20902","2:12368:28288","2:12369:338","2:12370:337","2:12371:20966","2:12373:20967","2:12375:20968","2:12377:20969","2:12379:28289","2:12380:28290","2:12381:20993","2:12382:20994","2:12383:27188","2:12384:27501","2:12385:20132","2:12386:27202","2:12387:27199","2:12388:25950","2:12389:28291","2:12390:27189","2:12391:21013","2:12394:20422","2:12397:20424","2:12400:19917","2:12404:19918","2:12408:21001","2:12411:21003","2:12414:21005","2:12417:28292","2:12420:28293","2:12423:21007","2:12426:21009","2:12429:21011","2:12432:21012","2:12435:2044","2:12438:28294","2:12441:28295","2:12444:28296","2:12447:28297","2:12449:28298","2:12451:28299","2:12453:28300","2:12454:28301","2:12455:28302","2:12458:28303","2:12461:20220","2:12464:21014","2:12467:28304","2:12470:28305","2:12473:28306","2:12476:28307","2:12478:22182","2:12479:22183","2:12480:22185","2:12481:22186","2:12482:22187","2:12483:28308","2:12485:2260","2:12486:28309"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5533:28970":{"id":"5:5533:28970","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2132","`String`":"5:7487:245"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2132","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:45868:2780":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:1638:10029":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:52:2090":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"11:403:30678":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:45822:2716":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:1495:10014":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:399:30677":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:47148:2776":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:9948:22766":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"22:28:2435":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"2:7893:2321":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:7328:2289":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:4787:415":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:2832:14573":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:10540:7981":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:41418:2502":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:2908:8355":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:149:14527":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:10390:7986":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:45467:2773":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:7299:28229":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:3191:25733":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"20:4243:2086":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"2:32026:8090":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"26:41:20073":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"1:6987:22709":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:10107:23248":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:9959:15706":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"20:4162:8309":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"17:10561:15765":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:10545:2480":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"23:376:20061":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"17:10685:15812":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:3233:8366":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:14001:19851":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:43850:8027":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:14499:19888":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:4578:2579":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:2903:8354":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:39929:26795":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:40153:2403":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:23403:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:3997:2524":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:2854:8348":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4965:12640":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:40385:8317":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:3243:255":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:43693:8009":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11074:15899":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:4753:2540":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:10186:15733":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13174:19105":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:5060:12649":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11835:22459":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:8294:132":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:8561:2607":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:12074:7993":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:21092:27152":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:21080:2726":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:638:2265":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:5010:12644":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12711:19075":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:676:252":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:7571:2293":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:10591:2243":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:2546:259":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"18:481:19930":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:1011:29292":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:45535:2744":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:2938:8362":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10750:15813":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"20:3231:32211":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"6:1569:10023":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:2871:8349":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:4931:12635":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"20:744:32287":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"16:7613:15555":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:2180:30666":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:7708:15560":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"23:480:32386":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"2:43703:7998":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"21:182:19984":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"11:1538:14469":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:1520:10018":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"23:343:20043":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"5:3669:29292":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:43387:8005":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:9460:136":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4652:12605":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:5060:23232":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:3273:19953":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"20:3785:20009":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"2:43308:7976":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:2170:28249":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:7744:2307":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:2962:29712":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:32033:8416":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:4168:2553":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"20:3818:20011":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"18:538:19934":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"11:447:148":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:8097:15571":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:11055:19990":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:7472:14270":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:2970:29713":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:12068:1602":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:11547:15676":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:7538:12814":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"20:3383:2082":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"17:14316:19875":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12876:19085":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:0:527":{"crate_id":2,"path":["core"],"kind":"module"},"17:12810:19082":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"9:330:14400":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:9963:26112":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:22725:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:10814:2428":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:6192:8301":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:44164:8506":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"20:3831:20017":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"16:8181:15576":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:805:2298":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13040:19096":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:12065:789":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:8926:15652":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:39149:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:46288:26796":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:526:9124":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:7644:2435":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5784:13296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:573:9131":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:12154:18566":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:2380:14554":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:9985:15704":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:5891:13304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:2366:204":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11617:15679":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:12072:1598":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:2461:29255":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8158:2489":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:7530:15644":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:11197:8518":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:6017:15497":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:14308:19874":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10738:15857":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"22:157:20033":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"2:3248:139":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:4058:7915":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:9159:2707":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:44359:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:22318:2515":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:7544:15551":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:3720:2328":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:3600:14585":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4706:12609":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:2497:2435":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:8547:2622":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:1852:2310":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:4834:846":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:5982:15495":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11098:15873":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:3975:2522":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"20:3449:19963":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"1:5753:2659":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:1075:15708":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"9:393:14345":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:9502:7932":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:4986:15240":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"13:110:30731":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:10430:15796":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:12293:18576":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:5555:8309":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:42564:74":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:8011:20307":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:14110:19862":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:21227:8379":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:6180:13348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:10714:15855":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:22282:26726":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"11:1831:2293":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:4558:12598":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:7153:2487":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:3939:2521":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13914:19844":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13228:19109":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:43712:7997":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:2035:2328":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"22:112:20031":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"1:4240:2556":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:7360:31165":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:2216:2405":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:1671:1146":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:40742:27724":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:6616:13726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:4268:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:7597:30967":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:11309:22760":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:7587:8056":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:7751:2366":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:6415:15513":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:1503:2296":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:6814:13735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:12730:8143":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:22193:2513":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:47751:7885":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5976:13309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:42524:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:5899:13305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:41612:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:7890:2318":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"11:844:2301":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:8948:2681":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:10789:2424":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:7015:15538":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6697:10142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:7476:7947":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:10672:15854":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:7600:22769":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:39328:8072":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:3744:2508":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:12085:7990":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:7420:2387":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:707:7993":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:7567:12818":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:6884:8304":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:46446:2781":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:6386:15511":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:2844:2708":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4766:12616":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:7928:2472":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"3:0:471":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:43207:7969":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:12861:2855":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:4634:2525":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:41783:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:40243:8306":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:43633:8012":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:12080:7992":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:7514:12810":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"20:1701:132":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"6:6037:13316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"11:2060:2304":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:11639:15680":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:4545:12596":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10023:15666":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13693:19817":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:4830:2535":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"20:4088:32141":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"16:5712:15485":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:3020:2128":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:7436:15543":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:7920:23268":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"20:3099:19952":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"1:8884:2679":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:39908:8079":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:41671:2289":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:40023:8115":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8826:2639":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"11:836:2300":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:44148:8498":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:7934:27678":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:12086:18561":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:2160:626":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:6077:22775":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:7403:104":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:7739:2306":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:7269:31176":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:9752:15667":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:40549:8319":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:6583:15523":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:2360:197":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:7434:27668":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4471:12587":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:2797:2248":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:10588:15802":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"14:40:18552":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:30184:2323":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:4497:15111":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:4919:12634":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:12050:990":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"24:290:20060":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"24:89:20056":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"17:10661:15853":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"18:113:19906":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:40749:2663":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:10862:22670":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:5588:15478":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:6153:2855":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:4820:12623":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:6203:20039":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:12465:15861":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:5076:12651":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"13:226:30684":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8364:2538":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:2859:8347":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:6189:31167":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:7513:15548":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11535:15675":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:6304:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"21:360:19990":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"15:394:14511":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:41552:2604":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:12934:19088":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:22266:26708":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7568:15553":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:1663:150":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:9445:15661":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12765:19079":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:21343:2435":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:7882:2425":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"20:3115:19981":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"2:39969:8120":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:1568:2293":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:13286:19112":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:30418:26792":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:10112:15729":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"20:3472:19970":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"1:1986:199":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:11613:7902":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:1672:29292":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:6680:10144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:41978:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"22:5:2520":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"1:12075:1206":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"7:0:1648":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:7375:2285":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:13451:19819":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:878:2314":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4957:12639":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13024:19095":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:46728:2753":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:2835:7916":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:3142:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:7090:31169":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"20:3523:19962":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"2:6983:8284":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:9500:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:5639:2673":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"21:313:19988":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"2:7397:8295":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:10126:15730":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:4666:12606":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:7304:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7054:31153":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:8862:2287":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:42779:26304":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:6139:13346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4477:12588":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:10844:2430":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:41680:198":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:30788:198":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:5046:12647":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:13838:19837":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:4393:2446":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:40371:8316":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:47771:7887":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:1696:10035":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:22245:26810":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:9780:15668":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:6817:2713":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:2598:2463":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:6560:31166":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"25:0:2071":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"16:6485:15517":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:4330:12573":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:8895:15651":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:6893:31084":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:2359:14553":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"20:4223:2087":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"2:8990:88":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:14145:19866":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:7865:2424":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:14434:19883":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:10012:15665":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"23:319:20047":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"2:1548:2446":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:3266:2483":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:8985:20296":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:15:2047":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:11991:18555":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:3023:2129":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:45489:2778":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"25:53:2619":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"17:12196:18569":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:40525:2459":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"20:3533:19966":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"11:1121:2305":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:41299:2499":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"20:3553:19973":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"11:798:2297":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:30224:8340":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:11876:7986":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13989:19850":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6901:15532":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:11687:15681":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:3419:2446":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:8016:2474":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"18:755:19928":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12790:19081":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"28:32:20087":{"crate_id":28,"path":["strsim","StringWrapper"],"kind":"struct"},"11:736:2291":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:11841:8511":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:43447:7980":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:2576:22766":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"10:36:30656":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:47540:2788":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:5995:15496":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:2548:14561":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:4037:2526":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:4293:12570":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"23:288:20045":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"17:14076:19858":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:42724:8148":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:12136:18565":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:285:30670":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"20:3430:19972":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"17:13816:19835":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:657:2289":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:7067:30834":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:2785:247":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:3183:29689":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:4812:12622":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:10575:15801":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:2891:8353":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:10214:15745":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:554:9128":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:43746:8007":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12305:18577":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:41744:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:43737:2261":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"20:3576:19959":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"9:0:1931":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:4835:15209":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:1673:10032":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:20861:27399":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"20:3913:31897":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"5:1302:2305":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"11:760:2293":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:10929:15818":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:1611:30675":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:2214:133":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:3238:2311":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:22593:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:12846:19084":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:43956:8031":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:7936:2328":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:43683:2457":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:9140:2439":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:1138:29732":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:12373:19058":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:8238:2507":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:6499:15518":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:45757:2806":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"23:0:2069":{"crate_id":23,"path":["anstream"],"kind":"module"},"1:4176:2554":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:1564:2292":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:1514:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4718:12610":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4697:12608":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:41333:2501":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:926:2297":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:31972:2642":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:6784:13733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"11:667:2295":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:22890:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"20:4190:32131":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"2:2887:8351":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10547:15800":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:11177:2640":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4589:12600":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:5838:13301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:43282:7959":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:3212:2308":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:5634:15480":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:2499:2470":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"20:4156:32037":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"17:14173:19869":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:2534:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:47938:7896":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:9455:31854":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"21:347:20028":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"16:5648:15481":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:13148:19103":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:11606:8463":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"20:3925:31900":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"2:10623:7983":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:5495:2446":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:4498:12591":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:6742:14493":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:8134:15573":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:2472:14558":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:1464:2290":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"20:3792:20022":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"2:7529:2130":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:1764:649":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:12656:158":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10771:15833":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:5787:2661":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:9492:7927":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"24:113:20063":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"17:13085:19099":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:3504:2380":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:46758:2759":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:5049:15255":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:4552:12597":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:4806:15204":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:7259:9079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:14296:19873":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:7595:12821":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:9198:23993":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"18:521:19929":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:1102:29731":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:3076:2342":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:3325:7919":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:5369:7952":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:22137:26811":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:9288:2088":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:45619:2785":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:9176:23260":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:4448:12584":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"26:0:2072":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"6:119:8801":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:12069:1599":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:1733:10038":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:3348:2467":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12830:19083":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10240:15711":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10646:15852":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:10975:2634":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:13487:19820":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:699:19926":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:43721:7996":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:6201:20294":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"20:3964:20021":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"5:7220:2325":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"20:3801:2085":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"2:5613:8299":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:932:2298":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:11845:15918":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:20891:27551":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:35:2343":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:39048:8075":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"18:624:31880":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:2257:100":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:2339:14552":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:2012:15747":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:8996:2237":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"23:405:20050":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"11:1048:30683":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9277:15659":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:43373:8008":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:4750:12614":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"20:4126:19996":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"2:41822:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"20:4103:32040":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"1:12049:397":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"14:165:14476":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:7320:2289":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:2596:14563":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:47823:7891":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:6041:15498":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:644:31867":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:6627:13727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:42019:87":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:42487:113":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:4277:8082":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"18:766:19921":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:8169:2430":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:11367:15874":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:10088:2358":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:43225:7972":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:5866:15491":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:10548:2482":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:14378:19880":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:8293:2558":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:21094:8379":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:11661:15629":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:46234:26808":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:9003:15655":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"23:439:2619":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"17:11389:15669":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:12054:1107":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"19:0:1087":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"20:2776:2288":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"2:46066:2758":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:22857:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:2219:2406":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"18:636:31871":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:4:1070":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:40773:8289":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:5249:205":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"21:127:32334":{"crate_id":21,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"2:22956:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:2788:14571":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:5135:2657":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:44240:8519":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:7532:12813":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:2526:14560":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:7213:2652":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12983:19092":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:9060:22679":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4570:12599":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:1561:2289":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:8557:2287":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"9:357:14360":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:9823:15691":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:6098:2446":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:4751:2539":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:3522:2433":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:11253:155":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:44367:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:7387:2286":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:986:2303":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:7621:15556":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:4035:105":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10520:15799":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:6663:29292":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13422:19818":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"11:1858:2311":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:5760:2660":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:9207:15657":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:11472:20269":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11761:15685":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:12888:19086":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:6850:13738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:45567:2774":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:22692:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"11:0:1933":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"23:423:32380":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"16:7462:15544":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5814:13299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:7501:8037":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:599:31875":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:3049:14580":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:44156:8503":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:12055:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:8050:15569":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:7792:15565":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12737:19077":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:3652:2289":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:14478:19887":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"11:311:30662":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:10853:22636":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:13298:19113":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:5053:12648":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:12111:18563":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:6261:15503":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:6169:22758":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:30218:8055":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:6696:14494":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:42761:2619":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:4640:12604":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:6843:13737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:3529:2455":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:9660:31822":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11337:15908":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:5121:15279":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:1288:2303":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:2209:15766":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:778:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12531:19064":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:6792:15528":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5845:13302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:7768:15563":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:2888:22771":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"20:3873:31902":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"17:10603:15803":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:4074:2288":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13259:19111":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:8971:2662":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:1442:2289":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"14:160:14475":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:43256:7961":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:46090:2807":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:44176:8499":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:9003:20222":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:913:2294":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"11:119:30674":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:20848:8135":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:11490:15673":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6915:15533":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:2033:2302":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:47899:7895":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"11:749:2292":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:7555:12816":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:1527:10019":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14335:19877":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:2618:14564":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:43497:8014":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"20:3629:20002":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"17:9617:31842":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:4846:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11951:18553":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:365:30660":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4756:12615":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13973:19848":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:0:1488":{"crate_id":1,"path":["std"],"kind":"module"},"2:21698:2733":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"20:49:2089":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"6:568:9130":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"20:1660:20004":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"17:10292:15665":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:40068:2389":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:44160:8502":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:8878:2289":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13546:19821":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:6824:8061":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"20:4150:32222":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"5:822:2313":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"20:2935:2081":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"6:5017:12645":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:8505:2621":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:4508:12592":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:21914:2720":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4422:12581":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:8953:15653":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:11374:20131":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"23:163:2435":{"crate_id":23,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"1:4749:2536":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:1595:10026":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10097:15701":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5996:13311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:1012:2304":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:3888:14646":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:45898:2786":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:21468:2435":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:40314:8312":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4994:12643":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:44184:8518":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:12705:207":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:47808:7890":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"22:32:2461":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"16:3032:14579":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:5939:15493":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:2450:14557":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:44061:8017":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12237:18572":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"20:3840:2291":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"17:14324:19876":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:43295:7960":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:21345:2719":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:2498:8139":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:2368:2411":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:7549:12815":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:1751:26721":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:10962:2367":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:9945:15711":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:12576:19067":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:3178:2309":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:5646:2674":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"23:302:20046":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"2:47742:7884":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11086:15900":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8932:2678":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:4051:2528":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:12473:15859":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4403:12579":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:2837:109":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:474:9118":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12437:19060":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:1492:2295":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:11788:15916":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:3002:2324":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:690:19925":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:1603:10027":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:536:30915":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"14:7:14475":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:10502:7980":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4897:12632":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:5963:15494":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:2284:14522":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7651:15557":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:8304:2550":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:5746:13233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11000:15822":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:21266:2723":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:14346:19878":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:12000:22645":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:3017:2127":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:12067:786":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:2670:14566":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:7618:14299":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:42219:7926":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:1895:2378":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:541:9126":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:39165:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"11:968:2302":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:4200:7948":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:6332:15506":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:9177:26908":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:1513:10017":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:3188:25722":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:13949:19846":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:4392:2551":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10637:15806":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:595:9134":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:8465:2619":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:40063:103":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8903:2677":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:11802:8512":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"20:3758:19992":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"10:44:14454":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"21:305:27678":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"5:276:2132":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:5830:15490":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:29969:2512":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:6256:2673":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:13575:19824":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:47797:7889":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"20:3239:32205":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"1:5455:108":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:41316:2500":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:10298:2287":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:2913:8356":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:14126:19864":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:11359:20134":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:46492:2787":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:4127:8096":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:2896:8357":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:7526:12812":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:558:2240":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:40262:8308":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:14156:19867":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:47290:2748":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:500:9122":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"20:3443:19968":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"16:8239:15579":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:2638:2473":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:12252:18573":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:11173:15902":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:1058:2303":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"20:3617:19958":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"24:132:2619":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"16:2321:14551":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:646:2267":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"23:358:20044":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"1:1067:2304":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"11:1845:2309":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:9931:27924":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:4808:27857":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:30816:8135":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13632:19826":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:45698:2745":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:7722:15561":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:8320:2560":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:4712:2561":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:41467:196":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:44228:2712":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:3735:2329":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:46522:2793":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:506:9123":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:11401:23994":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:14100:19861":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:7487:245":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:1702:2547":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6818:15529":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:30254:26720":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:10383:15739":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:6687:15525":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:1911:10201":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:42979:27548":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:13611:19825":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:11632:14508":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:5886:13303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6346:15507":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:4376:12576":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:47846:7892":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:863:2289":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11358:15910":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:10278:15742":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:3391:2488":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:9564:15663":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4874:12630":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:6003:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:9912:15696":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:2669:2383":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:8848:15650":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:42233:7934":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10478:15793":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"0:0:1817":{"crate_id":0,"path":["clap"],"kind":"module"},"1:2394:2421":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:5905:15492":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10370:15740":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:9038:20342":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:3741:2509":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"14:215:14484":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"23:221:25509":{"crate_id":23,"path":["anstream","fmt","Adapter"],"kind":"struct"},"17:10456:15767":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:14118:19863":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:14536:19891":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11235:15904":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:10420:15795":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:12131:8019":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:3594:2288":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:6401:15512":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:44423:173":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:5994:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:11448:15671":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13802:19834":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:10440:15797":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:782:2312":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"11:2186:30668":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:9490:124":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:8202:2458":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:1473:2291":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7318:15541":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:11389:22586":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:9744:8145":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11111:15872":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:40202:2458":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:2194:30664":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:2170:8379":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"20:3080:2084":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"1:3945:2520":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:9070:15475":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:11062:15898":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:5363:15473":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:40004:8113":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:2907:14576":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:47876:7894":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:532:9125":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:10966:20389":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:2923:132":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:12898:146":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:10334:108":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:8205:15578":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:8870:2682":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:43216:7968":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13188:19106":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:6968:15536":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:44402:2853":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:3409:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:1523:2327":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:1690:10034":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:7828:15566":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2254:99":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:4189:2555":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:1118:29715":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:7259:2316":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:42097:2658":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:12970:19091":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:8794:15648":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:2537:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:0:869":{"crate_id":6,"path":["libc"],"kind":"module"},"17:9137:15631":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:5017:15247":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:43399:8002":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"20:3892:31903":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"17:14514:19889":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11162:15866":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:44349:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:4709:2588":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:2875:2709":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:5384:15474":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:42515:72":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:7718:2270":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"18:727:19927":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:7503:15547":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"11:695:2296":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"20:1679:20800":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"1:1579:2309":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4850:12627":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:3441:15821":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:21790:2714":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"27:0:2073":{"crate_id":27,"path":["anstyle_query"],"kind":"module"},"17:10628:15805":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:8232:2457":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:922:2296":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:11507:15674":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:12062:684":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:12496:19062":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:5574:15477":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:261:31849":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:21044:2724":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:32120:8328":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:14355:19879":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:8212:2459":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:6912:265":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:11625:23272":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:21213:2727":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:5325:29292":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:590:27702":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:817:2299":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:12070:1600":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:12267:18574":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:22332:2514":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:4164:2446":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:6024:13314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"14:31:14475":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:6795:8296":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:8219:2460":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:9972:15705":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:7912:123":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:13676:19828":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"24:192:14383":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"17:2150:15782":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:6361:15509":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:11586:15678":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:42983:7962":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:46187:26723":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:49744:2735":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:949:2300":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:47648:2760":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"20:3850:20019":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"20:61:2092":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"2:46044:2752":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12074:18560":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:14090:19860":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:3315:14583":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:46368:2775":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"20:3249:199":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"1:7690:2243":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:3447:2432":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:62:8747":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:10150:242":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5088:15270":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:261:29292":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:12057:1496":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:8286:2502":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"9:486:14343":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7284:2604":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:45597:2779":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:44041:8016":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:12066:790":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"9:52:14363":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:7523:15549":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:9709:151":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:3171:2287":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:12671:19072":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:2382:2415":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:13162:19104":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"21:261:19986":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"1:10259:2644":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:21283:2435":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:5743:15487":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:4396:8091":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13890:19841":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:8713:15646":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:10760:2590":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:955:2301":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:8659:15625":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:641:2266":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:7582:15554":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10397:15794":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:10347:2461":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12024:18557":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11351:15909":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:574:31867":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:660:19922":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:43551:7982":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:5435:31071":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:2969:14578":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:20906:27549":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:7029:22457":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:4138:25411":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:8985:81":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:5978:2673":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:11536:2508":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:653:9181":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10494:15771":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"25:23:14383":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"1:589:2259":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"20:4209:2630":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"1:11072:22786":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:8574:2624":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"23:63:20058":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"2:2628:132":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:4946:12637":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:47602:2809":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11934:18552":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:22824:183":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:5673:15483":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:2921:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:21802:27402":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:7492:15546":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"11:1103:14466":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5988:13310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:4348:266":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:39134:8365":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:6902:22781":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:22626:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:12484:15860":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11719:15683":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"11:2174:28143":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:9762:31861":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:5973:2657":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:10351:23448":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:5612:15479":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:5696:15484":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:3797:14603":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:2574:14562":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:4465:12586":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:4272:8081":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:6279:15504":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:6844:15530":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:39501:20901":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"14:0:1935":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:2782:2124":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"20:3709:2474":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"16:6467:15516":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:13981:19849":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:10059:15707":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:629:28182":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:4618:12602":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:41861:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:7669:2246":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"20:3569:19975":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"11:332:30658":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:1590:10025":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"18:609:31896":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:1500:10015":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:2305:14550":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:2690:29253":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12513:19063":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"20:3591:26717":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"23:112:2467":{"crate_id":23,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"1:4047:2527":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10916:15817":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:1709:10036":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:2947:8364":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:12065:7991":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:46112:2813":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"20:3211:31991":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"1:11639:14508":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:41405:2511":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"20:3268:2237":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"17:13215:19108":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:43651:8013":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"26:21:2086":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"2:45513:2738":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11872:15919":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:256:31831":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:10429:7973":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:13554:19822":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13876:19840":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:1044:2302":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:42732:26895":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:11141:7975":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:2786:246":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:11742:15684":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:25805:268":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:3260:8076":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:1737:8390":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:8121:2429":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:11765:8510":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:41441:2503":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"20:3170:108":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"5:3330:2293":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:7006:15537":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:21180:2732":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"12:0:1934":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6318:15505":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:41585:2605":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:44465:27703":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:5322:15456":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11316:15897":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:3224:2480":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:2864:14574":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11124:15871":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:587:9133":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:3273:28129":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:2324:203":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:11066:22763":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"20:3510:19961":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"1:6650:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4889:12631":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:12022:2272":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:46682:2747":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:14221:19870":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11191:15680":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:8149:2487":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6226:15501":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:7584:12820":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:5942:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"20:34:2091":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"20:2975:32026":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"6:7561:12817":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:1760:8389":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:3655:14586":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:4986:12642":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:1681:10033":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:4687:12607":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:12678:27920":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4725:12611":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:579:9132":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8808:2638":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:7463:2386":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:6546:2667":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:4835:12625":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6156:15499":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6456:15515":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"15:306:14500":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12007:18556":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:39087:7921":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:2540:156":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:14460:19885":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:4826:12624":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:685:114":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:5858:2292":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:7541:22710":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:840:2287":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11272:15905":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:45738:2757":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:39997:8006":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:96:19905":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"20:3244:32263":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"2:12850:110":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:4344:15030":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:2792:249":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4520:12593":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10980:15665":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:6053:30542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:39959:8119":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:6076:13318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"13:0:1928":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:8195:15577":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:44452:7906":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"20:3781:2263":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"1:5317:124":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:4844:12626":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"23:134:20052":{"crate_id":23,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"2:43864:8028":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:7391:15542":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:5760:15488":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"20:65:2093":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"17:12598:19068":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"21:0:2067":{"crate_id":21,"path":["anstyle"],"kind":"module"},"16:5419:15476":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"8:0:1930":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:534:2238":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:7660:15558":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:9984:20380":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4628:12603":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:10410:15760":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:652:31867":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:505:2233":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:6714:13728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:44410:2854":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:9033:20303":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:3581:2287":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:12064:788":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:4003:2525":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13758:19816":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:9046:15540":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"18:614:31870":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:7581:22779":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13868:19839":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:8825:15649":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:9711:31835":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:22031:26326":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5776:13295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:5964:13308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:47762:7886":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:10084:15702":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:2049:2329":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4608:12601":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:6956:29288":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:13826:19836":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"20:4003:32164":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"17:13071:19098":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:22923:182":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:2329:129":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:8594:15628":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:4613:15131":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:4158:8097":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:9852:15692":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:13667:19827":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:10197:15759":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:41453:2504":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:9494:7926":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:43728:8006":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:3915:14649":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:39945:8117":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:2810:14572":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"9:237:2619":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:13966:19847":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:14401:19881":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:46136:2814":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:10802:22558":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:30240:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:7283:2289":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:8154:15574":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:6513:15519":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"11:1822:2289":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:20908:27554":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:6735:13731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"20:3934:31901":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"1:3513:25509":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"21:210:19985":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"2:42469:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:43245:7971":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12724:19076":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:12953:2317":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"15:327:14504":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"9:177:14449":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"14:187:14483":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:12058:1583":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:3939:2446":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:9172:27677":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:4745:15191":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"11:630:2287":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12280:18575":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:1781:2348":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:4910:12633":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:21365:2722":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:44018:8034":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11137:15870":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:10609:7985":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"7:79:14322":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:7585:171":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:1257:2302":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:1817:2358":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:9701:15666":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:42771:26305":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5827:13300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:43317:7979":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:7767:2367":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:6017:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:44028:8035":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:11108:7974":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:14013:19852":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:2543:137":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:4426:29339":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:2924:8359":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14134:19865":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:10486:22756":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:12033:22664":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:10990:22660":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:9865:8474":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:12422:19059":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:9933:15715":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:5832:2274":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"18:548:147":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:40346:8314":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:5661:15482":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:7237:2315":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6657:10159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:14042:19855":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:7476:125":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:9390:133":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:12076:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:3054:7920":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4856:12628":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:9086:15476":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:5373:7953":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:20876:27399":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:40285:8310":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:11495:2509":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:45968:2740":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:21299:2717":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"24:96:20058":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"28:72:20101":{"crate_id":28,"path":["strsim","StrSimError"],"kind":"enum"},"17:12554:19066":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:7269:29696":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13685:19829":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6243:15502":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:3679:2505":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:43156:27710":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:9172:15656":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:2562:2471":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:10468:15798":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:9886:15694":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:7862:15567":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:2384:2416":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:6086:13319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:2783:7917":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"11:2168:30669":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:9328:2460":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:39275:2279":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:7855:2426":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:6437:2664":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:0:1929":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13274:15682":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:42226:7927":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:4641:15135":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:5816:31036":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:8397:2600":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:41535:2288":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:40049:8112":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:3465:2431":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13244:19110":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:47724:2815":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:6929:15534":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:2865:8350":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:80:19904":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:4719:15189":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11381:15911":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13113:19101":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"23:390:20049":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"20:1097:19976":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"1:9116:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:1575:10024":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11151:15901":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:434:14524":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:9701:147":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:12778:19080":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:12061:682":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:13792:19833":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:3013:2126":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:3461:14584":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:494:9121":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13710:19830":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:42058:94":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:6165:13347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:40110:2390":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:40758:8288":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:7249:2292":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:43881:8029":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:1273:2304":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"18:681:19924":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10340:15746":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12911:19087":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:7512:8038":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:44172:8505":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:4742:12613":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:3204:2310":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:5798:15489":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:40224:8298":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:8249:2498":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:10167:22566":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:6511:29292":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:5424:2632":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:4462:15100":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:40193:2339":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:39902:2261":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"25:89:2091":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"2:22220:26800":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:11557:2510":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:40764:2488":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:41362:26797":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4680:2519":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:40016:8114":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:10824:134":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:12052:1618":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:6569:15522":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12959:19090":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12098:18562":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:41543:2289":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:7102:15539":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:10595:7982":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4772:12617":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"21:113:32332":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"1:8338:2589":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"20:4033:20013":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"1:5091:23232":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4789:12619":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:41900:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:41382:27676":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:11189:22667":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:4940:12636":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:41655:2287":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:853:2288":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:9111:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"20:3290:19954":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"2:44168:8504":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:44203:126":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:4648:22583":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:4320:2557":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:39189:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12645:19070":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"11:1068:14465":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:40336:8313":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:7895:134":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:21042:2435":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:4949:15227":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:43993:8032":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"20:3364:19957":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"17:10165:15732":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:4478:2561":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"20:3437:19967":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"17:9998:15703":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"24:304:20061":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"1:8298:2559":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"23:459:20039":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"5:3800:2293":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:5631:8059":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:6045:13317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:6014:8321":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:2930:8360":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:4438:12583":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:8181:2434":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"20:1365:2091":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"17:13101:19100":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:45443:2737":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:7137:25408":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:2644:14565":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"20:3770:19993":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"20:3131:19982":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"2:22:723":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:4644:22579":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:7897:8293":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11886:18550":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4881:1056":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:9496:7934":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13897:19842":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:3303:2478":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:14469:19886":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:7281:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6352:15508":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12698:19074":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:12172:18567":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:11393:132":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4951:12638":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:1631:10028":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:4194:2446":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:4306:12571":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:43429:2461":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:13135:19102":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4783:12618":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10036:15709":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:7128:15540":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:2550:258":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:6634:2591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:14163:19868":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:12071:1601":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"23:265:20048":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"17:8686:15645":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:46265:26817":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:42740:8147":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:6877:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:5404:2631":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"20:1653:20000":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"11:1501:14467":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:582:8135":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4491:12590":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4059:2530":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:10366:15753":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:4023:27716":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:1818:2287":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:4485:12589":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11244:15679":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:5440:2633":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:10903:15819":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:7573:12819":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10507:15769":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:7401:8294":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"11:644:2288":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:32012:15579":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:4527:15117":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:6376:15510":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:9481:133":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:43929:8030":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:8072:15570":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:11825:8509":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:400:15642":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:8990:110":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:7645:2258":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:9106:179":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:6598:9003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:7733:2271":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:14420:19882":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"15:0:1936":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:10551:2478":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"15:288:14499":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"9:450:14344":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:42749:151":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:3217:29701":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"20:3221:31992":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"1:12051:446":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:5390:2630":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:1590:2311":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:43405:8001":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:43835:8026":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10316:15748":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:10139:15731":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"20:1364:19977":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"2:22228:26665":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:10227:15744":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:2934:8361":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:6795:8059":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:5872:13262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"20:3678:20003":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"1:1842:2364":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:5407:2446":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"21:282:19987":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"5:6584:2289":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"20:925:19955":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"1:7664:2244":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:4985:2446":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:3170:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:2201:2285":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8006:23252":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"23:491:20038":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"17:10534:15770":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"20:3516:19964":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"17:12685:19073":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:45775:2812":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13922:19845":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:1825:181":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:358:2256":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:6364:178":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11332:2645":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:6981:29337":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:14056:19856":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:39989:2261":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:43579:8010":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6600:15524":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:8115:15572":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:40791:8292":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:22153:26897":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"10:0:1932":{"crate_id":10,"path":["adler"],"kind":"module"},"5:2141:29702":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:7771:20164":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:6425:15514":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"20:3046:2083":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"2:46014:2746":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:6932:27869":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:11326:20335":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:488:9120":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:12225:18571":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:4002:2292":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:2223:29785":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"20:3953:20010":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"6:4397:12421":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:45720:2751":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4430:12582":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7554:15552":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:40303:8320":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"20:2754:2287":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"2:3518:2292":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:10109:23275":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"16:4585:15127":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:44007:8033":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11407:15670":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:4796:12620":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:39307:8367":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:1411:2287":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:9026:23263":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:7782:15564":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"24:0:2070":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"2:6198:27934":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:11573:15677":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:22758:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:6753:13732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7884:15568":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:3288:7918":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11910:18551":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:5082:12652":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:41705:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:482:9119":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:41663:2288":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:39917:8118":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:43337:7978":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:2881:14575":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:2722:14568":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:6829:13736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6607:13725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10788:15858":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:1426:2288":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"23:474:20037":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"1:5137:206":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:6805:13734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:43813:8025":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:47782:7888":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12658:19071":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:3254:8077":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:10443:2638":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:6549:2668":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:8854:2641":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:2989:121":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:8342:2591":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:5632:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:10779:22564":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:3830:14612":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:9574:31844":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"9:507:14347":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:39314:8064":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:4862:15212":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:9521:15662":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:1482:2294":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:6582:9974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"20:3464:19969":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"18:491:31887":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:6145:12487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:43235:7970":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11710:15682":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:6031:13315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:4363:29339":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:40233:8305":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:42542:132":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:11215:15869":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:3185:23629":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"14:221:14485":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:1649:10030":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:9102:15630":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12062:18559":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:5858:13261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:4626:8106":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:40735:8286":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:9442:2380":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:2832:2125":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:6268:31179":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:9208:23995":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:43479:8015":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:47478:2754":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:8840:2640":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"11:1517:14468":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:11327:15907":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:14448:19884":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:39253:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:7860:2427":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:14024:19853":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:7474:15545":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:22311:27929":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6574:9169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"20:4216:32223":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"2:42964:8491":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:4343:12574":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:6616:2672":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:11295:15906":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:43533:7984":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:2775:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4731:12612":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"21:173:32333":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"20:3901:31905":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"2:40535:8318":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:5575:2635":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:41604:208":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:1585:2310":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:9488:31834":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7342:31114":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"20:3359:2237":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"2:21136:2731":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:6473:2670":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:3764:14594":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:22659:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:6859:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13906:19843":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:2504:14559":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:6720:13729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:4048:20012":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"6:7287:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:9607:15664":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:727:148":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:6602:2671":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:1557:2287":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"23:101:20051":{"crate_id":23,"path":["anstream","stream","RawStream"],"kind":"trait"},"2:4425:2247":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:2966:29710":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:11407:23895":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:7450:2385":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:12063:791":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:2918:8358":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:32008:20164":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:10834:123":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:8560:2273":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"20:4066:32213":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"2:40294:8311":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:9350:15627":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:11620:7999":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12750:19078":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:10322:2288":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:14033:19854":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:11163:2639":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:918:2295":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:4053:14763":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7694:15559":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:5509:2634":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:44152:8501":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:1545:10021":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:43597:8011":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:9921:15721":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10698:15834":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11048:15886":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12997:19093":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:6944:30887":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:507:31867":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:20889:27553":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:897:2292":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:4915:2586":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:10726:15856":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:12017:20338":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"20:3883:31904":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"17:13723:19831":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13055:19097":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:43327:7977":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:14083:19859":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:40355:8315":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:7447:2131":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:4500:2562":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13739:19832":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:4924:2587":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:39209:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12945:19089":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:11216:2439":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:8814:201":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:12621:19069":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:47686:2794":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:7872:2428":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:22791:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:2223:2407":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:0:1938":{"crate_id":17,"path":["object"],"kind":"module"},"2:47861:7893":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:504:15643":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:10467:7987":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"11:1027:14464":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:45423:2772":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"11:97:30673":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:8281:15580":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:3305:2479":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6960:15535":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:8312:2507":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:7434:138":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12043:18558":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:416:177":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:7381:20308":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:582:15644":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:11182:7967":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"20:2959:32036":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"2:21693:2725":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:2766:14570":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:6729:13730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:547:9127":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6879:15531":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:531:19933":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"20:3305:19956":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"7:32:14315":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11306:15682":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:40271:27222":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13778:15710":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:871:2290":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:1557:10022":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:3565:15839":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:1184:15716":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:9867:15693":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:4807:2541":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"20:3943:20020":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"16:7736:15562":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:21475:2728":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:9051:15626":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:14068:19857":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:11590:8461":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10949:15814":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:21351:2721":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:42240:7935":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:22344:2516":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:41595:8447":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:4317:12572":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:8225:2461":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:9372:15660":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:123:8802":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:4341:8089":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:2960:29716":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:564:19935":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:2879:2711":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:2409:1946":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:40253:8307":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:3232:14582":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:1717:10037":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"28:0:2074":{"crate_id":28,"path":["strsim"],"kind":"module"},"2:4405:8092":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:8562:2606":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:40783:8290":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:26:20064":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"20:3583:19978":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"6:4370:12575":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:2243:28261":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8244:2506":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:2840:8327":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"20:0:1809":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"1:12073:840":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:4452:8093":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"20:1172:19974":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"16:4557:15123":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:2883:8352":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"21:334:19989":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"2:40080:27668":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:2959:7910":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:9498:7935":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:5403:15475":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11023:15820":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:7520:12811":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:40030:8116":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:8167:15575":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:5578:2637":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:13010:19094":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:11815:15917":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"20:3863:20018":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"2:40215:8297":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"24:255:2091":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"2:22205:27665":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"11:1826:2292":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:2428:14556":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:21912:2435":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:6721:15526":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"11:1838:2308":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"22:128:20032":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"1:1076:2305":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:7534:15550":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:4973:2596":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:9531:31837":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"20:3491:19971":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"17:10962:15815":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:9488:2427":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"20:3540:19965":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"5:6814:8060":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:42459:26803":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:12208:18570":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"21:382:19991":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"17:9790:31855":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:10616:15804":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:47400:2782":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4975:12641":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:6433:2663":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:884:2291":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"20:57:2088":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"1:4646:22581":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:4864:12629":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:9081:20343":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:10784:23985":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:11234:22671":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:12060:7995":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:1663:10031":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:3115:2490":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:6531:15520":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:21449:2718":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:4921:15223":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:1983:200":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:3568:175":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:2787:112":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:4160:2552":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:9493:22785":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:44180:8500":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"20:1655:20001":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"17:11226:15903":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:40173:7959":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:41527:2287":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:2617:120":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:46792:2808":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:9242:15658":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:12452:19061":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:7041:31173":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:2933:14577":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:5929:13307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:41518:8370":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:9485:115":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:7438:159":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:2696:14567":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:1506:10016":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:45668:2739":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:907:2293":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:4382:12577":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:3989:2523":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:46942:2742":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:2172:8380":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"18:736:19920":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:1536:10020":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"20:4142:19995":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"1:8415:2618":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:1931:695":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:3232:15816":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:22169:26818":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:41939:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:895:2287":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:483:22730":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:5802:13297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:45920:2792":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:0:1939":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:10581:7984":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:40096:2388":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:3846:2510":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:14282:19872":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4802:12621":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:4774:15196":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:2744:14569":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:8670:7991":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:21477:2722":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:3226:2481":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:7608:14298":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"20:3340:19951":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"1:12056:1464":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6545:15521":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:41276:164":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:11473:15672":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"18:719:19919":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:2942:8363":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:5788:253":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:8765:15647":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:515:19932":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:10447:15768":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"11:723:2290":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:1634:625":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:7291:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:12074:1658":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:4011:27712":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:8978:15654":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:30312:26704":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:7229:2289":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:9650:15665":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:943:2299":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:5994:8721":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:42499:26717":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:1429:150":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:40395:8302":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12123:18564":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:9121:155":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:1776:2293":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:4889:15215":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:4032:29292":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:32019:27203":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:6465:2292":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5027:12646":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:13567:19823":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12184:18568":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8916:2680":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11201:15867":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5808:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:11281:15896":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:6332:2857":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:3072:2341":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:1573:2308":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"20:3986:20014":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"1:3264:2482":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:21444:2435":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:207:7925":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"20:4075:23260":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"11:2049:2303":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:12286:115":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:46604:2741":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:14269:19871":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"22:0:2068":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"1:364:2257":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:39231:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:2131:2233":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:4351:8090":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:793:2294":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:9504:7933":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4526:12594":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"9:426:14346":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:1840:2088":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:1924:2379":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:3065:14581":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:6753:15527":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:10140:2435":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:622:2263":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"14:202:8036":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:5070:12650":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:22084:26329":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:9749:8146":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:10265:15743":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11971:18554":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"22:98:20030":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"17:9896:15695":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:2406:14555":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"18:671:19923":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:0:1937":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:4417:15079":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:8563:2623":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:5727:15486":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:5909:13306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:40143:2404":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:12020:2625":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:4234:2287":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4458:12585":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:44440:7908":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:40323:8300":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:2276:107":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:12643:142":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:6083:14521":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:2849:2710":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:45637:2791":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13202:19107":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:1779:2347":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:13851:19838":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4415:12580":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:2366:2410":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4537:12595":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:1641:8274":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:11008:2641":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4391:12578":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:14522:19890":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12543:19065":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:2178:15741":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:1922:7922":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:43415:2460":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:562:9129":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11261:15895":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:8488:2620":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:39981:8007":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:6204:15500":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:1374:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"}},"external_crates":{"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"strsim","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"anstyle_query","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}