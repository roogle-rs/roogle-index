{"root":"0:0:2522","crate_version":"1.10.6","includes_private":false,"index":{"0:610":{"id":"0:610","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2274,0],"end":[2274,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:389:3639":{"id":"0:389:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/bytes.rs","begin":[2483,4],"end":[2485,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Vec","id":"4:7390:282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:908:3463":{"id":"0:908:3463","crate_id":0,"name":"Split","span":{"filename":"src/regex/bytes.rs","begin":[2252,0],"end":[2255,1]},"visibility":"public","docs":"An iterator over all substrings delimited by a regex match.\n\n`'r` is the lifetime of the compiled regular expression and `'h` is the\nlifetime of the byte string being split.\n\nThis iterator is created by [`Regex::split`].\n\n# Time complexity\n\nNote that since an iterator runs potentially many searches on the haystack\nand since each search has worst case `O(m * n)` time complexity, the\noverall worst case time complexity for iteration is `O(m * n^2)`.","links":{"`Regex::split`":"0:191:3462"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:908:3463","a:1:3408:263-0:908:3463","a:1:3443:5223-0:908:3463","a:1:36058:4992-0:908:3463","a:1:45870:4917-0:908:3463","a:1:45871:4916-0:908:3463","b:1:2860-0:908:3463","b:1:2863-0:908:3463","b:1:3175-0:908:3463","b:1:3179-0:908:3463","b:1:3185-0:908:3463","b:1:3190-0:908:3463","b:1:4055-0:908:3463","b:1:8585-0:908:3463","0:913","0:332","0:338"]}}},"0:60:2687":{"id":"0:60:2687","crate_id":0,"name":"build","span":{"filename":"src/builders.rs","begin":[232,8],"end":[234,9]},"visibility":"public","docs":"Compiles the pattern given to `RegexBuilder::new` with the\nconfiguration set on this builder.\n\nIf the pattern isn't a valid regex or if a configured size limit\nwas exceeded, then an error is returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2860-0:926:3760":{"id":"b:1:2860-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4055-0:1025:3491":{"id":"b:1:4055-0:1025:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4055-0:1081:4659":{"id":"b:1:4055-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4055-0:1093:4742":{"id":"b:1:4055-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3443:5223-0:865:3298":{"id":"a:1:3443:5223-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:462:3404":{"id":"0:462:3404","crate_id":0,"name":"captures_iter","span":{"filename":"src/regex/string.rs","begin":[420,4],"end":[425,5]},"visibility":"public","docs":"Returns an iterator that yields successive non-overlapping matches in\nthe given haystack. The iterator yields values of type [`Captures`].\n\nThis is the same as [`Regex::find_iter`], but instead of only providing\naccess to the overall match, each value yield includes access to the\nmatches of all capture groups in the regex. Reporting this extra match\ndata is potentially costly, so callers should only use `captures_iter`\nover `find_iter` when they actually need access to the capture group\nmatches.\n\n# Time complexity\n\nNote that since `captures_iter` runs potentially many searches on the\nhaystack and since each search has worst case `O(m * n)` time\ncomplexity, the overall worst case time complexity for iteration is\n`O(m * n^2)`.\n\n# Example\n\nWe can use this to find all movie titles and their release years in\nsome haystack, where the movie is formatted like \"'Title' (xxxx)\":\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();\nlet hay = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";\nlet mut movies = vec![];\nfor (_, [title, year]) in re.captures_iter(hay).map(|c| c.extract()) {\n    movies.push((title, year.parse::<i64>()?));\n}\nassert_eq!(movies, vec![\n    (\"Citizen Kane\", 1941),\n    (\"The Wizard of Oz\", 1939),\n    (\"M\", 1931),\n]);\n# Ok::<(), Box<dyn std::error::Error>>(())\n```\n\nOr with named groups:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>[0-9]{4})\\)\").unwrap();\nlet hay = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";\nlet mut it = re.captures_iter(hay);\n\nlet caps = it.next().unwrap();\nassert_eq!(&caps[\"title\"], \"Citizen Kane\");\nassert_eq!(&caps[\"year\"], \"1941\");\n\nlet caps = it.next().unwrap();\nassert_eq!(&caps[\"title\"], \"The Wizard of Oz\");\nassert_eq!(&caps[\"year\"], \"1939\");\n\nlet caps = it.next().unwrap();\nassert_eq!(&caps[\"title\"], \"M\");\nassert_eq!(&caps[\"year\"], \"1931\");\n```","links":{"`Regex::find_iter`":"0:457:3315","`Captures`":"0:522:3373"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'r","is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:8585-0:890:3317":{"id":"b:1:8585-0:890:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:4:816-0:1034:3760":{"id":"b:4:816-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3443:5223-0:1066:4239":{"id":"a:1:3443:5223-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:945":{"id":"0:945","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2360,16],"end":[2360,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:948:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:656:3639":{"id":"0:656:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/string.rs","begin":[2480,4],"end":[2482,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3190-0:860:2681":{"id":"b:1:3190-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:451:1923":{"id":"0:451:1923","crate_id":0,"name":"try_from","span":{"filename":"src/regex/string.rs","begin":[142,4],"end":[144,5]},"visibility":"default","docs":"Attempts to parse a string into a regular expression","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1016:3463":{"id":"0:1016:3463","crate_id":0,"name":"Split","span":{"filename":"src/regex/string.rs","begin":[2260,0],"end":[2263,1]},"visibility":"public","docs":"An iterator over all substrings delimited by a regex match.\n\n`'r` is the lifetime of the compiled regular expression and `'h` is the\nlifetime of the byte string being split.\n\nThis iterator is created by [`Regex::split`].\n\n# Time complexity\n\nNote that since an iterator runs potentially many searches on the haystack\nand since each search has worst case `O(m * n)` time complexity, the\noverall worst case time complexity for iteration is `O(m * n^2)`.","links":{"`Regex::split`":"0:465:3462"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:1016:3463","a:1:3408:263-0:1016:3463","a:1:3443:5223-0:1016:3463","a:1:36058:4992-0:1016:3463","a:1:45870:4917-0:1016:3463","a:1:45871:4916-0:1016:3463","b:1:2860-0:1016:3463","b:1:2863-0:1016:3463","b:1:3175-0:1016:3463","b:1:3179-0:1016:3463","b:1:3185-0:1016:3463","b:1:3190-0:1016:3463","b:1:4055-0:1016:3463","b:1:8585-0:1016:3463","0:1021","0:604","0:610"]}}},"0:1111":{"id":"0:1111","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[458,9],"end":[458,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:1112:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2863-0:842:3015":{"id":"b:1:2863-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:816-0:860:2681":{"id":"b:4:816-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:488:3374":{"id":"0:488:3374","crate_id":0,"name":"captures_at","span":{"filename":"src/regex/string.rs","begin":[1144,4],"end":[1158,5]},"visibility":"public","docs":"Returns the same as [`Regex::captures`], but starts the search at the\ngiven offset.\n\nThe significance of the starting point is that it takes the surrounding\ncontext into consideration. For example, the `\\A` anchor can only\nmatch when `start == 0`.\n\n# Panics\n\nThis panics when `start >= haystack.len() + 1`.\n\n# Example\n\nThis example shows the significance of `start` by demonstrating how it\ncan be used to permit look-around assertions in a regex to take the\nsurrounding context into account.\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"\\bchew\\b\").unwrap();\nlet hay = \"eschew\";\n// We get a match here, but it's probably not intended.\nassert_eq!(&re.captures(&hay[2..]).unwrap()[0], \"chew\");\n// No match because the  assertions take the context into account.\nassert!(re.captures_at(hay, 2).is_none());\n```","links":{"`Regex::captures`":"0:460:3180"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}],["start",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3185-0:1076:2691":{"id":"b:1:3185-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:816-0:830:3015":{"id":"b:4:816-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3190-0:1108:4659":{"id":"b:1:3190-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:796:1264":{"id":"0:796:1264","crate_id":0,"name":"next","span":{"filename":"src/regexset/string.rs","begin":[642,4],"end":[649,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36000:251-0:1103:2691":{"id":"a:1:36000:251-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:1127":{"id":"0:1127","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[679,16],"end":[679,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["0:1129:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:3408:263-0:830:3015":{"id":"a:1:3408:263-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:45871:4916-0:860:2681":{"id":"a:1:45871:4916-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:113:1249":{"id":"0:113:1249","crate_id":0,"name":"new","span":{"filename":"src/builders.rs","begin":[1977,8],"end":[1983,9]},"visibility":"public","docs":"Create a new builder with a default configuration for the given\npatterns.\n\nIf the patterns are invalid or exceed the configured size limits,\nthen an error will be returned when [`RegexSetBuilder::build`] is\ncalled.","links":{"`RegexSetBuilder::build`":"0:116:2687"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["patterns",{"generic":"I"}]],"output":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Item","args":{"angle_bracketed":{"args":[],"constraints":[]}},"binding":{"equality":{"type":{"generic":"S"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3143:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3179-0:917:3491":{"id":"b:1:3179-0:917:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:345:1264":{"id":"0:345:1264","crate_id":0,"name":"next","span":{"filename":"src/regex/bytes.rs","begin":[2296,4],"end":[2298,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:729:185":{"id":"0:729:185","crate_id":0,"name":"Item","span":{"filename":"src/regexset/bytes.rs","begin":[603,4],"end":[603,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"primitive":"usize"}}}},"b:4:816-0:842:3015":{"id":"b:4:816-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2860-0:842:3015":{"id":"b:1:2860-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36000:251-0:1088:4744":{"id":"a:1:36000:251-0:1088:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:4055-0:973:3298":{"id":"b:1:4055-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3185-0:1057:4226":{"id":"b:1:3185-0:1057:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8585-0:1120:4742":{"id":"b:1:8585-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:3408:263-0:926:3760":{"id":"a:1:3408:263-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3179-0:824:2715":{"id":"b:1:3179-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116:2687":{"id":"0:116:2687","crate_id":0,"name":"build","span":{"filename":"src/builders.rs","begin":[1990,8],"end":[1992,9]},"visibility":"public","docs":"Compiles the patterns given to `RegexSetBuilder::new` with the\nconfiguration set on this builder.\n\nIf the patterns aren't valid regexes or if a configured size limit\nwas exceeded, then an error is returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:4055-0:917:3491":{"id":"b:1:4055-0:917:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4055-0:926:3760":{"id":"b:1:4055-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:518:878":{"id":"0:518:878","crate_id":0,"name":"from","span":{"filename":"src/regex/string.rs","begin":[1580,4],"end":[1582,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["m",{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}]],"output":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3443:5223-0:848:150":{"id":"a:1:3443:5223-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:533:3984":{"id":"0:533:3984","crate_id":0,"name":"extract","span":{"filename":"src/regex/string.rs","begin":[1794,4],"end":[1808,5]},"visibility":"public","docs":"This is a convenience routine for extracting the substrings\ncorresponding to matching capture groups.\n\nThis returns a tuple where the first element corresponds to the full\nsubstring of the haystack that matched the regex. The second element is\nan array of substrings, with each corresponding to the substring that\nmatched for a particular capture group.\n\n# Panics\n\nThis panics if the number of possible matching groups in this\n`Captures` value is not fixed to `N` in all circumstances.\nMore precisely, this routine only works when `N` is equivalent to\n[`Regex::static_captures_len`].\n\nStated more plainly, if the number of matching capture groups in a\nregex can vary from match to match, then this function always panics.\n\nFor example, `(a)(b)|(c)` could produce two matching capture groups\nor one matching capture group for any given match. Therefore, one\ncannot use `extract` with such a pattern.\n\nBut a pattern like `(a)(b)|(c)(d)` can be used with `extract` because\nthe number of capture groups in every match is always equivalent,\neven if the capture _indices_ in each match are not.\n\n# Example\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();\nlet hay = \"On 2010-03-14, I became a Tenneessee lamb.\";\nlet Some((full, [year, month, day])) =\n    re.captures(hay).map(|caps| caps.extract()) else { return };\nassert_eq!(\"2010-03-14\", full);\nassert_eq!(\"2010\", year);\nassert_eq!(\"03\", month);\nassert_eq!(\"14\", day);\n```\n\n# Example: iteration\n\nThis example shows how to use this method when iterating over all\n`Captures` matches in a haystack.\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();\nlet hay = \"1973-01-05, 1975-08-25 and 1980-10-18\";\n\nlet mut dates: Vec<(&str, &str, &str)> = vec![];\nfor (_, [y, m, d]) in re.captures_iter(hay).map(|c| c.extract()) {\n    dates.push((y, m, d));\n}\nassert_eq!(dates, vec![\n    (\"1973\", \"01\", \"05\"),\n    (\"1975\", \"08\", \"25\"),\n    (\"1980\", \"10\", \"18\"),\n]);\n```\n\n# Example: parsing different formats\n\nThis API is particularly useful when you need to extract a particular\nvalue that might occur in a different format. Consider, for example,\nan identifier that might be in double quotes or single quotes:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r#\"id:(?:\"([^\"]+)\"|'([^']+)')\"#).unwrap();\nlet hay = r#\"The first is id:\"foo\" and the second is id:'bar'.\"#;\nlet mut ids = vec![];\nfor (_, [id]) in re.captures_iter(hay).map(|c| c.extract()) {\n    ids.push(id);\n}\nassert_eq!(ids, vec![\"foo\", \"bar\"]);\n```","links":{"`Regex::static_captures_len`":"0:501:3701"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}},{"array":{"type":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}},"len":"N"}}]},"is_c_variadic":false},"generics":{"params":[{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:536:1039":{"id":"0:536:1039","crate_id":0,"name":"iter","span":{"filename":"src/regex/string.rs","begin":[1893,4],"end":[1895,5]},"visibility":"public","docs":"Returns an iterator over all capture groups. This includes both\nmatching and non-matching groups.\n\nThe iterator always yields at least one matching group: the first group\n(at index `0`) with no name. Subsequent groups are returned in the order\nof their opening parenthesis in the regex.\n\nThe elements yielded have type `Option<Match<'h>>`, where a non-`None`\nvalue is present if the capture group matches.\n\n# Example\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(\\w)(\\d)?(\\w)\").unwrap();\nlet caps = re.captures(\"AZ\").unwrap();\n\nlet mut it = caps.iter();\nassert_eq!(it.next().unwrap().map(|m| m.as_str()), Some(\"AZ\"));\nassert_eq!(it.next().unwrap().map(|m| m.as_str()), Some(\"A\"));\nassert_eq!(it.next().unwrap().map(|m| m.as_str()), None);\nassert_eq!(it.next().unwrap().map(|m| m.as_str()), Some(\"Z\"));\nassert_eq!(it.next(), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'c","is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2860-0:522:3373":{"id":"b:1:2860-0:522:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:1093:4742":{"id":"a:1:45870:4917-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:832":{"id":"0:832","crate_id":0,"name":null,"span":{"filename":"src/builders.rs","begin":[786,13],"end":[786,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:833:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/builders.rs","begin":[1376,4],"end":[1957,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:98:1249","0:99:2687","0:100:2126","0:101:2697","0:102:2698","0:103:2699","0:104:2700","0:105:2701","0:106:2703","0:107:2704","0:108:2705","0:109:2706","0:110:2708","0:111:2709"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:721:1039":{"id":"0:721:1039","crate_id":0,"name":"iter","span":{"filename":"src/regexset/bytes.rs","begin":[586,4],"end":[588,5]},"visibility":"public","docs":"Returns an iterator over the indices of the regexes that matched.\n\nThis will always produces matches in ascending order, where the index\nyielded corresponds to the index of the regex that matched with respect\nto its position when initially building the set.\n\n# Example\n\n```\nuse regex::bytes::RegexSet;\n\nlet set = RegexSet::new([\n    r\"[0-9]\",\n    r\"[a-z]\",\n    r\"[A-Z]\",\n    r\"\\p{Greek}\",\n]).unwrap();\nlet hay = \"βa1\".as_bytes();\nlet matches: Vec<_> = set.matches(hay).iter().collect();\nassert_eq!(matches, vec![0, 1, 3]);\n```\n\nNote that `SetMatches` also implemnets the `IntoIterator` trait, so\nthis method is not always needed. For example:\n\n```\nuse regex::bytes::RegexSet;\n\nlet set = RegexSet::new([\n    r\"[0-9]\",\n    r\"[a-z]\",\n    r\"[A-Z]\",\n    r\"\\p{Greek}\",\n]).unwrap();\nlet hay = \"βa1\".as_bytes();\nlet mut matches = vec![];\nfor index in set.matches(hay) {\n    matches.push(index);\n}\nassert_eq!(matches, vec![0, 1, 3]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:89:2709":{"id":"0:89:2709","crate_id":0,"name":"nest_limit","span":{"filename":"src/builders.rs","begin":[1350,8],"end":[1353,9]},"visibility":"public","docs":"Set the nesting limit for this parser.\n\nThe nesting limit controls how deep the abstract syntax tree is\nallowed to be. If the AST exceeds the given limit (e.g., with too\nmany nested groups), then an error is returned by the parser.\n\nThe purpose of this limit is to act as a heuristic to prevent stack\noverflow for consumers that do structural induction on an AST using\nexplicit recursion. While this crate never does this (instead using\nconstant stack space and moving the call stack to the heap), other\ncrates may.\n\nThis limit is not checked until the entire AST is parsed.\nTherefore, if callers want to put a limit on the amount of heap\nspace used, then they should impose a limit on the length, in\nbytes, of the concrete pattern string. In particular, this is\nviable since this parser implementation will limit itself to heap\nspace proportional to the length of the pattern string. See also\nthe [untrusted inputs](crate#untrusted-input) section in the\ntop-level crate documentation for more information about this.\n\nNote that a nest limit of `0` will return a nest limit error for\nmost patterns but not all. For example, a nest limit of `0` permits\n`a` but not `ab`, since `ab` requires an explicit concatenation,\nwhich results in a nest depth of `1`. In general, a nest limit is\nnot something that manifests in an obvious way in the concrete\nsyntax, therefore, it should not be used in a granular way.\n\n# Example\n\n```\nuse regex::RegexSetBuilder;\n\nassert!(RegexSetBuilder::new([r\"a\"]).nest_limit(0).build().is_ok());\nassert!(RegexSetBuilder::new([r\"ab\"]).nest_limit(0).build().is_err());\n```","links":{"crate#untrusted-input":"0:0:2522"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["limit",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:784:1039":{"id":"0:784:1039","crate_id":0,"name":"iter","span":{"filename":"src/regexset/string.rs","begin":[582,4],"end":[584,5]},"visibility":"public","docs":"Returns an iterator over the indices of the regexes that matched.\n\nThis will always produces matches in ascending order, where the index\nyielded corresponds to the index of the regex that matched with respect\nto its position when initially building the set.\n\n# Example\n\n```\nuse regex::RegexSet;\n\nlet set = RegexSet::new([\n    r\"[0-9]\",\n    r\"[a-z]\",\n    r\"[A-Z]\",\n    r\"\\p{Greek}\",\n]).unwrap();\nlet hay = \"βa1\";\nlet matches: Vec<_> = set.matches(hay).iter().collect();\nassert_eq!(matches, vec![0, 1, 3]);\n```\n\nNote that `SetMatches` also implemnets the `IntoIterator` trait, so\nthis method is not always needed. For example:\n\n```\nuse regex::RegexSet;\n\nlet set = RegexSet::new([\n    r\"[0-9]\",\n    r\"[a-z]\",\n    r\"[A-Z]\",\n    r\"\\p{Greek}\",\n]).unwrap();\nlet hay = \"βa1\";\nlet mut matches = vec![];\nfor index in set.matches(hay) {\n    matches.push(index);\n}\nassert_eq!(matches, vec![0, 1, 3]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:79:2697":{"id":"0:79:2697","crate_id":0,"name":"case_insensitive","span":{"filename":"src/builders.rs","begin":[901,8],"end":[904,9]},"visibility":"public","docs":"This configures whether to enable case insensitive matching for all\nof the patterns.\n\nThis setting can also be configured using the inline flag `i`\nin the pattern. For example, `(?i:foo)` matches `foo` case\ninsensitively while `(?-i:foo)` matches `foo` case sensitively.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\"foo(?-i:bar)quux\"])\n    .case_insensitive(true)\n    .build()\n    .unwrap();\nassert!(re.is_match(\"FoObarQuUx\"));\n// Even though case insensitive matching is enabled in the builder,\n// it can be locally disabled within the pattern. In this case,\n// `bar` is matched case sensitively.\nassert!(!re.is_match(\"fooBARquux\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[1575,0],"end":[1579,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"core::ops::Range","id":"1:43364:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"items":["0:248:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:45870:4917-0:883:3722":{"id":"a:1:45870:4917-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:967:847":{"id":"0:967:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/bytes.rs","begin":[2590,16],"end":[2590,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1015:847":{"id":"0:1015:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/string.rs","begin":[2215,9],"end":[2215,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[85,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:146:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:840":{"id":"0:840","crate_id":0,"name":null,"span":{"filename":"src/builders.rs","begin":[1371,20],"end":[1371,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:841:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3179-0:865:3298":{"id":"b:1:3179-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3190-0:1066:4239":{"id":"b:1:3190-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45871:4916-0:1088:4744":{"id":"a:1:45871:4916-0:1088:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:132-0:151:2524":{"id":"0:132-0:151:2524","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[91,36],"end":[91,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"crate::regex::bytes","name":"bytes","id":"0:151:2524","is_glob":true}}},"b:1:2863-0:522:3373":{"id":"b:1:2863-0:522:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:708:4658":{"id":"0:708:4658","crate_id":0,"name":"matches","span":{"filename":"src/regexset/bytes.rs","begin":[291,4],"end":[293,5]},"visibility":"public","docs":"Returns the set of regexes that match in the given haystack.\n\nThe set returned contains the index of each regex that matches in\nthe given haystack. The index is in correspondence with the order of\nregular expressions given to `RegexSet`'s constructor.\n\nThe set can also be used to iterate over the matched indices. The order\nof iteration is always ascending with respect to the matching indices.\n\nNote that as with searches using [`Regex`](crate::bytes::Regex), the\nexpression is unanchored by default. That is, if the regex does not\nstart with `^` or `\\A`, or end with `$` or `\\z`, then it is permitted\nto match anywhere in the haystack.\n\n# Example\n\nTests which regular expressions match the given haystack:\n\n```\nuse regex::bytes::RegexSet;\n\nlet set = RegexSet::new([\n    r\"\\w+\",\n    r\"\\d+\",\n    r\"\\pL+\",\n    r\"foo\",\n    r\"bar\",\n    r\"barfoo\",\n    r\"foobar\",\n]).unwrap();\nlet matches: Vec<_> = set.matches(b\"foobar\").into_iter().collect();\nassert_eq!(matches, vec![0, 2, 3, 4, 6]);\n\n// You can also test whether a particular regex matched:\nlet matches = set.matches(b\"foobar\");\nassert!(!matches.matched(5));\nassert!(matches.matched(6));\n```","links":{"crate::bytes::Regex":"0:860:2681"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:4055-0:860:2681":{"id":"b:1:4055-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:933":{"id":"0:933","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2318,16],"end":[2318,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["0:935:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:627:4157":{"id":"0:627:4157","crate_id":0,"name":"size_hint","span":{"filename":"src/regex/string.rs","begin":[2338,4],"end":[2340,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}}]},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:875":{"id":"0:875","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[1482,22],"end":[1482,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2957:147","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:1076:2691":{"id":"0:1076:2691","crate_id":0,"name":"RegexSet","span":{"filename":"src/regexset/bytes.rs","begin":[136,0],"end":[139,1]},"visibility":"public","docs":"Match multiple, possibly overlapping, regexes in a single search.\n\nA regex set corresponds to the union of zero or more regular expressions.\nThat is, a regex set will match a haystack when at least one of its\nconstituent regexes matches. A regex set as its formulated here provides a\ntouch more power: it will also report *which* regular expressions in the\nset match. Indeed, this is the key difference between regex sets and a\nsingle `Regex` with many alternates, since only one alternate can match at\na time.\n\nFor example, consider regular expressions to match email addresses and\ndomains: `[a-z]+@[a-z]+\\.(com|org|net)` and `[a-z]+\\.(com|org|net)`. If a\nregex set is constructed from those regexes, then searching the haystack\n`foo@example.com` will report both regexes as matching. Of course, one\ncould accomplish this by compiling each regex on its own and doing two\nsearches over the haystack. The key advantage of using a regex set is\nthat it will report the matching regexes using a *single pass through the\nhaystack*. If one has hundreds or thousands of regexes to match repeatedly\n(like a URL router for a complex web application or a user agent matcher),\nthen a regex set *can* realize huge performance gains.\n\nUnlike the top-level [`RegexSet`](crate::RegexSet), this `RegexSet`\nsearches haystacks with type `&[u8]` instead of `&str`. Consequently, this\n`RegexSet` is permitted to match invalid UTF-8.\n\n# Limitations\n\nRegex sets are limited to answering the following two questions:\n\n1. Does any regex in the set match?\n2. If so, which regexes in the set match?\n\nAs with the main [`Regex`][crate::bytes::Regex] type, it is cheaper to ask\n(1) instead of (2) since the matching engines can stop after the first\nmatch is found.\n\nYou cannot directly extract [`Match`][crate::bytes::Match] or\n[`Captures`][crate::bytes::Captures] objects from a regex set. If you need\nthese operations, the recommended approach is to compile each pattern in\nthe set independently and scan the exact same haystack a second time with\nthose independently compiled patterns:\n\n```\nuse regex::bytes::{Regex, RegexSet};\n\nlet patterns = [\"foo\", \"bar\"];\n// Both patterns will match different ranges of this string.\nlet hay = b\"barfoo\";\n\n// Compile a set matching any of our patterns.\nlet set = RegexSet::new(patterns).unwrap();\n// Compile each pattern independently.\nlet regexes: Vec<_> = set\n    .patterns()\n    .iter()\n    .map(|pat| Regex::new(pat).unwrap())\n    .collect();\n\n// Match against the whole set first and identify the individual\n// matching patterns.\nlet matches: Vec<&[u8]> = set\n    .matches(hay)\n    .into_iter()\n    // Dereference the match index to get the corresponding\n    // compiled pattern.\n    .map(|index| &regexes[index])\n    // To get match locations or any other info, we then have to search the\n    // exact same haystack again, using our separately-compiled pattern.\n    .map(|re| re.find(hay).unwrap().as_bytes())\n    .collect();\n\n// Matches arrive in the order the constituent patterns were declared,\n// not the order they appear in the haystack.\nassert_eq!(vec![&b\"foo\"[..], &b\"bar\"[..]], matches);\n```\n\n# Performance\n\nA `RegexSet` has the same performance characteristics as `Regex`. Namely,\nsearch takes `O(m * n)` time, where `m` is proportional to the size of the\nregex set and `n` is proportional to the length of the haystack.\n\n# Trait implementations\n\nThe `Default` trait is implemented for `RegexSet`. The default value\nis an empty set. An empty set can also be explicitly constructed via\n[`RegexSet::empty`].\n\n# Example\n\nThis shows how the above two regexes (for matching email addresses and\ndomains) might work:\n\n```\nuse regex::bytes::RegexSet;\n\nlet set = RegexSet::new(&[\n    r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n    r\"[a-z]+\\.(com|org|net)\",\n]).unwrap();\n\n// Ask whether any regexes in the set match.\nassert!(set.is_match(b\"foo@example.com\"));\n\n// Identify which regexes in the set match.\nlet matches: Vec<_> = set.matches(b\"foo@example.com\").into_iter().collect();\nassert_eq!(vec![0, 1], matches);\n\n// Try again, but with a haystack that only matches one of the regexes.\nlet matches: Vec<_> = set.matches(b\"example.com\").into_iter().collect();\nassert_eq!(vec![1], matches);\n\n// Try again, but with a haystack that doesn't match any regex in the set.\nlet matches: Vec<_> = set.matches(b\"example\").into_iter().collect();\nassert!(matches.is_empty());\n```\n\nNote that it would be possible to adapt the above example to using `Regex`\nwith an expression like:\n\n```text\n(?P<email>[a-z]+@(?P<email_domain>[a-z]+[.](com|org|net)))|(?P<domain>[a-z]+[.](com|org|net))\n```\n\nAfter a match, one could then inspect the capture groups to figure out\nwhich alternates matched. The problem is that it is hard to make this\napproach scale when there are many regexes since the overlap between each\nalternate isn't always obvious to reason about.","links":{"crate::bytes::Match":"0:865:3298","crate::bytes::Regex":"0:860:2681","crate::RegexSet":"0:1103:2691","crate::bytes::Captures":"0:249:3373","`RegexSet::empty`":"0:704:4612"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:700","a:1:36000:251-0:1076:2691","a:1:3408:263-0:1076:2691","a:1:3443:5223-0:1076:2691","a:1:36058:4992-0:1076:2691","a:1:45870:4917-0:1076:2691","a:1:45871:4916-0:1076:2691","b:1:2860-0:1076:2691","b:1:2863-0:1076:2691","b:1:2918-0:1076:2691","b:1:3175-0:1076:2691","b:1:3179-0:1076:2691","b:1:3185-0:1076:2691","b:1:3190-0:1076:2691","b:1:4055-0:1076:2691","b:4:816-0:1076:2691","0:1079","0:715","0:750"]}}},"0:895":{"id":"0:895","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2163,9],"end":[2163,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:898:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:838":{"id":"0:838","crate_id":0,"name":null,"span":{"filename":"src/builders.rs","begin":[1371,13],"end":[1371,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:839:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:3443:5223-0:998:3317":{"id":"a:1:3443:5223-0:998:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2860-0:865:3298":{"id":"b:1:2860-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:293:211":{"id":"0:293:211","crate_id":0,"name":"Output","span":{"filename":"src/regex/bytes.rs","begin":[1988,4],"end":[1988,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"slice":{"primitive":"u8"}}}}},"b:1:3179-0:860:2681":{"id":"b:1:3179-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36058:4992-0:1066:4239":{"id":"a:1:36058:4992-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2918-0:1034:3760":{"id":"b:1:2918-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3185-0:958:4239":{"id":"b:1:3185-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4055-0:1034:3760":{"id":"b:1:4055-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36058:4992-0:836:2715":{"id":"a:1:36058:4992-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2918-0:1081:4659":{"id":"b:1:2918-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4055-0:1066:4239":{"id":"b:1:4055-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3408:263-0:991:3722":{"id":"a:1:3408:263-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:294:1000":{"id":"0:294:1000","crate_id":0,"name":"index","span":{"filename":"src/regex/bytes.rs","begin":[1992,4],"end":[1996,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"generic":"Self"}}}],["i",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:1016:3463":{"id":"a:1:36058:4992-0:1016:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3179-0:926:3760":{"id":"b:1:3179-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2860-0:1016:3463":{"id":"b:1:2860-0:1016:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:779:60":{"id":"0:779:60","crate_id":0,"name":"default","span":{"filename":"src/regexset/string.rs","begin":[450,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2860-0:1057:4226":{"id":"b:1:2860-0:1057:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:440:847":{"id":"0:440:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/string.rs","begin":[108,4],"end":[110,5]},"visibility":"default","docs":"Shows the original regular expression.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:332":{"id":"0:332","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2257,0],"end":[2264,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:335:185","0:336:1264"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:780":{"id":"0:780","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[461,0],"end":[585,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:781:4702","0:782:4712","0:783:1062","0:784:1039"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:197:3559":{"id":"0:197:3559","crate_id":0,"name":"replace","span":{"filename":"src/regex/bytes.rs","begin":[755,4],"end":[761,5]},"visibility":"public","docs":"Replaces the leftmost-first match in the given haystack with the\nreplacement provided. The replacement can be a regular string (where\n`$N` and `$name` are expanded to match capture groups) or a function\nthat takes a [`Captures`] and returns the replaced string.\n\nIf no match is found, then the haystack is returned unchanged. In that\ncase, this implementation will likely return a `Cow::Borrowed` value\nsuch that no allocation is performed.\n\nWhen a `Cow::Borrowed` is returned, the value returned is guaranteed\nto be equivalent to the `haystack` given.\n\n# Replacement string syntax\n\nAll instances of `$ref` in the replacement string are replaced with\nthe substring corresponding to the capture group identified by `ref`.\n\n`ref` may be an integer corresponding to the index of the capture group\n(counted by order of opening parenthesis where `0` is the entire match)\nor it can be a name (consisting of letters, digits or underscores)\ncorresponding to a named capture group.\n\nIf `ref` isn't a valid capture group (whether the name doesn't exist or\nisn't a valid index), then it is replaced with the empty string.\n\nThe longest possible name is used. For example, `$1a` looks up the\ncapture group named `1a` and not the capture group at index `1`. To\nexert more precise control over the name, use braces, e.g., `${1}a`.\n\nTo write a literal `$` use `$$`.\n\n# Example\n\nNote that this function is polymorphic with respect to the replacement.\nIn typical usage, this can just be a normal string:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"[^01]+\").unwrap();\nassert_eq!(re.replace(b\"1078910\", b\"\"), &b\"1010\"[..]);\n```\n\nBut anything satisfying the [`Replacer`] trait will work. For example,\na closure of type `|&Captures| -> String` provides direct access to the\ncaptures corresponding to a match. This allows one to access capturing\ngroup matches easily:\n\n```\nuse regex::bytes::{Captures, Regex};\n\nlet re = Regex::new(r\"([^,\\s]+),\\s+(\\S+)\").unwrap();\nlet result = re.replace(b\"Springsteen, Bruce\", |caps: &Captures| {\n    let mut buf = vec![];\n    buf.extend_from_slice(&caps[2]);\n    buf.push(b' ');\n    buf.extend_from_slice(&caps[1]);\n    buf\n});\nassert_eq!(result, &b\"Bruce Springsteen\"[..]);\n```\n\nBut this is a bit cumbersome to use all the time. Instead, a simple\nsyntax is supported (as described above) that expands `$name` into the\ncorresponding capture group. Here's the last example, but using this\nexpansion technique with named capture groups:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"(?<last>[^,\\s]+),\\s+(?<first>\\S+)\").unwrap();\nlet result = re.replace(b\"Springsteen, Bruce\", b\"$first $last\");\nassert_eq!(result, &b\"Bruce Springsteen\"[..]);\n```\n\nNote that using `$2` instead of `$first` or `$1` instead of `$last`\nwould produce the same result. To write a literal `$` use `$$`.\n\nSometimes the replacement string requires use of curly braces to\ndelineate a capture group replacement when it is adjacent to some other\nliteral text. For example, if we wanted to join two words together with\nan underscore:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"(?<first>\\w+)\\s+(?<second>\\w+)\").unwrap();\nlet result = re.replace(b\"deep fried\", b\"${first}_$second\");\nassert_eq!(result, &b\"deep_fried\"[..]);\n```\n\nWithout the curly braces, the capture group name `first_` would be\nused, and since it doesn't exist, it would be replaced with the empty\nstring.\n\nFinally, sometimes you just want to replace a literal string with no\nregard for capturing group expansion. This can be done by wrapping a\nstring with [`NoExpand`]:\n\n```\nuse regex::bytes::{NoExpand, Regex};\n\nlet re = Regex::new(r\"(?<last>[^,\\s]+),\\s+(\\S+)\").unwrap();\nlet result = re.replace(b\"Springsteen, Bruce\", NoExpand(b\"$2 $last\"));\nassert_eq!(result, &b\"$2 $last\"[..]);\n```\n\nUsing `NoExpand` may also be faster, since the replacement string won't\nneed to be parsed for the `$` syntax.","links":{"`NoExpand`":"0:958:4239","`Captures`":"0:249:3373","`Replacer`":"0:376:3561"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["rep",{"generic":"R"}]],"output":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Replacer","id":"0:376:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:872":{"id":"0:872","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[1482,15],"end":[1482,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:874:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:109:2706":{"id":"0:109:2706","crate_id":0,"name":"size_limit","span":{"filename":"src/builders.rs","begin":[1869,8],"end":[1872,9]},"visibility":"public","docs":"Sets the approximate size limit, in bytes, of the compiled regex.\n\nThis roughly corresponds to the number of heap memory, in\nbytes, occupied by a single regex. If the regex would otherwise\napproximately exceed this limit, then compiling that regex will\nfail.\n\nThe main utility of a method like this is to avoid compiling\nregexes that use an unexpected amount of resources, such as\ntime and memory. Even if the memory usage of a large regex is\nacceptable, its search time may not be. Namely, worst case time\ncomplexity for search is `O(m * n)`, where `m ~ len(pattern)` and\n`n ~ len(haystack)`. That is, search time depends, in part, on the\nsize of the compiled regex. This means that putting a limit on the\nsize of the regex limits how much a regex can impact search time.\n\nFor more information about regex size limits, see the section on\n[untrusted inputs](crate#untrusted-input) in the top-level crate\ndocumentation.\n\nThe default for this is some reasonable number that permits most\npatterns to compile successfully.\n\n# Example\n\n```\n# if !cfg!(target_pointer_width = \"64\") { return; } // see #1041\nuse regex::bytes::RegexBuilder;\n\n// It may surprise you how big some seemingly small patterns can\n// be! Since \\w is Unicode aware, this generates a regex that can\n// match approximately 140,000 distinct codepoints.\nassert!(RegexBuilder::new(r\"\\w\").size_limit(45_000).build().is_err());\n```","links":{"crate#untrusted-input":"0:0:2522"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["bytes",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:580:3638":{"id":"0:580:3638","crate_id":0,"name":"get","span":{"filename":"src/regex/string.rs","begin":[2100,4],"end":[2102,5]},"visibility":"public","docs":"Returns the start and end byte offsets of the capture group at index\n`i`. This returns `None` if `i` is not a valid capture group or if the\ncapture group did not match.\n\n# Example\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?<first>\\w+)\\s+(?<last>\\w+)\").unwrap();\nlet mut locs = re.capture_locations();\nre.captures_read(&mut locs, \"Bruce Springsteen\").unwrap();\nassert_eq!(Some((0, 17)), locs.get(0));\nassert_eq!(Some((0, 5)), locs.get(1));\nassert_eq!(Some((6, 17)), locs.get(2));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["i",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"primitive":"usize"}]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:1088:4744":{"id":"a:1:36058:4992-0:1088:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:785":{"id":"0:785","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[587,0],"end":[595,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:786:4743","0:787:185","0:788:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:789":{"id":"0:789","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[597,0],"end":[604,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"items":["0:791:4743","0:792:185","0:793:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:103:2699":{"id":"0:103:2699","crate_id":0,"name":"dot_matches_new_line","span":{"filename":"src/builders.rs","begin":[1562,8],"end":[1568,9]},"visibility":"public","docs":"This configures dot-matches-new-line mode for the entire pattern.\n\nPerhaps surprisingly, the default behavior for `.` is not to match\nany character, but rather, to match any character except for the\nline terminator (which is `\\n` by default). When this mode is\nenabled, the behavior changes such that `.` truly matches any\ncharacter.\n\nThis setting can also be configured using the inline flag `s` in\nthe pattern. For example, `(?s:.)` and `\\p{any}` are equivalent\nregexes.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::bytes::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"foo.bar\")\n    .dot_matches_new_line(true)\n    .build()\n    .unwrap();\nlet hay = b\"foo\\nbar\";\nassert_eq!(Some(&b\"foo\\nbar\"[..]), re.find(hay).map(|m| m.as_bytes()));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1097":{"id":"0:1097","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[683,9],"end":[683,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["0:1099:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:45871:4916-0:830:3015":{"id":"a:1:45871:4916-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3185-0:899:3405":{"id":"b:1:3185-0:899:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:682":{"id":"0:682","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2580,0],"end":[2588,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:648:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["0:684:3639","0:685:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3190-0:522:3373":{"id":"b:1:3190-0:522:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3185-0:936:4044":{"id":"b:1:3185-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45871:4916-0:1016:3463":{"id":"a:1:45871:4916-0:1016:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:4055-0:968:2681":{"id":"b:1:4055-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3175-0:968:2681":{"id":"b:1:3175-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:239":{"id":"0:239","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[1556,0],"end":[1567,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:241:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:71:2708":{"id":"0:71:2708","crate_id":0,"name":"dfa_size_limit","span":{"filename":"src/builders.rs","begin":[733,8],"end":[736,9]},"visibility":"public","docs":"Set the approximate capacity, in bytes, of the cache of transitions\nused by the lazy DFA.\n\nWhile the lazy DFA isn't always used, in tends to be the most\ncommonly use regex engine in default configurations. It tends to\nadopt the performance profile of a fully build DFA, but without the\ndownside of taking worst case exponential time to build.\n\nThe downside is that it needs to keep a cache of transitions and\nstates that are built while running a search, and this cache\ncan fill up. When it fills up, the cache will reset itself. Any\npreviously generated states and transitions will then need to be\nre-generated. If this happens too many times, then this library\nwill bail out of using the lazy DFA and switch to a different regex\nengine.\n\nIf your regex provokes this particular downside of the lazy DFA,\nthen it may be beneficial to increase its cache capacity. This will\npotentially reduce the frequency of cache resetting (ideally to\n`0`). While it won't fix all potential performance problems with\nthe lazy DFA, increasing the cache capacity does fix some.\n\nThere is no easy way to determine, a priori, whether increasing\nthis cache capacity will help. In general, the larger your regex,\nthe more cache it's likely to use. But that isn't an ironclad rule.\nFor example, a regex like `[01]*1[01]{N}` would normally produce a\nfully build DFA that is exponential in size with respect to `N`.\nThe lazy DFA will prevent exponential space blow-up, but it cache\nis likely to fill up, even when it's large and even for smallish\nvalues of `N`.\n\nIf you aren't sure whether this helps or not, it is sensible to\nset this to some arbitrarily large number in testing, such as\n`usize::MAX`. Namely, this represents the amount of capacity that\n*may* be used. It's probably not a good idea to use `usize::MAX` in\nproduction though, since it implies there are no controls on heap\nmemory used by this library during a search. In effect, set it to\nwhatever you're willing to allocate for a single regex search.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["bytes",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:798":{"id":"0:798","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[656,0],"end":[665,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8656:134","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:799:4752"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:771:4658":{"id":"0:771:4658","crate_id":0,"name":"matches","span":{"filename":"src/regexset/string.rs","begin":[287,4],"end":[289,5]},"visibility":"public","docs":"Returns the set of regexes that match in the given haystack.\n\nThe set returned contains the index of each regex that matches in\nthe given haystack. The index is in correspondence with the order of\nregular expressions given to `RegexSet`'s constructor.\n\nThe set can also be used to iterate over the matched indices. The order\nof iteration is always ascending with respect to the matching indices.\n\nNote that as with searches using [`Regex`](crate::Regex), the\nexpression is unanchored by default. That is, if the regex does not\nstart with `^` or `\\A`, or end with `$` or `\\z`, then it is permitted\nto match anywhere in the haystack.\n\n# Example\n\nTests which regular expressions match the given haystack:\n\n```\nuse regex::RegexSet;\n\nlet set = RegexSet::new([\n    r\"\\w+\",\n    r\"\\d+\",\n    r\"\\pL+\",\n    r\"foo\",\n    r\"bar\",\n    r\"barfoo\",\n    r\"foobar\",\n]).unwrap();\nlet matches: Vec<_> = set.matches(\"foobar\").into_iter().collect();\nassert_eq!(matches, vec![0, 2, 3, 4, 6]);\n\n// You can also test whether a particular regex matched:\nlet matches = set.matches(\"foobar\");\nassert!(!matches.matched(5));\nassert!(matches.matched(6));\n```","links":{"crate::Regex":"0:968:2681"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:45871:4916-0:1007:3405":{"id":"a:1:45871:4916-0:1007:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:814:847":{"id":"0:814:847","crate_id":0,"name":"fmt","span":{"filename":"src/regexset/string.rs","begin":[703,4],"end":[705,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:522:3373":{"id":"0:522:3373","crate_id":0,"name":"Captures","span":{"filename":"src/regex/string.rs","begin":[1642,0],"end":[1646,1]},"visibility":"public","docs":"Represents the capture groups for a single match.\n\nCapture groups refer to parts of a regex enclosed in parentheses. They\ncan be optionally named. The purpose of capture groups is to be able to\nreference different parts of a match based on the original pattern. In\nessence, a `Captures` is a container of [`Match`] values for each group\nthat participated in a regex match. Each `Match` can be looked up by either\nits capture group index or name (if it has one).\n\nFor example, say you want to match the individual letters in a 5-letter\nword:\n\n```text\n(?<first>\\w)(\\w)(?:\\w)\\w(?<last>\\w)\n```\n\nThis regex has 4 capture groups:\n\n* The group at index `0` corresponds to the overall match. It is always\npresent in every match and never has a name.\n* The group at index `1` with name `first` corresponding to the first\nletter.\n* The group at index `2` with no name corresponding to the second letter.\n* The group at index `3` with name `last` corresponding to the fifth and\nlast letter.\n\nNotice that `(?:\\w)` was not listed above as a capture group despite it\nbeing enclosed in parentheses. That's because `(?:pattern)` is a special\nsyntax that permits grouping but *without* capturing. The reason for not\ntreating it as a capture is that tracking and reporting capture groups\nrequires additional state that may lead to slower searches. So using as few\ncapture groups as possible can help performance. (Although the difference\nin performance of a couple of capture groups is likely immaterial.)\n\nValues with this type are created by [`Regex::captures`] or\n[`Regex::captures_iter`].\n\n`'h` is the lifetime of the haystack that these captures were matched from.\n\n# Example\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?<first>\\w)(\\w)(?:\\w)\\w(?<last>\\w)\").unwrap();\nlet caps = re.captures(\"toady\").unwrap();\nassert_eq!(\"toady\", &caps[0]);\nassert_eq!(\"t\", &caps[\"first\"]);\nassert_eq!(\"o\", &caps[2]);\nassert_eq!(\"y\", &caps[\"last\"]);\n```","links":{"`Match`":"0:973:3298","`Regex::captures`":"0:460:3180","`Regex::captures_iter`":"0:462:3404"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:527","a:1:36000:251-0:522:3373","a:1:3408:263-0:522:3373","a:1:3443:5223-0:522:3373","a:1:36058:4992-0:522:3373","a:1:45870:4917-0:522:3373","a:1:45871:4916-0:522:3373","b:1:2860-0:522:3373","b:1:2863-0:522:3373","b:1:3175-0:522:3373","b:1:3179-0:522:3373","b:1:3185-0:522:3373","b:1:3190-0:522:3373","b:1:4055-0:522:3373","0:539","0:563","0:570"]}}},"b:1:3179-0:968:2681":{"id":"b:1:3179-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:886":{"id":"0:886","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2063,9],"end":[2063,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:887:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:3408:263-0:1034:3760":{"id":"a:1:3408:263-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:4055-0:890:3317":{"id":"b:1:4055-0:890:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:591":{"id":"0:591","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2198,0],"end":[2198,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:64:2699":{"id":"0:64:2699","crate_id":0,"name":"dot_matches_new_line","span":{"filename":"src/builders.rs","begin":[392,8],"end":[398,9]},"visibility":"public","docs":"This configures dot-matches-new-line mode for the entire pattern.\n\nPerhaps surprisingly, the default behavior for `.` is not to match\nany character, but rather, to match any character except for the\nline terminator (which is `\\n` by default). When this mode is\nenabled, the behavior changes such that `.` truly matches any\ncharacter.\n\nThis setting can also be configured using the inline flag `s` in\nthe pattern. For example, `(?s:.)` and `\\p{any}` are equivalent\nregexes.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"foo.bar\")\n    .dot_matches_new_line(true)\n    .build()\n    .unwrap();\nlet hay = \"foo\\nbar\";\nassert_eq!(Some(\"foo\\nbar\"), re.find(hay).map(|m| m.as_str()));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:174:1923":{"id":"0:174:1923","crate_id":0,"name":"try_from","span":{"filename":"src/regex/bytes.rs","begin":[131,4],"end":[133,5]},"visibility":"default","docs":"Attempts to parse a string into a regular expression","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:490:3720":{"id":"0:490:3720","crate_id":0,"name":"captures_read","span":{"filename":"src/regex/string.rs","begin":[1194,4],"end":[1200,5]},"visibility":"public","docs":"This is like [`Regex::captures`], but writes the byte offsets of each\ncapture group match into the locations given.\n\nA [`CaptureLocations`] stores the same byte offsets as a [`Captures`],\nbut does *not* store a reference to the haystack. This makes its API\na bit lower level and less convenient. But in exchange, callers\nmay allocate their own `CaptureLocations` and reuse it for multiple\nsearches. This may be helpful if allocating a `Captures` shows up in a\nprofile as too costly.\n\nTo create a `CaptureLocations` value, use the\n[`Regex::capture_locations`] method.\n\nThis also returns the overall match if one was found. When a match is\nfound, its offsets are also always stored in `locs` at index `0`.\n\n# Panics\n\nThis routine may panic if the given `CaptureLocations` was not created\nby this regex.\n\n# Example\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"^([a-z]+)=(\\S*)$\").unwrap();\nlet mut locs = re.capture_locations();\nassert!(re.captures_read(&mut locs, \"id=foo123\").is_some());\nassert_eq!(Some((0, 9)), locs.get(0));\nassert_eq!(Some((0, 2)), locs.get(1));\nassert_eq!(Some((3, 9)), locs.get(2));\n```","links":{"`CaptureLocations`":"0:991:3722","`Captures`":"0:522:3373","`Regex::captures`":"0:460:3180","`Regex::capture_locations`":"0:502:3807"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["locs",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:968:2681":{"id":"a:1:3408:263-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3179-0:998:3317":{"id":"b:1:3179-0:998:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:319":{"id":"0:319","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2190,0],"end":[2190,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2863-0:848:150":{"id":"b:1:2863-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4055-0:936:4044":{"id":"b:1:4055-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:982:508":{"id":"0:982:508","crate_id":0,"name":"clone","span":{"filename":"src/regex/string.rs","begin":[1489,15],"end":[1489,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:529:3638":{"id":"0:529:3638","crate_id":0,"name":"get","span":{"filename":"src/regex/string.rs","begin":[1672,4],"end":[1676,5]},"visibility":"public","docs":"Returns the `Match` associated with the capture group at index `i`. If\n`i` does not correspond to a capture group, or if the capture group did\nnot participate in the match, then `None` is returned.\n\nWhen `i == 0`, this is guaranteed to return a non-`None` value.\n\n# Examples\n\nGet the substring that matched with a default of an empty string if the\ngroup didn't participate in the match:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"[a-z]+(?:([0-9]+)|([A-Z]+))\").unwrap();\nlet caps = re.captures(\"abc123\").unwrap();\n\nlet substr1 = caps.get(1).map_or(\"\", |m| m.as_str());\nlet substr2 = caps.get(2).map_or(\"\", |m| m.as_str());\nassert_eq!(substr1, \"123\");\nassert_eq!(substr2, \"\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["i",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:998:3317":{"id":"a:1:3408:263-0:998:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:751:847":{"id":"0:751:847","crate_id":0,"name":"fmt","span":{"filename":"src/regexset/bytes.rs","begin":[707,4],"end":[709,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:8585-0:1088:4744":{"id":"b:1:8585-0:1088:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2863-0:1120:4742":{"id":"b:1:2863-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3185-0:249:3373":{"id":"b:1:3185-0:249:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:1115:4744":{"id":"a:1:45870:4917-0:1115:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:308:3638":{"id":"0:308:3638","crate_id":0,"name":"get","span":{"filename":"src/regex/bytes.rs","begin":[2092,4],"end":[2094,5]},"visibility":"public","docs":"Returns the start and end byte offsets of the capture group at index\n`i`. This returns `None` if `i` is not a valid capture group or if the\ncapture group did not match.\n\n# Example\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"(?<first>\\w+)\\s+(?<last>\\w+)\").unwrap();\nlet mut locs = re.capture_locations();\nre.captures_read(&mut locs, b\"Bruce Springsteen\").unwrap();\nassert_eq!(Some((0, 17)), locs.get(0));\nassert_eq!(Some((0, 5)), locs.get(1));\nassert_eq!(Some((6, 17)), locs.get(2));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["i",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"primitive":"usize"}]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:4055-0:899:3405":{"id":"b:1:4055-0:899:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3443:5223-0:1120:4742":{"id":"a:1:3443:5223-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"1:8588:4743":{"id":"1:8588:4743","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"I"}}}},"a:1:3408:263-0:899:3405":{"id":"a:1:3408:263-0:899:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:724:185":{"id":"0:724:185","crate_id":0,"name":"Item","span":{"filename":"src/regexset/bytes.rs","begin":[593,4],"end":[593,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"primitive":"usize"}}}},"b:1:3190-0:991:3722":{"id":"b:1:3190-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:890:3317":{"id":"a:1:45870:4917-0:890:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[1489,0],"end":[1554,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:232:1813","0:233:733","0:234:3861","0:235:1062","0:236:3865","0:237:3867"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:787:185":{"id":"0:787:185","crate_id":0,"name":"Item","span":{"filename":"src/regexset/string.rs","begin":[589,4],"end":[589,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"primitive":"usize"}}}},"0:83:2701":{"id":"0:83:2701","crate_id":0,"name":"line_terminator","span":{"filename":"src/builders.rs","begin":[1108,8],"end":[1111,9]},"visibility":"public","docs":"Configures the line terminator to be used by the regex.\n\nThe line terminator is relevant in two ways for a particular regex:\n\n* When dot-matches-new-line mode is *not* enabled (the default),\nthen `.` will match any character except for the configured line\nterminator.\n* When multi-line mode is enabled (not the default), then `^` and\n`$` will match immediately after and before, respectively, a line\nterminator.\n\nIn both cases, if CRLF mode is enabled in a particular context,\nthen it takes precedence over any configured line terminator.\n\nThis option cannot be configured from within the pattern.\n\nThe default line terminator is `\\n`.\n\n# Example\n\nThis shows how to treat the NUL byte as a line terminator. This can\nbe a useful heuristic when searching binary data.\n\n```\nuse regex::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\"^foo$\"])\n    .multi_line(true)\n    .line_terminator(b'\\x00')\n    .build()\n    .unwrap();\nlet hay = \"\\x00foo\\x00\";\nassert!(re.is_match(hay));\n```\n\nThis example shows that the behavior of `.` is impacted by this\nsetting as well:\n\n```\nuse regex::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\".\"])\n    .line_terminator(b'\\x00')\n    .build()\n    .unwrap();\nassert!(re.is_match(\"\\n\"));\nassert!(!re.is_match(\"\\x00\"));\n```\n\nThis shows that building a regex will fail if the byte given\nis not ASCII and the pattern could result in matching invalid\nUTF-8. This is because any singular non-ASCII byte is not valid\nUTF-8, and it is not permitted for a [`RegexSet`] to match invalid\nUTF-8. (It is permissible to use a non-ASCII byte when building a\n[`bytes::RegexSet`](crate::bytes::RegexSet).)\n\n```\nuse regex::RegexSetBuilder;\n\nassert!(\n    RegexSetBuilder::new([r\".\"])\n        .line_terminator(0x80)\n        .build()\n        .is_err()\n);\n// Note that using a non-ASCII byte isn't enough on its own to\n// cause regex compilation to fail. You actually have to make use\n// of it in the regex in a way that leads to matching invalid\n// UTF-8. If you don't, then regex compilation will succeed!\nassert!(\n    RegexSetBuilder::new([r\"a\"])\n        .line_terminator(0x80)\n        .build()\n        .is_ok()\n);\n```","links":{"`RegexSet`":"0:1103:2691","crate::bytes::RegexSet":"0:1076:2691"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:492:3723":{"id":"0:492:3723","crate_id":0,"name":"captures_read_at","span":{"filename":"src/regex/string.rs","begin":[1234,4],"end":[1243,5]},"visibility":"public","docs":"Returns the same as [`Regex::captures_read`], but starts the search at\nthe given offset.\n\nThe significance of the starting point is that it takes the surrounding\ncontext into consideration. For example, the `\\A` anchor can only\nmatch when `start == 0`.\n\n# Panics\n\nThis panics when `start >= haystack.len() + 1`.\n\nThis routine may also panic if the given `CaptureLocations` was not\ncreated by this regex.\n\n# Example\n\nThis example shows the significance of `start` by demonstrating how it\ncan be used to permit look-around assertions in a regex to take the\nsurrounding context into account.\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"\\bchew\\b\").unwrap();\nlet hay = \"eschew\";\nlet mut locs = re.capture_locations();\n// We get a match here, but it's probably not intended.\nassert!(re.captures_read(&mut locs, &hay[2..]).is_some());\n// No match because the  assertions take the context into account.\nassert!(re.captures_read_at(&mut locs, hay, 2).is_none());\n```","links":{"`Regex::captures_read`":"0:490:3720"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["locs",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}],["start",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:4055-0:824:2715":{"id":"b:1:4055-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:991:3722":{"id":"0:991:3722","crate_id":0,"name":"CaptureLocations","span":{"filename":"src/regex/string.rs","begin":[2072,0],"end":[2072,48]},"visibility":"public","docs":"A low level representation of the byte offsets of each capture group.\n\nYou can think of this as a lower level [`Captures`], where this type does\nnot support named capturing groups directly and it does not borrow the\nhaystack that these offsets were matched on.\n\nPrimarily, this type is useful when using the lower level `Regex` APIs such\nas [`Regex::captures_read`], which permits amortizing the allocation in\nwhich capture match offsets are stored.\n\nIn order to build a value of this type, you'll need to call the\n[`Regex::capture_locations`] method. The value returned can then be reused\nin subsequent searches for that regex. Using it for other regexes may\nresult in a panic or otherwise incorrect results.\n\n# Example\n\nThis example shows how to create and use `CaptureLocations` in a search.\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?<first>\\w+)\\s+(?<last>\\w+)\").unwrap();\nlet mut locs = re.capture_locations();\nlet m = re.captures_read(&mut locs, \"Bruce Springsteen\").unwrap();\nassert_eq!(0..17, m.range());\nassert_eq!(Some((0, 17)), locs.get(0));\nassert_eq!(Some((0, 5)), locs.get(1));\nassert_eq!(Some((6, 17)), locs.get(2));\n\n// Asking for an invalid capture group always returns None.\nassert_eq!(None, locs.get(3));\n# // literals are too big for 32-bit usize: #1041\n# #[cfg(target_pointer_width = \"64\")]\nassert_eq!(None, locs.get(34973498648));\n# #[cfg(target_pointer_width = \"64\")]\nassert_eq!(None, locs.get(9944060567225171988));\n```","links":{"`Regex::captures_read`":"0:490:3720","`Captures`":"0:522:3373","`Regex::capture_locations`":"0:502:3807"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:579","a:1:36000:251-0:991:3722","a:1:3408:263-0:991:3722","a:1:3443:5223-0:991:3722","a:1:36058:4992-0:991:3722","a:1:45870:4917-0:991:3722","a:1:45871:4916-0:991:3722","b:1:2860-0:991:3722","b:1:2863-0:991:3722","b:1:2918-0:991:3722","b:1:3175-0:991:3722","b:1:3179-0:991:3722","b:1:3185-0:991:3722","b:1:3190-0:991:3722","b:1:4055-0:991:3722","b:4:816-0:991:3722","0:994","0:996"]}}},"0:797:4157":{"id":"0:797:4157","crate_id":0,"name":"size_hint","span":{"filename":"src/regexset/string.rs","begin":[651,4],"end":[653,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}}]},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36000:251-0:1016:3463":{"id":"a:1:36000:251-0:1016:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:625:185":{"id":"0:625:185","crate_id":0,"name":"Item","span":{"filename":"src/regex/string.rs","begin":[2330,4],"end":[2330,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'r","is_mutable":false,"type":{"primitive":"str"}}}}],"constraints":[]}}}}}}},"a:1:45870:4917-0:830:3015":{"id":"a:1:45870:4917-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:45870:4917-0:1044:4044":{"id":"a:1:45870:4917-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:65:2700":{"id":"0:65:2700","crate_id":0,"name":"crlf","span":{"filename":"src/builders.rs","begin":[450,8],"end":[453,9]},"visibility":"public","docs":"This configures CRLF mode for the entire pattern.\n\nWhen CRLF mode is enabled, both `\\r` (\"carriage return\" or CR for\nshort) and `\\n` (\"line feed\" or LF for short) are treated as line\nterminators. This results in the following:\n\n* Unless dot-matches-new-line mode is enabled, `.` will now match\nany character except for `\\n` and `\\r`.\n* When multi-line mode is enabled, `^` will match immediately\nfollowing a `\\n` or a `\\r`. Similarly, `$` will match immediately\npreceding a `\\n` or a `\\r`. Neither `^` nor `$` will ever match\nbetween `\\r` and `\\n`.\n\nThis setting can also be configured using the inline flag `R` in\nthe pattern.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"^foo$\")\n    .multi_line(true)\n    .crlf(true)\n    .build()\n    .unwrap();\nlet hay = \"\\r\\nfoo\\r\\n\";\n// If CRLF mode weren't enabled here, then '$' wouldn't match\n// immediately after 'foo', and thus no match would be found.\nassert_eq!(Some(\"foo\"), re.find(hay).map(|m| m.as_str()));\n```\n\nThis example demonstrates that `^` will never match at a position\nbetween `\\r` and `\\n`. (`$` will similarly not match between a `\\r`\nand a `\\n`.)\n\n```\nuse regex::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"^\")\n    .multi_line(true)\n    .crlf(true)\n    .build()\n    .unwrap();\nlet hay = \"\\r\\n\\r\\n\";\nlet ranges: Vec<_> = re.find_iter(hay).map(|m| m.range()).collect();\nassert_eq!(ranges, vec![0..0, 2..2, 4..4]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3175-0:1093:4742":{"id":"b:1:3175-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36000:251-0:958:4239":{"id":"a:1:36000:251-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:824:2715":{"id":"0:824:2715","crate_id":0,"name":"RegexBuilder","span":{"filename":"src/builders.rs","begin":[212,4],"end":[214,5]},"visibility":"public","docs":"A configurable builder for a [`Regex`].\n\nThis builder can be used to programmatically set flags such as `i`\n(case insensitive) and `x` (for verbose mode). This builder can also be\nused to configure things like the line terminator and a size limit on\nthe compiled regular expression.","links":{"`Regex`":"0:968:2681"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:58","a:1:36000:251-0:824:2715","a:1:3408:263-0:824:2715","a:1:3443:5223-0:824:2715","a:1:36058:4992-0:824:2715","a:1:45870:4917-0:824:2715","a:1:45871:4916-0:824:2715","b:1:2860-0:824:2715","b:1:2863-0:824:2715","b:1:2918-0:824:2715","b:1:3175-0:824:2715","b:1:3179-0:824:2715","b:1:3185-0:824:2715","b:1:3190-0:824:2715","b:1:4055-0:824:2715","b:4:816-0:824:2715","0:826","0:828"]}}},"0:335:185":{"id":"0:335:185","crate_id":0,"name":"Item","span":{"filename":"src/regex/bytes.rs","begin":[2258,4],"end":[2258,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}}}},"b:1:2918-0:1076:2691":{"id":"b:1:2918-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:889:847":{"id":"0:889:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/bytes.rs","begin":[2063,16],"end":[2063,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36000:251-0:860:2681":{"id":"a:1:36000:251-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:916:847":{"id":"0:916:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/bytes.rs","begin":[2251,9],"end":[2251,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:883:3722":{"id":"0:883:3722","crate_id":0,"name":"CaptureLocations","span":{"filename":"src/regex/bytes.rs","begin":[2064,0],"end":[2064,48]},"visibility":"public","docs":"A low level representation of the byte offsets of each capture group.\n\nYou can think of this as a lower level [`Captures`], where this type does\nnot support named capturing groups directly and it does not borrow the\nhaystack that these offsets were matched on.\n\nPrimarily, this type is useful when using the lower level `Regex` APIs such\nas [`Regex::captures_read`], which permits amortizing the allocation in\nwhich capture match offsets are stored.\n\nIn order to build a value of this type, you'll need to call the\n[`Regex::capture_locations`] method. The value returned can then be reused\nin subsequent searches for that regex. Using it for other regexes may\nresult in a panic or otherwise incorrect results.\n\n# Example\n\nThis example shows how to create and use `CaptureLocations` in a search.\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"(?<first>\\w+)\\s+(?<last>\\w+)\").unwrap();\nlet mut locs = re.capture_locations();\nlet m = re.captures_read(&mut locs, b\"Bruce Springsteen\").unwrap();\nassert_eq!(0..17, m.range());\nassert_eq!(Some((0, 17)), locs.get(0));\nassert_eq!(Some((0, 5)), locs.get(1));\nassert_eq!(Some((6, 17)), locs.get(2));\n\n// Asking for an invalid capture group always returns None.\nassert_eq!(None, locs.get(3));\n# // literals are too big for 32-bit usize: #1041\n# #[cfg(target_pointer_width = \"64\")]\nassert_eq!(None, locs.get(34973498648));\n# #[cfg(target_pointer_width = \"64\")]\nassert_eq!(None, locs.get(9944060567225171988));\n```","links":{"`Regex::captures_read`":"0:216:3720","`Captures`":"0:249:3373","`Regex::capture_locations`":"0:228:3807"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:307","a:1:36000:251-0:883:3722","a:1:3408:263-0:883:3722","a:1:3443:5223-0:883:3722","a:1:36058:4992-0:883:3722","a:1:45870:4917-0:883:3722","a:1:45871:4916-0:883:3722","b:1:2860-0:883:3722","b:1:2863-0:883:3722","b:1:2918-0:883:3722","b:1:3175-0:883:3722","b:1:3179-0:883:3722","b:1:3185-0:883:3722","b:1:3190-0:883:3722","b:1:4055-0:883:3722","b:4:816-0:883:3722","0:886","0:888"]}}},"0:397:3639":{"id":"0:397:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/bytes.rs","begin":[2503,4],"end":[2505,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Vec","id":"4:7390:282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:98:1249":{"id":"0:98:1249","crate_id":0,"name":"new","span":{"filename":"src/builders.rs","begin":[1383,8],"end":[1385,9]},"visibility":"public","docs":"Create a new builder with a default configuration for the given\npattern.\n\nIf the pattern is invalid or exceeds the configured size limits,\nthen an error will be returned when [`RegexBuilder::build`] is\ncalled.","links":{"`RegexBuilder::build`":"0:99:2687"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["pattern",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:804:1264":{"id":"0:804:1264","crate_id":0,"name":"next","span":{"filename":"src/regexset/string.rs","begin":[685,4],"end":[687,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:860:2681":{"id":"0:860:2681","crate_id":0,"name":"Regex","span":{"filename":"src/regex/bytes.rs","begin":[99,0],"end":[102,1]},"visibility":"public","docs":"A compiled regular expression for searching Unicode haystacks.\n\nA `Regex` can be used to search haystacks, split haystacks into substrings\nor replace substrings in a haystack with a different substring. All\nsearching is done with an implicit `(?s:.)*?` at the beginning and end of\nan pattern. To force an expression to match the whole string (or a prefix\nor a suffix), you must use an anchor like `^` or `$` (or `\\A` and `\\z`).\n\nLike the `Regex` type in the parent module, matches with this regex return\nbyte offsets into the haystack. **Unlike** the parent `Regex` type, these\nbyte offsets may not correspond to UTF-8 sequence boundaries since the\nregexes in this module can match arbitrary bytes.\n\nThe only methods that allocate new byte strings are the string replacement\nmethods. All other methods (searching and splitting) return borrowed\nreferences into the haystack given.\n\n# Example\n\nFind the offsets of a US phone number:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(\"[0-9]{3}-[0-9]{3}-[0-9]{4}\").unwrap();\nlet m = re.find(b\"phone: 111-222-3333\").unwrap();\nassert_eq!(7..19, m.range());\n```\n\n# Example: extracting capture groups\n\nA common way to use regexes is with capture groups. That is, instead of\njust looking for matches of an entire regex, parentheses are used to create\ngroups that represent part of the match.\n\nFor example, consider a haystack with multiple lines, and each line has\nthree whitespace delimited fields where the second field is expected to be\na number and the third field a boolean. To make this convenient, we use\nthe [`Captures::extract`] API to put the strings that match each group\ninto a fixed size array:\n\n```\nuse regex::bytes::Regex;\n\nlet hay = b\"\nrabbit         54 true\ngroundhog 2 true\ndoes not match\nfox   109    false\n\";\nlet re = Regex::new(r\"(?m)^\\s*(\\S+)\\s+([0-9]+)\\s+(true|false)\\s*$\").unwrap();\nlet mut fields: Vec<(&[u8], i64, bool)> = vec![];\nfor (_, [f1, f2, f3]) in re.captures_iter(hay).map(|caps| caps.extract()) {\n    // These unwraps are OK because our pattern is written in a way where\n    // all matches for f2 and f3 will be valid UTF-8.\n    let f2 = std::str::from_utf8(f2).unwrap();\n    let f3 = std::str::from_utf8(f3).unwrap();\n    fields.push((f1, f2.parse()?, f3.parse()?));\n}\nassert_eq!(fields, vec![\n    (&b\"rabbit\"[..], 54, true),\n    (&b\"groundhog\"[..], 2, true),\n    (&b\"fox\"[..], 109, false),\n]);\n\n# Ok::<(), Box<dyn std::error::Error>>(())\n```\n\n# Example: matching invalid UTF-8\n\nOne of the reasons for searching `&[u8]` haystacks is that the `&[u8]`\nmight not be valid UTF-8. Indeed, with a `bytes::Regex`, patterns that\nmatch invalid UTF-8 are explicitly allowed. Here's one example that looks\nfor valid UTF-8 fields that might be separated by invalid UTF-8. In this\ncase, we use `(?s-u:.)`, which matches any byte. Attempting to use it in a\ntop-level `Regex` will result in the regex failing to compile. Notice also\nthat we use `.` with Unicode mode enabled, in which case, only valid UTF-8\nis matched. In this way, we can build one pattern where some parts only\nmatch valid UTF-8 while other parts are more permissive.\n\n```\nuse regex::bytes::Regex;\n\n// F0 9F 92 A9 is the UTF-8 encoding for a Pile of Poo.\nlet hay = b\"\\xFF\\xFFfoo\\xFF\\xFF\\xFF\\xF0\\x9F\\x92\\xA9\\xFF\";\n// An equivalent to '(?s-u:.)' is '(?-u:[\\x00-\\xFF])'.\nlet re = Regex::new(r\"(?s)(?-u:.)*?(?<f1>.+)(?-u:.)*?(?<f2>.+)\").unwrap();\nlet caps = re.captures(hay).unwrap();\nassert_eq!(&caps[\"f1\"], &b\"foo\"[..]);\nassert_eq!(&caps[\"f2\"], \"💩\".as_bytes());\n```","links":{"`Captures::extract`":"0:260:3984"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:178","0:206","0:223","a:1:36000:251-0:860:2681","a:1:3408:263-0:860:2681","a:1:3443:5223-0:860:2681","a:1:36058:4992-0:860:2681","a:1:45870:4917-0:860:2681","a:1:45871:4916-0:860:2681","b:1:2860-0:860:2681","b:1:2863-0:860:2681","b:1:2918-0:860:2681","b:1:3175-0:860:2681","b:1:3179-0:860:2681","b:1:3185-0:860:2681","b:1:3190-0:860:2681","b:1:4055-0:860:2681","b:4:816-0:860:2681","b:4:6133-0:860:2681","0:863","0:165","0:167","0:169","0:172","0:175"]}}},"b:1:3175-0:883:3722":{"id":"b:1:3175-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:179:1249":{"id":"0:179:1249","crate_id":0,"name":"new","span":{"filename":"src/regex/bytes.rs","begin":[178,4],"end":[180,5]},"visibility":"public","docs":"Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace substrings in a haystack.\n\nNote that regex compilation tends to be a somewhat expensive process,\nand unlike higher level environments, compilation is not automatically\ncached for you. One should endeavor to compile a regex once and then\nreuse it. For example, it's a bad idea to compile the same regex\nrepeatedly in a loop.\n\n# Errors\n\nIf an invalid pattern is given, then an error is returned.\nAn error is also returned if the pattern is valid, but would\nproduce a regex that is bigger than the configured size limit via\n[`RegexBuilder::size_limit`]. (A reasonable size limit is enabled by\ndefault.)\n\n# Example\n\n```\nuse regex::bytes::Regex;\n\n// An Invalid pattern because of an unclosed parenthesis\nassert!(Regex::new(r\"foo(bar\").is_err());\n// An invalid pattern because the regex would be too big\n// because Unicode tends to inflate things.\nassert!(Regex::new(r\"\\w{1000}\").is_err());\n// Disabling Unicode can make the regex much smaller,\n// potentially by up to or more than an order of magnitude.\nassert!(Regex::new(r\"(?-u:\\w){1000}\").is_ok());\n```","links":{"`RegexBuilder::size_limit`":"0:109:2706"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["re",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:355:4157":{"id":"0:355:4157","crate_id":0,"name":"size_hint","span":{"filename":"src/regex/bytes.rs","begin":[2330,4],"end":[2332,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}}]},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3175-0:949:4226":{"id":"b:1:3175-0:949:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2860-0:1034:3760":{"id":"b:1:2860-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3181:878":{"id":"1:3181:878","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3185-0:973:3298":{"id":"b:1:3185-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:816-0:926:3760":{"id":"b:4:816-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3443:5223-0:936:4044":{"id":"a:1:3443:5223-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:402":{"id":"0:402","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2522,0],"end":[2530,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:376:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"alloc::borrow::Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}},"items":["0:404:3639","0:405:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3175-0:836:2715":{"id":"b:1:3175-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3175-0:522:3373":{"id":"b:1:3175-0:522:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3185-0:848:150":{"id":"b:1:3185-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:175":{"id":"0:175","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[136,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:176:150","0:177:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2918-0:991:3722":{"id":"b:1:2918-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:88:2708":{"id":"0:88:2708","crate_id":0,"name":"dfa_size_limit","span":{"filename":"src/builders.rs","begin":[1306,8],"end":[1312,9]},"visibility":"public","docs":"Set the approximate capacity, in bytes, of the cache of transitions\nused by the lazy DFA.\n\nWhile the lazy DFA isn't always used, in tends to be the most\ncommonly use regex engine in default configurations. It tends to\nadopt the performance profile of a fully build DFA, but without the\ndownside of taking worst case exponential time to build.\n\nThe downside is that it needs to keep a cache of transitions and\nstates that are built while running a search, and this cache\ncan fill up. When it fills up, the cache will reset itself. Any\npreviously generated states and transitions will then need to be\nre-generated. If this happens too many times, then this library\nwill bail out of using the lazy DFA and switch to a different regex\nengine.\n\nIf your regex provokes this particular downside of the lazy DFA,\nthen it may be beneficial to increase its cache capacity. This will\npotentially reduce the frequency of cache resetting (ideally to\n`0`). While it won't fix all potential performance problems with\nthe lazy DFA, increasing the cache capacity does fix some.\n\nThere is no easy way to determine, a priori, whether increasing\nthis cache capacity will help. In general, the larger your regex,\nthe more cache it's likely to use. But that isn't an ironclad rule.\nFor example, a regex like `[01]*1[01]{N}` would normally produce a\nfully build DFA that is exponential in size with respect to `N`.\nThe lazy DFA will prevent exponential space blow-up, but it cache\nis likely to fill up, even when it's large and even for smallish\nvalues of `N`.\n\nIf you aren't sure whether this helps or not, it is sensible to\nset this to some arbitrarily large number in testing, such as\n`usize::MAX`. Namely, this represents the amount of capacity that\n*may* be used. It's probably not a good idea to use `usize::MAX` in\nproduction though, since it implies there are no controls on heap\nmemory used by this library during a search. In effect, set it to\nwhatever you're willing to allocate for a single regex search.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["bytes",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:973:3298":{"id":"a:1:3408:263-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:127:2708":{"id":"0:127:2708","crate_id":0,"name":"dfa_size_limit","span":{"filename":"src/builders.rs","begin":[2490,8],"end":[2496,9]},"visibility":"public","docs":"Set the approximate capacity, in bytes, of the cache of transitions\nused by the lazy DFA.\n\nWhile the lazy DFA isn't always used, in tends to be the most\ncommonly use regex engine in default configurations. It tends to\nadopt the performance profile of a fully build DFA, but without the\ndownside of taking worst case exponential time to build.\n\nThe downside is that it needs to keep a cache of transitions and\nstates that are built while running a search, and this cache\ncan fill up. When it fills up, the cache will reset itself. Any\npreviously generated states and transitions will then need to be\nre-generated. If this happens too many times, then this library\nwill bail out of using the lazy DFA and switch to a different regex\nengine.\n\nIf your regex provokes this particular downside of the lazy DFA,\nthen it may be beneficial to increase its cache capacity. This will\npotentially reduce the frequency of cache resetting (ideally to\n`0`). While it won't fix all potential performance problems with\nthe lazy DFA, increasing the cache capacity does fix some.\n\nThere is no easy way to determine, a priori, whether increasing\nthis cache capacity will help. In general, the larger your regex,\nthe more cache it's likely to use. But that isn't an ironclad rule.\nFor example, a regex like `[01]*1[01]{N}` would normally produce a\nfully build DFA that is exponential in size with respect to `N`.\nThe lazy DFA will prevent exponential space blow-up, but it cache\nis likely to fill up, even when it's large and even for smallish\nvalues of `N`.\n\nIf you aren't sure whether this helps or not, it is sensible to\nset this to some arbitrarily large number in testing, such as\n`usize::MAX`. Namely, this represents the amount of capacity that\n*may* be used. It's probably not a good idea to use `usize::MAX` in\nproduction though, since it implies there are no controls on heap\nmemory used by this library during a search. In effect, set it to\nwhatever you're willing to allocate for a single regex search.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["bytes",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:4:816-0:968:2681":{"id":"b:4:816-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:485:3299":{"id":"0:485:3299","crate_id":0,"name":"find_at","span":{"filename":"src/regex/string.rs","begin":[1105,4],"end":[1114,5]},"visibility":"public","docs":"Returns the same as [`Regex::find`], but starts the search at the given\noffset.\n\nThe significance of the starting point is that it takes the surrounding\ncontext into consideration. For example, the `\\A` anchor can only\nmatch when `start == 0`.\n\n# Panics\n\nThis panics when `start >= haystack.len() + 1`.\n\n# Example\n\nThis example shows the significance of `start` by demonstrating how it\ncan be used to permit look-around assertions in a regex to take the\nsurrounding context into account.\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"\\bchew\\b\").unwrap();\nlet hay = \"eschew\";\n// We get a match here, but it's probably not intended.\nassert_eq!(re.find(&hay[2..]).map(|m| m.range()), Some(0..4));\n// No match because the  assertions take the context into account.\nassert_eq!(re.find_at(hay, 2), None);\n```","links":{"`Regex::find`":"0:455:3296"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}],["start",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:45871:4916-0:1115:4744":{"id":"a:1:45871:4916-0:1115:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3185-0:1066:4239":{"id":"b:1:3185-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:833:508":{"id":"0:833:508","crate_id":0,"name":"clone","span":{"filename":"src/builders.rs","begin":[786,13],"end":[786,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:401:3627":{"id":"0:401:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/bytes.rs","begin":[2517,4],"end":[2519,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3185-0:830:3015":{"id":"b:1:3185-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3408:263-0:1081:4659":{"id":"a:1:3408:263-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:731":{"id":"0:731","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[643,0],"end":[658,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:732:185","0:733:1264","0:734:4157"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2366,0],"end":[2385,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:364:185","0:365:1264","0:368:4157","0:369:613"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:263:1039":{"id":"0:263:1039","crate_id":0,"name":"iter","span":{"filename":"src/regex/bytes.rs","begin":[1883,4],"end":[1885,5]},"visibility":"public","docs":"Returns an iterator over all capture groups. This includes both\nmatching and non-matching groups.\n\nThe iterator always yields at least one matching group: the first group\n(at index `0`) with no name. Subsequent groups are returned in the order\nof their opening parenthesis in the regex.\n\nThe elements yielded have type `Option<Match<'h>>`, where a non-`None`\nvalue is present if the capture group matches.\n\n# Example\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"(\\w)(\\d)?(\\w)\").unwrap();\nlet caps = re.captures(b\"AZ\").unwrap();\n\nlet mut it = caps.iter();\nassert_eq!(it.next().unwrap().map(|m| m.as_bytes()), Some(&b\"AZ\"[..]));\nassert_eq!(it.next().unwrap().map(|m| m.as_bytes()), Some(&b\"A\"[..]));\nassert_eq!(it.next().unwrap().map(|m| m.as_bytes()), None);\nassert_eq!(it.next().unwrap().map(|m| m.as_bytes()), Some(&b\"Z\"[..]));\nassert_eq!(it.next(), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'c","is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:351":{"id":"0:351","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2321,0],"end":[2338,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["0:353:185","0:354:1264","0:355:4157","0:356:613"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:995:508":{"id":"0:995:508","crate_id":0,"name":"clone","span":{"filename":"src/regex/string.rs","begin":[2071,9],"end":[2071,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:778":{"id":"0:778","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[449,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3227:127","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:779:60"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:36058:4992-0:1108:4659":{"id":"a:1:36058:4992-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36058:4992-0:1076:2691":{"id":"a:1:36058:4992-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:738":{"id":"0:738","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[686,0],"end":[696,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["0:740:185","0:741:1264","0:743:4157"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:3443:5223-0:1076:2691":{"id":"a:1:3443:5223-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[111,0],"end":[116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:168:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:3443:5223-0:1088:4744":{"id":"a:1:3443:5223-0:1088:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"1:2920:31185":{"id":"1:2920:31185","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"is_mutable":true,"type":{"generic":"T"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2863-0:824:2715":{"id":"b:1:2863-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:587:185":{"id":"0:587:185","crate_id":0,"name":"Item","span":{"filename":"src/regex/string.rs","begin":[2178,4],"end":[2178,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}}},"b:1:8585-0:1044:4044":{"id":"b:1:8585-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2863-0:1093:4742":{"id":"b:1:2863-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:741:1264":{"id":"0:741:1264","crate_id":0,"name":"next","span":{"filename":"src/regexset/bytes.rs","begin":[689,4],"end":[691,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:851:2108":{"id":"0:851:2108","crate_id":0,"name":"0","span":{"filename":"src/error.rs","begin":[10,11],"end":[10,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"alloc::string::String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"0:1024:847":{"id":"0:1024:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/string.rs","begin":[2259,9],"end":[2259,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:743:4157":{"id":"0:743:4157","crate_id":0,"name":"size_hint","span":{"filename":"src/regexset/bytes.rs","begin":[693,4],"end":[695,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}}]},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[138,0],"end":[145,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:450:150","0:451:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:36058:4992-0:1025:3491":{"id":"a:1:36058:4992-0:1025:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:265:1062":{"id":"0:265:1062","crate_id":0,"name":"len","span":{"filename":"src/regex/bytes.rs","begin":[1905,4],"end":[1907,5]},"visibility":"public","docs":"Returns the total number of capture groups. This includes both\nmatching and non-matching groups.\n\nThe length returned is always equivalent to the number of elements\nyielded by [`Captures::iter`]. Consequently, the length is always\ngreater than zero since every `Captures` value always includes the\nmatch for the entire regex.\n\n# Example\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"(\\w)(\\d)?(\\w)\").unwrap();\nlet caps = re.captures(b\"AZ\").unwrap();\nassert_eq!(caps.len(), 4);\n```","links":{"`Captures::iter`":"0:263:1039"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2918-0:1108:4659":{"id":"b:1:2918-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:776:3861":{"id":"0:776:3861","crate_id":0,"name":"is_empty","span":{"filename":"src/regexset/string.rs","begin":[411,4],"end":[413,5]},"visibility":"public","docs":"Returns `true` if this set contains no regexes.\n\n# Example\n\n```\nuse regex::RegexSet;\n\nassert!(RegexSet::empty().is_empty());\nassert!(!RegexSet::new([r\"[0-9]\"]).unwrap().is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:178":{"id":"0:178","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[146,0],"end":[975,1]},"visibility":"default","docs":"Core regular expression methods.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:179:1249","0:180:3282","0:181:3296","0:183:3315","0:186:3180","0:188:3404","0:191:3462","0:194:3490","0:197:3559","0:200:3618","0:203:3563"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:1124":{"id":"0:1124","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[679,9],"end":[679,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["0:1126:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:36058:4992-0:860:2681":{"id":"a:1:36058:4992-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[1638,0],"end":[1908,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:256:3638","0:258:1223","0:260:3984","0:262:4024","0:263:1039","0:265:1062"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:539":{"id":"0:539","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[1920,0],"end":[1979,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:541:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:426:2521":{"id":"0:426:2521","crate_id":0,"name":"string","span":{"filename":"src/regex/string.rs","begin":[1,0],"end":[2604,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:968:2681","0:973:3298","0:522:3373","0:991:3722","0:998:3317","0:1007:3405","0:1016:3463","0:1025:3491","0:1034:3760","0:1044:4044","0:648:3561","0:1057:4226","0:1066:4239"],"is_stripped":true}}},"0:854:2108":{"id":"0:854:2108","crate_id":0,"name":"0","span":{"filename":"src/error.rs","begin":[31,19],"end":[31,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"0:266":{"id":"0:266","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[1910,0],"end":[1971,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:268:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:3443:5223-0:830:3015":{"id":"a:1:3443:5223-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:3443:5223-0:842:3015":{"id":"a:1:3443:5223-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:935:847":{"id":"0:935:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/bytes.rs","begin":[2318,16],"end":[2318,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:484:3283":{"id":"0:484:3283","crate_id":0,"name":"is_match_at","span":{"filename":"src/regex/string.rs","begin":[1071,4],"end":[1075,5]},"visibility":"public","docs":"Returns the same as [`Regex::is_match`], but starts the search at the\ngiven offset.\n\nThe significance of the starting point is that it takes the surrounding\ncontext into consideration. For example, the `\\A` anchor can only\nmatch when `start == 0`.\n\n# Panics\n\nThis panics when `start >= haystack.len() + 1`.\n\n# Example\n\nThis example shows the significance of `start` by demonstrating how it\ncan be used to permit look-around assertions in a regex to take the\nsurrounding context into account.\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"\\bchew\\b\").unwrap();\nlet hay = \"eschew\";\n// We get a match here, but it's probably not intended.\nassert!(re.is_match(&hay[2..]));\n// No match because the  assertions take the context into account.\nassert!(!re.is_match_at(hay, 2));\n```","links":{"`Regex::is_match`":"0:454:3282"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}],["start",{"primitive":"usize"}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:45871:4916-0:991:3722":{"id":"a:1:45871:4916-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:769:3282":{"id":"0:769:3282","crate_id":0,"name":"is_match","span":{"filename":"src/regexset/string.rs","begin":[210,4],"end":[212,5]},"visibility":"public","docs":"Returns true if and only if one of the regexes in this set matches\nthe haystack given.\n\nThis method should be preferred if you only need to test whether any\nof the regexes in the set should match, but don't care about *which*\nregexes matched. This is because the underlying matching engine will\nquit immediately after seeing the first match instead of continuing to\nfind all matches.\n\nNote that as with searches using [`Regex`](crate::Regex), the\nexpression is unanchored by default. That is, if the regex does not\nstart with `^` or `\\A`, or end with `$` or `\\z`, then it is permitted\nto match anywhere in the haystack.\n\n# Example\n\nTests whether a set matches somewhere in a haystack:\n\n```\nuse regex::RegexSet;\n\nlet set = RegexSet::new([r\"\\w+\", r\"\\d+\"]).unwrap();\nassert!(set.is_match(\"foo\"));\nassert!(!set.is_match(\"☃\"));\n```","links":{"crate::Regex":"0:968:2681"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3443:5223-0:1016:3463":{"id":"a:1:3443:5223-0:1016:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2863-0:883:3722":{"id":"b:1:2863-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:925:847":{"id":"0:925:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/bytes.rs","begin":[2286,9],"end":[2286,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1030":{"id":"0:1030","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2294,9],"end":[2294,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:1033:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:657:3627":{"id":"0:657:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/string.rs","begin":[2484,4],"end":[2486,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"str"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:1025:3491":{"id":"a:1:3408:263-0:1025:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36000:251-0:522:3373":{"id":"a:1:36000:251-0:522:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"4:819:31190":{"id":"4:819:31190","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:180:3282":{"id":"0:180:3282","crate_id":0,"name":"is_match","span":{"filename":"src/regex/bytes.rs","begin":[202,4],"end":[204,5]},"visibility":"public","docs":"Returns true if and only if there is a match for the regex anywhere\nin the haystack given.\n\nIt is recommended to use this method if all you need to do is test\nwhether a match exists, since the underlying matching engine may be\nable to do less work.\n\n# Example\n\nTest if some haystack contains at least one word with exactly 13\nUnicode word characters:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();\nlet hay = b\"I categorically deny having triskaidekaphobia.\";\nassert!(re.is_match(hay));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:996":{"id":"0:996","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2071,16],"end":[2071,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:997:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:671:3639":{"id":"0:671:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/string.rs","begin":[2520,4],"end":[2522,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:672:3627":{"id":"0:672:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/string.rs","begin":[2524,4],"end":[2526,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"str"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:882:739":{"id":"0:882:739","crate_id":0,"name":"eq","span":{"filename":"src/regex/bytes.rs","begin":[1482,26],"end":[1482,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:1120:4742":{"id":"a:1:36058:4992-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3179-0:1025:3491":{"id":"b:1:3179-0:1025:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45871:4916-0:1108:4659":{"id":"a:1:45871:4916-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3190-0:1120:4742":{"id":"b:1:3190-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2863-0:1081:4659":{"id":"b:1:2863-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36000:251-0:968:2681":{"id":"a:1:36000:251-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2863-0:249:3373":{"id":"b:1:2863-0:249:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:836:2715":{"id":"0:836:2715","crate_id":0,"name":"RegexBuilder","span":{"filename":"src/builders.rs","begin":[1372,4],"end":[1374,5]},"visibility":"public","docs":"A configurable builder for a [`Regex`].\n\nThis builder can be used to programmatically set flags such as `i`\n(case insensitive) and `x` (for verbose mode). This builder can also be\nused to configure things like the line terminator and a size limit on\nthe compiled regular expression.","links":{"`Regex`":"0:860:2681"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:97","a:1:36000:251-0:836:2715","a:1:3408:263-0:836:2715","a:1:3443:5223-0:836:2715","a:1:36058:4992-0:836:2715","a:1:45870:4917-0:836:2715","a:1:45871:4916-0:836:2715","b:1:2860-0:836:2715","b:1:2863-0:836:2715","b:1:2918-0:836:2715","b:1:3175-0:836:2715","b:1:3179-0:836:2715","b:1:3185-0:836:2715","b:1:3190-0:836:2715","b:1:4055-0:836:2715","b:4:816-0:836:2715","0:838","0:840"]}}},"b:1:3185-0:890:3317":{"id":"b:1:3185-0:890:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:474:3618":{"id":"0:474:3618","crate_id":0,"name":"replace_all","span":{"filename":"src/regex/string.rs","begin":[842,4],"end":[848,5]},"visibility":"public","docs":"Replaces all non-overlapping matches in the haystack with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.\n\nIf no match is found, then the haystack is returned unchanged. In that\ncase, this implementation will likely return a `Cow::Borrowed` value\nsuch that no allocation is performed.\n\nWhen a `Cow::Borrowed` is returned, the value returned is guaranteed\nto be equivalent to the `haystack` given.\n\nThe documentation for [`Regex::replace`] goes into more detail about\nwhat kinds of replacement strings are supported.\n\n# Time complexity\n\nSince iterators over all matches requires running potentially many\nsearches on the haystack, and since each search has worst case\n`O(m * n)` time complexity, the overall worst case time complexity for\nthis routine is `O(m * n^2)`.\n\n# Fallibility\n\nIf you need to write a replacement routine where any individual\nreplacement might \"fail,\" doing so with this API isn't really feasible\nbecause there's no way to stop the search process if a replacement\nfails. Instead, if you need this functionality, you should consider\nimplementing your own replacement routine:\n\n```\nuse regex::{Captures, Regex};\n\nfn replace_all<E>(\n    re: &Regex,\n    haystack: &str,\n    replacement: impl Fn(&Captures) -> Result<String, E>,\n) -> Result<String, E> {\n    let mut new = String::with_capacity(haystack.len());\n    let mut last_match = 0;\n    for caps in re.captures_iter(haystack) {\n        let m = caps.get(0).unwrap();\n        new.push_str(&haystack[last_match..m.start()]);\n        new.push_str(&replacement(&caps)?);\n        last_match = m.end();\n    }\n    new.push_str(&haystack[last_match..]);\n    Ok(new)\n}\n\n// Let's replace each word with the number of bytes in that word.\n// But if we see a word that is \"too long,\" we'll give up.\nlet re = Regex::new(r\"\\w+\").unwrap();\nlet replacement = |caps: &Captures| -> Result<String, &'static str> {\n    if caps[0].len() >= 5 {\n        return Err(\"word too long\");\n    }\n    Ok(caps[0].len().to_string())\n};\nassert_eq!(\n    Ok(\"2 3 3 3?\".to_string()),\n    replace_all(&re, \"hi how are you?\", &replacement),\n);\nassert!(replace_all(&re, \"hi there\", &replacement).is_err());\n```\n\n# Example\n\nThis example shows how to flip the order of whitespace (excluding line\nterminators) delimited fields, and normalizes the whitespace that\ndelimits the fields:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?m)^(\\S+)[\\s--\\r\\n]+(\\S+)$\").unwrap();\nlet hay = \"\nGreetings  1973\nWild\\t1973\nBornToRun\\t\\t\\t\\t1975\nDarkness                    1978\nTheRiver 1980\n\";\nlet new = re.replace_all(hay, \"$2 $1\");\nassert_eq!(new, \"\n1973 Greetings\n1973 Wild\n1975 BornToRun\n1978 Darkness\n1980 TheRiver\n\");\n```","links":{"`Regex::replace`":"0:471:3559"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}],["rep",{"generic":"R"}]],"output":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"type":{"primitive":"str"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Replacer","id":"0:648:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1043:847":{"id":"0:1043:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/string.rs","begin":[2326,16],"end":[2326,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:118:2697":{"id":"0:118:2697","crate_id":0,"name":"case_insensitive","span":{"filename":"src/builders.rs","begin":[2092,8],"end":[2095,9]},"visibility":"public","docs":"This configures whether to enable case insensitive matching for all\nof the patterns.\n\nThis setting can also be configured using the inline flag `i`\nin the pattern. For example, `(?i:foo)` matches `foo` case\ninsensitively while `(?-i:foo)` matches `foo` case sensitively.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::bytes::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\"foo(?-i:bar)quux\"])\n    .case_insensitive(true)\n    .build()\n    .unwrap();\nassert!(re.is_match(b\"FoObarQuUx\"));\n// Even though case insensitive matching is enabled in the builder,\n// it can be locally disabled within the pattern. In this case,\n// `bar` is matched case sensitively.\nassert!(!re.is_match(b\"fooBARquux\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2860-0:890:3317":{"id":"b:1:2860-0:890:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:177:1923":{"id":"0:177:1923","crate_id":0,"name":"try_from","span":{"filename":"src/regex/bytes.rs","begin":[140,4],"end":[142,5]},"visibility":"default","docs":"Attempts to parse a string into a regular expression","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"1:4057:1938":{"id":"1:4057:1938","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:43501:10006","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:8585-0:899:3405":{"id":"b:1:8585-0:899:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:45871:4916-0:917:3491":{"id":"a:1:45871:4916-0:917:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2918-0:973:3298":{"id":"b:1:2918-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3190-0:848:150":{"id":"b:1:3190-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8585-0:1025:3491":{"id":"b:1:8585-0:1025:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:45870:4917-0:1066:4239":{"id":"a:1:45870:4917-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:453:1249":{"id":"0:453:1249","crate_id":0,"name":"new","span":{"filename":"src/regex/string.rs","begin":[180,4],"end":[182,5]},"visibility":"public","docs":"Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace substrings in a haystack.\n\nNote that regex compilation tends to be a somewhat expensive process,\nand unlike higher level environments, compilation is not automatically\ncached for you. One should endeavor to compile a regex once and then\nreuse it. For example, it's a bad idea to compile the same regex\nrepeatedly in a loop.\n\n# Errors\n\nIf an invalid pattern is given, then an error is returned.\nAn error is also returned if the pattern is valid, but would\nproduce a regex that is bigger than the configured size limit via\n[`RegexBuilder::size_limit`]. (A reasonable size limit is enabled by\ndefault.)\n\n# Example\n\n```\nuse regex::Regex;\n\n// An Invalid pattern because of an unclosed parenthesis\nassert!(Regex::new(r\"foo(bar\").is_err());\n// An invalid pattern because the regex would be too big\n// because Unicode tends to inflate things.\nassert!(Regex::new(r\"\\w{1000}\").is_err());\n// Disabling Unicode can make the regex much smaller,\n// potentially by up to or more than an order of magnitude.\nassert!(Regex::new(r\"(?-u:\\w){1000}\").is_ok());\n```","links":{"`RegexBuilder::size_limit`":"0:70:2706"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["re",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1092:847":{"id":"0:1092:847","crate_id":0,"name":"fmt","span":{"filename":"src/regexset/bytes.rs","begin":[637,9],"end":[637,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3443:5223-0:1108:4659":{"id":"a:1:3443:5223-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2918-0:865:3298":{"id":"b:1:2918-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:723:4743":{"id":"0:723:4743","crate_id":0,"name":"IntoIter","span":{"filename":"src/regexset/bytes.rs","begin":[592,4],"end":[592,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"b:1:3179-0:830:3015":{"id":"b:1:3179-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2863-0:865:3298":{"id":"b:1:2863-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:689:2524":{"id":"0:689:2524","crate_id":0,"name":"bytes","span":{"filename":"src/regexset/bytes.rs","begin":[1,0],"end":[710,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1076:2691","0:1081:4659","0:1088:4744","0:1093:4742"],"is_stripped":true}}},"a:1:45870:4917-0:998:3317":{"id":"a:1:45870:4917-0:998:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:680:3639":{"id":"0:680:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/string.rs","begin":[2549,4],"end":[2551,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:4:816-0:1103:2691":{"id":"b:4:816-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:835:847":{"id":"0:835:847","crate_id":0,"name":"fmt","span":{"filename":"src/builders.rs","begin":[786,20],"end":[786,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:249:3373":{"id":"0:249:3373","crate_id":0,"name":"Captures","span":{"filename":"src/regex/bytes.rs","begin":[1632,0],"end":[1636,1]},"visibility":"public","docs":"Represents the capture groups for a single match.\n\nCapture groups refer to parts of a regex enclosed in parentheses. They\ncan be optionally named. The purpose of capture groups is to be able to\nreference different parts of a match based on the original pattern. In\nessence, a `Captures` is a container of [`Match`] values for each group\nthat participated in a regex match. Each `Match` can be looked up by either\nits capture group index or name (if it has one).\n\nFor example, say you want to match the individual letters in a 5-letter\nword:\n\n```text\n(?<first>\\w)(\\w)(?:\\w)\\w(?<last>\\w)\n```\n\nThis regex has 4 capture groups:\n\n* The group at index `0` corresponds to the overall match. It is always\npresent in every match and never has a name.\n* The group at index `1` with name `first` corresponding to the first\nletter.\n* The group at index `2` with no name corresponding to the second letter.\n* The group at index `3` with name `last` corresponding to the fifth and\nlast letter.\n\nNotice that `(?:\\w)` was not listed above as a capture group despite it\nbeing enclosed in parentheses. That's because `(?:pattern)` is a special\nsyntax that permits grouping but *without* capturing. The reason for not\ntreating it as a capture is that tracking and reporting capture groups\nrequires additional state that may lead to slower searches. So using as few\ncapture groups as possible can help performance. (Although the difference\nin performance of a couple of capture groups is likely immaterial.)\n\nValues with this type are created by [`Regex::captures`] or\n[`Regex::captures_iter`].\n\n`'h` is the lifetime of the haystack that these captures were matched from.\n\n# Example\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"(?<first>\\w)(\\w)(?:\\w)\\w(?<last>\\w)\").unwrap();\nlet caps = re.captures(b\"toady\").unwrap();\nassert_eq!(b\"toady\", &caps[0]);\nassert_eq!(b\"t\", &caps[\"first\"]);\nassert_eq!(b\"o\", &caps[2]);\nassert_eq!(b\"y\", &caps[\"last\"]);\n```","links":{"`Match`":"0:865:3298","`Regex::captures`":"0:186:3180","`Regex::captures_iter`":"0:188:3404"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:254","a:1:36000:251-0:249:3373","a:1:3408:263-0:249:3373","a:1:3443:5223-0:249:3373","a:1:36058:4992-0:249:3373","a:1:45870:4917-0:249:3373","a:1:45871:4916-0:249:3373","b:1:2860-0:249:3373","b:1:2863-0:249:3373","b:1:3175-0:249:3373","b:1:3179-0:249:3373","b:1:3185-0:249:3373","b:1:3190-0:249:3373","b:1:4055-0:249:3373","0:266","0:291","0:298"]}}},"0:63:2698":{"id":"0:63:2698","crate_id":0,"name":"multi_line","span":{"filename":"src/builders.rs","begin":[361,8],"end":[364,9]},"visibility":"public","docs":"This configures multi-line mode for the entire pattern.\n\nEnabling multi-line mode changes the behavior of the `^` and `$`\nanchor assertions. Instead of only matching at the beginning and\nend of a haystack, respectively, multi-line mode causes them to\nmatch at the beginning and end of a line *in addition* to the\nbeginning and end of a haystack. More precisely, `^` will match at\nthe position immediately following a `\\n` and `$` will match at the\nposition immediately preceding a `\\n`.\n\nThe behavior of this option can be impacted by other settings too:\n\n* The [`RegexBuilder::line_terminator`] option changes `\\n` above\nto any ASCII byte.\n* The [`RegexBuilder::crlf`] option changes the line terminator to\nbe either `\\r` or `\\n`, but never at the position between a `\\r`\nand `\\n`.\n\nThis setting can also be configured using the inline flag `m` in\nthe pattern.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"^foo$\")\n    .multi_line(true)\n    .build()\n    .unwrap();\nassert_eq!(Some(1..4), re.find(\"\\nfoo\\n\").map(|m| m.range()));\n```","links":{"`RegexBuilder::crlf`":"0:65:2700","`RegexBuilder::line_terminator`":"0:66:2701"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:497":{"id":"0:497","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[1263,0],"end":[1435,1]},"visibility":"default","docs":"Auxiliary methods.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:498:359","0:499:3759","0:500:3775","0:501:3701","0:502:3807"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:36058:4992-0:926:3760":{"id":"a:1:36058:4992-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:107:2704":{"id":"0:107:2704","crate_id":0,"name":"ignore_whitespace","span":{"filename":"src/builders.rs","begin":[1795,8],"end":[1798,9]},"visibility":"public","docs":"This configures verbose mode for the entire pattern.\n\nWhen enabled, whitespace will treated as insignifcant in the\npattern and `#` can be used to start a comment until the next new\nline.\n\nNormally, in most places in a pattern, whitespace is treated\nliterally. For example ` +` will match one or more ASCII whitespace\ncharacters.\n\nWhen verbose mode is enabled, `\\#` can be used to match a literal\n`#` and `\\ ` can be used to match a literal ASCII whitespace\ncharacter.\n\nVerbose mode is useful for permitting regexes to be formatted and\nbroken up more nicely. This may make them more easily readable.\n\nThis setting can also be configured using the inline flag `x` in\nthe pattern.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::bytes::RegexBuilder;\n\nlet pat = r\"\n    \\b\n    (?<first>\\p{Uppercase}\\w*)  # always start with uppercase letter\n    [\\s--\\n]+                   # whitespace should separate names\n    (?: # middle name can be an initial!\n        (?:(?<initial>\\p{Uppercase})\\.|(?<middle>\\p{Uppercase}\\w*))\n        [\\s--\\n]+\n    )?\n    (?<last>\\p{Uppercase}\\w*)\n    \\b\n\";\nlet re = RegexBuilder::new(pat)\n    .ignore_whitespace(true)\n    .build()\n    .unwrap();\n\nlet caps = re.captures(b\"Harry Potter\").unwrap();\nassert_eq!(&b\"Harry\"[..], &caps[\"first\"]);\nassert_eq!(&b\"Potter\"[..], &caps[\"last\"]);\n\nlet caps = re.captures(b\"Harry J. Potter\").unwrap();\nassert_eq!(&b\"Harry\"[..], &caps[\"first\"]);\n// Since a middle name/initial isn't required for an overall match,\n// we can't assume that 'initial' or 'middle' will be populated!\nassert_eq!(\n    Some(&b\"J\"[..]),\n    caps.name(\"initial\").map(|m| m.as_bytes()),\n);\nassert_eq!(None, caps.name(\"middle\").map(|m| m.as_bytes()));\nassert_eq!(&b\"Potter\"[..], &caps[\"last\"]);\n\nlet caps = re.captures(b\"Harry James Potter\").unwrap();\nassert_eq!(&b\"Harry\"[..], &caps[\"first\"]);\n// Since a middle name/initial isn't required for an overall match,\n// we can't assume that 'initial' or 'middle' will be populated!\nassert_eq!(None, caps.name(\"initial\").map(|m| m.as_bytes()));\nassert_eq!(\n    Some(&b\"James\"[..]),\n    caps.name(\"middle\").map(|m| m.as_bytes()),\n);\nassert_eq!(&b\"Potter\"[..], &caps[\"last\"]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:455:3296":{"id":"0:455:3296","crate_id":0,"name":"find","span":{"filename":"src/regex/string.rs","begin":[232,4],"end":[234,5]},"visibility":"public","docs":"This routine searches for the first match of this regex in the\nhaystack given, and if found, returns a [`Match`]. The `Match`\nprovides access to both the byte offsets of the match and the actual\nsubstring that matched.\n\nNote that this should only be used if you want to find the entire\nmatch. If instead you just want to test the existence of a match,\nit's potentially faster to use `Regex::is_match(hay)` instead of\n`Regex::find(hay).is_some()`.\n\n# Example\n\nFind the first word with exactly 13 Unicode word characters:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();\nlet hay = \"I categorically deny having triskaidekaphobia.\";\nlet mat = re.find(hay).unwrap();\nassert_eq!(2..15, mat.range());\nassert_eq!(\"categorically\", mat.as_str());\n```","links":{"`Match`":"0:973:3298"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:8585-0:1016:3463":{"id":"b:1:8585-0:1016:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:737":{"id":"0:737","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[671,0],"end":[671,56]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:78:2126":{"id":"0:78:2126","crate_id":0,"name":"unicode","span":{"filename":"src/builders.rs","begin":[872,8],"end":[875,9]},"visibility":"public","docs":"This configures Unicode mode for the all of the patterns.\n\nEnabling Unicode mode does a number of things:\n\n* Most fundamentally, it causes the fundamental atom of matching\nto be a single codepoint. When Unicode mode is disabled, it's a\nsingle byte. For example, when Unicode mode is enabled, `.` will\nmatch `💩` once, where as it will match 4 times when Unicode mode\nis disabled. (Since the UTF-8 encoding of `💩` is 4 bytes long.)\n* Case insensitive matching uses Unicode simple case folding rules.\n* Unicode character classes like `\\p{Letter}` and `\\p{Greek}` are\navailable.\n* Perl character classes are Unicode aware. That is, `\\w`, `\\s` and\n`\\d`.\n* The word boundary assertions, `\\b` and `\\B`, use the Unicode\ndefinition of a word character.\n\nNote that if Unicode mode is disabled, then the regex will fail to\ncompile if it could match invalid UTF-8. For example, when Unicode\nmode is disabled, then since `.` matches any byte (except for\n`\\n`), then it can match invalid UTF-8 and thus building a regex\nfrom it will fail. Another example is `\\w` and `\\W`. Since `\\w` can\nonly match ASCII bytes when Unicode mode is disabled, it's allowed.\nBut `\\W` can match more than ASCII bytes, including invalid UTF-8,\nand so it is not allowed. This restriction can be lifted only by\nusing a [`bytes::RegexSet`](crate::bytes::RegexSet).\n\nFor more details on the Unicode support in this crate, see the\n[Unicode section](crate#unicode) in this crate's top-level\ndocumentation.\n\nThe default for this is `true`.\n\n# Example\n\n```\nuse regex::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\"\\w\"])\n    .unicode(false)\n    .build()\n    .unwrap();\n// Normally greek letters would be included in \\w, but since\n// Unicode mode is disabled, it only matches ASCII letters.\nassert!(!re.is_match(\"δ\"));\n\nlet re = RegexSetBuilder::new([r\"s\"])\n    .case_insensitive(true)\n    .unicode(false)\n    .build()\n    .unwrap();\n// Normally 'ſ' is included when searching for 's' case\n// insensitively due to Unicode's simple case folding rules. But\n// when Unicode mode is disabled, only ASCII case insensitive rules\n// are used.\nassert!(!re.is_match(\"ſ\"));\n```","links":{"crate#unicode":"0:0:2522","crate::bytes::RegexSet":"0:1076:2691"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3175-0:998:3317":{"id":"b:1:3175-0:998:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2862:3179":{"id":"1:2862:3179","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:958:4239":{"id":"0:958:4239","crate_id":0,"name":"NoExpand","span":{"filename":"src/regex/bytes.rs","begin":[2591,0],"end":[2591,38]},"visibility":"public","docs":"A helper type for forcing literal string replacement.\n\nIt can be used with routines like [`Regex::replace`] and\n[`Regex::replace_all`] to do a literal string replacement without expanding\n`$name` to their corresponding capture groups. This can be both convenient\n(to avoid escaping `$`, for example) and faster (since capture groups\ndon't need to be found).\n\n`'s` is the lifetime of the literal string to use.\n\n# Example\n\n```\nuse regex::bytes::{NoExpand, Regex};\n\nlet re = Regex::new(r\"(?<last>[^,\\s]+),\\s+(\\S+)\").unwrap();\nlet result = re.replace(b\"Springsteen, Bruce\", NoExpand(b\"$2 $last\"));\nassert_eq!(result, &b\"$2 $last\"[..]);\n```","links":{"`Regex::replace_all`":"0:200:3618","`Regex::replace`":"0:197:3559"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":["0:961:2108"]},"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:958:4239","a:1:3408:263-0:958:4239","a:1:3443:5223-0:958:4239","a:1:36058:4992-0:958:4239","a:1:45870:4917-0:958:4239","a:1:45871:4916-0:958:4239","b:1:2860-0:958:4239","b:1:2863-0:958:4239","b:1:2918-0:958:4239","b:1:3175-0:958:4239","b:1:3179-0:958:4239","b:1:3185-0:958:4239","b:1:3190-0:958:4239","b:1:4055-0:958:4239","b:4:816-0:958:4239","0:962","0:965","0:420"]}}},"b:1:4055-0:998:3317":{"id":"b:1:4055-0:998:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2502,0],"end":[2510,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:376:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"4:7390:282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}}}},"items":["0:397:3639","0:398:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:972:508":{"id":"0:972:508","crate_id":0,"name":"clone","span":{"filename":"src/regex/string.rs","begin":[100,9],"end":[100,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:87:2706":{"id":"0:87:2706","crate_id":0,"name":"size_limit","span":{"filename":"src/builders.rs","begin":[1263,8],"end":[1266,9]},"visibility":"public","docs":"Sets the approximate size limit, in bytes, of the compiled regex.\n\nThis roughly corresponds to the number of heap memory, in\nbytes, occupied by a single regex. If the regex would otherwise\napproximately exceed this limit, then compiling that regex will\nfail.\n\nThe main utility of a method like this is to avoid compiling\nregexes that use an unexpected amount of resources, such as\ntime and memory. Even if the memory usage of a large regex is\nacceptable, its search time may not be. Namely, worst case time\ncomplexity for search is `O(m * n)`, where `m ~ len(pattern)` and\n`n ~ len(haystack)`. That is, search time depends, in part, on the\nsize of the compiled regex. This means that putting a limit on the\nsize of the regex limits how much a regex can impact search time.\n\nFor more information about regex size limits, see the section on\n[untrusted inputs](crate#untrusted-input) in the top-level crate\ndocumentation.\n\nThe default for this is some reasonable number that permits most\npatterns to compile successfully.\n\n# Example\n\n```\n# if !cfg!(target_pointer_width = \"64\") { return; } // see #1041\nuse regex::RegexSetBuilder;\n\n// It may surprise you how big some seemingly small patterns can\n// be! Since \\w is Unicode aware, this generates a regex that can\n// match approximately 140,000 distinct codepoints.\nassert!(\n    RegexSetBuilder::new([r\"\\w\"])\n        .size_limit(45_000)\n        .build()\n        .is_err()\n);\n```","links":{"crate#untrusted-input":"0:0:2522"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["bytes",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1066:4239":{"id":"0:1066:4239","crate_id":0,"name":"NoExpand","span":{"filename":"src/regex/string.rs","begin":[2578,0],"end":[2578,37]},"visibility":"public","docs":"A helper type for forcing literal string replacement.\n\nIt can be used with routines like [`Regex::replace`] and\n[`Regex::replace_all`] to do a literal string replacement without expanding\n`$name` to their corresponding capture groups. This can be both convenient\n(to avoid escaping `$`, for example) and faster (since capture groups\ndon't need to be found).\n\n`'s` is the lifetime of the literal string to use.\n\n# Example\n\n```\nuse regex::{NoExpand, Regex};\n\nlet re = Regex::new(r\"(?<last>[^,\\s]+),\\s+(\\S+)\").unwrap();\nlet result = re.replace(\"Springsteen, Bruce\", NoExpand(\"$2 $last\"));\nassert_eq!(result, \"$2 $last\");\n```","links":{"`Regex::replace_all`":"0:474:3618","`Regex::replace`":"0:471:3559"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":["0:1069:2108"]},"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:1066:4239","a:1:3408:263-0:1066:4239","a:1:3443:5223-0:1066:4239","a:1:36058:4992-0:1066:4239","a:1:45870:4917-0:1066:4239","a:1:45871:4916-0:1066:4239","b:1:2860-0:1066:4239","b:1:2863-0:1066:4239","b:1:2918-0:1066:4239","b:1:3175-0:1066:4239","b:1:3179-0:1066:4239","b:1:3185-0:1066:4239","b:1:3190-0:1066:4239","b:1:4055-0:1066:4239","b:4:816-0:1066:4239","0:1070","0:1073","0:682"]}}},"b:1:3185-0:1108:4659":{"id":"b:1:3185-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36058:4992-0:936:4044":{"id":"a:1:36058:4992-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:376:3561":{"id":"0:376:3561","crate_id":0,"name":"Replacer","span":{"filename":"src/regex/bytes.rs","begin":[2423,0],"end":[2470,1]},"visibility":"public","docs":"A trait for types that can be used to replace matches in a haystack.\n\nIn general, users of this crate shouldn't need to implement this trait,\nsince implementations are already provided for `&[u8]` along with other\nvariants of byte string types, as well as `FnMut(&Captures) -> Vec<u8>` (or\nany `FnMut(&Captures) -> T` where `T: AsRef<[u8]>`). Those cover most use\ncases, but callers can implement this trait directly if necessary.\n\n# Example\n\nThis example shows a basic implementation of the `Replacer` trait. This can\nbe done much more simply using the replacement byte string interpolation\nsupport (e.g., `$first $last`), but this approach avoids needing to parse\nthe replacement byte string at all.\n\n```\nuse regex::bytes::{Captures, Regex, Replacer};\n\nstruct NameSwapper;\n\nimpl Replacer for NameSwapper {\n    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {\n        dst.extend_from_slice(&caps[\"first\"]);\n        dst.extend_from_slice(b\" \");\n        dst.extend_from_slice(&caps[\"last\"]);\n    }\n}\n\nlet re = Regex::new(r\"(?<last>[^,\\s]+),\\s+(?<first>\\S+)\").unwrap();\nlet result = re.replace(b\"Springsteen, Bruce\", NameSwapper);\nassert_eq!(result, &b\"Bruce Springsteen\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:377:3639","0:378:3627","0:380:4225"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:382","0:387","0:391","0:395","0:399","0:402","0:406","0:410","0:414","0:420"]}}},"0:101:2697":{"id":"0:101:2697","crate_id":0,"name":"case_insensitive","span":{"filename":"src/builders.rs","begin":[1492,8],"end":[1495,9]},"visibility":"public","docs":"This configures whether to enable case insensitive matching for the\nentire pattern.\n\nThis setting can also be configured using the inline flag `i`\nin the pattern. For example, `(?i:foo)` matches `foo` case\ninsensitively while `(?-i:foo)` matches `foo` case sensitively.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::bytes::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"foo(?-i:bar)quux\")\n    .case_insensitive(true)\n    .build()\n    .unwrap();\nassert!(re.is_match(b\"FoObarQuUx\"));\n// Even though case insensitive matching is enabled in the builder,\n// it can be locally disabled within the pattern. In this case,\n// `bar` is matched case sensitively.\nassert!(!re.is_match(b\"fooBARquux\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:842:3015":{"id":"a:1:3408:263-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:365:1264":{"id":"0:365:1264","crate_id":0,"name":"next","span":{"filename":"src/regex/bytes.rs","begin":[2370,4],"end":[2374,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:4055-0:1007:3405":{"id":"b:1:4055-0:1007:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:913":{"id":"0:913","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2251,9],"end":[2251,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:916:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3185-0:824:2715":{"id":"b:1:3185-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3179-0:1093:4742":{"id":"b:1:3179-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3175-0:830:3015":{"id":"b:1:3175-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:746:4752":{"id":"0:746:4752","crate_id":0,"name":"next_back","span":{"filename":"src/regexset/bytes.rs","begin":[699,4],"end":[701,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:74:1249":{"id":"0:74:1249","crate_id":0,"name":"new","span":{"filename":"src/builders.rs","begin":[798,8],"end":[804,9]},"visibility":"public","docs":"Create a new builder with a default configuration for the given\npatterns.\n\nIf the patterns are invalid or exceed the configured size limits,\nthen an error will be returned when [`RegexSetBuilder::build`] is\ncalled.","links":{"`RegexSetBuilder::build`":"0:77:2687"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["patterns",{"generic":"I"}]],"output":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Item","args":{"angle_bracketed":{"args":[],"constraints":[]}},"binding":{"equality":{"type":{"generic":"S"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3143:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:45870:4917-0:1025:3491":{"id":"a:1:45870:4917-0:1025:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:1056:847":{"id":"0:1056:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/string.rs","begin":[2368,16],"end":[2368,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1103:2691":{"id":"0:1103:2691","crate_id":0,"name":"RegexSet","span":{"filename":"src/regexset/string.rs","begin":[132,0],"end":[135,1]},"visibility":"public","docs":"Match multiple, possibly overlapping, regexes in a single search.\n\nA regex set corresponds to the union of zero or more regular expressions.\nThat is, a regex set will match a haystack when at least one of its\nconstituent regexes matches. A regex set as its formulated here provides a\ntouch more power: it will also report *which* regular expressions in the\nset match. Indeed, this is the key difference between regex sets and a\nsingle `Regex` with many alternates, since only one alternate can match at\na time.\n\nFor example, consider regular expressions to match email addresses and\ndomains: `[a-z]+@[a-z]+\\.(com|org|net)` and `[a-z]+\\.(com|org|net)`. If a\nregex set is constructed from those regexes, then searching the haystack\n`foo@example.com` will report both regexes as matching. Of course, one\ncould accomplish this by compiling each regex on its own and doing two\nsearches over the haystack. The key advantage of using a regex set is\nthat it will report the matching regexes using a *single pass through the\nhaystack*. If one has hundreds or thousands of regexes to match repeatedly\n(like a URL router for a complex web application or a user agent matcher),\nthen a regex set *can* realize huge performance gains.\n\n# Limitations\n\nRegex sets are limited to answering the following two questions:\n\n1. Does any regex in the set match?\n2. If so, which regexes in the set match?\n\nAs with the main [`Regex`][crate::Regex] type, it is cheaper to ask (1)\ninstead of (2) since the matching engines can stop after the first match\nis found.\n\nYou cannot directly extract [`Match`][crate::Match] or\n[`Captures`][crate::Captures] objects from a regex set. If you need these\noperations, the recommended approach is to compile each pattern in the set\nindependently and scan the exact same haystack a second time with those\nindependently compiled patterns:\n\n```\nuse regex::{Regex, RegexSet};\n\nlet patterns = [\"foo\", \"bar\"];\n// Both patterns will match different ranges of this string.\nlet hay = \"barfoo\";\n\n// Compile a set matching any of our patterns.\nlet set = RegexSet::new(patterns).unwrap();\n// Compile each pattern independently.\nlet regexes: Vec<_> = set\n    .patterns()\n    .iter()\n    .map(|pat| Regex::new(pat).unwrap())\n    .collect();\n\n// Match against the whole set first and identify the individual\n// matching patterns.\nlet matches: Vec<&str> = set\n    .matches(hay)\n    .into_iter()\n    // Dereference the match index to get the corresponding\n    // compiled pattern.\n    .map(|index| &regexes[index])\n    // To get match locations or any other info, we then have to search the\n    // exact same haystack again, using our separately-compiled pattern.\n    .map(|re| re.find(hay).unwrap().as_str())\n    .collect();\n\n// Matches arrive in the order the constituent patterns were declared,\n// not the order they appear in the haystack.\nassert_eq!(vec![\"foo\", \"bar\"], matches);\n```\n\n# Performance\n\nA `RegexSet` has the same performance characteristics as `Regex`. Namely,\nsearch takes `O(m * n)` time, where `m` is proportional to the size of the\nregex set and `n` is proportional to the length of the haystack.\n\n# Trait implementations\n\nThe `Default` trait is implemented for `RegexSet`. The default value\nis an empty set. An empty set can also be explicitly constructed via\n[`RegexSet::empty`].\n\n# Example\n\nThis shows how the above two regexes (for matching email addresses and\ndomains) might work:\n\n```\nuse regex::RegexSet;\n\nlet set = RegexSet::new(&[\n    r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n    r\"[a-z]+\\.(com|org|net)\",\n]).unwrap();\n\n// Ask whether any regexes in the set match.\nassert!(set.is_match(\"foo@example.com\"));\n\n// Identify which regexes in the set match.\nlet matches: Vec<_> = set.matches(\"foo@example.com\").into_iter().collect();\nassert_eq!(vec![0, 1], matches);\n\n// Try again, but with a haystack that only matches one of the regexes.\nlet matches: Vec<_> = set.matches(\"example.com\").into_iter().collect();\nassert_eq!(vec![1], matches);\n\n// Try again, but with a haystack that doesn't match any regex in the set.\nlet matches: Vec<_> = set.matches(\"example\").into_iter().collect();\nassert!(matches.is_empty());\n```\n\nNote that it would be possible to adapt the above example to using `Regex`\nwith an expression like:\n\n```text\n(?P<email>[a-z]+@(?P<email_domain>[a-z]+[.](com|org|net)))|(?P<domain>[a-z]+[.](com|org|net))\n```\n\nAfter a match, one could then inspect the capture groups to figure out\nwhich alternates matched. The problem is that it is hard to make this\napproach scale when there are many regexes since the overlap between each\nalternate isn't always obvious to reason about.","links":{"crate::Captures":"0:522:3373","crate::Regex":"0:968:2681","`RegexSet::empty`":"0:767:4612","crate::Match":"0:973:3298"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:763","a:1:36000:251-0:1103:2691","a:1:3408:263-0:1103:2691","a:1:3443:5223-0:1103:2691","a:1:36058:4992-0:1103:2691","a:1:45870:4917-0:1103:2691","a:1:45871:4916-0:1103:2691","b:1:2860-0:1103:2691","b:1:2863-0:1103:2691","b:1:2918-0:1103:2691","b:1:3175-0:1103:2691","b:1:3179-0:1103:2691","b:1:3185-0:1103:2691","b:1:3190-0:1103:2691","b:1:4055-0:1103:2691","b:4:816-0:1103:2691","0:1106","0:778","0:813"]}}},"0:926:3760":{"id":"0:926:3760","crate_id":0,"name":"CaptureNames","span":{"filename":"src/regex/bytes.rs","begin":[2319,0],"end":[2319,65]},"visibility":"public","docs":"An iterator over the names of all capture groups in a regex.\n\nThis iterator yields values of type `Option<&str>` in order of the opening\ncapture group parenthesis in the regex pattern. `None` is yielded for\ngroups with no name. The first element always corresponds to the implicit\nand unnamed group for the overall match.\n\n`'r` is the lifetime of the compiled regular expression.\n\nThis iterator is created by [`Regex::capture_names`].","links":{"`Regex::capture_names`":"0:225:3759"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:926:3760","a:1:3408:263-0:926:3760","a:1:3443:5223-0:926:3760","a:1:36058:4992-0:926:3760","a:1:45870:4917-0:926:3760","a:1:45871:4916-0:926:3760","b:1:2860-0:926:3760","b:1:2863-0:926:3760","b:1:2918-0:926:3760","b:1:3175-0:926:3760","b:1:3179-0:926:3760","b:1:3185-0:926:3760","b:1:3190-0:926:3760","b:1:4055-0:926:3760","b:1:8585-0:926:3760","b:4:816-0:926:3760","0:930","0:933","0:351","0:357","0:359"]}}},"0:356:613":{"id":"0:356:613","crate_id":0,"name":"count","span":{"filename":"src/regex/bytes.rs","begin":[2335,4],"end":[2337,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:80:2698":{"id":"0:80:2698","crate_id":0,"name":"multi_line","span":{"filename":"src/builders.rs","begin":[940,8],"end":[943,9]},"visibility":"public","docs":"This configures multi-line mode for all of the patterns.\n\nEnabling multi-line mode changes the behavior of the `^` and `$`\nanchor assertions. Instead of only matching at the beginning and\nend of a haystack, respectively, multi-line mode causes them to\nmatch at the beginning and end of a line *in addition* to the\nbeginning and end of a haystack. More precisely, `^` will match at\nthe position immediately following a `\\n` and `$` will match at the\nposition immediately preceding a `\\n`.\n\nThe behavior of this option can be impacted by other settings too:\n\n* The [`RegexSetBuilder::line_terminator`] option changes `\\n`\nabove to any ASCII byte.\n* The [`RegexSetBuilder::crlf`] option changes the line terminator\nto be either `\\r` or `\\n`, but never at the position between a `\\r`\nand `\\n`.\n\nThis setting can also be configured using the inline flag `m` in\nthe pattern.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\"^foo$\"])\n    .multi_line(true)\n    .build()\n    .unwrap();\nassert!(re.is_match(\"\\nfoo\\n\"));\n```","links":{"`RegexSetBuilder::crlf`":"0:82:2700","`RegexSetBuilder::line_terminator`":"0:83:2701"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3190-0:958:4239":{"id":"b:1:3190-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:816-0:936:4044":{"id":"b:4:816-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:348":{"id":"0:348","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2306,0],"end":[2306,60]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:608:1264":{"id":"0:608:1264","crate_id":0,"name":"next","span":{"filename":"src/regex/string.rs","begin":[2269,4],"end":[2271,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:52:2521":{"id":"0:52:2521","crate_id":0,"name":"string","span":{"filename":"src/builders.rs","begin":[200,0],"end":[200,21]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:824:2715","0:830:3015"],"is_stripped":true}}},"b:1:4055-0:1057:4226":{"id":"b:1:4055-0:1057:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45871:4916-0:1103:2691":{"id":"a:1:45871:4916-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:1120:4742":{"id":"0:1120:4742","crate_id":0,"name":"SetMatchesIter","span":{"filename":"src/regexset/string.rs","begin":[680,0],"end":[680,50]},"visibility":"public","docs":"A borrowed iterator over the set of matches from a regex set.\n\nThe lifetime `'a` refers to the lifetime of the [`SetMatches`] value that\ncreated this iterator.\n\nThis will always produces matches in ascending order, where the index\ncorresponds to the index of the regex that matched with respect to its\nposition when initially building the set.\n\nThis iterator is created by the [`SetMatches::iter`] method.","links":{"`SetMatches`":"0:1108:4659","`SetMatches::iter`":"0:784:1039"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:1120:4742","a:1:3408:263-0:1120:4742","a:1:3443:5223-0:1120:4742","a:1:36058:4992-0:1120:4742","a:1:45870:4917-0:1120:4742","a:1:45871:4916-0:1120:4742","b:1:2860-0:1120:4742","b:1:2863-0:1120:4742","b:1:2918-0:1120:4742","b:1:3175-0:1120:4742","b:1:3179-0:1120:4742","b:1:3185-0:1120:4742","b:1:3190-0:1120:4742","b:1:4055-0:1120:4742","b:1:8585-0:1120:4742","b:4:816-0:1120:4742","0:1124","0:1127","0:801","0:807","0:811"]}}},"0:99:2687":{"id":"0:99:2687","crate_id":0,"name":"build","span":{"filename":"src/builders.rs","begin":[1392,8],"end":[1394,9]},"visibility":"public","docs":"Compiles the pattern given to `RegexBuilder::new` with the\nconfiguration set on this builder.\n\nIf the pattern isn't a valid regex or if a configured size limit\nwas exceeded, then an error is returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3443:5223-0:991:3722":{"id":"a:1:3443:5223-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:439":{"id":"0:439","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[106,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:11020:133","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:440:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:847:847":{"id":"0:847:847","crate_id":0,"name":"fmt","span":{"filename":"src/builders.rs","begin":[1965,20],"end":[1965,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2860-0:899:3405":{"id":"b:1:2860-0:899:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:507:733":{"id":"0:507:733","crate_id":0,"name":"end","span":{"filename":"src/regex/string.rs","begin":[1524,4],"end":[1526,5]},"visibility":"public","docs":"Returns the byte offset of the end of the match in the haystack. The\nend of the match corresponds to the byte immediately following the last\nbyte in the match. This means that `&slice[start..end]` works as one\nwould expect.\n\nIt is guaranteed that `Match::start() <= Match::end()`.\n\nThis is guaranteed to fall on a valid UTF-8 codepoint boundary. That\nis, it will never be an offset that appears between the UTF-8 code\nunits of a UTF-8 encoded Unicode scalar value. Consequently, it is\nalways safe to slice the corresponding haystack using this offset.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:706:3282":{"id":"0:706:3282","crate_id":0,"name":"is_match","span":{"filename":"src/regexset/bytes.rs","begin":[214,4],"end":[216,5]},"visibility":"public","docs":"Returns true if and only if one of the regexes in this set matches\nthe haystack given.\n\nThis method should be preferred if you only need to test whether any\nof the regexes in the set should match, but don't care about *which*\nregexes matched. This is because the underlying matching engine will\nquit immediately after seeing the first match instead of continuing to\nfind all matches.\n\nNote that as with searches using [`Regex`](crate::bytes::Regex), the\nexpression is unanchored by default. That is, if the regex does not\nstart with `^` or `\\A`, or end with `$` or `\\z`, then it is permitted\nto match anywhere in the haystack.\n\n# Example\n\nTests whether a set matches somewhere in a haystack:\n\n```\nuse regex::bytes::RegexSet;\n\nlet set = RegexSet::new([r\"\\w+\", r\"\\d+\"]).unwrap();\nassert!(set.is_match(b\"foo\"));\nassert!(!set.is_match(\"☃\".as_bytes()));\n```","links":{"crate::bytes::Regex":"0:860:2681"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:521:878":{"id":"0:521:878","crate_id":0,"name":"from","span":{"filename":"src/regex/string.rs","begin":[1586,4],"end":[1588,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["m",{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}]],"output":{"resolved_path":{"name":"core::ops::Range","id":"1:43364:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:171:3249":{"id":"0:171:3249","crate_id":0,"name":"from_str","span":{"filename":"src/regex/bytes.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":"Attempts to parse a string into a regular expression","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:800":{"id":"0:800","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[667,0],"end":[667,56]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:45871:4916-0:1034:3760":{"id":"a:1:45871:4916-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:717":{"id":"0:717","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[465,0],"end":[589,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:718:4702","0:719:4712","0:720:1062","0:721:1039"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:62:2697":{"id":"0:62:2697","crate_id":0,"name":"case_insensitive","span":{"filename":"src/builders.rs","begin":[322,8],"end":[325,9]},"visibility":"public","docs":"This configures whether to enable case insensitive matching for the\nentire pattern.\n\nThis setting can also be configured using the inline flag `i`\nin the pattern. For example, `(?i:foo)` matches `foo` case\ninsensitively while `(?-i:foo)` matches `foo` case sensitively.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"foo(?-i:bar)quux\")\n    .case_insensitive(true)\n    .build()\n    .unwrap();\nassert!(re.is_match(\"FoObarQuUx\"));\n// Even though case insensitive matching is enabled in the builder,\n// it can be locally disabled within the pattern. In this case,\n// `bar` is matched case sensitively.\nassert!(!re.is_match(\"fooBARquux\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:904":{"id":"0:904","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2207,9],"end":[2207,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:907:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:121:2700":{"id":"0:121:2700","crate_id":0,"name":"crlf","span":{"filename":"src/builders.rs","begin":[2218,8],"end":[2221,9]},"visibility":"public","docs":"This configures CRLF mode for all of the patterns.\n\nWhen CRLF mode is enabled, both `\\r` (\"carriage return\" or CR for\nshort) and `\\n` (\"line feed\" or LF for short) are treated as line\nterminators. This results in the following:\n\n* Unless dot-matches-new-line mode is enabled, `.` will now match\nany character except for `\\n` and `\\r`.\n* When multi-line mode is enabled, `^` will match immediately\nfollowing a `\\n` or a `\\r`. Similarly, `$` will match immediately\npreceding a `\\n` or a `\\r`. Neither `^` nor `$` will ever match\nbetween `\\r` and `\\n`.\n\nThis setting can also be configured using the inline flag `R` in\nthe pattern.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::bytes::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\"^foo$\"])\n    .multi_line(true)\n    .crlf(true)\n    .build()\n    .unwrap();\nlet hay = b\"\\r\\nfoo\\r\\n\";\n// If CRLF mode weren't enabled here, then '$' wouldn't match\n// immediately after 'foo', and thus no match would be found.\nassert!(re.is_match(hay));\n```\n\nThis example demonstrates that `^` will never match at a position\nbetween `\\r` and `\\n`. (`$` will similarly not match between a `\\r`\nand a `\\n`.)\n\n```\nuse regex::bytes::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\"^\\n\"])\n    .multi_line(true)\n    .crlf(true)\n    .build()\n    .unwrap();\nassert!(!re.is_match(b\"\\r\\n\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:8585-0:917:3491":{"id":"b:1:8585-0:917:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2863-0:968:2681":{"id":"b:1:2863-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2863-0:1034:3760":{"id":"b:1:2863-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:949:4226":{"id":"a:1:45870:4917-0:949:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"b:1:3179-0:973:3298":{"id":"b:1:3179-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:807":{"id":"0:807","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[694,0],"end":[698,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8656:134","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["0:809:4752"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:4:6133-0:968:2681":{"id":"b:4:6133-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:11020:133","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:6131:267","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:6135:1898"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:508:3861":{"id":"0:508:3861","crate_id":0,"name":"is_empty","span":{"filename":"src/regex/string.rs","begin":[1535,4],"end":[1537,5]},"visibility":"public","docs":"Returns true if and only if this match has a length of zero.\n\nNote that an empty match can only occur when the regex itself can\nmatch the empty string. Here are some examples of regexes that can\nall match the empty string: `^`, `^$`, `\\b`, `a?`, `a*`, `a{0}`,\n`(foo|\\d+|quux)?`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:386:3627":{"id":"0:386:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/bytes.rs","begin":[2477,4],"end":[2479,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3175-0:1016:3463":{"id":"b:1:3175-0:1016:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:527":{"id":"0:527","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[1648,0],"end":[1918,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:529:3638","0:531:1223","0:533:3984","0:535:4024","0:536:1039","0:538:1062"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:341":{"id":"0:341","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2292,0],"end":[2304,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:344:185","0:345:1264","0:347:4157"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:855":{"id":"0:855","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[7,9],"end":[7,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:856:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3190-0:1025:3491":{"id":"b:1:3190-0:1025:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3175-0:1044:4044":{"id":"b:1:3175-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4055-0:908:3463":{"id":"b:1:4055-0:908:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45871:4916-0:249:3373":{"id":"a:1:45871:4916-0:249:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:45871:4916-0:842:3015":{"id":"a:1:45871:4916-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:613":{"id":"0:613","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2300,0],"end":[2312,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:616:185","0:617:1264","0:619:4157"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:726":{"id":"0:726","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[601,0],"end":[608,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"items":["0:728:4743","0:729:185","0:730:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:36000:251-0:1120:4742":{"id":"a:1:36000:251-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:566:1000":{"id":"0:566:1000","crate_id":0,"name":"index","span":{"filename":"src/regex/string.rs","begin":[2000,4],"end":[2004,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"generic":"Self"}}}],["i",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"primitive":"str"}}},"is_c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:623":{"id":"0:623","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2329,0],"end":[2346,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["0:625:185","0:626:1264","0:627:4157","0:628:613"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:328:613":{"id":"0:328:613","crate_id":0,"name":"count","span":{"filename":"src/regex/bytes.rs","begin":[2227,4],"end":[2234,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:973:3298":{"id":"0:973:3298","crate_id":0,"name":"Match","span":{"filename":"src/regex/string.rs","begin":[1490,0],"end":[1494,1]},"visibility":"public","docs":"Represents a single match of a regex in a haystack.\n\nA `Match` contains both the start and end byte offsets of the match and the\nactual substring corresponding to the range of those byte offsets. It is\nguaranteed that `start <= end`. When `start == end`, the match is empty.\n\nSince this `Match` can only be produced by the top-level `Regex` APIs\nthat only support searching UTF-8 encoded strings, the byte offsets for a\n`Match` are guaranteed to fall on valid UTF-8 codepoint boundaries. That\nis, slicing a `&str` with [`Match::range`] is guaranteed to never panic.\n\nValues with this type are created by [`Regex::find`] or\n[`Regex::find_iter`]. Other APIs can create `Match` values too. For\nexample, [`Captures::get`].\n\nThe lifetime parameter `'h` refers to the lifetime of the matched of the\nhaystack that this match was produced from.\n\n# Numbering\n\nThe byte offsets in a `Match` form a half-open interval. That is, the\nstart of the range is inclusive and the end of the range is exclusive.\nFor example, given a haystack `abcFOOxyz` and a match of `FOO`, its byte\noffset range starts at `3` and ends at `6`. `3` corresponds to `F` and\n`6` corresponds to `x`, which is one past the end of the match. This\ncorresponds to the same kind of slicing that Rust uses.\n\nFor more on why this was chosen over other schemes (aside from being\nconsistent with how Rust the language works), see [this discussion] and\n[Dijkstra's note on a related topic][note].\n\n[this discussion]: https://github.com/rust-lang/regex/discussions/866\n[note]: https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html\n\n# Example\n\nThis example shows the value of each of the methods on `Match` for a\nparticular search.\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"\\p{Greek}+\").unwrap();\nlet hay = \"Greek: αβγδ\";\nlet m = re.find(hay).unwrap();\nassert_eq!(7, m.start());\nassert_eq!(15, m.end());\nassert!(!m.is_empty());\nassert_eq!(8, m.len());\nassert_eq!(7..15, m.range());\nassert_eq!(\"αβγδ\", m.as_str());\n```","links":{"`Captures::get`":"0:529:3638","`Match::range`":"0:510:3865","`Regex::find`":"0:455:3296","`Regex::find_iter`":"0:457:3315"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:504","a:1:36000:251-0:973:3298","a:1:3408:263-0:973:3298","a:1:3443:5223-0:973:3298","a:1:36058:4992-0:973:3298","a:1:45870:4917-0:973:3298","a:1:45871:4916-0:973:3298","b:1:2860-0:973:3298","b:1:2863-0:973:3298","b:1:2918-0:973:3298","b:1:3175-0:973:3298","b:1:3179-0:973:3298","b:1:3185-0:973:3298","b:1:3190-0:973:3298","b:1:4055-0:973:3298","b:4:816-0:973:3298","0:978","0:980","0:983","0:986","0:988","0:513","0:516","0:519"]}}},"0:811":{"id":"0:811","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[700,0],"end":[700,60]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:3443:5223-0:958:4239":{"id":"a:1:3443:5223-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:45871:4916-0:1057:4226":{"id":"a:1:45871:4916-0:1057:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3175-0:865:3298":{"id":"b:1:3175-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3175-0:848:150":{"id":"b:1:3175-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:944:508":{"id":"0:944:508","crate_id":0,"name":"clone","span":{"filename":"src/regex/bytes.rs","begin":[2360,9],"end":[2360,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:941":{"id":"0:941","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2360,9],"end":[2360,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:944:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3175-0:860:2681":{"id":"b:1:3175-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1084":{"id":"0:1084","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[462,9],"end":[462,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:1085:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:772:4660":{"id":"0:772:4660","crate_id":0,"name":"matches_at","span":{"filename":"src/regexset/string.rs","begin":[325,4],"end":[330,5]},"visibility":"public","docs":"Returns the set of regexes that match in the given haystack.\n\nThe set returned contains the index of each regex that matches in\nthe given haystack. The index is in correspondence with the order of\nregular expressions given to `RegexSet`'s constructor.\n\nThe set can also be used to iterate over the matched indices. The order\nof iteration is always ascending with respect to the matching indices.\n\nThe significance of the starting point is that it takes the surrounding\ncontext into consideration. For example, the `\\A` anchor can only\nmatch when `start == 0`.\n\n# Panics\n\nThis panics when `start >= haystack.len() + 1`.\n\n# Example\n\nTests which regular expressions match the given haystack:\n\n```\nuse regex::RegexSet;\n\nlet set = RegexSet::new([r\"\\bbar\\b\", r\"(?m)^bar$\"]).unwrap();\nlet hay = \"foobar\";\n// We get matches here, but it's probably not intended.\nlet matches: Vec<_> = set.matches(&hay[3..]).into_iter().collect();\nassert_eq!(matches, vec![0, 1]);\n// No matches because the  assertions take the context into account.\nlet matches: Vec<_> = set.matches_at(hay, 3).into_iter().collect();\nassert_eq!(matches, vec![]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}],["start",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:227:3701":{"id":"0:227:3701","crate_id":0,"name":"static_captures_len","span":{"filename":"src/regex/bytes.rs","begin":[1397,4],"end":[1399,5]},"visibility":"public","docs":"Returns the total number of capturing groups that appear in every\npossible match.\n\nIf the number of capture groups can vary depending on the match, then\nthis returns `None`. That is, a value is only returned when the number\nof matching groups is invariant or \"static.\"\n\nNote that like [`Regex::captures_len`], this **does** include the\nimplicit capturing group corresponding to the entire match. Therefore,\nwhen a non-None value is returned, it is guaranteed to be at least `1`.\nStated differently, a return value of `Some(0)` is impossible.\n\n# Example\n\nThis shows a few cases where a static number of capture groups is\navailable and a few cases where it is not.\n\n```\nuse regex::bytes::Regex;\n\nlet len = |pattern| {\n    Regex::new(pattern).map(|re| re.static_captures_len())\n};\n\nassert_eq!(Some(1), len(\"a\")?);\nassert_eq!(Some(2), len(\"(a)\")?);\nassert_eq!(Some(2), len(\"(a)|(b)\")?);\nassert_eq!(Some(3), len(\"(a)(b)|(c)(d)\")?);\nassert_eq!(None, len(\"(a)|b\")?);\nassert_eq!(None, len(\"a|(b)\")?);\nassert_eq!(None, len(\"(b)*\")?);\nassert_eq!(Some(2), len(\"(b)+\")?);\n\n# Ok::<(), Box<dyn std::error::Error>>(())\n```","links":{"`Regex::captures_len`":"0:226:3775"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:1088:4744":{"id":"a:1:3408:263-0:1088:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:1102:847":{"id":"0:1102:847","crate_id":0,"name":"fmt","span":{"filename":"src/regexset/bytes.rs","begin":[683,16],"end":[683,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:949:4226":{"id":"a:1:3408:263-0:949:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:72:2709":{"id":"0:72:2709","crate_id":0,"name":"nest_limit","span":{"filename":"src/builders.rs","begin":[774,8],"end":[777,9]},"visibility":"public","docs":"Set the nesting limit for this parser.\n\nThe nesting limit controls how deep the abstract syntax tree is\nallowed to be. If the AST exceeds the given limit (e.g., with too\nmany nested groups), then an error is returned by the parser.\n\nThe purpose of this limit is to act as a heuristic to prevent stack\noverflow for consumers that do structural induction on an AST using\nexplicit recursion. While this crate never does this (instead using\nconstant stack space and moving the call stack to the heap), other\ncrates may.\n\nThis limit is not checked until the entire AST is parsed.\nTherefore, if callers want to put a limit on the amount of heap\nspace used, then they should impose a limit on the length, in\nbytes, of the concrete pattern string. In particular, this is\nviable since this parser implementation will limit itself to heap\nspace proportional to the length of the pattern string. See also\nthe [untrusted inputs](crate#untrusted-input) section in the\ntop-level crate documentation for more information about this.\n\nNote that a nest limit of `0` will return a nest limit error for\nmost patterns but not all. For example, a nest limit of `0` permits\n`a` but not `ab`, since `ab` requires an explicit concatenation,\nwhich results in a nest depth of `1`. In general, a nest limit is\nnot something that manifests in an obvious way in the concrete\nsyntax, therefore, it should not be used in a granular way.\n\n# Example\n\n```\nuse regex::RegexBuilder;\n\nassert!(RegexBuilder::new(r\"a\").nest_limit(0).build().is_ok());\nassert!(RegexBuilder::new(r\"ab\").nest_limit(0).build().is_err());\n```","links":{"crate#untrusted-input":"0:0:2522"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["limit",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:413:3639":{"id":"0:413:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/bytes.rs","begin":[2547,4],"end":[2549,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Vec","id":"4:7390:282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:417:3639":{"id":"0:417:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/bytes.rs","begin":[2562,4],"end":[2564,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Vec","id":"4:7390:282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:45870:4917-0:1108:4659":{"id":"a:1:45870:4917-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:258:1223":{"id":"0:258:1223","crate_id":0,"name":"name","span":{"filename":"src/regex/bytes.rs","begin":[1698,4],"end":[1702,5]},"visibility":"public","docs":"Returns the `Match` associated with the capture group named `name`. If\n`name` isn't a valid capture group or it refers to a group that didn't\nmatch, then `None` is returned.\n\nNote that unlike `caps[\"name\"]`, this returns a `Match` whose lifetime\nmatches the lifetime of the haystack in this `Captures` value.\nConversely, the substring returned by `caps[\"name\"]` has a lifetime\nof the `Captures` value, which is likely shorter than the lifetime of\nthe haystack. In some cases, it may be necessary to use this method to\naccess the matching substring instead of the `caps[\"name\"]` notation.\n\n# Examples\n\nGet the substring that matched with a default of an empty string if the\ngroup didn't participate in the match:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(\n    r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\",\n).unwrap();\nlet caps = re.captures(b\"abc123\").unwrap();\n\nlet numbers = caps.name(\"numbers\").map_or(&b\"\"[..], |m| m.as_bytes());\nlet letters = caps.name(\"letters\").map_or(&b\"\"[..], |m| m.as_bytes());\nassert_eq!(numbers, b\"123\");\nassert_eq!(letters, b\"\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:1115:4744":{"id":"a:1:3408:263-0:1115:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:3443:5223-0:1093:4742":{"id":"a:1:3443:5223-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:6-0:848:150":{"id":"0:6-0:848:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1327,0],"end":[1327,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"crate::error::Error","name":"Error","id":"0:848:150","is_glob":false}}},"a:1:36058:4992-0:865:3298":{"id":"a:1:36058:4992-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:563":{"id":"0:563","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[1995,0],"end":[2005,1]},"visibility":"default","docs":"Get a matching capture group's haystack substring by index.\n\nThe haystack substring returned can't outlive the `Captures` object if this\nmethod is used, because of how `Index` is defined (normally `a[i]` is part\nof `a` and can't outlive it). To work around this limitation, do that, use\n[`Captures::get`] instead.\n\n`'h` is the lifetime of the matched haystack, but the lifetime of the\n`&str` returned by this implementation is the lifetime of the `Captures`\nvalue itself.\n\n# Panics\n\nIf there is no matching group at the given index.","links":{"`Captures::get`":"0:529:3638"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:43332:4078","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:565:211","0:566:1000"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:45871:4916-0:824:2715":{"id":"a:1:45871:4916-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:750":{"id":"0:750","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[706,0],"end":[710,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:751:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:849:3134":{"id":"0:849:3134","crate_id":0,"name":"Syntax","span":{"filename":"src/error.rs","begin":[10,4],"end":[10,18]},"visibility":"default","docs":"A syntax error.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:851:2108"]},"discriminant":null}}},"b:1:3185-0:926:3760":{"id":"b:1:3185-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3408:263-0:522:3373":{"id":"a:1:3408:263-0:522:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2863-0:1088:4744":{"id":"b:1:2863-0:1088:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1052:508":{"id":"0:1052:508","crate_id":0,"name":"clone","span":{"filename":"src/regex/string.rs","begin":[2368,9],"end":[2368,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3185-0:1103:2691":{"id":"b:1:3185-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36058:4992-0:1115:4744":{"id":"a:1:36058:4992-0:1115:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:3443:5223-0:949:4226":{"id":"a:1:3443:5223-0:949:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:8585-0:998:3317":{"id":"b:1:8585-0:998:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:809:4752":{"id":"0:809:4752","crate_id":0,"name":"next_back","span":{"filename":"src/regexset/string.rs","begin":[695,4],"end":[697,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:4055-0:1103:2691":{"id":"b:1:4055-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133-0:689:2524":{"id":"0:133-0:689:2524","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[91,53],"end":[91,71]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"crate::regexset::bytes","name":"bytes","id":"0:689:2524","is_glob":true}}},"4:820:31191":{"id":"4:820:31191","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3175-0:249:3373":{"id":"b:1:3175-0:249:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3190-0:899:3405":{"id":"b:1:3190-0:899:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:422:3639":{"id":"0:422:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/bytes.rs","begin":[2594,4],"end":[2596,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["_",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Vec","id":"4:7390:282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:511:359":{"id":"0:511:359","crate_id":0,"name":"as_str","span":{"filename":"src/regex/string.rs","begin":[1558,4],"end":[1560,5]},"visibility":"public","docs":"Returns the substring of the haystack that matched.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:4:816-0:1044:4044":{"id":"b:4:816-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2482,0],"end":[2490,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:376:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"array":{"type":{"primitive":"u8"},"len":"N"}},"items":["0:389:3639","0:390:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:394:3627":{"id":"0:394:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/bytes.rs","begin":[2497,4],"end":[2499,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:398:3627":{"id":"0:398:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/bytes.rs","begin":[2507,4],"end":[2509,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3190-0:1076:2691":{"id":"b:1:3190-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3185-0:883:3722":{"id":"b:1:3185-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2387,0],"end":[2387,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8711:4166","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:829:847":{"id":"0:829:847","crate_id":0,"name":"fmt","span":{"filename":"src/builders.rs","begin":[211,20],"end":[211,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:100:2126":{"id":"0:100:2126","crate_id":0,"name":"unicode","span":{"filename":"src/builders.rs","begin":[1463,8],"end":[1466,9]},"visibility":"public","docs":"This configures Unicode mode for the entire pattern.\n\nEnabling Unicode mode does a number of things:\n\n* Most fundamentally, it causes the fundamental atom of matching\nto be a single codepoint. When Unicode mode is disabled, it's a\nsingle byte. For example, when Unicode mode is enabled, `.` will\nmatch `💩` once, where as it will match 4 times when Unicode mode\nis disabled. (Since the UTF-8 encoding of `💩` is 4 bytes long.)\n* Case insensitive matching uses Unicode simple case folding rules.\n* Unicode character classes like `\\p{Letter}` and `\\p{Greek}` are\navailable.\n* Perl character classes are Unicode aware. That is, `\\w`, `\\s` and\n`\\d`.\n* The word boundary assertions, `\\b` and `\\B`, use the Unicode\ndefinition of a word character.\n\nNote that unlike the top-level `Regex` for searching `&str`, it\nis permitted to disable Unicode mode even if the resulting pattern\ncould match invalid UTF-8. For example, `(?-u:.)` is not a valid\npattern for a top-level `Regex`, but is valid for a `bytes::Regex`.\n\nFor more details on the Unicode support in this crate, see the\n[Unicode section](crate#unicode) in this crate's top-level\ndocumentation.\n\nThe default for this is `true`.\n\n# Example\n\n```\nuse regex::bytes::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"\\w\")\n    .unicode(false)\n    .build()\n    .unwrap();\n// Normally greek letters would be included in \\w, but since\n// Unicode mode is disabled, it only matches ASCII letters.\nassert!(!re.is_match(\"δ\".as_bytes()));\n\nlet re = RegexBuilder::new(r\"s\")\n    .case_insensitive(true)\n    .unicode(false)\n    .build()\n    .unwrap();\n// Normally 'ſ' is included when searching for 's' case\n// insensitively due to Unicode's simple case folding rules. But\n// when Unicode mode is disabled, only ASCII case insensitive rules\n// are used.\nassert!(!re.is_match(\"ſ\".as_bytes()));\n```\n\nSince this builder is for constructing a [`bytes::Regex`](Regex),\none can disable Unicode mode even if it would match invalid UTF-8:\n\n```\nuse regex::bytes::RegexBuilder;\n\nlet re = RegexBuilder::new(r\".\")\n    .unicode(false)\n    .build()\n    .unwrap();\n// Normally greek letters would be included in \\w, but since\n// Unicode mode is disabled, it only matches ASCII letters.\nassert!(re.is_match(b\"\\xFF\"));\n```","links":{"crate#unicode":"0:0:2522","Regex":"0:860:2681"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:364:185":{"id":"0:364:185","crate_id":0,"name":"Item","span":{"filename":"src/regex/bytes.rs","begin":[2367,4],"end":[2367,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}}}}},"b:1:3185-0:1034:3760":{"id":"b:1:3185-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:598:1264":{"id":"0:598:1264","crate_id":0,"name":"next","span":{"filename":"src/regex/string.rs","begin":[2225,4],"end":[2232,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:237:3867":{"id":"0:237:3867","crate_id":0,"name":"as_bytes","span":{"filename":"src/regex/bytes.rs","begin":[1545,4],"end":[1547,5]},"visibility":"public","docs":"Returns the substring of the haystack that matched.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:8585-0:936:4044":{"id":"b:1:8585-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2863-0:1108:4659":{"id":"b:1:2863-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:816-0:973:3298":{"id":"b:4:816-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:988":{"id":"0:988","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[1489,26],"end":[1489,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2952:213","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:990:739"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:45870:4917-0:899:3405":{"id":"a:1:45870:4917-0:899:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:662":{"id":"0:662","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2499,0],"end":[2507,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:648:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"alloc::string::String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:663:3639","0:664:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2860-0:836:2715":{"id":"b:1:2860-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3175-0:1034:3760":{"id":"b:1:3175-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2860-0:1093:4742":{"id":"b:1:2860-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:122:2701":{"id":"0:122:2701","crate_id":0,"name":"line_terminator","span":{"filename":"src/builders.rs","begin":[2292,8],"end":[2295,9]},"visibility":"public","docs":"Configures the line terminator to be used by the regex.\n\nThe line terminator is relevant in two ways for a particular regex:\n\n* When dot-matches-new-line mode is *not* enabled (the default),\nthen `.` will match any character except for the configured line\nterminator.\n* When multi-line mode is enabled (not the default), then `^` and\n`$` will match immediately after and before, respectively, a line\nterminator.\n\nIn both cases, if CRLF mode is enabled in a particular context,\nthen it takes precedence over any configured line terminator.\n\nThis option cannot be configured from within the pattern.\n\nThe default line terminator is `\\n`.\n\n# Example\n\nThis shows how to treat the NUL byte as a line terminator. This can\nbe a useful heuristic when searching binary data.\n\n```\nuse regex::bytes::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\"^foo$\"])\n    .multi_line(true)\n    .line_terminator(b'\\x00')\n    .build()\n    .unwrap();\nlet hay = b\"\\x00foo\\x00\";\nassert!(re.is_match(hay));\n```\n\nThis example shows that the behavior of `.` is impacted by this\nsetting as well:\n\n```\nuse regex::bytes::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\".\"])\n    .line_terminator(b'\\x00')\n    .build()\n    .unwrap();\nassert!(re.is_match(b\"\\n\"));\nassert!(!re.is_match(b\"\\x00\"));\n```\n\nThis shows that building a regex will work even when the byte given\nis not ASCII. This is unlike the top-level `RegexSet` API where\nmatching invalid UTF-8 is not allowed.\n\nNote though that you must disable Unicode mode. This is required\nbecause Unicode mode requires matching one codepoint at a time,\nand there is no way to match a non-ASCII byte as if it were a\ncodepoint.\n\n```\nuse regex::bytes::RegexSetBuilder;\n\nassert!(\n    RegexSetBuilder::new([r\".\"])\n        .unicode(false)\n        .line_terminator(0x80)\n        .build()\n        .is_ok(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:256:3638":{"id":"0:256:3638","crate_id":0,"name":"get","span":{"filename":"src/regex/bytes.rs","begin":[1662,4],"end":[1666,5]},"visibility":"public","docs":"Returns the `Match` associated with the capture group at index `i`. If\n`i` does not correspond to a capture group, or if the capture group did\nnot participate in the match, then `None` is returned.\n\nWhen `i == 0`, this is guaranteed to return a non-`None` value.\n\n# Examples\n\nGet the substring that matched with a default of an empty string if the\ngroup didn't participate in the match:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"[a-z]+(?:([0-9]+)|([A-Z]+))\").unwrap();\nlet caps = re.captures(b\"abc123\").unwrap();\n\nlet substr1 = caps.get(1).map_or(&b\"\"[..], |m| m.as_bytes());\nlet substr2 = caps.get(2).map_or(&b\"\"[..], |m| m.as_bytes());\nassert_eq!(substr1, b\"123\");\nassert_eq!(substr2, b\"\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["i",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:45871:4916-0:865:3298":{"id":"a:1:45871:4916-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3175-0:1120:4742":{"id":"b:1:3175-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45871:4916-0:908:3463":{"id":"a:1:45871:4916-0:908:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:45871:4916-0:968:2681":{"id":"a:1:45871:4916-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:588:1264":{"id":"0:588:1264","crate_id":0,"name":"next","span":{"filename":"src/regex/string.rs","begin":[2181,4],"end":[2185,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:8585-0:1007:3405":{"id":"b:1:8585-0:1007:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:736:4752":{"id":"0:736:4752","crate_id":0,"name":"next_back","span":{"filename":"src/regexset/bytes.rs","begin":[661,4],"end":[668,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3185-0:1016:3463":{"id":"b:1:3185-0:1016:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3443:5223-0:890:3317":{"id":"a:1:3443:5223-0:890:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:380:4225":{"id":"0:380:4225","crate_id":0,"name":"by_ref","span":{"filename":"src/regex/bytes.rs","begin":[2467,4],"end":[2469,5]},"visibility":"default","docs":"Returns a type that implements `Replacer`, but that borrows and wraps\nthis `Replacer`.\n\nThis is useful when you want to take a generic `Replacer` (which might\nnot be cloneable) and use it without consuming it, so it can be used\nmore than once.\n\n# Example\n\n```\nuse regex::bytes::{Regex, Replacer};\n\nfn replace_all_twice<R: Replacer>(\n    re: Regex,\n    src: &[u8],\n    mut rep: R,\n) -> Vec<u8> {\n    let dst = re.replace_all(src, rep.by_ref());\n    let dst = re.replace_all(&dst, rep.by_ref());\n    dst.into_owned()\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'r","is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2918-0:824:2715":{"id":"b:1:2918-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:978":{"id":"0:978","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[1489,9],"end":[1489,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3403:121","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:4:816-0:991:3722":{"id":"b:4:816-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:146:847":{"id":"0:146:847","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[86,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2389,0],"end":[2389,71]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:709:4660":{"id":"0:709:4660","crate_id":0,"name":"matches_at","span":{"filename":"src/regexset/bytes.rs","begin":[329,4],"end":[334,5]},"visibility":"public","docs":"Returns the set of regexes that match in the given haystack.\n\nThe set returned contains the index of each regex that matches in\nthe given haystack. The index is in correspondence with the order of\nregular expressions given to `RegexSet`'s constructor.\n\nThe set can also be used to iterate over the matched indices. The order\nof iteration is always ascending with respect to the matching indices.\n\nThe significance of the starting point is that it takes the surrounding\ncontext into consideration. For example, the `\\A` anchor can only\nmatch when `start == 0`.\n\n# Panics\n\nThis panics when `start >= haystack.len() + 1`.\n\n# Example\n\nTests which regular expressions match the given haystack:\n\n```\nuse regex::bytes::RegexSet;\n\nlet set = RegexSet::new([r\"\\bbar\\b\", r\"(?m)^bar$\"]).unwrap();\nlet hay = b\"foobar\";\n// We get matches here, but it's probably not intended.\nlet matches: Vec<_> = set.matches(&hay[3..]).into_iter().collect();\nassert_eq!(matches, vec![0, 1]);\n// No matches because the  assertions take the context into account.\nlet matches: Vec<_> = set.matches_at(hay, 3).into_iter().collect();\nassert_eq!(matches, vec![]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["start",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3175-0:1088:4744":{"id":"b:1:3175-0:1088:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:347:4157":{"id":"0:347:4157","crate_id":0,"name":"size_hint","span":{"filename":"src/regex/bytes.rs","begin":[2301,4],"end":[2303,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}}]},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:1007:3405":{"id":"a:1:3408:263-0:1007:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36058:4992-0:842:3015":{"id":"a:1:36058:4992-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:3443:5223-0:1115:4744":{"id":"a:1:3443:5223-0:1115:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[981,0],"end":[1261,1]},"visibility":"default","docs":"A group of advanced or \"lower level\" search methods. Some methods permit\nstarting the search at a position greater than `0` in the haystack. Other\nmethods permit reusing allocations, for example, when extracting the\nmatches for capture groups.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:207:3662","0:208:3663","0:210:3283","0:211:3299","0:214:3374","0:216:3720","0:218:3723"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:315:185":{"id":"0:315:185","crate_id":0,"name":"Item","span":{"filename":"src/regex/bytes.rs","begin":[2170,4],"end":[2170,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}}},"b:1:3190-0:824:2715":{"id":"b:1:3190-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36000:251-0:836:2715":{"id":"a:1:36000:251-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:268:847":{"id":"0:268:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/bytes.rs","begin":[1911,4],"end":[1970,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:1103:2691":{"id":"a:1:3408:263-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:445:3249":{"id":"0:445:3249","crate_id":0,"name":"from_str","span":{"filename":"src/regex/string.rs","begin":[124,4],"end":[126,5]},"visibility":"default","docs":"Attempts to parse a string into a regular expression","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:45871:4916-0:1066:4239":{"id":"a:1:45871:4916-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:4055-0:848:150":{"id":"b:1:4055-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2863-0:1025:3491":{"id":"b:1:2863-0:1025:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:968:2681":{"id":"0:968:2681","crate_id":0,"name":"Regex","span":{"filename":"src/regex/string.rs","begin":[101,0],"end":[104,1]},"visibility":"public","docs":"A compiled regular expression for searching Unicode haystacks.\n\nA `Regex` can be used to search haystacks, split haystacks into substrings\nor replace substrings in a haystack with a different substring. All\nsearching is done with an implicit `(?s:.)*?` at the beginning and end of\nan pattern. To force an expression to match the whole string (or a prefix\nor a suffix), you must use an anchor like `^` or `$` (or `\\A` and `\\z`).\n\nWhile this crate will handle Unicode strings (whether in the regular\nexpression or in the haystack), all positions returned are **byte\noffsets**. Every byte offset is guaranteed to be at a Unicode code point\nboundary. That is, all offsets returned by the `Regex` API are guaranteed\nto be ranges that can slice a `&str` without panicking. If you want to\nrelax this requirement, then you must search `&[u8]` haystacks with a\n[`bytes::Regex`](crate::bytes::Regex).\n\nThe only methods that allocate new strings are the string replacement\nmethods. All other methods (searching and splitting) return borrowed\nreferences into the haystack given.\n\n# Example\n\nFind the offsets of a US phone number:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(\"[0-9]{3}-[0-9]{3}-[0-9]{4}\").unwrap();\nlet m = re.find(\"phone: 111-222-3333\").unwrap();\nassert_eq!(7..19, m.range());\n```\n\n# Example: extracting capture groups\n\nA common way to use regexes is with capture groups. That is, instead of\njust looking for matches of an entire regex, parentheses are used to create\ngroups that represent part of the match.\n\nFor example, consider a haystack with multiple lines, and each line has\nthree whitespace delimited fields where the second field is expected to be\na number and the third field a boolean. To make this convenient, we use\nthe [`Captures::extract`] API to put the strings that match each group\ninto a fixed size array:\n\n```\nuse regex::Regex;\n\nlet hay = \"\nrabbit         54 true\ngroundhog 2 true\ndoes not match\nfox   109    false\n\";\nlet re = Regex::new(r\"(?m)^\\s*(\\S+)\\s+([0-9]+)\\s+(true|false)\\s*$\").unwrap();\nlet mut fields: Vec<(&str, i64, bool)> = vec![];\nfor (_, [f1, f2, f3]) in re.captures_iter(hay).map(|caps| caps.extract()) {\n    fields.push((f1, f2.parse()?, f3.parse()?));\n}\nassert_eq!(fields, vec![\n    (\"rabbit\", 54, true),\n    (\"groundhog\", 2, true),\n    (\"fox\", 109, false),\n]);\n\n# Ok::<(), Box<dyn std::error::Error>>(())\n```\n\n# Example: searching with the `Pattern` trait\n\n**Note**: This section requires that this crate is compiled with the\n`pattern` Cargo feature enabled, which **requires nightly Rust**.\n\nSince `Regex` implements `Pattern` from the standard library, one can\nuse regexes with methods defined on `&str`. For example, `is_match`,\n`find`, `find_iter` and `split` can, in some cases, be replaced with\n`str::contains`, `str::find`, `str::match_indices` and `str::split`.\n\nHere are some examples:\n\n```ignore\nuse regex::Regex;\n\nlet re = Regex::new(r\"\\d+\").unwrap();\nlet hay = \"a111b222c\";\n\nassert!(hay.contains(&re));\nassert_eq!(hay.find(&re), Some(1));\nassert_eq!(hay.match_indices(&re).collect::<Vec<_>>(), vec![\n    (1, \"111\"),\n    (5, \"222\"),\n]);\nassert_eq!(hay.split(&re).collect::<Vec<_>>(), vec![\"a\", \"b\", \"c\"]);\n```","links":{"crate::bytes::Regex":"0:860:2681","`Captures::extract`":"0:533:3984"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:452","0:480","0:497","a:1:36000:251-0:968:2681","a:1:3408:263-0:968:2681","a:1:3443:5223-0:968:2681","a:1:36058:4992-0:968:2681","a:1:45870:4917-0:968:2681","a:1:45871:4916-0:968:2681","b:1:2860-0:968:2681","b:1:2863-0:968:2681","b:1:2918-0:968:2681","b:1:3175-0:968:2681","b:1:3179-0:968:2681","b:1:3185-0:968:2681","b:1:3190-0:968:2681","b:1:4055-0:968:2681","b:4:816-0:968:2681","b:4:6133-0:968:2681","0:971","0:439","0:441","0:443","0:446","0:449"]}}},"0:447:150":{"id":"0:447:150","crate_id":0,"name":"Error","span":{"filename":"src/regex/string.rs","begin":[130,4],"end":[130,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"b:1:3190-0:1007:3405":{"id":"b:1:3190-0:1007:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3179-0:1044:4044":{"id":"b:1:3179-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1041":{"id":"0:1041","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2326,16],"end":[2326,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["0:1043:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:794":{"id":"0:794","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[639,0],"end":[654,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:795:185","0:796:1264","0:797:4157"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:214:3374":{"id":"0:214:3374","crate_id":0,"name":"captures_at","span":{"filename":"src/regex/bytes.rs","begin":[1153,4],"end":[1167,5]},"visibility":"public","docs":"Returns the same as [`Regex::captures`], but starts the search at the\ngiven offset.\n\nThe significance of the starting point is that it takes the surrounding\ncontext into consideration. For example, the `\\A` anchor can only\nmatch when `start == 0`.\n\n# Panics\n\nThis panics when `start >= haystack.len() + 1`.\n\n# Example\n\nThis example shows the significance of `start` by demonstrating how it\ncan be used to permit look-around assertions in a regex to take the\nsurrounding context into account.\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"\\bchew\\b\").unwrap();\nlet hay = b\"eschew\";\n// We get a match here, but it's probably not intended.\nassert_eq!(&re.captures(&hay[2..]).unwrap()[0], b\"chew\");\n// No match because the  assertions take the context into account.\nassert!(re.captures_at(hay, 2).is_none());\n```","links":{"`Regex::captures`":"0:186:3180"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["start",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:45870:4917-0:848:150":{"id":"a:1:45870:4917-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2860-0:883:3722":{"id":"b:1:2860-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2860-0:1025:3491":{"id":"b:1:2860-0:1025:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:628:613":{"id":"0:628:613","crate_id":0,"name":"count","span":{"filename":"src/regex/string.rs","begin":[2343,4],"end":[2345,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2860-0:1066:4239":{"id":"b:1:2860-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45871:4916-0:1076:2691":{"id":"a:1:45871:4916-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:1119:847":{"id":"0:1119:847","crate_id":0,"name":"fmt","span":{"filename":"src/regexset/string.rs","begin":[633,9],"end":[633,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:752:2521":{"id":"0:752:2521","crate_id":0,"name":"string","span":{"filename":"src/regexset/string.rs","begin":[1,0],"end":[706,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1103:2691","0:1108:4659","0:1115:4744","0:1120:4742"],"is_stripped":true}}},"b:1:8585-0:926:3760":{"id":"b:1:8585-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1072:508":{"id":"0:1072:508","crate_id":0,"name":"clone","span":{"filename":"src/regex/string.rs","begin":[2577,9],"end":[2577,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:782:4712":{"id":"0:782:4712","crate_id":0,"name":"matched","span":{"filename":"src/regexset/string.rs","begin":[506,4],"end":[508,5]},"visibility":"public","docs":"Whether the regex at the given index matched.\n\nThe index for a regex is determined by its insertion order upon the\ninitial construction of a `RegexSet`, starting at `0`.\n\n# Panics\n\nIf `index` is greater than or equal to the number of regexes in the\noriginal set that produced these matches. Equivalently, when `index`\nis greater than or equal to [`SetMatches::len`].\n\n# Example\n\n```\nuse regex::RegexSet;\n\nlet set = RegexSet::new([\n    r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n    r\"[a-z]+\\.(com|org|net)\",\n]).unwrap();\nlet matches = set.matches(\"example.com\");\nassert!(!matches.matched(0));\nassert!(matches.matched(1));\n```","links":{"`SetMatches::len`":"0:783:1062"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:393:3639":{"id":"0:393:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/bytes.rs","begin":[2493,4],"end":[2495,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Vec","id":"4:7390:282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3185-0:998:3317":{"id":"b:1:3185-0:998:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3190-0:917:3491":{"id":"b:1:3190-0:917:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:824:2715":{"id":"a:1:45870:4917-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36000:251-0:998:3317":{"id":"a:1:36000:251-0:998:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:243":{"id":"0:243","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[1569,0],"end":[1573,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}},"for":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}},"items":["0:245:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:597:185":{"id":"0:597:185","crate_id":0,"name":"Item","span":{"filename":"src/regex/string.rs","begin":[2222,4],"end":[2222,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}}},"0:168:847":{"id":"0:168:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/bytes.rs","begin":[113,4],"end":[115,5]},"visibility":"default","docs":"Shows the original regular expression.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:792:185":{"id":"0:792:185","crate_id":0,"name":"Item","span":{"filename":"src/regexset/string.rs","begin":[599,4],"end":[599,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"primitive":"usize"}}}},"0:354:1264":{"id":"0:354:1264","crate_id":0,"name":"next","span":{"filename":"src/regex/bytes.rs","begin":[2325,4],"end":[2327,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'r","is_mutable":false,"type":{"primitive":"str"}}}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1021":{"id":"0:1021","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2259,9],"end":[2259,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:1024:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2860-0:1076:2691":{"id":"b:1:2860-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:842:3015":{"id":"0:842:3015","crate_id":0,"name":"RegexSetBuilder","span":{"filename":"src/builders.rs","begin":[1966,4],"end":[1968,5]},"visibility":"public","docs":"A configurable builder for a [`RegexSet`].\n\nThis builder can be used to programmatically set flags such as `i`\n(case insensitive) and `x` (for verbose mode). This builder can also be\nused to configure things like the line terminator and a size limit on\nthe compiled regular expression.","links":{"`RegexSet`":"0:1076:2691"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:112","a:1:36000:251-0:842:3015","a:1:3408:263-0:842:3015","a:1:3443:5223-0:842:3015","a:1:36058:4992-0:842:3015","a:1:45870:4917-0:842:3015","a:1:45871:4916-0:842:3015","b:1:2860-0:842:3015","b:1:2863-0:842:3015","b:1:2918-0:842:3015","b:1:3175-0:842:3015","b:1:3179-0:842:3015","b:1:3185-0:842:3015","b:1:3190-0:842:3015","b:1:4055-0:842:3015","b:4:816-0:842:3015","0:844","0:846"]}}},"0:986":{"id":"0:986","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[1489,26],"end":[1489,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:36002:260","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[1585,0],"end":[1589,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"core::ops::Range","id":"1:43364:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"items":["0:521:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:3408:263-0:936:4044":{"id":"a:1:3408:263-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:45871:4916-0:958:4239":{"id":"a:1:45871:4916-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2860-0:1108:4659":{"id":"b:1:2860-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:460:3180":{"id":"0:460:3180","crate_id":0,"name":"captures","span":{"filename":"src/regex/string.rs","begin":[355,4],"end":[357,5]},"visibility":"public","docs":"This routine searches for the first match of this regex in the haystack\ngiven, and if found, returns not only the overall match but also the\nmatches of each capture group in the regex. If no match is found, then\n`None` is returned.\n\nCapture group `0` always corresponds to an implicit unnamed group that\nincludes the entire match. If a match is found, this group is always\npresent. Subsequent groups may be named and are numbered, starting\nat 1, by the order in which the opening parenthesis appears in the\npattern. For example, in the pattern `(?<a>.(?<b>.))(?<c>.)`, `a`,\n`b` and `c` correspond to capture group indices `1`, `2` and `3`,\nrespectively.\n\nYou should only use `captures` if you need access to the capture group\nmatches. Otherwise, [`Regex::find`] is generally faster for discovering\njust the overall match.\n\n# Example\n\nSay you have some haystack with movie names and their release years,\nlike \"'Citizen Kane' (1941)\". It'd be nice if we could search for\nsubstrings looking like that, while also extracting the movie name and\nits release year separately. The example below shows how to do that.\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();\nlet hay = \"Not my favorite movie: 'Citizen Kane' (1941).\";\nlet caps = re.captures(hay).unwrap();\nassert_eq!(caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");\nassert_eq!(caps.get(1).unwrap().as_str(), \"Citizen Kane\");\nassert_eq!(caps.get(2).unwrap().as_str(), \"1941\");\n// You can also access the groups by index using the Index notation.\n// Note that this will panic on an invalid index. In this case, these\n// accesses are always correct because the overall regex will only\n// match when these capture groups match.\nassert_eq!(&caps[0], \"'Citizen Kane' (1941)\");\nassert_eq!(&caps[1], \"Citizen Kane\");\nassert_eq!(&caps[2], \"1941\");\n```\n\nNote that the full match is at capture group `0`. Each subsequent\ncapture group is indexed by the order of its opening `(`.\n\nWe can make this example a bit clearer by using *named* capture groups:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>\\d{4})\\)\").unwrap();\nlet hay = \"Not my favorite movie: 'Citizen Kane' (1941).\";\nlet caps = re.captures(hay).unwrap();\nassert_eq!(caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");\nassert_eq!(caps.name(\"title\").unwrap().as_str(), \"Citizen Kane\");\nassert_eq!(caps.name(\"year\").unwrap().as_str(), \"1941\");\n// You can also access the groups by name using the Index notation.\n// Note that this will panic on an invalid group name. In this case,\n// these accesses are always correct because the overall regex will\n// only match when these capture groups match.\nassert_eq!(&caps[0], \"'Citizen Kane' (1941)\");\nassert_eq!(&caps[\"title\"], \"Citizen Kane\");\nassert_eq!(&caps[\"year\"], \"1941\");\n```\n\nHere we name the capture groups, which we can access with the `name`\nmethod or the `Index` notation with a `&str`. Note that the named\ncapture groups are still accessible with `get` or the `Index` notation\nwith a `usize`.\n\nThe `0`th capture group is always unnamed, so it must always be\naccessed with `get(0)` or `[0]`.\n\nFinally, one other way to to get the matched substrings is with the\n[`Captures::extract`] API:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();\nlet hay = \"Not my favorite movie: 'Citizen Kane' (1941).\";\nlet (full, [title, year]) = re.captures(hay).unwrap().extract();\nassert_eq!(full, \"'Citizen Kane' (1941)\");\nassert_eq!(title, \"Citizen Kane\");\nassert_eq!(year, \"1941\");\n```","links":{"`Regex::find`":"0:455:3296","`Captures::extract`":"0:533:3984"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:10-0:752:2521":{"id":"0:10-0:752:2521","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1329,55],"end":[1329,74]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"crate::regexset::string","name":"string","id":"0:752:2521","is_glob":true}}},"0:236:3865":{"id":"0:236:3865","crate_id":0,"name":"range","span":{"filename":"src/regex/bytes.rs","begin":[1539,4],"end":[1541,5]},"visibility":"public","docs":"Returns the range over the starting and ending byte offsets of the\nmatch in the haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"core::ops::Range","id":"1:43364:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:888":{"id":"0:888","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2063,16],"end":[2063,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:889:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:660:3639":{"id":"0:660:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/string.rs","begin":[2490,4],"end":[2492,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3179-0:1120:4742":{"id":"b:1:3179-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3185-0:1120:4742":{"id":"b:1:3185-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3408:263-0:249:3373":{"id":"a:1:3408:263-0:249:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:834":{"id":"0:834","crate_id":0,"name":null,"span":{"filename":"src/builders.rs","begin":[786,20],"end":[786,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:835:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:1049":{"id":"0:1049","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2368,9],"end":[2368,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:1052:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:1003":{"id":"0:1003","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2171,9],"end":[2171,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:1006:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:211:3299":{"id":"0:211:3299","crate_id":0,"name":"find_at","span":{"filename":"src/regex/bytes.rs","begin":[1116,4],"end":[1123,5]},"visibility":"public","docs":"Returns the same as [`Regex::find`], but starts the search at the given\noffset.\n\nThe significance of the starting point is that it takes the surrounding\ncontext into consideration. For example, the `\\A` anchor can only\nmatch when `start == 0`.\n\n# Panics\n\nThis panics when `start >= haystack.len() + 1`.\n\n# Example\n\nThis example shows the significance of `start` by demonstrating how it\ncan be used to permit look-around assertions in a regex to take the\nsurrounding context into account.\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"\\bchew\\b\").unwrap();\nlet hay = b\"eschew\";\n// We get a match here, but it's probably not intended.\nassert_eq!(re.find(&hay[2..]).map(|m| m.range()), Some(0..4));\n// No match because the  assertions take the context into account.\nassert_eq!(re.find_at(hay, 2), None);\n```","links":{"`Regex::find`":"0:181:3296"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["start",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:208:3663":{"id":"0:208:3663","crate_id":0,"name":"shortest_match_at","span":{"filename":"src/regex/bytes.rs","begin":[1046,4],"end":[1054,5]},"visibility":"public","docs":"Returns the same as `shortest_match`, but starts the search at the\ngiven offset.\n\nThe significance of the starting point is that it takes the surrounding\ncontext into consideration. For example, the `\\A` anchor can only match\nwhen `start == 0`.\n\nIf a match is found, the offset returned is relative to the beginning\nof the haystack, not the beginning of the search.\n\n# Panics\n\nThis panics when `start >= haystack.len() + 1`.\n\n# Example\n\nThis example shows the significance of `start` by demonstrating how it\ncan be used to permit look-around assertions in a regex to take the\nsurrounding context into account.\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"\\bchew\\b\").unwrap();\nlet hay = b\"eschew\";\n// We get a match here, but it's probably not intended.\nassert_eq!(re.shortest_match(&hay[2..]), Some(4));\n// No match because the  assertions take the context into account.\nassert_eq!(re.shortest_match_at(hay, 2), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["start",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:4055-0:883:3722":{"id":"b:1:4055-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:262:4024":{"id":"0:262:4024","crate_id":0,"name":"expand","span":{"filename":"src/regex/bytes.rs","begin":[1853,4],"end":[1855,5]},"visibility":"public","docs":"Expands all instances of `$ref` in `replacement` to the corresponding\ncapture group, and writes them to the `dst` buffer given. A `ref` can\nbe a capture group index or a name. If `ref` doesn't refer to a capture\ngroup that participated in the match, then it is replaced with the\nempty string.\n\n# Format\n\nThe format of the replacement string supports two different kinds of\ncapture references: unbraced and braced.\n\nFor the unbraced format, the format supported is `$ref` where `name`\ncan be any character in the class `[0-9A-Za-z_]`. `ref` is always\nthe longest possible parse. So for example, `$1a` corresponds to the\ncapture group named `1a` and not the capture group at index `1`. If\n`ref` matches `^[0-9]+$`, then it is treated as a capture group index\nitself and not a name.\n\nFor the braced format, the format supported is `${ref}` where `ref` can\nbe any sequence of bytes except for `}`. If no closing brace occurs,\nthen it is not considered a capture reference. As with the unbraced\nformat, if `ref` matches `^[0-9]+$`, then it is treated as a capture\ngroup index and not a name.\n\nThe braced format is useful for exerting precise control over the name\nof the capture reference. For example, `${1}a` corresponds to the\ncapture group reference `1` followed by the letter `a`, where as `$1a`\n(as mentioned above) corresponds to the capture group reference `1a`.\nThe braced format is also useful for expressing capture group names\nthat use characters not supported by the unbraced format. For example,\n`${foo[bar].baz}` refers to the capture group named `foo[bar].baz`.\n\nIf a capture group reference is found and it does not refer to a valid\ncapture group, then it will be replaced with the empty string.\n\nTo write a literal `$`, use `$$`.\n\n# Example\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(\n    r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",\n).unwrap();\nlet hay = b\"On 14-03-2010, I became a Tenneessee lamb.\";\nlet caps = re.captures(hay).unwrap();\n\nlet mut dst = vec![];\ncaps.expand(b\"year=$year, month=$month, day=$day\", &mut dst);\nassert_eq!(dst, b\"year=2010, month=03, day=14\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["replacement",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Vec","id":"4:7390:282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:922":{"id":"0:922","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2286,9],"end":[2286,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:925:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:971":{"id":"0:971","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[100,9],"end":[100,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:972:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:3408:263-0:1076:2691":{"id":"a:1:3408:263-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:143":{"id":"0:143","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[68,0],"end":[79,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:11020:133","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:144:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:668:3627":{"id":"0:668:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/string.rs","begin":[2514,4],"end":[2516,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"str"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1073":{"id":"0:1073","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2577,16],"end":[2577,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["0:1075:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:887:508":{"id":"0:887:508","crate_id":0,"name":"clone","span":{"filename":"src/regex/bytes.rs","begin":[2063,9],"end":[2063,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2860-0:973:3298":{"id":"b:1:2860-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:878":{"id":"0:878","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[1482,26],"end":[1482,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:36002:260","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:8585-0:1093:4742":{"id":"b:1:8585-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:36000:251-0:899:3405":{"id":"a:1:36000:251-0:899:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:142:3157":{"id":"0:142:3157","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[60,4],"end":[65,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:786:4743":{"id":"0:786:4743","crate_id":0,"name":"IntoIter","span":{"filename":"src/regexset/string.rs","begin":[588,4],"end":[588,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"b:1:2860-0:1007:3405":{"id":"b:1:2860-0:1007:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3175-0:1007:3405":{"id":"b:1:3175-0:1007:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3178:5378":{"id":"1:3178:5378","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3152:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:582:1062":{"id":"0:582:1062","crate_id":0,"name":"len","span":{"filename":"src/regex/string.rs","begin":[2137,4],"end":[2142,5]},"visibility":"public","docs":"Returns the total number of capture groups (even if they didn't match).\nThat is, the length returned is unaffected by the result of a search.\n\nThis is always at least `1` since every regex has at least `1`\ncapturing group that corresponds to the entire match.\n\n# Example\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?<first>\\w+)\\s+(?<last>\\w+)\").unwrap();\nlet mut locs = re.capture_locations();\nassert_eq!(3, locs.len());\nre.captures_read(&mut locs, \"Bruce Springsteen\").unwrap();\nassert_eq!(3, locs.len());\n```\n\nNotice that the length is always at least `1`, regardless of the regex:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"\").unwrap();\nlet locs = re.capture_locations();\nassert_eq!(1, locs.len());\n\n// [a&&b] is a regex that never matches anything.\nlet re = Regex::new(r\"[a&&b]\").unwrap();\nlet locs = re.capture_locations();\nassert_eq!(1, locs.len());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:714:2676":{"id":"0:714:2676","crate_id":0,"name":"patterns","span":{"filename":"src/regexset/bytes.rs","begin":[448,4],"end":[450,5]},"visibility":"public","docs":"Returns the regex patterns that this regex set was constructed from.\n\nThis function can be used to determine the pattern for a match. The\nslice returned has exactly as many patterns givens to this regex set,\nand the order of the slice is the same as the order of the patterns\nprovided to the set.\n\n# Example\n\n```\nuse regex::bytes::RegexSet;\n\nlet set = RegexSet::new(&[\n    r\"\\w+\",\n    r\"\\d+\",\n    r\"\\pL+\",\n    r\"foo\",\n    r\"bar\",\n    r\"barfoo\",\n    r\"foobar\",\n]).unwrap();\nlet matches: Vec<_> = set\n    .matches(b\"foobar\")\n    .into_iter()\n    .map(|index| &set.patterns()[index])\n    .collect();\nassert_eq!(matches, vec![r\"\\w+\", r\"\\pL+\", r\"foo\", r\"bar\", r\"foobar\"]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3175-0:1057:4226":{"id":"b:1:3175-0:1057:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36058:4992-0:968:2681":{"id":"a:1:36058:4992-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:748":{"id":"0:748","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[704,0],"end":[704,60]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:45871:4916-0:998:3317":{"id":"a:1:45871:4916-0:998:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:777:2676":{"id":"0:777:2676","crate_id":0,"name":"patterns","span":{"filename":"src/regexset/string.rs","begin":[444,4],"end":[446,5]},"visibility":"public","docs":"Returns the regex patterns that this regex set was constructed from.\n\nThis function can be used to determine the pattern for a match. The\nslice returned has exactly as many patterns givens to this regex set,\nand the order of the slice is the same as the order of the patterns\nprovided to the set.\n\n# Example\n\n```\nuse regex::RegexSet;\n\nlet set = RegexSet::new(&[\n    r\"\\w+\",\n    r\"\\d+\",\n    r\"\\pL+\",\n    r\"foo\",\n    r\"bar\",\n    r\"barfoo\",\n    r\"foobar\",\n]).unwrap();\nlet matches: Vec<_> = set\n    .matches(\"foobar\")\n    .into_iter()\n    .map(|index| &set.patterns()[index])\n    .collect();\nassert_eq!(matches, vec![r\"\\w+\", r\"\\pL+\", r\"foo\", r\"bar\", r\"foobar\"]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"1:3189:1925":{"id":"1:3189:1925","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2863-0:908:3463":{"id":"b:1:2863-0:908:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3179-0:1007:3405":{"id":"b:1:3179-0:1007:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:637:1264":{"id":"0:637:1264","crate_id":0,"name":"next","span":{"filename":"src/regex/string.rs","begin":[2378,4],"end":[2382,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3179-0:836:2715":{"id":"b:1:3179-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3190-0:1081:4659":{"id":"b:1:3190-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:9-0:426:2521":{"id":"0:9-0:426:2521","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1329,37],"end":[1329,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"crate::regex::string","name":"string","id":"0:426:2521","is_glob":true}}},"b:4:816-0:1108:4659":{"id":"b:4:816-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3179-0:842:3015":{"id":"b:1:3179-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:574:1000":{"id":"0:574:1000","crate_id":0,"name":"index","span":{"filename":"src/regex/string.rs","begin":[2026,4],"end":[2030,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":"'n","is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"primitive":"str"}}},"is_c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:61:2126":{"id":"0:61:2126","crate_id":0,"name":"unicode","span":{"filename":"src/builders.rs","begin":[293,8],"end":[296,9]},"visibility":"public","docs":"This configures Unicode mode for the entire pattern.\n\nEnabling Unicode mode does a number of things:\n\n* Most fundamentally, it causes the fundamental atom of matching\nto be a single codepoint. When Unicode mode is disabled, it's a\nsingle byte. For example, when Unicode mode is enabled, `.` will\nmatch `💩` once, where as it will match 4 times when Unicode mode\nis disabled. (Since the UTF-8 encoding of `💩` is 4 bytes long.)\n* Case insensitive matching uses Unicode simple case folding rules.\n* Unicode character classes like `\\p{Letter}` and `\\p{Greek}` are\navailable.\n* Perl character classes are Unicode aware. That is, `\\w`, `\\s` and\n`\\d`.\n* The word boundary assertions, `\\b` and `\\B`, use the Unicode\ndefinition of a word character.\n\nNote that if Unicode mode is disabled, then the regex will fail to\ncompile if it could match invalid UTF-8. For example, when Unicode\nmode is disabled, then since `.` matches any byte (except for\n`\\n`), then it can match invalid UTF-8 and thus building a regex\nfrom it will fail. Another example is `\\w` and `\\W`. Since `\\w` can\nonly match ASCII bytes when Unicode mode is disabled, it's allowed.\nBut `\\W` can match more than ASCII bytes, including invalid UTF-8,\nand so it is not allowed. This restriction can be lifted only by\nusing a [`bytes::Regex`](crate::bytes::Regex).\n\nFor more details on the Unicode support in this crate, see the\n[Unicode section](crate#unicode) in this crate's top-level\ndocumentation.\n\nThe default for this is `true`.\n\n# Example\n\n```\nuse regex::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"\\w\")\n    .unicode(false)\n    .build()\n    .unwrap();\n// Normally greek letters would be included in \\w, but since\n// Unicode mode is disabled, it only matches ASCII letters.\nassert!(!re.is_match(\"δ\"));\n\nlet re = RegexBuilder::new(r\"s\")\n    .case_insensitive(true)\n    .unicode(false)\n    .build()\n    .unwrap();\n// Normally 'ſ' is included when searching for 's' case\n// insensitively due to Unicode's simple case folding rules. But\n// when Unicode mode is disabled, only ASCII case insensitive rules\n// are used.\nassert!(!re.is_match(\"ſ\"));\n```","links":{"crate#unicode":"0:0:2522","crate::bytes::Regex":"0:860:2681"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:326:1264":{"id":"0:326:1264","crate_id":0,"name":"next","span":{"filename":"src/regex/bytes.rs","begin":[2217,4],"end":[2224,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"1:3193:150":{"id":"1:3193:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Infallible","id":"1:35924:8535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"0:414":{"id":"0:414","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2561,0],"end":[2569,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Replacer","id":"0:376:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:376:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["0:417:3639","0:418:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:45871:4916-0:1093:4742":{"id":"a:1:45871:4916-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36000:251-0:249:3373":{"id":"a:1:36000:251-0:249:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:594":{"id":"0:594","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2221,0],"end":[2243,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:597:185","0:598:1264","0:600:613"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:70:2706":{"id":"0:70:2706","crate_id":0,"name":"size_limit","span":{"filename":"src/builders.rs","begin":[690,8],"end":[693,9]},"visibility":"public","docs":"Sets the approximate size limit, in bytes, of the compiled regex.\n\nThis roughly corresponds to the number of heap memory, in\nbytes, occupied by a single regex. If the regex would otherwise\napproximately exceed this limit, then compiling that regex will\nfail.\n\nThe main utility of a method like this is to avoid compiling\nregexes that use an unexpected amount of resources, such as\ntime and memory. Even if the memory usage of a large regex is\nacceptable, its search time may not be. Namely, worst case time\ncomplexity for search is `O(m * n)`, where `m ~ len(pattern)` and\n`n ~ len(haystack)`. That is, search time depends, in part, on the\nsize of the compiled regex. This means that putting a limit on the\nsize of the regex limits how much a regex can impact search time.\n\nFor more information about regex size limits, see the section on\n[untrusted inputs](crate#untrusted-input) in the top-level crate\ndocumentation.\n\nThe default for this is some reasonable number that permits most\npatterns to compile successfully.\n\n# Example\n\n```\n# if !cfg!(target_pointer_width = \"64\") { return; } // see #1041\nuse regex::RegexBuilder;\n\n// It may surprise you how big some seemingly small patterns can\n// be! Since \\w is Unicode aware, this generates a regex that can\n// match approximately 140,000 distinct codepoints.\nassert!(RegexBuilder::new(r\"\\w\").size_limit(45_000).build().is_err());\n```","links":{"crate#untrusted-input":"0:0:2522"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["bytes",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2860-0:991:3722":{"id":"b:1:2860-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:856:508":{"id":"0:856:508","crate_id":0,"name":"clone","span":{"filename":"src/error.rs","begin":[7,9],"end":[7,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1007:3405":{"id":"0:1007:3405","crate_id":0,"name":"CaptureMatches","span":{"filename":"src/regex/string.rs","begin":[2216,0],"end":[2219,1]},"visibility":"public","docs":"An iterator over all non-overlapping capture matches in a haystack.\n\nThis iterator yields [`Captures`] values. The iterator stops when no more\nmatches can be found.\n\n`'r` is the lifetime of the compiled regular expression and `'h` is the\nlifetime of the matched string.\n\nThis iterator is created by [`Regex::captures_iter`].\n\n# Time complexity\n\nNote that since an iterator runs potentially many searches on the haystack\nand since each search has worst case `O(m * n)` time complexity, the\noverall worst case time complexity for iteration is `O(m * n^2)`.","links":{"`Regex::captures_iter`":"0:462:3404","`Captures`":"0:522:3373"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:1007:3405","a:1:3408:263-0:1007:3405","a:1:3443:5223-0:1007:3405","a:1:36058:4992-0:1007:3405","a:1:45870:4917-0:1007:3405","a:1:45871:4916-0:1007:3405","b:1:2860-0:1007:3405","b:1:2863-0:1007:3405","b:1:3175-0:1007:3405","b:1:3179-0:1007:3405","b:1:3185-0:1007:3405","b:1:3190-0:1007:3405","b:1:4055-0:1007:3405","b:1:8585-0:1007:3405","0:1012","0:594","0:601"]}}},"a:1:36000:251-0:908:3463":{"id":"a:1:36000:251-0:908:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36000:251-0:1007:3405":{"id":"a:1:36000:251-0:1007:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:965":{"id":"0:965","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2590,16],"end":[2590,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["0:967:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:531:1223":{"id":"0:531:1223","crate_id":0,"name":"name","span":{"filename":"src/regex/string.rs","begin":[1708,4],"end":[1712,5]},"visibility":"public","docs":"Returns the `Match` associated with the capture group named `name`. If\n`name` isn't a valid capture group or it refers to a group that didn't\nmatch, then `None` is returned.\n\nNote that unlike `caps[\"name\"]`, this returns a `Match` whose lifetime\nmatches the lifetime of the haystack in this `Captures` value.\nConversely, the substring returned by `caps[\"name\"]` has a lifetime\nof the `Captures` value, which is likely shorter than the lifetime of\nthe haystack. In some cases, it may be necessary to use this method to\naccess the matching substring instead of the `caps[\"name\"]` notation.\n\n# Examples\n\nGet the substring that matched with a default of an empty string if the\ngroup didn't participate in the match:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(\n    r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\",\n).unwrap();\nlet caps = re.captures(\"abc123\").unwrap();\n\nlet numbers = caps.name(\"numbers\").map_or(\"\", |m| m.as_str());\nlet letters = caps.name(\"letters\").map_or(\"\", |m| m.as_str());\nassert_eq!(numbers, \"123\");\nassert_eq!(letters, \"\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:106:2703":{"id":"0:106:2703","crate_id":0,"name":"swap_greed","span":{"filename":"src/builders.rs","begin":[1721,8],"end":[1724,9]},"visibility":"public","docs":"This configures swap-greed mode for the entire pattern.\n\nWhen swap-greed mode is enabled, patterns like `a+` will become\nnon-greedy and patterns like `a+?` will become greedy. In other\nwords, the meanings of `a+` and `a+?` are switched.\n\nThis setting can also be configured using the inline flag `U` in\nthe pattern.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::bytes::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"a+\")\n    .swap_greed(true)\n    .build()\n    .unwrap();\nassert_eq!(Some(&b\"a\"[..]), re.find(b\"aaa\").map(|m| m.as_bytes()));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:353:185":{"id":"0:353:185","crate_id":0,"name":"Item","span":{"filename":"src/regex/bytes.rs","begin":[2322,4],"end":[2322,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'r","is_mutable":false,"type":{"primitive":"str"}}}}],"constraints":[]}}}}}}},"0:1093:4742":{"id":"0:1093:4742","crate_id":0,"name":"SetMatchesIter","span":{"filename":"src/regexset/bytes.rs","begin":[684,0],"end":[684,50]},"visibility":"public","docs":"A borrowed iterator over the set of matches from a regex set.\n\nThe lifetime `'a` refers to the lifetime of the [`SetMatches`] value that\ncreated this iterator.\n\nThis will always produces matches in ascending order, where the index\ncorresponds to the index of the regex that matched with respect to its\nposition when initially building the set.\n\nThis iterator is created by the [`SetMatches::iter`] method.","links":{"`SetMatches`":"0:1081:4659","`SetMatches::iter`":"0:721:1039"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:1093:4742","a:1:3408:263-0:1093:4742","a:1:3443:5223-0:1093:4742","a:1:36058:4992-0:1093:4742","a:1:45870:4917-0:1093:4742","a:1:45871:4916-0:1093:4742","b:1:2860-0:1093:4742","b:1:2863-0:1093:4742","b:1:2918-0:1093:4742","b:1:3175-0:1093:4742","b:1:3179-0:1093:4742","b:1:3185-0:1093:4742","b:1:3190-0:1093:4742","b:1:4055-0:1093:4742","b:1:8585-0:1093:4742","b:4:816-0:1093:4742","0:1097","0:1100","0:738","0:744","0:748"]}}},"a:1:45870:4917-0:926:3760":{"id":"a:1:45870:4917-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:316:1264":{"id":"0:316:1264","crate_id":0,"name":"next","span":{"filename":"src/regex/bytes.rs","begin":[2173,4],"end":[2177,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:775:1062":{"id":"0:775:1062","crate_id":0,"name":"len","span":{"filename":"src/regexset/string.rs","begin":[396,4],"end":[398,5]},"visibility":"public","docs":"Returns the total number of regexes in this set.\n\n# Example\n\n```\nuse regex::RegexSet;\n\nassert_eq!(0, RegexSet::empty().len());\nassert_eq!(1, RegexSet::new([r\"[0-9]\"]).unwrap().len());\nassert_eq!(2, RegexSet::new([r\"[0-9]\", r\"[a-z]\"]).unwrap().len());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:4:816-0:1120:4742":{"id":"b:4:816-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:378:3627":{"id":"0:378:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/bytes.rs","begin":[2441,4],"end":[2443,5]},"visibility":"default","docs":"Return a fixed unchanging replacement byte string.\n\nWhen doing replacements, if access to [`Captures`] is not needed (e.g.,\nthe replacement byte string does not need `$` expansion), then it can\nbe beneficial to avoid finding sub-captures.\n\nIn general, this is called once for every call to a replacement routine\nsuch as [`Regex::replace_all`].","links":{"`Regex::replace_all`":"0:200:3618","`Captures`":"0:249:3373"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'r","is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3175-0:1081:4659":{"id":"b:1:3175-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2237,0],"end":[2237,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:3408:263-0:1108:4659":{"id":"a:1:3408:263-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:815:2529":{"id":"0:815:2529","crate_id":0,"name":"escape","span":{"filename":"src/lib.rs","begin":[1344,0],"end":[1346,1]},"visibility":"public","docs":"Escapes all regular expression meta characters in `pattern`.\n\nThe string returned may be safely used as a literal in a regular\nexpression.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["pattern",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"alloc::string::String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:4:816-0:883:3722":{"id":"b:4:816-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:957:847":{"id":"0:957:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/bytes.rs","begin":[2558,9],"end":[2558,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:45871:4916-0:1044:4044":{"id":"a:1:45871:4916-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2918-0:1120:4742":{"id":"b:1:2918-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1126:508":{"id":"0:1126:508","crate_id":0,"name":"clone","span":{"filename":"src/regexset/string.rs","begin":[679,9],"end":[679,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:131-0:90:2524":{"id":"0:131-0:90:2524","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[91,16],"end":[91,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"crate::builders::bytes","name":"bytes","id":"0:90:2524","is_glob":true}}},"a:1:36058:4992-0:949:4226":{"id":"a:1:36058:4992-0:949:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:1114:847":{"id":"0:1114:847","crate_id":0,"name":"fmt","span":{"filename":"src/regexset/string.rs","begin":[458,16],"end":[458,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3185-0:917:3491":{"id":"b:1:3185-0:917:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:210:3283":{"id":"0:210:3283","crate_id":0,"name":"is_match_at","span":{"filename":"src/regex/bytes.rs","begin":[1084,4],"end":[1086,5]},"visibility":"public","docs":"Returns the same as [`Regex::is_match`], but starts the search at the\ngiven offset.\n\nThe significance of the starting point is that it takes the surrounding\ncontext into consideration. For example, the `\\A` anchor can only\nmatch when `start == 0`.\n\n# Panics\n\nThis panics when `start >= haystack.len() + 1`.\n\n# Example\n\nThis example shows the significance of `start` by demonstrating how it\ncan be used to permit look-around assertions in a regex to take the\nsurrounding context into account.\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"\\bchew\\b\").unwrap();\nlet hay = b\"eschew\";\n// We get a match here, but it's probably not intended.\nassert!(re.is_match(&hay[2..]));\n// No match because the  assertions take the context into account.\nassert!(!re.is_match_at(hay, 2));\n```","links":{"`Regex::is_match`":"0:180:3282"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["start",{"primitive":"usize"}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2542,0],"end":[2550,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3680:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3143:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:376:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"generic":"F"},"items":["0:413:3639"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:1107:508":{"id":"0:1107:508","crate_id":0,"name":"clone","span":{"filename":"src/regexset/string.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:601":{"id":"0:601","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2245,0],"end":[2245,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:200:3618":{"id":"0:200:3618","crate_id":0,"name":"replace_all","span":{"filename":"src/regex/bytes.rs","begin":[855,4],"end":[861,5]},"visibility":"public","docs":"Replaces all non-overlapping matches in the haystack with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.\n\nIf no match is found, then the haystack is returned unchanged. In that\ncase, this implementation will likely return a `Cow::Borrowed` value\nsuch that no allocation is performed.\n\nWhen a `Cow::Borrowed` is returned, the value returned is guaranteed\nto be equivalent to the `haystack` given.\n\nThe documentation for [`Regex::replace`] goes into more detail about\nwhat kinds of replacement strings are supported.\n\n# Time complexity\n\nSince iterators over all matches requires running potentially many\nsearches on the haystack, and since each search has worst case\n`O(m * n)` time complexity, the overall worst case time complexity for\nthis routine is `O(m * n^2)`.\n\n# Fallibility\n\nIf you need to write a replacement routine where any individual\nreplacement might \"fail,\" doing so with this API isn't really feasible\nbecause there's no way to stop the search process if a replacement\nfails. Instead, if you need this functionality, you should consider\nimplementing your own replacement routine:\n\n```\nuse regex::bytes::{Captures, Regex};\n\nfn replace_all<E>(\n    re: &Regex,\n    haystack: &[u8],\n    replacement: impl Fn(&Captures) -> Result<Vec<u8>, E>,\n) -> Result<Vec<u8>, E> {\n    let mut new = Vec::with_capacity(haystack.len());\n    let mut last_match = 0;\n    for caps in re.captures_iter(haystack) {\n        let m = caps.get(0).unwrap();\n        new.extend_from_slice(&haystack[last_match..m.start()]);\n        new.extend_from_slice(&replacement(&caps)?);\n        last_match = m.end();\n    }\n    new.extend_from_slice(&haystack[last_match..]);\n    Ok(new)\n}\n\n// Let's replace each word with the number of bytes in that word.\n// But if we see a word that is \"too long,\" we'll give up.\nlet re = Regex::new(r\"\\w+\").unwrap();\nlet replacement = |caps: &Captures| -> Result<Vec<u8>, &'static str> {\n    if caps[0].len() >= 5 {\n        return Err(\"word too long\");\n    }\n    Ok(caps[0].len().to_string().into_bytes())\n};\nassert_eq!(\n    Ok(b\"2 3 3 3?\".to_vec()),\n    replace_all(&re, b\"hi how are you?\", &replacement),\n);\nassert!(replace_all(&re, b\"hi there\", &replacement).is_err());\n```\n\n# Example\n\nThis example shows how to flip the order of whitespace (excluding line\nterminators) delimited fields, and normalizes the whitespace that\ndelimits the fields:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"(?m)^(\\S+)[\\s--\\r\\n]+(\\S+)$\").unwrap();\nlet hay = b\"\nGreetings  1973\nWild\\t1973\nBornToRun\\t\\t\\t\\t1975\nDarkness                    1978\nTheRiver 1980\n\";\nlet new = re.replace_all(hay, b\"$2 $1\");\nassert_eq!(new, &b\"\n1973 Greetings\n1973 Wild\n1975 BornToRun\n1978 Darkness\n1980 TheRiver\n\"[..]);\n```","links":{"`Regex::replace`":"0:197:3559"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["rep",{"generic":"R"}]],"output":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Replacer","id":"0:376:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2863-0:890:3317":{"id":"b:1:2863-0:890:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3179-0:848:150":{"id":"b:1:3179-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:233:733":{"id":"0:233:733","crate_id":0,"name":"end","span":{"filename":"src/regex/bytes.rs","begin":[1515,4],"end":[1517,5]},"visibility":"public","docs":"Returns the byte offset of the end of the match in the haystack. The\nend of the match corresponds to the byte immediately following the last\nbyte in the match. This means that `&slice[start..end]` works as one\nwould expect.\n\nIt is guaranteed that `Match::start() <= Match::end()`.\n\nUnlike the top-level `Match` type, the start offset may appear anywhere\nin the haystack. This includes between the code units of a UTF-8\nencoded Unicode scalar value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:510:3865":{"id":"0:510:3865","crate_id":0,"name":"range","span":{"filename":"src/regex/string.rs","begin":[1552,4],"end":[1554,5]},"visibility":"public","docs":"Returns the range over the starting and ending byte offsets of the\nmatch in the haystack.\n\nIt is always correct to slice the original haystack searched with this\nrange. That is, because the offsets are guaranteed to fall on valid\nUTF-8 boundaries, the range returned is always valid.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"core::ops::Range","id":"1:43364:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36000:251-0:1108:4659":{"id":"a:1:36000:251-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:663:3639":{"id":"0:663:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/string.rs","begin":[2500,4],"end":[2502,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3190-0:890:3317":{"id":"b:1:3190-0:890:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:667:3639":{"id":"0:667:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/string.rs","begin":[2510,4],"end":[2512,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:1066:4239":{"id":"a:1:3408:263-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:110:2708":{"id":"0:110:2708","crate_id":0,"name":"dfa_size_limit","span":{"filename":"src/builders.rs","begin":[1912,8],"end":[1915,9]},"visibility":"public","docs":"Set the approximate capacity, in bytes, of the cache of transitions\nused by the lazy DFA.\n\nWhile the lazy DFA isn't always used, in tends to be the most\ncommonly use regex engine in default configurations. It tends to\nadopt the performance profile of a fully build DFA, but without the\ndownside of taking worst case exponential time to build.\n\nThe downside is that it needs to keep a cache of transitions and\nstates that are built while running a search, and this cache\ncan fill up. When it fills up, the cache will reset itself. Any\npreviously generated states and transitions will then need to be\nre-generated. If this happens too many times, then this library\nwill bail out of using the lazy DFA and switch to a different regex\nengine.\n\nIf your regex provokes this particular downside of the lazy DFA,\nthen it may be beneficial to increase its cache capacity. This will\npotentially reduce the frequency of cache resetting (ideally to\n`0`). While it won't fix all potential performance problems with\nthe lazy DFA, increasing the cache capacity does fix some.\n\nThere is no easy way to determine, a priori, whether increasing\nthis cache capacity will help. In general, the larger your regex,\nthe more cache it's likely to use. But that isn't an ironclad rule.\nFor example, a regex like `[01]*1[01]{N}` would normally produce a\nfully build DFA that is exponential in size with respect to `N`.\nThe lazy DFA will prevent exponential space blow-up, but it cache\nis likely to fill up, even when it's large and even for smallish\nvalues of `N`.\n\nIf you aren't sure whether this helps or not, it is sensible to\nset this to some arbitrarily large number in testing, such as\n`usize::MAX`. Namely, this represents the amount of capacity that\n*may* be used. It's probably not a good idea to use `usize::MAX` in\nproduction though, since it implies there are no controls on heap\nmemory used by this library during a search. In effect, set it to\nwhatever you're willing to allocate for a single regex search.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["bytes",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36000:251-0:926:3760":{"id":"a:1:36000:251-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36000:251-0:1093:4742":{"id":"a:1:36000:251-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:1100":{"id":"0:1100","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[683,16],"end":[683,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["0:1102:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:716:60":{"id":"0:716:60","crate_id":0,"name":"default","span":{"filename":"src/regexset/bytes.rs","begin":[454,4],"end":[456,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:312":{"id":"0:312","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2169,0],"end":[2188,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:315:185","0:316:1264","0:318:613"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:45870:4917-0:1088:4744":{"id":"a:1:45870:4917-0:1088:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:77:2687":{"id":"0:77:2687","crate_id":0,"name":"build","span":{"filename":"src/builders.rs","begin":[811,8],"end":[813,9]},"visibility":"public","docs":"Compiles the patterns given to `RegexSetBuilder::new` with the\nconfiguration set on this builder.\n\nIf the patterns aren't valid regexes or if a configured size limit\nwas exceeded, then an error is returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:648:3561":{"id":"0:648:3561","crate_id":0,"name":"Replacer","span":{"filename":"src/regex/string.rs","begin":[2431,0],"end":[2477,1]},"visibility":"public","docs":"A trait for types that can be used to replace matches in a haystack.\n\nIn general, users of this crate shouldn't need to implement this trait,\nsince implementations are already provided for `&str` along with other\nvariants of string types, as well as `FnMut(&Captures) -> String` (or any\n`FnMut(&Captures) -> T` where `T: AsRef<str>`). Those cover most use cases,\nbut callers can implement this trait directly if necessary.\n\n# Example\n\nThis example shows a basic implementation of  the `Replacer` trait. This\ncan be done much more simply using the replacement string interpolation\nsupport (e.g., `$first $last`), but this approach avoids needing to parse\nthe replacement string at all.\n\n```\nuse regex::{Captures, Regex, Replacer};\n\nstruct NameSwapper;\n\nimpl Replacer for NameSwapper {\n    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut String) {\n        dst.push_str(&caps[\"first\"]);\n        dst.push_str(\" \");\n        dst.push_str(&caps[\"last\"]);\n    }\n}\n\nlet re = Regex::new(r\"(?<last>[^,\\s]+),\\s+(?<first>\\S+)\").unwrap();\nlet result = re.replace(\"Springsteen, Bruce\", NameSwapper);\nassert_eq!(result, \"Bruce Springsteen\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:649:3639","0:650:3627","0:652:4225"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:654","0:658","0:662","0:665","0:669","0:673","0:677","0:682"]}}},"0:325:185":{"id":"0:325:185","crate_id":0,"name":"Item","span":{"filename":"src/regex/bytes.rs","begin":[2214,4],"end":[2214,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}}},"0:899:3405":{"id":"0:899:3405","crate_id":0,"name":"CaptureMatches","span":{"filename":"src/regex/bytes.rs","begin":[2208,0],"end":[2211,1]},"visibility":"public","docs":"An iterator over all non-overlapping capture matches in a haystack.\n\nThis iterator yields [`Captures`] values. The iterator stops when no more\nmatches can be found.\n\n`'r` is the lifetime of the compiled regular expression and `'h` is the\nlifetime of the matched string.\n\nThis iterator is created by [`Regex::captures_iter`].\n\n# Time complexity\n\nNote that since an iterator runs potentially many searches on the haystack\nand since each search has worst case `O(m * n)` time complexity, the\noverall worst case time complexity for iteration is `O(m * n^2)`.","links":{"`Regex::captures_iter`":"0:188:3404","`Captures`":"0:249:3373"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:899:3405","a:1:3408:263-0:899:3405","a:1:3443:5223-0:899:3405","a:1:36058:4992-0:899:3405","a:1:45870:4917-0:899:3405","a:1:45871:4916-0:899:3405","b:1:2860-0:899:3405","b:1:2863-0:899:3405","b:1:3175-0:899:3405","b:1:3179-0:899:3405","b:1:3185-0:899:3405","b:1:3190-0:899:3405","b:1:4055-0:899:3405","b:1:8585-0:899:3405","0:904","0:322","0:329"]}}},"a:1:3408:263-0:865:3298":{"id":"a:1:3408:263-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:225:3759":{"id":"0:225:3759","crate_id":0,"name":"capture_names","span":{"filename":"src/regex/bytes.rs","begin":[1326,4],"end":[1328,5]},"visibility":"public","docs":"Returns an iterator over the capture names in this regex.\n\nThe iterator returned yields elements of type `Option<&str>`. That is,\nthe iterator yields values for all capture groups, even ones that are\nunnamed. The order of the groups corresponds to the order of the group's\ncorresponding opening parenthesis.\n\nThe first element of the iterator always yields the group corresponding\nto the overall match, and this group is always unnamed. Therefore, the\niterator always yields at least one group.\n\n# Example\n\nThis shows basic usage with a mix of named and unnamed capture groups:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();\nlet mut names = re.capture_names();\nassert_eq!(names.next(), Some(None));\nassert_eq!(names.next(), Some(Some(\"a\")));\nassert_eq!(names.next(), Some(Some(\"b\")));\nassert_eq!(names.next(), Some(None));\n// the '(?:.)' group is non-capturing and so doesn't appear here!\nassert_eq!(names.next(), Some(Some(\"c\")));\nassert_eq!(names.next(), None);\n```\n\nThe iterator always yields at least one element, even for regexes with\nno capture groups and even for regexes that can never match:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"\").unwrap();\nlet mut names = re.capture_names();\nassert_eq!(names.next(), Some(None));\nassert_eq!(names.next(), None);\n\nlet re = Regex::new(r\"[a&&b]\").unwrap();\nlet mut names = re.capture_names();\nassert_eq!(names.next(), Some(None));\nassert_eq!(names.next(), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3179-0:522:3373":{"id":"b:1:3179-0:522:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:1103:2691":{"id":"a:1:45870:4917-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36058:4992-0:991:3722":{"id":"a:1:36058:4992-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2863-0:991:3722":{"id":"b:1:2863-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:997:847":{"id":"0:997:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/string.rs","begin":[2071,16],"end":[2071,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:4055-0:1076:2691":{"id":"b:1:4055-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3179-0:1108:4659":{"id":"b:1:3179-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:836:2715":{"id":"a:1:45870:4917-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:82:2700":{"id":"0:82:2700","crate_id":0,"name":"crlf","span":{"filename":"src/builders.rs","begin":[1027,8],"end":[1030,9]},"visibility":"public","docs":"This configures CRLF mode for all of the patterns.\n\nWhen CRLF mode is enabled, both `\\r` (\"carriage return\" or CR for\nshort) and `\\n` (\"line feed\" or LF for short) are treated as line\nterminators. This results in the following:\n\n* Unless dot-matches-new-line mode is enabled, `.` will now match\nany character except for `\\n` and `\\r`.\n* When multi-line mode is enabled, `^` will match immediately\nfollowing a `\\n` or a `\\r`. Similarly, `$` will match immediately\npreceding a `\\n` or a `\\r`. Neither `^` nor `$` will ever match\nbetween `\\r` and `\\n`.\n\nThis setting can also be configured using the inline flag `R` in\nthe pattern.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\"^foo$\"])\n    .multi_line(true)\n    .crlf(true)\n    .build()\n    .unwrap();\nlet hay = \"\\r\\nfoo\\r\\n\";\n// If CRLF mode weren't enabled here, then '$' wouldn't match\n// immediately after 'foo', and thus no match would be found.\nassert!(re.is_match(hay));\n```\n\nThis example demonstrates that `^` will never match at a position\nbetween `\\r` and `\\n`. (`$` will similarly not match between a `\\r`\nand a `\\n`.)\n\n```\nuse regex::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\"^\\n\"])\n    .multi_line(true)\n    .crlf(true)\n    .build()\n    .unwrap();\nassert!(!re.is_match(\"\\r\\n\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:604":{"id":"0:604","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2265,0],"end":[2272,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:607:185","0:608:1264"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"4:818:3636":{"id":"4:818:3636","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"0:864:508":{"id":"0:864:508","crate_id":0,"name":"clone","span":{"filename":"src/regex/bytes.rs","begin":[98,9],"end":[98,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3179-0:1057:4226":{"id":"b:1:3179-0:1057:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1112:508":{"id":"0:1112:508","crate_id":0,"name":"clone","span":{"filename":"src/regexset/string.rs","begin":[458,9],"end":[458,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3190-0:949:4226":{"id":"b:1:3190-0:949:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2918-0:1103:2691":{"id":"b:1:2918-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:645":{"id":"0:645","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2397,0],"end":[2397,71]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:446":{"id":"0:446","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[129,0],"end":[136,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:447:150","0:448:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:45870:4917-0:522:3373":{"id":"a:1:45870:4917-0:522:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:369:613":{"id":"0:369:613","crate_id":0,"name":"count","span":{"filename":"src/regex/bytes.rs","begin":[2382,4],"end":[2384,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2918-0:836:2715":{"id":"b:1:2918-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:631":{"id":"0:631","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2350,0],"end":[2350,58]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3185-0:1044:4044":{"id":"b:1:3185-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:468:3490":{"id":"0:468:3490","crate_id":0,"name":"splitn","span":{"filename":"src/regex/string.rs","begin":[628,4],"end":[634,5]},"visibility":"public","docs":"Returns an iterator of at most `limit` substrings of the haystack\ngiven, delimited by a match of the regex. (A `limit` of `0` will return\nno substrings.) Namely, each element of the iterator corresponds to a\npart of the haystack that *isn't* matched by the regular expression.\nThe remainder of the haystack that is not split will be the last\nelement in the iterator.\n\n# Time complexity\n\nSince iterators over all matches requires running potentially many\nsearches on the haystack, and since each search has worst case\n`O(m * n)` time complexity, the overall worst case time complexity for\nthis routine is `O(m * n^2)`.\n\nAlthough note that the worst case time here has an upper bound given\nby the `limit` parameter.\n\n# Example\n\nGet the first two words in some haystack:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"\\W+\").unwrap();\nlet hay = \"Hey! How are you?\";\nlet fields: Vec<&str> = re.splitn(hay, 3).collect();\nassert_eq!(fields, vec![\"Hey\", \"How\", \"are you?\"]);\n```\n\n# Examples: more cases\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\" \").unwrap();\nlet hay = \"Mary had a little lamb\";\nlet got: Vec<&str> = re.splitn(hay, 3).collect();\nassert_eq!(got, vec![\"Mary\", \"had\", \"a little lamb\"]);\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = \"\";\nlet got: Vec<&str> = re.splitn(hay, 3).collect();\nassert_eq!(got, vec![\"\"]);\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = \"lionXXtigerXleopard\";\nlet got: Vec<&str> = re.splitn(hay, 3).collect();\nassert_eq!(got, vec![\"lion\", \"\", \"tigerXleopard\"]);\n\nlet re = Regex::new(r\"::\").unwrap();\nlet hay = \"lion::tiger::leopard\";\nlet got: Vec<&str> = re.splitn(hay, 2).collect();\nassert_eq!(got, vec![\"lion\", \"tiger::leopard\"]);\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = \"abcXdef\";\nlet got: Vec<&str> = re.splitn(hay, 1).collect();\nassert_eq!(got, vec![\"abcXdef\"]);\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = \"abcdef\";\nlet got: Vec<&str> = re.splitn(hay, 2).collect();\nassert_eq!(got, vec![\"abcdef\"]);\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = \"abcXdef\";\nlet got: Vec<&str> = re.splitn(hay, 0).collect();\nassert!(got.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'r","is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}],["limit",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:443":{"id":"0:443","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[120,0],"end":[127,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"1:13779:3247","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:444:149","0:445:3249"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:45871:4916-0:973:3298":{"id":"a:1:45871:4916-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36000:251-0:842:3015":{"id":"a:1:36000:251-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:302:1000":{"id":"0:302:1000","crate_id":0,"name":"index","span":{"filename":"src/regex/bytes.rs","begin":[2018,4],"end":[2022,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":"'n","is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:642":{"id":"0:642","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2395,0],"end":[2395,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8711:4166","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:649:3639":{"id":"0:649:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/string.rs","begin":[2438,4],"end":[2438,72]},"visibility":"default","docs":"Appends possibly empty data to `dst` to replace the current match.\n\nThe current match is represented by `caps`, which is guaranteed to\nhave a match at capture group `0`.\n\nFor example, a no-op replacement would be `dst.push_str(&caps[0])`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:377:3639":{"id":"0:377:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/bytes.rs","begin":[2431,4],"end":[2431,73]},"visibility":"default","docs":"Appends possibly empty data to `dst` to replace the current match.\n\nThe current match is represented by `caps`, which is guaranteed to have\na match at capture group `0`.\n\nFor example, a no-op replacement would be\n`dst.extend_from_slice(&caps[0])`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Vec","id":"4:7390:282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"a:1:45871:4916-0:890:3317":{"id":"a:1:45871:4916-0:890:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:405:3627":{"id":"0:405:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/bytes.rs","begin":[2527,4],"end":[2529,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:448:1923":{"id":"0:448:1923","crate_id":0,"name":"try_from","span":{"filename":"src/regex/string.rs","begin":[133,4],"end":[135,5]},"visibility":"default","docs":"Attempts to parse a string into a regular expression","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:860:2681":{"id":"a:1:3408:263-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:636:185":{"id":"0:636:185","crate_id":0,"name":"Item","span":{"filename":"src/regex/string.rs","begin":[2375,4],"end":[2375,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}}}}},"0:859:739":{"id":"0:859:739","crate_id":0,"name":"eq","span":{"filename":"src/error.rs","begin":[7,16],"end":[7,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:45870:4917-0:1007:3405":{"id":"a:1:45870:4917-0:1007:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:245:878":{"id":"0:245:878","crate_id":0,"name":"from","span":{"filename":"src/regex/bytes.rs","begin":[1570,4],"end":[1572,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["m",{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}]],"output":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:890:3317":{"id":"a:1:36058:4992-0:890:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:232:1813":{"id":"0:232:1813","crate_id":0,"name":"start","span":{"filename":"src/regex/bytes.rs","begin":[1500,4],"end":[1502,5]},"visibility":"public","docs":"Returns the byte offset of the start of the match in the haystack. The\nstart of the match corresponds to the position where the match begins\nand includes the first byte in the match.\n\nIt is guaranteed that `Match::start() <= Match::end()`.\n\nUnlike the top-level `Match` type, the start offset may appear anywhere\nin the haystack. This includes between the code units of a UTF-8\nencoded Unicode scalar value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:86:2705":{"id":"0:86:2705","crate_id":0,"name":"octal","span":{"filename":"src/builders.rs","begin":[1219,8],"end":[1222,9]},"visibility":"public","docs":"This configures octal mode for all of the patterns.\n\nOctal syntax is a little-known way of uttering Unicode codepoints\nin a pattern. For example, `a`, `\\x61`, `\\u0061` and `\\141` are all\nequivalent patterns, where the last example shows octal syntax.\n\nWhile supporting octal syntax isn't in and of itself a problem,\nit does make good error messages harder. That is, in PCRE based\nregex engines, syntax like `\\1` invokes a backreference, which is\nexplicitly unsupported this library. However, many users expect\nbackreferences to be supported. Therefore, when octal support\nis disabled, the error message will explicitly mention that\nbackreferences aren't supported.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::RegexSetBuilder;\n\n// Normally this pattern would not compile, with an error message\n// about backreferences not being supported. But with octal mode\n// enabled, octal escape sequences work.\nlet re = RegexSetBuilder::new([r\"\\141\"])\n    .octal(true)\n    .build()\n    .unwrap();\nassert!(re.is_match(\"a\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:452":{"id":"0:452","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[148,0],"end":[962,1]},"visibility":"default","docs":"Core regular expression methods.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:453:1249","0:454:3282","0:455:3296","0:457:3315","0:460:3180","0:462:3404","0:465:3462","0:468:3490","0:471:3559","0:474:3618","0:477:3563"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:1081:4659":{"id":"0:1081:4659","crate_id":0,"name":"SetMatches","span":{"filename":"src/regexset/bytes.rs","begin":[463,0],"end":[463,34]},"visibility":"public","docs":"A set of matches returned by a regex set.\n\nValues of this type are constructed by [`RegexSet::matches`].","links":{"`RegexSet::matches`":"0:708:4658"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:717","a:1:36000:251-0:1081:4659","a:1:3408:263-0:1081:4659","a:1:3443:5223-0:1081:4659","a:1:36058:4992-0:1081:4659","a:1:45870:4917-0:1081:4659","a:1:45871:4916-0:1081:4659","b:1:2860-0:1081:4659","b:1:2863-0:1081:4659","b:1:2918-0:1081:4659","b:1:3175-0:1081:4659","b:1:3179-0:1081:4659","b:1:3185-0:1081:4659","b:1:3190-0:1081:4659","b:1:4055-0:1081:4659","b:4:816-0:1081:4659","0:1084","0:1086","0:722","0:726"]}}},"0:68:2704":{"id":"0:68:2704","crate_id":0,"name":"ignore_whitespace","span":{"filename":"src/builders.rs","begin":[616,8],"end":[619,9]},"visibility":"public","docs":"This configures verbose mode for the entire pattern.\n\nWhen enabled, whitespace will treated as insignifcant in the\npattern and `#` can be used to start a comment until the next new\nline.\n\nNormally, in most places in a pattern, whitespace is treated\nliterally. For example ` +` will match one or more ASCII whitespace\ncharacters.\n\nWhen verbose mode is enabled, `\\#` can be used to match a literal\n`#` and `\\ ` can be used to match a literal ASCII whitespace\ncharacter.\n\nVerbose mode is useful for permitting regexes to be formatted and\nbroken up more nicely. This may make them more easily readable.\n\nThis setting can also be configured using the inline flag `x` in\nthe pattern.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::RegexBuilder;\n\nlet pat = r\"\n    \\b\n    (?<first>\\p{Uppercase}\\w*)  # always start with uppercase letter\n    [\\s--\\n]+                   # whitespace should separate names\n    (?: # middle name can be an initial!\n        (?:(?<initial>\\p{Uppercase})\\.|(?<middle>\\p{Uppercase}\\w*))\n        [\\s--\\n]+\n    )?\n    (?<last>\\p{Uppercase}\\w*)\n    \\b\n\";\nlet re = RegexBuilder::new(pat)\n    .ignore_whitespace(true)\n    .build()\n    .unwrap();\n\nlet caps = re.captures(\"Harry Potter\").unwrap();\nassert_eq!(\"Harry\", &caps[\"first\"]);\nassert_eq!(\"Potter\", &caps[\"last\"]);\n\nlet caps = re.captures(\"Harry J. Potter\").unwrap();\nassert_eq!(\"Harry\", &caps[\"first\"]);\n// Since a middle name/initial isn't required for an overall match,\n// we can't assume that 'initial' or 'middle' will be populated!\nassert_eq!(Some(\"J\"), caps.name(\"initial\").map(|m| m.as_str()));\nassert_eq!(None, caps.name(\"middle\").map(|m| m.as_str()));\nassert_eq!(\"Potter\", &caps[\"last\"]);\n\nlet caps = re.captures(\"Harry James Potter\").unwrap();\nassert_eq!(\"Harry\", &caps[\"first\"]);\n// Since a middle name/initial isn't required for an overall match,\n// we can't assume that 'initial' or 'middle' will be populated!\nassert_eq!(None, caps.name(\"initial\").map(|m| m.as_str()));\nassert_eq!(Some(\"James\"), caps.name(\"middle\").map(|m| m.as_str()));\nassert_eq!(\"Potter\", &caps[\"last\"]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:441":{"id":"0:441","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[113,0],"end":[118,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:442:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:357":{"id":"0:357","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2340,0],"end":[2340,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8711:4166","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:4:816-0:1093:4742":{"id":"b:4:816-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4055-0:949:4226":{"id":"b:1:4055-0:949:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3185-0:1081:4659":{"id":"b:1:3185-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:234:3861":{"id":"0:234:3861","crate_id":0,"name":"is_empty","span":{"filename":"src/regex/bytes.rs","begin":[1526,4],"end":[1528,5]},"visibility":"public","docs":"Returns true if and only if this match has a length of zero.\n\nNote that an empty match can only occur when the regex itself can\nmatch the empty string. Here are some examples of regexes that can\nall match the empty string: `^`, `^$`, `\\b`, `a?`, `a*`, `a{0}`,\n`(foo|\\d+|quux)?`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:104:2700":{"id":"0:104:2700","crate_id":0,"name":"crlf","span":{"filename":"src/builders.rs","begin":[1620,8],"end":[1623,9]},"visibility":"public","docs":"This configures CRLF mode for the entire pattern.\n\nWhen CRLF mode is enabled, both `\\r` (\"carriage return\" or CR for\nshort) and `\\n` (\"line feed\" or LF for short) are treated as line\nterminators. This results in the following:\n\n* Unless dot-matches-new-line mode is enabled, `.` will now match\nany character except for `\\n` and `\\r`.\n* When multi-line mode is enabled, `^` will match immediately\nfollowing a `\\n` or a `\\r`. Similarly, `$` will match immediately\npreceding a `\\n` or a `\\r`. Neither `^` nor `$` will ever match\nbetween `\\r` and `\\n`.\n\nThis setting can also be configured using the inline flag `R` in\nthe pattern.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::bytes::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"^foo$\")\n    .multi_line(true)\n    .crlf(true)\n    .build()\n    .unwrap();\nlet hay = b\"\\r\\nfoo\\r\\n\";\n// If CRLF mode weren't enabled here, then '$' wouldn't match\n// immediately after 'foo', and thus no match would be found.\nassert_eq!(Some(&b\"foo\"[..]), re.find(hay).map(|m| m.as_bytes()));\n```\n\nThis example demonstrates that `^` will never match at a position\nbetween `\\r` and `\\n`. (`$` will similarly not match between a `\\r`\nand a `\\n`.)\n\n```\nuse regex::bytes::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"^\")\n    .multi_line(true)\n    .crlf(true)\n    .build()\n    .unwrap();\nlet hay = b\"\\r\\n\\r\\n\";\nlet ranges: Vec<_> = re.find_iter(hay).map(|m| m.range()).collect();\nassert_eq!(ranges, vec![0..0, 2..2, 4..4]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2860-0:1081:4659":{"id":"b:1:2860-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:310:1062":{"id":"0:310:1062","crate_id":0,"name":"len","span":{"filename":"src/regex/bytes.rs","begin":[2129,4],"end":[2134,5]},"visibility":"public","docs":"Returns the total number of capture groups (even if they didn't match).\nThat is, the length returned is unaffected by the result of a search.\n\nThis is always at least `1` since every regex has at least `1`\ncapturing group that corresponds to the entire match.\n\n# Example\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"(?<first>\\w+)\\s+(?<last>\\w+)\").unwrap();\nlet mut locs = re.capture_locations();\nassert_eq!(3, locs.len());\nre.captures_read(&mut locs, b\"Bruce Springsteen\").unwrap();\nassert_eq!(3, locs.len());\n```\n\nNotice that the length is always at least `1`, regardless of the regex:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"\").unwrap();\nlet locs = re.capture_locations();\nassert_eq!(1, locs.len());\n\n// [a&&b] is a regex that never matches anything.\nlet re = Regex::new(r\"[a&&b]\").unwrap();\nlet locs = re.capture_locations();\nassert_eq!(1, locs.len());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:45871:4916-0:883:3722":{"id":"a:1:45871:4916-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:3408:263-0:883:3722":{"id":"a:1:3408:263-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:932:508":{"id":"0:932:508","crate_id":0,"name":"clone","span":{"filename":"src/regex/bytes.rs","begin":[2318,9],"end":[2318,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3179-0:908:3463":{"id":"b:1:3179-0:908:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:207:3662":{"id":"0:207:3662","crate_id":0,"name":"shortest_match","span":{"filename":"src/regex/bytes.rs","begin":[1011,4],"end":[1013,5]},"visibility":"public","docs":"Returns the end byte offset of the first match in the haystack given.\n\nThis method may have the same performance characteristics as\n`is_match`. Behaviorlly, it doesn't just report whether it match\noccurs, but also the end offset for a match. In particular, the offset\nreturned *may be shorter* than the proper end of the leftmost-first\nmatch that you would find via [`Regex::find`].\n\nNote that it is not guaranteed that this routine finds the shortest or\n\"earliest\" possible match. Instead, the main idea of this API is that\nit returns the offset at the point at which the internal regex engine\nhas determined that a match has occurred. This may vary depending on\nwhich internal regex engine is used, and thus, the offset itself may\nchange based on internal heuristics.\n\n# Example\n\nTypically, `a+` would match the entire first sequence of `a` in some\nhaystack, but `shortest_match` *may* give up as soon as it sees the\nfirst `a`.\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"a+\").unwrap();\nlet offset = re.shortest_match(b\"aaaaa\").unwrap();\nassert_eq!(offset, 1);\n```","links":{"`Regex::find`":"0:181:3296"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:908:3463":{"id":"a:1:36058:4992-0:908:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:917:3491":{"id":"0:917:3491","crate_id":0,"name":"SplitN","span":{"filename":"src/regex/bytes.rs","begin":[2287,0],"end":[2290,1]},"visibility":"public","docs":"An iterator over at most `N` substrings delimited by a regex match.\n\nThe last substring yielded by this iterator will be whatever remains after\n`N-1` splits.\n\n`'r` is the lifetime of the compiled regular expression and `'h` is the\nlifetime of the byte string being split.\n\nThis iterator is created by [`Regex::splitn`].\n\n# Time complexity\n\nNote that since an iterator runs potentially many searches on the haystack\nand since each search has worst case `O(m * n)` time complexity, the\noverall worst case time complexity for iteration is `O(m * n^2)`.\n\nAlthough note that the worst case time here has an upper bound given\nby the `limit` parameter to [`Regex::splitn`].","links":{"`Regex::splitn`":"0:194:3490"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:917:3491","a:1:3408:263-0:917:3491","a:1:3443:5223-0:917:3491","a:1:36058:4992-0:917:3491","a:1:45870:4917-0:917:3491","a:1:45871:4916-0:917:3491","b:1:2860-0:917:3491","b:1:2863-0:917:3491","b:1:3175-0:917:3491","b:1:3179-0:917:3491","b:1:3185-0:917:3491","b:1:3190-0:917:3491","b:1:4055-0:917:3491","b:1:8585-0:917:3491","0:922","0:341","0:348"]}}},"b:1:2860-0:824:2715":{"id":"b:1:2860-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2863-0:973:3298":{"id":"b:1:2863-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:677":{"id":"0:677","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2548,0],"end":[2556,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Replacer","id":"0:648:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:648:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["0:680:3639","0:681:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:260:3984":{"id":"0:260:3984","crate_id":0,"name":"extract","span":{"filename":"src/regex/bytes.rs","begin":[1784,4],"end":[1798,5]},"visibility":"public","docs":"This is a convenience routine for extracting the substrings\ncorresponding to matching capture groups.\n\nThis returns a tuple where the first element corresponds to the full\nsubstring of the haystack that matched the regex. The second element is\nan array of substrings, with each corresponding to the substring that\nmatched for a particular capture group.\n\n# Panics\n\nThis panics if the number of possible matching groups in this\n`Captures` value is not fixed to `N` in all circumstances.\nMore precisely, this routine only works when `N` is equivalent to\n[`Regex::static_captures_len`].\n\nStated more plainly, if the number of matching capture groups in a\nregex can vary from match to match, then this function always panics.\n\nFor example, `(a)(b)|(c)` could produce two matching capture groups\nor one matching capture group for any given match. Therefore, one\ncannot use `extract` with such a pattern.\n\nBut a pattern like `(a)(b)|(c)(d)` can be used with `extract` because\nthe number of capture groups in every match is always equivalent,\neven if the capture _indices_ in each match are not.\n\n# Example\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();\nlet hay = b\"On 2010-03-14, I became a Tenneessee lamb.\";\nlet Some((full, [year, month, day])) =\n    re.captures(hay).map(|caps| caps.extract()) else { return };\nassert_eq!(b\"2010-03-14\", full);\nassert_eq!(b\"2010\", year);\nassert_eq!(b\"03\", month);\nassert_eq!(b\"14\", day);\n```\n\n# Example: iteration\n\nThis example shows how to use this method when iterating over all\n`Captures` matches in a haystack.\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();\nlet hay = b\"1973-01-05, 1975-08-25 and 1980-10-18\";\n\nlet mut dates: Vec<(&[u8], &[u8], &[u8])> = vec![];\nfor (_, [y, m, d]) in re.captures_iter(hay).map(|c| c.extract()) {\n    dates.push((y, m, d));\n}\nassert_eq!(dates, vec![\n    (&b\"1973\"[..], &b\"01\"[..], &b\"05\"[..]),\n    (&b\"1975\"[..], &b\"08\"[..], &b\"25\"[..]),\n    (&b\"1980\"[..], &b\"10\"[..], &b\"18\"[..]),\n]);\n```\n\n# Example: parsing different formats\n\nThis API is particularly useful when you need to extract a particular\nvalue that might occur in a different format. Consider, for example,\nan identifier that might be in double quotes or single quotes:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r#\"id:(?:\"([^\"]+)\"|'([^']+)')\"#).unwrap();\nlet hay = br#\"The first is id:\"foo\" and the second is id:'bar'.\"#;\nlet mut ids = vec![];\nfor (_, [id]) in re.captures_iter(hay).map(|c| c.extract()) {\n    ids.push(id);\n}\nassert_eq!(ids, vec![b\"foo\", b\"bar\"]);\n```","links":{"`Regex::static_captures_len`":"0:227:3701"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}},{"array":{"type":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}},"len":"N"}}]},"is_c_variadic":false},"generics":{"params":[{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2863-0:1103:2691":{"id":"b:1:2863-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:128:2709":{"id":"0:128:2709","crate_id":0,"name":"nest_limit","span":{"filename":"src/builders.rs","begin":[2534,8],"end":[2537,9]},"visibility":"public","docs":"Set the nesting limit for this parser.\n\nThe nesting limit controls how deep the abstract syntax tree is\nallowed to be. If the AST exceeds the given limit (e.g., with too\nmany nested groups), then an error is returned by the parser.\n\nThe purpose of this limit is to act as a heuristic to prevent stack\noverflow for consumers that do structural induction on an AST using\nexplicit recursion. While this crate never does this (instead using\nconstant stack space and moving the call stack to the heap), other\ncrates may.\n\nThis limit is not checked until the entire AST is parsed.\nTherefore, if callers want to put a limit on the amount of heap\nspace used, then they should impose a limit on the length, in\nbytes, of the concrete pattern string. In particular, this is\nviable since this parser implementation will limit itself to heap\nspace proportional to the length of the pattern string. See also\nthe [untrusted inputs](crate#untrusted-input) section in the\ntop-level crate documentation for more information about this.\n\nNote that a nest limit of `0` will return a nest limit error for\nmost patterns but not all. For example, a nest limit of `0` permits\n`a` but not `ab`, since `ab` requires an explicit concatenation,\nwhich results in a nest depth of `1`. In general, a nest limit is\nnot something that manifests in an obvious way in the concrete\nsyntax, therefore, it should not be used in a granular way.\n\n# Example\n\n```\nuse regex::bytes::RegexSetBuilder;\n\nassert!(RegexSetBuilder::new([r\"a\"]).nest_limit(0).build().is_ok());\nassert!(RegexSetBuilder::new([r\"ab\"]).nest_limit(0).build().is_err());\n```","links":{"crate#untrusted-input":"0:0:2522"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["limit",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:712:1062":{"id":"0:712:1062","crate_id":0,"name":"len","span":{"filename":"src/regexset/bytes.rs","begin":[400,4],"end":[402,5]},"visibility":"public","docs":"Returns the total number of regexes in this set.\n\n# Example\n\n```\nuse regex::bytes::RegexSet;\n\nassert_eq!(0, RegexSet::empty().len());\nassert_eq!(1, RegexSet::new([r\"[0-9]\"]).unwrap().len());\nassert_eq!(2, RegexSet::new([r\"[0-9]\", r\"[a-z]\"]).unwrap().len());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2863-0:1115:4744":{"id":"b:1:2863-0:1115:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:59:1249":{"id":"0:59:1249","crate_id":0,"name":"new","span":{"filename":"src/builders.rs","begin":[223,8],"end":[225,9]},"visibility":"public","docs":"Create a new builder with a default configuration for the given\npattern.\n\nIf the pattern is invalid or exceeds the configured size limits,\nthen an error will be returned when [`RegexBuilder::build`] is\ncalled.","links":{"`RegexBuilder::build`":"0:60:2687"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["pattern",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2860-0:998:3317":{"id":"b:1:2860-0:998:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45871:4916-0:848:150":{"id":"a:1:45871:4916-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3190-0:998:3317":{"id":"b:1:3190-0:998:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:842:3015":{"id":"a:1:45870:4917-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:1034:3760":{"id":"0:1034:3760","crate_id":0,"name":"CaptureNames","span":{"filename":"src/regex/string.rs","begin":[2327,0],"end":[2327,65]},"visibility":"public","docs":"An iterator over the names of all capture groups in a regex.\n\nThis iterator yields values of type `Option<&str>` in order of the opening\ncapture group parenthesis in the regex pattern. `None` is yielded for\ngroups with no name. The first element always corresponds to the implicit\nand unnamed group for the overall match.\n\n`'r` is the lifetime of the compiled regular expression.\n\nThis iterator is created by [`Regex::capture_names`].","links":{"`Regex::capture_names`":"0:499:3759"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:1034:3760","a:1:3408:263-0:1034:3760","a:1:3443:5223-0:1034:3760","a:1:36058:4992-0:1034:3760","a:1:45870:4917-0:1034:3760","a:1:45871:4916-0:1034:3760","b:1:2860-0:1034:3760","b:1:2863-0:1034:3760","b:1:2918-0:1034:3760","b:1:3175-0:1034:3760","b:1:3179-0:1034:3760","b:1:3185-0:1034:3760","b:1:3190-0:1034:3760","b:1:4055-0:1034:3760","b:1:8585-0:1034:3760","b:4:816-0:1034:3760","0:1038","0:1041","0:623","0:629","0:631"]}}},"b:4:6133-0:860:2681":{"id":"b:4:6133-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:11020:133","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:6131:267","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:6135:1898"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:863":{"id":"0:863","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[98,9],"end":[98,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:864:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:584":{"id":"0:584","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2177,0],"end":[2196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:587:185","0:588:1264","0:590:613"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2860-0:1103:2691":{"id":"b:1:2860-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1025:3491":{"id":"0:1025:3491","crate_id":0,"name":"SplitN","span":{"filename":"src/regex/string.rs","begin":[2295,0],"end":[2298,1]},"visibility":"public","docs":"An iterator over at most `N` substrings delimited by a regex match.\n\nThe last substring yielded by this iterator will be whatever remains after\n`N-1` splits.\n\n`'r` is the lifetime of the compiled regular expression and `'h` is the\nlifetime of the byte string being split.\n\nThis iterator is created by [`Regex::splitn`].\n\n# Time complexity\n\nNote that since an iterator runs potentially many searches on the haystack\nand since each search has worst case `O(m * n)` time complexity, the\noverall worst case time complexity for iteration is `O(m * n^2)`.\n\nAlthough note that the worst case time here has an upper bound given\nby the `limit` parameter to [`Regex::splitn`].","links":{"`Regex::splitn`":"0:468:3490"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:1025:3491","a:1:3408:263-0:1025:3491","a:1:3443:5223-0:1025:3491","a:1:36058:4992-0:1025:3491","a:1:45870:4917-0:1025:3491","a:1:45871:4916-0:1025:3491","b:1:2860-0:1025:3491","b:1:2863-0:1025:3491","b:1:3175-0:1025:3491","b:1:3179-0:1025:3491","b:1:3185-0:1025:3491","b:1:3190-0:1025:3491","b:1:4055-0:1025:3491","b:1:8585-0:1025:3491","0:1030","0:613","0:620"]}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[118,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"1:13779:3247","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:170:149","0:171:3249"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:4:816-0:848:150":{"id":"b:4:816-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:1034:3760":{"id":"a:1:45870:4917-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:669":{"id":"0:669","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2519,0],"end":[2527,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:648:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"alloc::borrow::Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"constraints":[]}}}}}},"items":["0:671:3639","0:672:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:732:185":{"id":"0:732:185","crate_id":0,"name":"Item","span":{"filename":"src/regexset/bytes.rs","begin":[644,4],"end":[644,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"primitive":"usize"}}}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/builders.rs","begin":[791,4],"end":[1354,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:74:1249","0:77:2687","0:78:2126","0:79:2697","0:80:2698","0:81:2699","0:82:2700","0:83:2701","0:84:2703","0:85:2704","0:86:2705","0:87:2706","0:88:2708","0:89:2709"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:81:2699":{"id":"0:81:2699","crate_id":0,"name":"dot_matches_new_line","span":{"filename":"src/builders.rs","begin":[971,8],"end":[977,9]},"visibility":"public","docs":"This configures dot-matches-new-line mode for the entire pattern.\n\nPerhaps surprisingly, the default behavior for `.` is not to match\nany character, but rather, to match any character except for the\nline terminator (which is `\\n` by default). When this mode is\nenabled, the behavior changes such that `.` truly matches any\ncharacter.\n\nThis setting can also be configured using the inline flag `s` in\nthe pattern. For example, `(?s:.)` and `\\p{any}` are equivalent\nregexes.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\"foo.bar\"])\n    .dot_matches_new_line(true)\n    .build()\n    .unwrap();\nlet hay = \"foo\\nbar\";\nassert!(re.is_match(hay));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2860-0:1088:4744":{"id":"b:1:2860-0:1088:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1070":{"id":"0:1070","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2577,9],"end":[2577,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["0:1072:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:4055-0:830:3015":{"id":"b:1:4055-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3175-0:991:3722":{"id":"b:1:3175-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:907:847":{"id":"0:907:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/bytes.rs","begin":[2207,9],"end":[2207,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:641:613":{"id":"0:641:613","crate_id":0,"name":"count","span":{"filename":"src/regex/string.rs","begin":[2390,4],"end":[2392,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:719:4712":{"id":"0:719:4712","crate_id":0,"name":"matched","span":{"filename":"src/regexset/bytes.rs","begin":[510,4],"end":[512,5]},"visibility":"public","docs":"Whether the regex at the given index matched.\n\nThe index for a regex is determined by its insertion order upon the\ninitial construction of a `RegexSet`, starting at `0`.\n\n# Panics\n\nIf `index` is greater than or equal to the number of regexes in the\noriginal set that produced these matches. Equivalently, when `index`\nis greater than or equal to [`SetMatches::len`].\n\n# Example\n\n```\nuse regex::bytes::RegexSet;\n\nlet set = RegexSet::new([\n    r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n    r\"[a-z]+\\.(com|org|net)\",\n]).unwrap();\nlet matches = set.matches(b\"example.com\");\nassert!(!matches.matched(0));\nassert!(matches.matched(1));\n```","links":{"`SetMatches::len`":"0:720:1062"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36000:251-0:883:3722":{"id":"a:1:36000:251-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2492,0],"end":[2500,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:376:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}},"items":["0:393:3639","0:394:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:36000:251-0:1057:4226":{"id":"a:1:36000:251-0:1057:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36058:4992-0:1034:3760":{"id":"a:1:36058:4992-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:813":{"id":"0:813","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[702,0],"end":[706,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:814:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:36000:251-0:848:150":{"id":"a:1:36000:251-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:123:2703":{"id":"0:123:2703","crate_id":0,"name":"swap_greed","span":{"filename":"src/builders.rs","begin":[2313,8],"end":[2316,9]},"visibility":"public","docs":"This configures swap-greed mode for all of the patterns.\n\nWhen swap-greed mode is enabled, patterns like `a+` will become\nnon-greedy and patterns like `a+?` will become greedy. In other\nwords, the meanings of `a+` and `a+?` are switched.\n\nThis setting can also be configured using the inline flag `U` in\nthe pattern.\n\nNote that this is generally not useful for a `RegexSet` since a\n`RegexSet` can only report whether a pattern matches or not. Since\ngreediness never impacts whether a match is found or not (only the\noffsets of the match), it follows that whether parts of a pattern\nare greedy or not doesn't matter for a `RegexSet`.\n\nThe default for this is `false`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36000:251-0:1044:4044":{"id":"a:1:36000:251-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2860-0:1120:4742":{"id":"b:1:2860-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:865:3298":{"id":"0:865:3298","crate_id":0,"name":"Match","span":{"filename":"src/regex/bytes.rs","begin":[1483,0],"end":[1487,1]},"visibility":"public","docs":"Represents a single match of a regex in a haystack.\n\nA `Match` contains both the start and end byte offsets of the match and the\nactual substring corresponding to the range of those byte offsets. It is\nguaranteed that `start <= end`. When `start == end`, the match is empty.\n\nUnlike the top-level `Match` type, this `Match` type is produced by APIs\nthat search `&[u8]` haystacks. This means that the offsets in a `Match` can\npoint to anywhere in the haystack, including in a place that splits the\nUTF-8 encoding of a Unicode scalar value.\n\nThe lifetime parameter `'h` refers to the lifetime of the matched of the\nhaystack that this match was produced from.\n\n# Numbering\n\nThe byte offsets in a `Match` form a half-open interval. That is, the\nstart of the range is inclusive and the end of the range is exclusive.\nFor example, given a haystack `abcFOOxyz` and a match of `FOO`, its byte\noffset range starts at `3` and ends at `6`. `3` corresponds to `F` and\n`6` corresponds to `x`, which is one past the end of the match. This\ncorresponds to the same kind of slicing that Rust uses.\n\nFor more on why this was chosen over other schemes (aside from being\nconsistent with how Rust the language works), see [this discussion] and\n[Dijkstra's note on a related topic][note].\n\n[this discussion]: https://github.com/rust-lang/regex/discussions/866\n[note]: https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html\n\n# Example\n\nThis example shows the value of each of the methods on `Match` for a\nparticular search.\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"\\p{Greek}+\").unwrap();\nlet hay = \"Greek: αβγδ\".as_bytes();\nlet m = re.find(hay).unwrap();\nassert_eq!(7, m.start());\nassert_eq!(15, m.end());\nassert!(!m.is_empty());\nassert_eq!(8, m.len());\nassert_eq!(7..15, m.range());\nassert_eq!(\"αβγδ\".as_bytes(), m.as_bytes());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:230","a:1:36000:251-0:865:3298","a:1:3408:263-0:865:3298","a:1:3443:5223-0:865:3298","a:1:36058:4992-0:865:3298","a:1:45870:4917-0:865:3298","a:1:45871:4916-0:865:3298","b:1:2860-0:865:3298","b:1:2863-0:865:3298","b:1:2918-0:865:3298","b:1:3175-0:865:3298","b:1:3179-0:865:3298","b:1:3185-0:865:3298","b:1:3190-0:865:3298","b:1:4055-0:865:3298","b:4:816-0:865:3298","0:870","0:872","0:875","0:878","0:880","0:239","0:243","0:246"]}}},"0:538:1062":{"id":"0:538:1062","crate_id":0,"name":"len","span":{"filename":"src/regex/string.rs","begin":[1915,4],"end":[1917,5]},"visibility":"public","docs":"Returns the total number of capture groups. This includes both\nmatching and non-matching groups.\n\nThe length returned is always equivalent to the number of elements\nyielded by [`Captures::iter`]. Consequently, the length is always\ngreater than zero since every `Captures` value always includes the\nmatch for the entire regex.\n\n# Example\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(\\w)(\\d)?(\\w)\").unwrap();\nlet caps = re.captures(\"AZ\").unwrap();\nassert_eq!(caps.len(), 4);\n```","links":{"`Captures::iter`":"0:536:1039"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3185-0:991:3722":{"id":"b:1:3185-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3185-0:860:2681":{"id":"b:1:3185-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:626:1264":{"id":"0:626:1264","crate_id":0,"name":"next","span":{"filename":"src/regex/string.rs","begin":[2333,4],"end":[2335,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'r","is_mutable":false,"type":{"primitive":"str"}}}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:715":{"id":"0:715","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[453,0],"end":[457,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3227:127","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:716:60"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:166:847":{"id":"0:166:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/bytes.rs","begin":[106,4],"end":[108,5]},"visibility":"default","docs":"Shows the original regular expression.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:908:3463":{"id":"a:1:3408:263-0:908:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2918-0:1093:4742":{"id":"b:1:2918-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:8589:1017":{"id":"1:8589:1017","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:318:613":{"id":"0:318:613","crate_id":0,"name":"count","span":{"filename":"src/regex/bytes.rs","begin":[2180,4],"end":[2187,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3443:5223-0:908:3463":{"id":"a:1:3443:5223-0:908:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:471:3559":{"id":"0:471:3559","crate_id":0,"name":"replace","span":{"filename":"src/regex/string.rs","begin":[742,4],"end":[748,5]},"visibility":"public","docs":"Replaces the leftmost-first match in the given haystack with the\nreplacement provided. The replacement can be a regular string (where\n`$N` and `$name` are expanded to match capture groups) or a function\nthat takes a [`Captures`] and returns the replaced string.\n\nIf no match is found, then the haystack is returned unchanged. In that\ncase, this implementation will likely return a `Cow::Borrowed` value\nsuch that no allocation is performed.\n\nWhen a `Cow::Borrowed` is returned, the value returned is guaranteed\nto be equivalent to the `haystack` given.\n\n# Replacement string syntax\n\nAll instances of `$ref` in the replacement string are replaced with\nthe substring corresponding to the capture group identified by `ref`.\n\n`ref` may be an integer corresponding to the index of the capture group\n(counted by order of opening parenthesis where `0` is the entire match)\nor it can be a name (consisting of letters, digits or underscores)\ncorresponding to a named capture group.\n\nIf `ref` isn't a valid capture group (whether the name doesn't exist or\nisn't a valid index), then it is replaced with the empty string.\n\nThe longest possible name is used. For example, `$1a` looks up the\ncapture group named `1a` and not the capture group at index `1`. To\nexert more precise control over the name, use braces, e.g., `${1}a`.\n\nTo write a literal `$` use `$$`.\n\n# Example\n\nNote that this function is polymorphic with respect to the replacement.\nIn typical usage, this can just be a normal string:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"[^01]+\").unwrap();\nassert_eq!(re.replace(\"1078910\", \"\"), \"1010\");\n```\n\nBut anything satisfying the [`Replacer`] trait will work. For example,\na closure of type `|&Captures| -> String` provides direct access to the\ncaptures corresponding to a match. This allows one to access capturing\ngroup matches easily:\n\n```\nuse regex::{Captures, Regex};\n\nlet re = Regex::new(r\"([^,\\s]+),\\s+(\\S+)\").unwrap();\nlet result = re.replace(\"Springsteen, Bruce\", |caps: &Captures| {\n    format!(\"{} {}\", &caps[2], &caps[1])\n});\nassert_eq!(result, \"Bruce Springsteen\");\n```\n\nBut this is a bit cumbersome to use all the time. Instead, a simple\nsyntax is supported (as described above) that expands `$name` into the\ncorresponding capture group. Here's the last example, but using this\nexpansion technique with named capture groups:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?<last>[^,\\s]+),\\s+(?<first>\\S+)\").unwrap();\nlet result = re.replace(\"Springsteen, Bruce\", \"$first $last\");\nassert_eq!(result, \"Bruce Springsteen\");\n```\n\nNote that using `$2` instead of `$first` or `$1` instead of `$last`\nwould produce the same result. To write a literal `$` use `$$`.\n\nSometimes the replacement string requires use of curly braces to\ndelineate a capture group replacement when it is adjacent to some other\nliteral text. For example, if we wanted to join two words together with\nan underscore:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?<first>\\w+)\\s+(?<second>\\w+)\").unwrap();\nlet result = re.replace(\"deep fried\", \"${first}_$second\");\nassert_eq!(result, \"deep_fried\");\n```\n\nWithout the curly braces, the capture group name `first_` would be\nused, and since it doesn't exist, it would be replaced with the empty\nstring.\n\nFinally, sometimes you just want to replace a literal string with no\nregard for capturing group expansion. This can be done by wrapping a\nstring with [`NoExpand`]:\n\n```\nuse regex::{NoExpand, Regex};\n\nlet re = Regex::new(r\"(?<last>[^,\\s]+),\\s+(\\S+)\").unwrap();\nlet result = re.replace(\"Springsteen, Bruce\", NoExpand(\"$2 $last\"));\nassert_eq!(result, \"$2 $last\");\n```\n\nUsing `NoExpand` may also be faster, since the replacement string won't\nneed to be parsed for the `$` syntax.","links":{"`NoExpand`":"0:1066:4239","`Captures`":"0:522:3373","`Replacer`":"0:648:3561"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}],["rep",{"generic":"R"}]],"output":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"type":{"primitive":"str"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Replacer","id":"0:648:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:186:3180":{"id":"0:186:3180","crate_id":0,"name":"captures","span":{"filename":"src/regex/bytes.rs","begin":[353,4],"end":[355,5]},"visibility":"public","docs":"This routine searches for the first match of this regex in the haystack\ngiven, and if found, returns not only the overall match but also the\nmatches of each capture group in the regex. If no match is found, then\n`None` is returned.\n\nCapture group `0` always corresponds to an implicit unnamed group that\nincludes the entire match. If a match is found, this group is always\npresent. Subsequent groups may be named and are numbered, starting\nat 1, by the order in which the opening parenthesis appears in the\npattern. For example, in the pattern `(?<a>.(?<b>.))(?<c>.)`, `a`,\n`b` and `c` correspond to capture group indices `1`, `2` and `3`,\nrespectively.\n\nYou should only use `captures` if you need access to the capture group\nmatches. Otherwise, [`Regex::find`] is generally faster for discovering\njust the overall match.\n\n# Example\n\nSay you have some haystack with movie names and their release years,\nlike \"'Citizen Kane' (1941)\". It'd be nice if we could search for\nstrings looking like that, while also extracting the movie name and its\nrelease year separately. The example below shows how to do that.\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();\nlet hay = b\"Not my favorite movie: 'Citizen Kane' (1941).\";\nlet caps = re.captures(hay).unwrap();\nassert_eq!(caps.get(0).unwrap().as_bytes(), b\"'Citizen Kane' (1941)\");\nassert_eq!(caps.get(1).unwrap().as_bytes(), b\"Citizen Kane\");\nassert_eq!(caps.get(2).unwrap().as_bytes(), b\"1941\");\n// You can also access the groups by index using the Index notation.\n// Note that this will panic on an invalid index. In this case, these\n// accesses are always correct because the overall regex will only\n// match when these capture groups match.\nassert_eq!(&caps[0], b\"'Citizen Kane' (1941)\");\nassert_eq!(&caps[1], b\"Citizen Kane\");\nassert_eq!(&caps[2], b\"1941\");\n```\n\nNote that the full match is at capture group `0`. Each subsequent\ncapture group is indexed by the order of its opening `(`.\n\nWe can make this example a bit clearer by using *named* capture groups:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>\\d{4})\\)\").unwrap();\nlet hay = b\"Not my favorite movie: 'Citizen Kane' (1941).\";\nlet caps = re.captures(hay).unwrap();\nassert_eq!(caps.get(0).unwrap().as_bytes(), b\"'Citizen Kane' (1941)\");\nassert_eq!(caps.name(\"title\").unwrap().as_bytes(), b\"Citizen Kane\");\nassert_eq!(caps.name(\"year\").unwrap().as_bytes(), b\"1941\");\n// You can also access the groups by name using the Index notation.\n// Note that this will panic on an invalid group name. In this case,\n// these accesses are always correct because the overall regex will\n// only match when these capture groups match.\nassert_eq!(&caps[0], b\"'Citizen Kane' (1941)\");\nassert_eq!(&caps[\"title\"], b\"Citizen Kane\");\nassert_eq!(&caps[\"year\"], b\"1941\");\n```\n\nHere we name the capture groups, which we can access with the `name`\nmethod or the `Index` notation with a `&str`. Note that the named\ncapture groups are still accessible with `get` or the `Index` notation\nwith a `usize`.\n\nThe `0`th capture group is always unnamed, so it must always be\naccessed with `get(0)` or `[0]`.\n\nFinally, one other way to to get the matched substrings is with the\n[`Captures::extract`] API:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();\nlet hay = b\"Not my favorite movie: 'Citizen Kane' (1941).\";\nlet (full, [title, year]) = re.captures(hay).unwrap().extract();\nassert_eq!(full, b\"'Citizen Kane' (1941)\");\nassert_eq!(title, b\"Citizen Kane\");\nassert_eq!(year, b\"1941\");\n```","links":{"`Regex::find`":"0:181:3296","`Captures::extract`":"0:260:3984"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[1987,0],"end":[1997,1]},"visibility":"default","docs":"Get a matching capture group's haystack substring by index.\n\nThe haystack substring returned can't outlive the `Captures` object if this\nmethod is used, because of how `Index` is defined (normally `a[i]` is part\nof `a` and can't outlive it). To work around this limitation, do that, use\n[`Captures::get`] instead.\n\n`'h` is the lifetime of the matched haystack, but the lifetime of the\n`&str` returned by this implementation is the lifetime of the `Captures`\nvalue itself.\n\n# Panics\n\nIf there is no matching group at the given index.","links":{"`Captures::get`":"0:256:3638"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:43332:4078","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:293:211","0:294:1000"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3179-0:1076:2691":{"id":"b:1:3179-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36000:251-0:973:3298":{"id":"a:1:36000:251-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3175-0:890:3317":{"id":"b:1:3175-0:890:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:998:3317":{"id":"0:998:3317","crate_id":0,"name":"Matches","span":{"filename":"src/regex/string.rs","begin":[2172,0],"end":[2175,1]},"visibility":"public","docs":"An iterator over all non-overlapping matches in a haystack.\n\nThis iterator yields [`Match`] values. The iterator stops when no more\nmatches can be found.\n\n`'r` is the lifetime of the compiled regular expression and `'h` is the\nlifetime of the haystack.\n\nThis iterator is created by [`Regex::find_iter`].\n\n# Time complexity\n\nNote that since an iterator runs potentially many searches on the haystack\nand since each search has worst case `O(m * n)` time complexity, the\noverall worst case time complexity for iteration is `O(m * n^2)`.","links":{"`Match`":"0:973:3298","`Regex::find_iter`":"0:457:3315"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:998:3317","a:1:3408:263-0:998:3317","a:1:3443:5223-0:998:3317","a:1:36058:4992-0:998:3317","a:1:45870:4917-0:998:3317","a:1:45871:4916-0:998:3317","b:1:2860-0:998:3317","b:1:2863-0:998:3317","b:1:3175-0:998:3317","b:1:3179-0:998:3317","b:1:3185-0:998:3317","b:1:3190-0:998:3317","b:1:4055-0:998:3317","b:1:8585-0:998:3317","0:1003","0:584","0:591"]}}},"a:1:45870:4917-0:1081:4659":{"id":"a:1:45870:4917-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:720:1062":{"id":"0:720:1062","crate_id":0,"name":"len","span":{"filename":"src/regexset/bytes.rs","begin":[540,4],"end":[542,5]},"visibility":"public","docs":"The total number of regexes in the set that created these matches.\n\n**WARNING:** This always returns the same value as [`RegexSet::len`].\nIn particular, it does *not* return the number of elements yielded by\n[`SetMatches::iter`]. The only way to determine the total number of\nmatched regexes is to iterate over them.\n\n# Example\n\nNotice that this method returns the total number of regexes in the\noriginal set, and *not* the total number of regexes that matched.\n\n```\nuse regex::bytes::RegexSet;\n\nlet set = RegexSet::new([\n    r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n    r\"[a-z]+\\.(com|org|net)\",\n]).unwrap();\nlet matches = set.matches(b\"example.com\");\n// Total number of patterns that matched.\nassert_eq!(1, matches.iter().count());\n// Total number of patterns in the set.\nassert_eq!(2, matches.len());\n```","links":{"`SetMatches::iter`":"0:721:1039","`RegexSet::len`":"0:712:1062"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:917:3491":{"id":"a:1:36058:4992-0:917:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:45870:4917-0:968:2681":{"id":"a:1:45870:4917-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:617:1264":{"id":"0:617:1264","crate_id":0,"name":"next","span":{"filename":"src/regex/string.rs","begin":[2304,4],"end":[2306,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:619:4157":{"id":"0:619:4157","crate_id":0,"name":"size_hint","span":{"filename":"src/regex/string.rs","begin":[2309,4],"end":[2311,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}}]},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:45870:4917-0:973:3298":{"id":"a:1:45870:4917-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:108:2705":{"id":"0:108:2705","crate_id":0,"name":"octal","span":{"filename":"src/builders.rs","begin":[1830,8],"end":[1833,9]},"visibility":"public","docs":"This configures octal mode for the entire pattern.\n\nOctal syntax is a little-known way of uttering Unicode codepoints\nin a pattern. For example, `a`, `\\x61`, `\\u0061` and `\\141` are all\nequivalent patterns, where the last example shows octal syntax.\n\nWhile supporting octal syntax isn't in and of itself a problem,\nit does make good error messages harder. That is, in PCRE based\nregex engines, syntax like `\\1` invokes a backreference, which is\nexplicitly unsupported this library. However, many users expect\nbackreferences to be supported. Therefore, when octal support\nis disabled, the error message will explicitly mention that\nbackreferences aren't supported.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::bytes::RegexBuilder;\n\n// Normally this pattern would not compile, with an error message\n// about backreferences not being supported. But with octal mode\n// enabled, octal escape sequences work.\nlet re = RegexBuilder::new(r\"\\141\")\n    .octal(true)\n    .build()\n    .unwrap();\nassert!(re.is_match(b\"a\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:783:1062":{"id":"0:783:1062","crate_id":0,"name":"len","span":{"filename":"src/regexset/string.rs","begin":[536,4],"end":[538,5]},"visibility":"public","docs":"The total number of regexes in the set that created these matches.\n\n**WARNING:** This always returns the same value as [`RegexSet::len`].\nIn particular, it does *not* return the number of elements yielded by\n[`SetMatches::iter`]. The only way to determine the total number of\nmatched regexes is to iterate over them.\n\n# Example\n\nNotice that this method returns the total number of regexes in the\noriginal set, and *not* the total number of regexes that matched.\n\n```\nuse regex::RegexSet;\n\nlet set = RegexSet::new([\n    r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n    r\"[a-z]+\\.(com|org|net)\",\n]).unwrap();\nlet matches = set.matches(\"example.com\");\n// Total number of patterns that matched.\nassert_eq!(1, matches.iter().count());\n// Total number of patterns in the set.\nassert_eq!(2, matches.len());\n```","links":{"`SetMatches::iter`":"0:784:1039","`RegexSet::len`":"0:775:1062"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1006:847":{"id":"0:1006:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/string.rs","begin":[2171,9],"end":[2171,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3175-0:1115:4744":{"id":"b:1:3175-0:1115:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:852:3153":{"id":"0:852:3153","crate_id":0,"name":"CompiledTooBig","span":{"filename":"src/error.rs","begin":[31,4],"end":[31,25]},"visibility":"default","docs":"The compiled program exceeded the set size\nlimit. The argument is the size limit imposed by\n[`RegexBuilder::size_limit`](crate::RegexBuilder::size_limit). Even\nwhen not configured explicitly, it defaults to a reasonable limit.\n\nIf you're getting this error, it occurred because your regex has been\ncompiled to an intermediate state that is too big. It is important to\nnote that exceeding this limit does _not_ mean the regex is too big to\n_work_, but rather, the regex is big enough that it may wind up being\nsurprisingly slow when used in a search. In other words, this error is\nmeant to be a practical heuristic for avoiding a performance footgun,\nand especially so for the case where the regex pattern is coming from\nan untrusted source.\n\nThere are generally two ways to move forward if you hit this error.\nThe first is to find some way to use a smaller regex. The second is to\nincrease the size limit via `RegexBuilder::size_limit`. However, if\nyour regex pattern is not from a trusted source, then neither of these\napproaches may be appropriate. Instead, you'll have to determine just\nhow big of a regex you want to allow.","links":{"crate::RegexBuilder::size_limit":"0:70:2706"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:854:2108"]},"discriminant":null}}},"0:535:4024":{"id":"0:535:4024","crate_id":0,"name":"expand","span":{"filename":"src/regex/string.rs","begin":[1863,4],"end":[1865,5]},"visibility":"public","docs":"Expands all instances of `$ref` in `replacement` to the corresponding\ncapture group, and writes them to the `dst` buffer given. A `ref` can\nbe a capture group index or a name. If `ref` doesn't refer to a capture\ngroup that participated in the match, then it is replaced with the\nempty string.\n\n# Format\n\nThe format of the replacement string supports two different kinds of\ncapture references: unbraced and braced.\n\nFor the unbraced format, the format supported is `$ref` where `name`\ncan be any character in the class `[0-9A-Za-z_]`. `ref` is always\nthe longest possible parse. So for example, `$1a` corresponds to the\ncapture group named `1a` and not the capture group at index `1`. If\n`ref` matches `^[0-9]+$`, then it is treated as a capture group index\nitself and not a name.\n\nFor the braced format, the format supported is `${ref}` where `ref` can\nbe any sequence of bytes except for `}`. If no closing brace occurs,\nthen it is not considered a capture reference. As with the unbraced\nformat, if `ref` matches `^[0-9]+$`, then it is treated as a capture\ngroup index and not a name.\n\nThe braced format is useful for exerting precise control over the name\nof the capture reference. For example, `${1}a` corresponds to the\ncapture group reference `1` followed by the letter `a`, where as `$1a`\n(as mentioned above) corresponds to the capture group reference `1a`.\nThe braced format is also useful for expressing capture group names\nthat use characters not supported by the unbraced format. For example,\n`${foo[bar].baz}` refers to the capture group named `foo[bar].baz`.\n\nIf a capture group reference is found and it does not refer to a valid\ncapture group, then it will be replaced with the empty string.\n\nTo write a literal `$`, use `$$`.\n\n# Example\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(\n    r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",\n).unwrap();\nlet hay = \"On 14-03-2010, I became a Tenneessee lamb.\";\nlet caps = re.captures(hay).unwrap();\n\nlet mut dst = String::new();\ncaps.expand(\"year=$year, month=$month, day=$day\", &mut dst);\nassert_eq!(dst, \"year=2010, month=03, day=14\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["replacement",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:112":{"id":"0:112","crate_id":0,"name":null,"span":{"filename":"src/builders.rs","begin":[1970,4],"end":[2538,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:113:1249","0:116:2687","0:117:2126","0:118:2697","0:119:2698","0:120:2699","0:121:2700","0:122:2701","0:123:2703","0:124:2704","0:125:2705","0:126:2706","0:127:2708","0:128:2709"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:105:2701":{"id":"0:105:2701","crate_id":0,"name":"line_terminator","span":{"filename":"src/builders.rs","begin":[1694,8],"end":[1697,9]},"visibility":"public","docs":"Configures the line terminator to be used by the regex.\n\nThe line terminator is relevant in two ways for a particular regex:\n\n* When dot-matches-new-line mode is *not* enabled (the default),\nthen `.` will match any character except for the configured line\nterminator.\n* When multi-line mode is enabled (not the default), then `^` and\n`$` will match immediately after and before, respectively, a line\nterminator.\n\nIn both cases, if CRLF mode is enabled in a particular context,\nthen it takes precedence over any configured line terminator.\n\nThis option cannot be configured from within the pattern.\n\nThe default line terminator is `\\n`.\n\n# Example\n\nThis shows how to treat the NUL byte as a line terminator. This can\nbe a useful heuristic when searching binary data.\n\n```\nuse regex::bytes::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"^foo$\")\n    .multi_line(true)\n    .line_terminator(b'\\x00')\n    .build()\n    .unwrap();\nlet hay = b\"\\x00foo\\x00\";\nassert_eq!(Some(1..4), re.find(hay).map(|m| m.range()));\n```\n\nThis example shows that the behavior of `.` is impacted by this\nsetting as well:\n\n```\nuse regex::bytes::RegexBuilder;\n\nlet re = RegexBuilder::new(r\".\")\n    .line_terminator(b'\\x00')\n    .build()\n    .unwrap();\nassert!(re.is_match(b\"\\n\"));\nassert!(!re.is_match(b\"\\x00\"));\n```\n\nThis shows that building a regex will work even when the byte\ngiven is not ASCII. This is unlike the top-level `Regex` API where\nmatching invalid UTF-8 is not allowed.\n\nNote though that you must disable Unicode mode. This is required\nbecause Unicode mode requires matching one codepoint at a time,\nand there is no way to match a non-ASCII byte as if it were a\ncodepoint.\n\n```\nuse regex::bytes::RegexBuilder;\n\nassert!(\n    RegexBuilder::new(r\".\")\n        .unicode(false)\n        .line_terminator(0x80)\n        .build()\n        .is_ok(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:4:816-0:958:4239":{"id":"b:4:816-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2863-0:899:3405":{"id":"b:1:2863-0:899:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36058:4992-0:824:2715":{"id":"a:1:36058:4992-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:661:3627":{"id":"0:661:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/string.rs","begin":[2494,4],"end":[2496,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"str"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:1093:4742":{"id":"a:1:36058:4992-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36058:4992-0:958:4239":{"id":"a:1:36058:4992-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:3443:5223-0:968:2681":{"id":"a:1:3443:5223-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:846":{"id":"0:846","crate_id":0,"name":null,"span":{"filename":"src/builders.rs","begin":[1965,20],"end":[1965,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:847:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:506:1813":{"id":"0:506:1813","crate_id":0,"name":"start","span":{"filename":"src/regex/string.rs","begin":[1508,4],"end":[1510,5]},"visibility":"public","docs":"Returns the byte offset of the start of the match in the haystack. The\nstart of the match corresponds to the position where the match begins\nand includes the first byte in the match.\n\nIt is guaranteed that `Match::start() <= Match::end()`.\n\nThis is guaranteed to fall on a valid UTF-8 codepoint boundary. That\nis, it will never be an offset that appears between the UTF-8 code\nunits of a UTF-8 encoded Unicode scalar value. Consequently, it is\nalways safe to slice the corresponding haystack using this offset.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3179-0:1081:4659":{"id":"b:1:3179-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:801":{"id":"0:801","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[682,0],"end":[692,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["0:803:185","0:804:1264","0:806:4157"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3175-0:936:4044":{"id":"b:1:3175-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:858":{"id":"0:858","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[7,16],"end":[7,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2952:213","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:859:739"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:827:508":{"id":"0:827:508","crate_id":0,"name":"clone","span":{"filename":"src/builders.rs","begin":[211,13],"end":[211,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3175-0:973:3298":{"id":"b:1:3175-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1044:4044":{"id":"0:1044:4044","crate_id":0,"name":"SubCaptureMatches","span":{"filename":"src/regex/string.rs","begin":[2369,0],"end":[2372,1]},"visibility":"public","docs":"An iterator over all group matches in a [`Captures`] value.\n\nThis iterator yields values of type `Option<Match<'h>>`, where `'h` is the\nlifetime of the haystack that the matches are for. The order of elements\nyielded corresponds to the order of the opening parenthesis for the group\nin the regex pattern. `None` is yielded for groups that did not participate\nin the match.\n\nThe first element always corresponds to the implicit group for the overall\nmatch. Since this iterator is created by a [`Captures`] value, and a\n`Captures` value is only created when a match occurs, it follows that the\nfirst element yielded by this iterator is guaranteed to be non-`None`.\n\nThe lifetime `'c` corresponds to the lifetime of the `Captures` value that\ncreated this iterator, and the lifetime `'h` corresponds to the originally\nmatched haystack.","links":{"`Captures`":"0:522:3373"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:1044:4044","a:1:3408:263-0:1044:4044","a:1:3443:5223-0:1044:4044","a:1:36058:4992-0:1044:4044","a:1:45870:4917-0:1044:4044","a:1:45871:4916-0:1044:4044","b:1:2860-0:1044:4044","b:1:2863-0:1044:4044","b:1:2918-0:1044:4044","b:1:3175-0:1044:4044","b:1:3179-0:1044:4044","b:1:3185-0:1044:4044","b:1:3190-0:1044:4044","b:1:4055-0:1044:4044","b:1:8585-0:1044:4044","b:4:816-0:1044:4044","0:1049","0:1053","0:633","0:642","0:645"]}}},"b:1:3190-0:1093:4742":{"id":"b:1:3190-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:788:1017":{"id":"0:788:1017","crate_id":0,"name":"into_iter","span":{"filename":"src/regexset/string.rs","begin":[591,4],"end":[594,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8581:177","args":null}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2918-0:842:3015":{"id":"b:1:2918-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45871:4916-0:936:4044":{"id":"a:1:45871:4916-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3185-0:836:2715":{"id":"b:1:3185-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3443:5223-0:249:3373":{"id":"a:1:3443:5223-0:249:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36000:251-0:890:3317":{"id":"a:1:36000:251-0:890:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2918-0:936:4044":{"id":"b:1:2918-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:816-0:1076:2691":{"id":"b:4:816-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:844":{"id":"0:844","crate_id":0,"name":null,"span":{"filename":"src/builders.rs","begin":[1965,13],"end":[1965,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:845:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:1057:4226":{"id":"0:1057:4226","crate_id":0,"name":"ReplacerRef","span":{"filename":"src/regex/string.rs","begin":[2546,0],"end":[2546,49]},"visibility":"public","docs":"A by-reference adaptor for a [`Replacer`].\n\nThis permits reusing the same `Replacer` value in multiple calls to a\nreplacement routine like [`Regex::replace_all`].\n\nThis type is created by [`Replacer::by_ref`].","links":{"`Regex::replace_all`":"0:474:3618","`Replacer::by_ref`":"0:652:4225","`Replacer`":"0:648:3561"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:1057:4226","a:1:3408:263-0:1057:4226","a:1:3443:5223-0:1057:4226","a:1:36058:4992-0:1057:4226","a:1:45870:4917-0:1057:4226","a:1:45871:4916-0:1057:4226","b:1:2860-0:1057:4226","b:1:2863-0:1057:4226","b:1:3175-0:1057:4226","b:1:3179-0:1057:4226","b:1:3185-0:1057:4226","b:1:3190-0:1057:4226","b:1:4055-0:1057:4226","0:1062","0:677"]}}},"0:151:2524":{"id":"0:151:2524","crate_id":0,"name":"bytes","span":{"filename":"src/regex/bytes.rs","begin":[1,0],"end":[2702,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:860:2681","0:865:3298","0:249:3373","0:883:3722","0:890:3317","0:899:3405","0:908:3463","0:917:3491","0:926:3760","0:936:4044","0:376:3561","0:949:4226","0:958:4239"],"is_stripped":true}}},"0:607:185":{"id":"0:607:185","crate_id":0,"name":"Item","span":{"filename":"src/regex/string.rs","begin":[2266,4],"end":[2266,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}}}},"0:767:4612":{"id":"0:767:4612","crate_id":0,"name":"empty","span":{"filename":"src/regexset/string.rs","begin":[179,4],"end":[182,5]},"visibility":"public","docs":"Create a new empty regex set.\n\nAn empty regex never matches anything.\n\nThis is a convenience function for `RegexSet::new([])`, but doesn't\nrequire one to specify the type of the input.\n\n# Example\n\n```\nuse regex::RegexSet;\n\nlet set = RegexSet::empty();\nassert!(set.is_empty());\n// an empty set matches nothing\nassert!(!set.is_match(\"\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:4055-0:958:4239":{"id":"b:1:4055-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2918-0:848:150":{"id":"b:1:2918-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:119:2698":{"id":"0:119:2698","crate_id":0,"name":"multi_line","span":{"filename":"src/builders.rs","begin":[2131,8],"end":[2134,9]},"visibility":"public","docs":"This configures multi-line mode for all of the patterns.\n\nEnabling multi-line mode changes the behavior of the `^` and `$`\nanchor assertions. Instead of only matching at the beginning and\nend of a haystack, respectively, multi-line mode causes them to\nmatch at the beginning and end of a line *in addition* to the\nbeginning and end of a haystack. More precisely, `^` will match at\nthe position immediately following a `\\n` and `$` will match at the\nposition immediately preceding a `\\n`.\n\nThe behavior of this option can be impacted by other settings too:\n\n* The [`RegexSetBuilder::line_terminator`] option changes `\\n`\nabove to any ASCII byte.\n* The [`RegexSetBuilder::crlf`] option changes the line terminator\nto be either `\\r` or `\\n`, but never at the position between a `\\r`\nand `\\n`.\n\nThis setting can also be configured using the inline flag `m` in\nthe pattern.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::bytes::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\"^foo$\"])\n    .multi_line(true)\n    .build()\n    .unwrap();\nassert!(re.is_match(b\"\\nfoo\\n\"));\n```","links":{"`RegexSetBuilder::crlf`":"0:121:2700","`RegexSetBuilder::line_terminator`":"0:122:2701"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:541:847":{"id":"0:541:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/string.rs","begin":[1921,4],"end":[1978,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:930":{"id":"0:930","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2318,9],"end":[2318,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["0:932:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:664:3627":{"id":"0:664:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/string.rs","begin":[2504,4],"end":[2506,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"str"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:848:150":{"id":"a:1:3408:263-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:701:1249":{"id":"0:701:1249","crate_id":0,"name":"new","span":{"filename":"src/regexset/bytes.rs","begin":[158,4],"end":[164,5]},"visibility":"public","docs":"Create a new regex set with the given regular expressions.\n\nThis takes an iterator of `S`, where `S` is something that can produce\na `&str`. If any of the strings in the iterator are not valid regular\nexpressions, then an error is returned.\n\n# Example\n\nCreate a new regex set from an iterator of strings:\n\n```\nuse regex::bytes::RegexSet;\n\nlet set = RegexSet::new([r\"\\w+\", r\"\\d+\"]).unwrap();\nassert!(set.is_match(b\"foo\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["exprs",{"generic":"I"}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3143:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Item","args":{"angle_bracketed":{"args":[],"constraints":[]}},"binding":{"equality":{"type":{"generic":"S"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3443:5223-0:824:2715":{"id":"a:1:3443:5223-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:3443:5223-0:836:2715":{"id":"a:1:3443:5223-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:216:3720":{"id":"0:216:3720","crate_id":0,"name":"captures_read","span":{"filename":"src/regex/bytes.rs","begin":[1198,4],"end":[1204,5]},"visibility":"public","docs":"This is like [`Regex::captures`], but writes the byte offsets of each\ncapture group match into the locations given.\n\nA [`CaptureLocations`] stores the same byte offsets as a [`Captures`],\nbut does *not* store a reference to the haystack. This makes its API\na bit lower level and less convenient. But in exchange, callers\nmay allocate their own `CaptureLocations` and reuse it for multiple\nsearches. This may be helpful if allocating a `Captures` shows up in a\nprofile as too costly.\n\nTo create a `CaptureLocations` value, use the\n[`Regex::capture_locations`] method.\n\nThis also returns the overall match if one was found. When a match is\nfound, its offsets are also always stored in `locs` at index `0`.\n\n# Example\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"^([a-z]+)=(\\S*)$\").unwrap();\nlet mut locs = re.capture_locations();\nassert!(re.captures_read(&mut locs, b\"id=foo123\").is_some());\nassert_eq!(Some((0, 9)), locs.get(0));\nassert_eq!(Some((0, 2)), locs.get(1));\nassert_eq!(Some((3, 9)), locs.get(2));\n```","links":{"`CaptureLocations`":"0:883:3722","`Captures`":"0:249:3373","`Regex::captures`":"0:186:3180","`Regex::capture_locations`":"0:228:3807"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["locs",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:385:3639":{"id":"0:385:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/bytes.rs","begin":[2473,4],"end":[2475,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Vec","id":"4:7390:282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:390:3627":{"id":"0:390:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/bytes.rs","begin":[2487,4],"end":[2489,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:579":{"id":"0:579","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2082,0],"end":[2154,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:580:3638","0:582:1062"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:764:1249":{"id":"0:764:1249","crate_id":0,"name":"new","span":{"filename":"src/regexset/string.rs","begin":[154,4],"end":[160,5]},"visibility":"public","docs":"Create a new regex set with the given regular expressions.\n\nThis takes an iterator of `S`, where `S` is something that can produce\na `&str`. If any of the strings in the iterator are not valid regular\nexpressions, then an error is returned.\n\n# Example\n\nCreate a new regex set from an iterator of strings:\n\n```\nuse regex::RegexSet;\n\nlet set = RegexSet::new([r\"\\w+\", r\"\\d+\"]).unwrap();\nassert!(set.is_match(\"foo\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["exprs",{"generic":"I"}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3143:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Item","args":{"angle_bracketed":{"args":[],"constraints":[]}},"binding":{"equality":{"type":{"generic":"S"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:793:1017":{"id":"0:793:1017","crate_id":0,"name":"into_iter","span":{"filename":"src/regexset/string.rs","begin":[601,4],"end":[603,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8581:177","args":null}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:4055-0:1120:4742":{"id":"b:1:4055-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2860-0:830:3015":{"id":"b:1:2860-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1069:2108":{"id":"0:1069:2108","crate_id":0,"name":"0","span":{"filename":"src/regex/string.rs","begin":[2578,24],"end":[2578,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'s","is_mutable":false,"type":{"primitive":"str"}}}}},"0:799:4752":{"id":"0:799:4752","crate_id":0,"name":"next_back","span":{"filename":"src/regexset/string.rs","begin":[657,4],"end":[664,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2863-0:836:2715":{"id":"b:1:2863-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3185-0:908:3463":{"id":"b:1:3185-0:908:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:733:1264":{"id":"0:733:1264","crate_id":0,"name":"next","span":{"filename":"src/regexset/bytes.rs","begin":[646,4],"end":[653,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:744":{"id":"0:744","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[698,0],"end":[702,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8656:134","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["0:746:4752"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:124:2704":{"id":"0:124:2704","crate_id":0,"name":"ignore_whitespace","span":{"filename":"src/builders.rs","begin":[2365,8],"end":[2371,9]},"visibility":"public","docs":"This configures verbose mode for all of the patterns.\n\nWhen enabled, whitespace will treated as insignifcant in the\npattern and `#` can be used to start a comment until the next new\nline.\n\nNormally, in most places in a pattern, whitespace is treated\nliterally. For example ` +` will match one or more ASCII whitespace\ncharacters.\n\nWhen verbose mode is enabled, `\\#` can be used to match a literal\n`#` and `\\ ` can be used to match a literal ASCII whitespace\ncharacter.\n\nVerbose mode is useful for permitting regexes to be formatted and\nbroken up more nicely. This may make them more easily readable.\n\nThis setting can also be configured using the inline flag `x` in\nthe pattern.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::bytes::RegexSetBuilder;\n\nlet pat = r\"\n    \\b\n    (?<first>\\p{Uppercase}\\w*)  # always start with uppercase letter\n    [\\s--\\n]+                   # whitespace should separate names\n    (?: # middle name can be an initial!\n        (?:(?<initial>\\p{Uppercase})\\.|(?<middle>\\p{Uppercase}\\w*))\n        [\\s--\\n]+\n    )?\n    (?<last>\\p{Uppercase}\\w*)\n    \\b\n\";\nlet re = RegexSetBuilder::new([pat])\n    .ignore_whitespace(true)\n    .build()\n    .unwrap();\nassert!(re.is_match(b\"Harry Potter\"));\nassert!(re.is_match(b\"Harry J. Potter\"));\nassert!(re.is_match(b\"Harry James Potter\"));\nassert!(!re.is_match(b\"harry J. Potter\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1080:508":{"id":"0:1080:508","crate_id":0,"name":"clone","span":{"filename":"src/regexset/bytes.rs","begin":[135,9],"end":[135,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36000:251-0:824:2715":{"id":"a:1:36000:251-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:565:211":{"id":"0:565:211","crate_id":0,"name":"Output","span":{"filename":"src/regex/string.rs","begin":[1996,4],"end":[1996,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"primitive":"str"}}}},"0:1113":{"id":"0:1113","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[458,16],"end":[458,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:1114:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2860-0:949:4226":{"id":"b:1:2860-0:949:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36000:251-0:1081:4659":{"id":"a:1:36000:251-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:961:2108":{"id":"0:961:2108","crate_id":0,"name":"0","span":{"filename":"src/regex/bytes.rs","begin":[2591,24],"end":[2591,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'s","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}}},"b:1:2918-0:958:4239":{"id":"b:1:2918-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:980":{"id":"0:980","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[1489,15],"end":[1489,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:982:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:181:3296":{"id":"0:181:3296","crate_id":0,"name":"find","span":{"filename":"src/regex/bytes.rs","begin":[230,4],"end":[232,5]},"visibility":"public","docs":"This routine searches for the first match of this regex in the\nhaystack given, and if found, returns a [`Match`]. The `Match`\nprovides access to both the byte offsets of the match and the actual\nsubstring that matched.\n\nNote that this should only be used if you want to find the entire\nmatch. If instead you just want to test the existence of a match,\nit's potentially faster to use `Regex::is_match(hay)` instead of\n`Regex::find(hay).is_some()`.\n\n# Example\n\nFind the first word with exactly 13 Unicode word characters:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();\nlet hay = b\"I categorically deny having triskaidekaphobia.\";\nlet mat = re.find(hay).unwrap();\nassert_eq!(2..15, mat.range());\nassert_eq!(b\"categorically\", mat.as_bytes());\n```","links":{"`Match`":"0:865:3298"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:4055-0:1108:4659":{"id":"b:1:4055-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:654":{"id":"0:654","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2479,0],"end":[2487,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:648:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"primitive":"str"}}},"items":["0:656:3639","0:657:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:658":{"id":"0:658","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2489,0],"end":[2497,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:648:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"alloc::string::String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"items":["0:660:3639","0:661:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:3443:5223-0:1034:3760":{"id":"a:1:3443:5223-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3175-0:824:2715":{"id":"b:1:3175-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4055-0:1115:4744":{"id":"b:1:4055-0:1115:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3443:5223-0:973:3298":{"id":"a:1:3443:5223-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36000:251-0:1066:4239":{"id":"a:1:36000:251-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3179-0:1088:4744":{"id":"b:1:3179-0:1088:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:816-0:824:2715":{"id":"b:4:816-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45871:4916-0:949:4226":{"id":"a:1:45871:4916-0:949:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3175-0:1076:2691":{"id":"b:1:3175-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:707:3283":{"id":"0:707:3283","crate_id":0,"name":"is_match_at","span":{"filename":"src/regexset/bytes.rs","begin":[248,4],"end":[250,5]},"visibility":"public","docs":"Returns true if and only if one of the regexes in this set matches the\nhaystack given, with the search starting at the offset given.\n\nThe significance of the starting point is that it takes the surrounding\ncontext into consideration. For example, the `\\A` anchor can only\nmatch when `start == 0`.\n\n# Panics\n\nThis panics when `start >= haystack.len() + 1`.\n\n# Example\n\nThis example shows the significance of `start`. Namely, consider a\nhaystack `foobar` and a desire to execute a search starting at offset\n`3`. You could search a substring explicitly, but then the look-around\nassertions won't work correctly. Instead, you can use this method to\nspecify the start position of a search.\n\n```\nuse regex::bytes::RegexSet;\n\nlet set = RegexSet::new([r\"\\bbar\\b\", r\"(?m)^bar$\"]).unwrap();\nlet hay = b\"foobar\";\n// We get a match here, but it's probably not intended.\nassert!(set.is_match(&hay[3..]));\n// No match because the  assertions take the context into account.\nassert!(!set.is_match_at(hay, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["start",{"primitive":"usize"}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3175-0:899:3405":{"id":"b:1:3175-0:899:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3190-0:865:3298":{"id":"b:1:3190-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:848:150":{"id":"0:848:150","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[8,0],"end":[32,1]},"visibility":"public","docs":"An error that occurred during parsing or compiling a regular expression.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"has_stripped_variants":false,"variants":["0:849:3134","0:852:3153"],"impls":["a:1:36000:251-0:848:150","a:1:3408:263-0:848:150","a:1:3443:5223-0:848:150","a:1:36058:4992-0:848:150","a:1:45870:4917-0:848:150","a:1:45871:4916-0:848:150","b:1:2860-0:848:150","b:1:2863-0:848:150","b:1:2918-0:848:150","b:1:3175-0:848:150","b:1:3179-0:848:150","b:1:3185-0:848:150","b:1:3190-0:848:150","b:1:4055-0:848:150","b:4:816-0:848:150","b:4:6133-0:848:150","0:855","0:857","0:858","0:141","0:143","0:145"]}}},"0:241:847":{"id":"0:241:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/bytes.rs","begin":[1557,4],"end":[1566,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3190-0:1016:3463":{"id":"b:1:3190-0:1016:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45871:4916-0:1025:3491":{"id":"a:1:45871:4916-0:1025:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3179-0:890:3317":{"id":"b:1:3179-0:890:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:917:3491":{"id":"a:1:45870:4917-0:917:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:420":{"id":"0:420","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2593,0],"end":[2601,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:376:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["0:422:3639","0:423:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3185-0:1025:3491":{"id":"b:1:3185-0:1025:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36058:4992-0:1081:4659":{"id":"a:1:36058:4992-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:4:816-0:1081:4659":{"id":"b:4:816-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3175-0:1108:4659":{"id":"b:1:3175-0:1108:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1108:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:640:4157":{"id":"0:640:4157","crate_id":0,"name":"size_hint","span":{"filename":"src/regex/string.rs","begin":[2385,4],"end":[2387,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}}]},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3179-0:1016:3463":{"id":"b:1:3179-0:1016:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:226:3775":{"id":"0:226:3775","crate_id":0,"name":"captures_len","span":{"filename":"src/regex/bytes.rs","begin":[1357,4],"end":[1359,5]},"visibility":"public","docs":"Returns the number of captures groups in this regex.\n\nThis includes all named and unnamed groups, including the implicit\nunnamed group that is always present and corresponds to the entire\nmatch.\n\nSince the implicit unnamed group is always included in this length, the\nlength returned is guaranteed to be greater than zero.\n\n# Example\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"foo\").unwrap();\nassert_eq!(1, re.captures_len());\n\nlet re = Regex::new(r\"(foo)\").unwrap();\nassert_eq!(2, re.captures_len());\n\nlet re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();\nassert_eq!(5, re.captures_len());\n\nlet re = Regex::new(r\"[a&&b]\").unwrap();\nassert_eq!(1, re.captures_len());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:728:4743":{"id":"0:728:4743","crate_id":0,"name":"IntoIter","span":{"filename":"src/regexset/bytes.rs","begin":[602,4],"end":[602,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}}}}},"0:616:185":{"id":"0:616:185","crate_id":0,"name":"Item","span":{"filename":"src/regex/string.rs","begin":[2301,4],"end":[2301,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}}}},"b:1:3190-0:883:3722":{"id":"b:1:3190-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2863-0:860:2681":{"id":"b:1:2863-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:336:1264":{"id":"0:336:1264","crate_id":0,"name":"next","span":{"filename":"src/regex/bytes.rs","begin":[2261,4],"end":[2263,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:700":{"id":"0:700","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[141,0],"end":[451,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:701:1249","0:704:4612","0:706:3282","0:707:3283","0:708:4658","0:709:4660","0:712:1062","0:713:3861","0:714:2676"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:983":{"id":"0:983","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[1489,22],"end":[1489,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2957:147","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2863-0:926:3760":{"id":"b:1:2863-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:936:4044":{"id":"a:1:45870:4917-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:880":{"id":"0:880","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[1482,26],"end":[1482,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2952:213","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:882:739"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3179-0:883:3722":{"id":"b:1:3179-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:6133-0:848:150":{"id":"b:4:6133-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:11020:133","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:6131:267","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:6135:1898"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3408:263-0:958:4239":{"id":"a:1:3408:263-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3190-0:926:3760":{"id":"b:1:3190-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:718:4702":{"id":"0:718:4702","crate_id":0,"name":"matched_any","span":{"filename":"src/regexset/bytes.rs","begin":[481,4],"end":[483,5]},"visibility":"public","docs":"Whether this set contains any matches.\n\n# Example\n\n```\nuse regex::bytes::RegexSet;\n\nlet set = RegexSet::new(&[\n    r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n    r\"[a-z]+\\.(com|org|net)\",\n]).unwrap();\nlet matches = set.matches(b\"foo@example.com\");\nassert!(matches.matched_any());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1088:4744":{"id":"0:1088:4744","crate_id":0,"name":"SetMatchesIntoIter","span":{"filename":"src/regexset/bytes.rs","begin":[638,0],"end":[641,1]},"visibility":"public","docs":"An owned iterator over the set of matches from a regex set.\n\nThis will always produces matches in ascending order of index, where the\nindex corresponds to the index of the regex that matched with respect to\nits position when initially building the set.\n\nThis iterator is created by calling `SetMatches::into_iter` via the\n`IntoIterator` trait. This is automatically done in `for` loops.\n\n# Example\n\n```\nuse regex::bytes::RegexSet;\n\nlet set = RegexSet::new([\n    r\"[0-9]\",\n    r\"[a-z]\",\n    r\"[A-Z]\",\n    r\"\\p{Greek}\",\n]).unwrap();\nlet hay = \"βa1\".as_bytes();\nlet mut matches = vec![];\nfor index in set.matches(hay) {\n    matches.push(index);\n}\nassert_eq!(matches, vec![0, 1, 3]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:36000:251-0:1088:4744","a:1:3408:263-0:1088:4744","a:1:3443:5223-0:1088:4744","a:1:36058:4992-0:1088:4744","a:1:45870:4917-0:1088:4744","a:1:45871:4916-0:1088:4744","b:1:2860-0:1088:4744","b:1:2863-0:1088:4744","b:1:3175-0:1088:4744","b:1:3179-0:1088:4744","b:1:3185-0:1088:4744","b:1:3190-0:1088:4744","b:1:4055-0:1088:4744","b:1:8585-0:1088:4744","0:1091","0:731","0:735","0:737"]}}},"a:1:3443:5223-0:1103:2691":{"id":"a:1:3443:5223-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:3408:263-0:890:3317":{"id":"a:1:3408:263-0:890:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36058:4992-0:1057:4226":{"id":"a:1:36058:4992-0:1057:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:1091":{"id":"0:1091","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[637,9],"end":[637,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:1092:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2266,0],"end":[2266,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3185-0:968:2681":{"id":"b:1:3185-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:102:2698":{"id":"0:102:2698","crate_id":0,"name":"multi_line","span":{"filename":"src/builders.rs","begin":[1531,8],"end":[1534,9]},"visibility":"public","docs":"This configures multi-line mode for the entire pattern.\n\nEnabling multi-line mode changes the behavior of the `^` and `$`\nanchor assertions. Instead of only matching at the beginning and\nend of a haystack, respectively, multi-line mode causes them to\nmatch at the beginning and end of a line *in addition* to the\nbeginning and end of a haystack. More precisely, `^` will match at\nthe position immediately following a `\\n` and `$` will match at the\nposition immediately preceding a `\\n`.\n\nThe behavior of this option can be impacted by other settings too:\n\n* The [`RegexBuilder::line_terminator`] option changes `\\n` above\nto any ASCII byte.\n* The [`RegexBuilder::crlf`] option changes the line terminator to\nbe either `\\r` or `\\n`, but never at the position between a `\\r`\nand `\\n`.\n\nThis setting can also be configured using the inline flag `m` in\nthe pattern.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::bytes::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"^foo$\")\n    .multi_line(true)\n    .build()\n    .unwrap();\nassert_eq!(Some(1..4), re.find(b\"\\nfoo\\n\").map(|m| m.range()));\n```","links":{"`RegexBuilder::crlf`":"0:104:2700","`RegexBuilder::line_terminator`":"0:105:2701"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:836:2715":{"id":"a:1:3408:263-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:85:2704":{"id":"0:85:2704","crate_id":0,"name":"ignore_whitespace","span":{"filename":"src/builders.rs","begin":[1181,8],"end":[1187,9]},"visibility":"public","docs":"This configures verbose mode for all of the patterns.\n\nWhen enabled, whitespace will treated as insignifcant in the\npattern and `#` can be used to start a comment until the next new\nline.\n\nNormally, in most places in a pattern, whitespace is treated\nliterally. For example ` +` will match one or more ASCII whitespace\ncharacters.\n\nWhen verbose mode is enabled, `\\#` can be used to match a literal\n`#` and `\\ ` can be used to match a literal ASCII whitespace\ncharacter.\n\nVerbose mode is useful for permitting regexes to be formatted and\nbroken up more nicely. This may make them more easily readable.\n\nThis setting can also be configured using the inline flag `x` in\nthe pattern.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::RegexSetBuilder;\n\nlet pat = r\"\n    \\b\n    (?<first>\\p{Uppercase}\\w*)  # always start with uppercase letter\n    [\\s--\\n]+                   # whitespace should separate names\n    (?: # middle name can be an initial!\n        (?:(?<initial>\\p{Uppercase})\\.|(?<middle>\\p{Uppercase}\\w*))\n        [\\s--\\n]+\n    )?\n    (?<last>\\p{Uppercase}\\w*)\n    \\b\n\";\nlet re = RegexSetBuilder::new([pat])\n    .ignore_whitespace(true)\n    .build()\n    .unwrap();\nassert!(re.is_match(\"Harry Potter\"));\nassert!(re.is_match(\"Harry J. Potter\"));\nassert!(re.is_match(\"Harry James Potter\"));\nassert!(!re.is_match(\"harry J. Potter\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:839:508":{"id":"0:839:508","crate_id":0,"name":"clone","span":{"filename":"src/builders.rs","begin":[1371,13],"end":[1371,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:870":{"id":"0:870","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[1482,9],"end":[1482,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3403:121","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3179-0:949:4226":{"id":"b:1:3179-0:949:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:477:3563":{"id":"0:477:3563","crate_id":0,"name":"replacen","span":{"filename":"src/regex/string.rs","begin":[907,4],"end":[961,5]},"visibility":"public","docs":"Replaces at most `limit` non-overlapping matches in the haystack with\nthe replacement provided. If `limit` is `0`, then all non-overlapping\nmatches are replaced. That is, `Regex::replace_all(hay, rep)` is\nequivalent to `Regex::replacen(hay, 0, rep)`.\n\nIf no match is found, then the haystack is returned unchanged. In that\ncase, this implementation will likely return a `Cow::Borrowed` value\nsuch that no allocation is performed.\n\nWhen a `Cow::Borrowed` is returned, the value returned is guaranteed\nto be equivalent to the `haystack` given.\n\nThe documentation for [`Regex::replace`] goes into more detail about\nwhat kinds of replacement strings are supported.\n\n# Time complexity\n\nSince iterators over all matches requires running potentially many\nsearches on the haystack, and since each search has worst case\n`O(m * n)` time complexity, the overall worst case time complexity for\nthis routine is `O(m * n^2)`.\n\nAlthough note that the worst case time here has an upper bound given\nby the `limit` parameter.\n\n# Fallibility\n\nSee the corresponding section in the docs for [`Regex::replace_all`]\nfor tips on how to deal with a replacement routine that can fail.\n\n# Example\n\nThis example shows how to flip the order of whitespace (excluding line\nterminators) delimited fields, and normalizes the whitespace that\ndelimits the fields. But we only do it for the first two matches.\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?m)^(\\S+)[\\s--\\r\\n]+(\\S+)$\").unwrap();\nlet hay = \"\nGreetings  1973\nWild\\t1973\nBornToRun\\t\\t\\t\\t1975\nDarkness                    1978\nTheRiver 1980\n\";\nlet new = re.replacen(hay, 2, \"$2 $1\");\nassert_eq!(new, \"\n1973 Greetings\n1973 Wild\nBornToRun\\t\\t\\t\\t1975\nDarkness                    1978\nTheRiver 1980\n\");\n```","links":{"`Regex::replace_all`":"0:474:3618","`Regex::replace`":"0:471:3559"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}],["limit",{"primitive":"usize"}],["rep",{"generic":"R"}]],"output":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"type":{"primitive":"str"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Replacer","id":"0:648:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:998:3317":{"id":"a:1:36058:4992-0:998:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:45871:4916-0:1120:4742":{"id":"a:1:45871:4916-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"1:3194:1923":{"id":"1:3194:1923","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:46078:239","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:513":{"id":"0:513","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[1569,0],"end":[1577,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:515:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:66:2701":{"id":"0:66:2701","crate_id":0,"name":"line_terminator","span":{"filename":"src/builders.rs","begin":[521,8],"end":[524,9]},"visibility":"public","docs":"Configures the line terminator to be used by the regex.\n\nThe line terminator is relevant in two ways for a particular regex:\n\n* When dot-matches-new-line mode is *not* enabled (the default),\nthen `.` will match any character except for the configured line\nterminator.\n* When multi-line mode is enabled (not the default), then `^` and\n`$` will match immediately after and before, respectively, a line\nterminator.\n\nIn both cases, if CRLF mode is enabled in a particular context,\nthen it takes precedence over any configured line terminator.\n\nThis option cannot be configured from within the pattern.\n\nThe default line terminator is `\\n`.\n\n# Example\n\nThis shows how to treat the NUL byte as a line terminator. This can\nbe a useful heuristic when searching binary data.\n\n```\nuse regex::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"^foo$\")\n    .multi_line(true)\n    .line_terminator(b'\\x00')\n    .build()\n    .unwrap();\nlet hay = \"\\x00foo\\x00\";\nassert_eq!(Some(1..4), re.find(hay).map(|m| m.range()));\n```\n\nThis example shows that the behavior of `.` is impacted by this\nsetting as well:\n\n```\nuse regex::RegexBuilder;\n\nlet re = RegexBuilder::new(r\".\")\n    .line_terminator(b'\\x00')\n    .build()\n    .unwrap();\nassert!(re.is_match(\"\\n\"));\nassert!(!re.is_match(\"\\x00\"));\n```\n\nThis shows that building a regex will fail if the byte given\nis not ASCII and the pattern could result in matching invalid\nUTF-8. This is because any singular non-ASCII byte is not valid\nUTF-8, and it is not permitted for a [`Regex`] to match invalid\nUTF-8. (It is permissible to use a non-ASCII byte when building a\n[`bytes::Regex`](crate::bytes::Regex).)\n\n```\nuse regex::RegexBuilder;\n\nassert!(RegexBuilder::new(r\".\").line_terminator(0x80).build().is_err());\n// Note that using a non-ASCII byte isn't enough on its own to\n// cause regex compilation to fail. You actually have to make use\n// of it in the regex in a way that leads to matching invalid\n// UTF-8. If you don't, then regex compilation will succeed!\nassert!(RegexBuilder::new(r\"a\").line_terminator(0x80).build().is_ok());\n```","links":{"`Regex`":"0:968:2681","crate::bytes::Regex":"0:860:2681"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36000:251-0:917:3491":{"id":"a:1:36000:251-0:917:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:3408:263-0:1016:3463":{"id":"a:1:3408:263-0:1016:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3179-0:1034:3760":{"id":"b:1:3179-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4055-0:836:2715":{"id":"b:1:4055-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:84:2703":{"id":"0:84:2703","crate_id":0,"name":"swap_greed","span":{"filename":"src/builders.rs","begin":[1129,8],"end":[1132,9]},"visibility":"public","docs":"This configures swap-greed mode for all of the patterns.\n\nWhen swap-greed mode is enabled, patterns like `a+` will become\nnon-greedy and patterns like `a+?` will become greedy. In other\nwords, the meanings of `a+` and `a+?` are switched.\n\nThis setting can also be configured using the inline flag `U` in\nthe pattern.\n\nNote that this is generally not useful for a `RegexSet` since a\n`RegexSet` can only report whether a pattern matches or not. Since\ngreediness never impacts whether a match is found or not (only the\noffsets of the match), it follows that whether parts of a pattern\nare greedy or not doesn't matter for a `RegexSet`.\n\nThe default for this is `false`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:973:3298":{"id":"a:1:36058:4992-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2918-0:883:3722":{"id":"b:1:2918-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:481:3662":{"id":"0:481:3662","crate_id":0,"name":"shortest_match","span":{"filename":"src/regex/string.rs","begin":[998,4],"end":[1000,5]},"visibility":"public","docs":"Returns the end byte offset of the first match in the haystack given.\n\nThis method may have the same performance characteristics as\n`is_match`. Behaviorlly, it doesn't just report whether it match\noccurs, but also the end offset for a match. In particular, the offset\nreturned *may be shorter* than the proper end of the leftmost-first\nmatch that you would find via [`Regex::find`].\n\nNote that it is not guaranteed that this routine finds the shortest or\n\"earliest\" possible match. Instead, the main idea of this API is that\nit returns the offset at the point at which the internal regex engine\nhas determined that a match has occurred. This may vary depending on\nwhich internal regex engine is used, and thus, the offset itself may\nchange based on internal heuristics.\n\n# Example\n\nTypically, `a+` would match the entire first sequence of `a` in some\nhaystack, but `shortest_match` *may* give up as soon as it sees the\nfirst `a`.\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"a+\").unwrap();\nlet offset = re.shortest_match(\"aaaaa\").unwrap();\nassert_eq!(offset, 1);\n```","links":{"`Regex::find`":"0:455:3296"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:516":{"id":"0:516","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[1579,0],"end":[1583,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}},"for":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}},"items":["0:518:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:1040:508":{"id":"0:1040:508","crate_id":0,"name":"clone","span":{"filename":"src/regex/string.rs","begin":[2326,9],"end":[2326,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:770:3283":{"id":"0:770:3283","crate_id":0,"name":"is_match_at","span":{"filename":"src/regexset/string.rs","begin":[244,4],"end":[246,5]},"visibility":"public","docs":"Returns true if and only if one of the regexes in this set matches the\nhaystack given, with the search starting at the offset given.\n\nThe significance of the starting point is that it takes the surrounding\ncontext into consideration. For example, the `\\A` anchor can only\nmatch when `start == 0`.\n\n# Panics\n\nThis panics when `start >= haystack.len() + 1`.\n\n# Example\n\nThis example shows the significance of `start`. Namely, consider a\nhaystack `foobar` and a desire to execute a search starting at offset\n`3`. You could search a substring explicitly, but then the look-around\nassertions won't work correctly. Instead, you can use this method to\nspecify the start position of a search.\n\n```\nuse regex::RegexSet;\n\nlet set = RegexSet::new([r\"\\bbar\\b\", r\"(?m)^bar$\"]).unwrap();\nlet hay = \"foobar\";\n// We get a match here, but it's probably not intended.\nassert!(set.is_match(&hay[3..]));\n// No match because the  assertions take the context into account.\nassert!(!set.is_match_at(hay, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}],["start",{"primitive":"usize"}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3175-0:1066:4239":{"id":"b:1:3175-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:322":{"id":"0:322","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2213,0],"end":[2235,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:325:185","0:326:1264","0:328:613"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:3443:5223-0:522:3373":{"id":"a:1:3443:5223-0:522:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:203:3563":{"id":"0:203:3563","crate_id":0,"name":"replacen","span":{"filename":"src/regex/bytes.rs","begin":[920,4],"end":[974,5]},"visibility":"public","docs":"Replaces at most `limit` non-overlapping matches in the haystack with\nthe replacement provided. If `limit` is `0`, then all non-overlapping\nmatches are replaced. That is, `Regex::replace_all(hay, rep)` is\nequivalent to `Regex::replacen(hay, 0, rep)`.\n\nIf no match is found, then the haystack is returned unchanged. In that\ncase, this implementation will likely return a `Cow::Borrowed` value\nsuch that no allocation is performed.\n\nWhen a `Cow::Borrowed` is returned, the value returned is guaranteed\nto be equivalent to the `haystack` given.\n\nThe documentation for [`Regex::replace`] goes into more detail about\nwhat kinds of replacement strings are supported.\n\n# Time complexity\n\nSince iterators over all matches requires running potentially many\nsearches on the haystack, and since each search has worst case\n`O(m * n)` time complexity, the overall worst case time complexity for\nthis routine is `O(m * n^2)`.\n\nAlthough note that the worst case time here has an upper bound given\nby the `limit` parameter.\n\n# Fallibility\n\nSee the corresponding section in the docs for [`Regex::replace_all`]\nfor tips on how to deal with a replacement routine that can fail.\n\n# Example\n\nThis example shows how to flip the order of whitespace (excluding line\nterminators) delimited fields, and normalizes the whitespace that\ndelimits the fields. But we only do it for the first two matches.\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"(?m)^(\\S+)[\\s--\\r\\n]+(\\S+)$\").unwrap();\nlet hay = b\"\nGreetings  1973\nWild\\t1973\nBornToRun\\t\\t\\t\\t1975\nDarkness                    1978\nTheRiver 1980\n\";\nlet new = re.replacen(hay, 2, b\"$2 $1\");\nassert_eq!(new, &b\"\n1973 Greetings\n1973 Wild\nBornToRun\\t\\t\\t\\t1975\nDarkness                    1978\nTheRiver 1980\n\"[..]);\n```","links":{"`Regex::replace_all`":"0:200:3618","`Regex::replace`":"0:197:3559"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["limit",{"primitive":"usize"}],["rep",{"generic":"R"}]],"output":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Replacer","id":"0:376:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:522:3373":{"id":"a:1:36058:4992-0:522:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:573:211":{"id":"0:573:211","crate_id":0,"name":"Output","span":{"filename":"src/regex/string.rs","begin":[2024,4],"end":[2024,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"primitive":"str"}}}},"b:1:3185-0:1093:4742":{"id":"b:1:3185-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3408:263-0:1120:4742":{"id":"a:1:3408:263-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:501:3701":{"id":"0:501:3701","crate_id":0,"name":"static_captures_len","span":{"filename":"src/regex/string.rs","begin":[1396,4],"end":[1398,5]},"visibility":"public","docs":"Returns the total number of capturing groups that appear in every\npossible match.\n\nIf the number of capture groups can vary depending on the match, then\nthis returns `None`. That is, a value is only returned when the number\nof matching groups is invariant or \"static.\"\n\nNote that like [`Regex::captures_len`], this **does** include the\nimplicit capturing group corresponding to the entire match. Therefore,\nwhen a non-None value is returned, it is guaranteed to be at least `1`.\nStated differently, a return value of `Some(0)` is impossible.\n\n# Example\n\nThis shows a few cases where a static number of capture groups is\navailable and a few cases where it is not.\n\n```\nuse regex::Regex;\n\nlet len = |pattern| {\n    Regex::new(pattern).map(|re| re.static_captures_len())\n};\n\nassert_eq!(Some(1), len(\"a\")?);\nassert_eq!(Some(2), len(\"(a)\")?);\nassert_eq!(Some(2), len(\"(a)|(b)\")?);\nassert_eq!(Some(3), len(\"(a)(b)|(c)(d)\")?);\nassert_eq!(None, len(\"(a)|b\")?);\nassert_eq!(None, len(\"a|(b)\")?);\nassert_eq!(None, len(\"(b)*\")?);\nassert_eq!(Some(2), len(\"(b)+\")?);\n\n# Ok::<(), Box<dyn std::error::Error>>(())\n```","links":{"`Regex::captures_len`":"0:500:3775"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:509:1062":{"id":"0:509:1062","crate_id":0,"name":"len","span":{"filename":"src/regex/string.rs","begin":[1541,4],"end":[1543,5]},"visibility":"public","docs":"Returns the length, in bytes, of this match.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:899:3405":{"id":"a:1:36058:4992-0:899:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:725:1017":{"id":"0:725:1017","crate_id":0,"name":"into_iter","span":{"filename":"src/regexset/bytes.rs","begin":[595,4],"end":[598,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8581:177","args":null}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:824:2715":{"id":"a:1:3408:263-0:824:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[57,0],"end":[66,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","description","type_id","source","cause"],"trait":{"name":"Error","id":"1:3238:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:142:3157"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:1053":{"id":"0:1053","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2368,16],"end":[2368,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:1056:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:791:4743":{"id":"0:791:4743","crate_id":0,"name":"IntoIter","span":{"filename":"src/regexset/string.rs","begin":[598,4],"end":[598,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}}}}},"a:1:45871:4916-0:899:3405":{"id":"a:1:45871:4916-0:899:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:125:2705":{"id":"0:125:2705","crate_id":0,"name":"octal","span":{"filename":"src/builders.rs","begin":[2403,8],"end":[2406,9]},"visibility":"public","docs":"This configures octal mode for all of the patterns.\n\nOctal syntax is a little-known way of uttering Unicode codepoints\nin a pattern. For example, `a`, `\\x61`, `\\u0061` and `\\141` are all\nequivalent patterns, where the last example shows octal syntax.\n\nWhile supporting octal syntax isn't in and of itself a problem,\nit does make good error messages harder. That is, in PCRE based\nregex engines, syntax like `\\1` invokes a backreference, which is\nexplicitly unsupported this library. However, many users expect\nbackreferences to be supported. Therefore, when octal support\nis disabled, the error message will explicitly mention that\nbackreferences aren't supported.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::bytes::RegexSetBuilder;\n\n// Normally this pattern would not compile, with an error message\n// about backreferences not being supported. But with octal mode\n// enabled, octal escape sequences work.\nlet re = RegexSetBuilder::new([r\"\\141\"])\n    .octal(true)\n    .build()\n    .unwrap();\nassert!(re.is_match(b\"a\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:1103:2691":{"id":"a:1:36058:4992-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:235:1062":{"id":"0:235:1062","crate_id":0,"name":"len","span":{"filename":"src/regex/bytes.rs","begin":[1532,4],"end":[1534,5]},"visibility":"public","docs":"Returns the length, in bytes, of this match.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3443:5223-0:899:3405":{"id":"a:1:3443:5223-0:899:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2863-0:1044:4044":{"id":"b:1:2863-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:704:4612":{"id":"0:704:4612","crate_id":0,"name":"empty","span":{"filename":"src/regexset/bytes.rs","begin":[183,4],"end":[186,5]},"visibility":"public","docs":"Create a new empty regex set.\n\nAn empty regex never matches anything.\n\nThis is a convenience function for `RegexSet::new([])`, but doesn't\nrequire one to specify the type of the input.\n\n# Example\n\n```\nuse regex::bytes::RegexSet;\n\nlet set = RegexSet::empty();\nassert!(set.is_empty());\n// an empty set matches nothing\nassert!(!set.is_match(b\"\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:781:4702":{"id":"0:781:4702","crate_id":0,"name":"matched_any","span":{"filename":"src/regexset/string.rs","begin":[477,4],"end":[479,5]},"visibility":"public","docs":"Whether this set contains any matches.\n\n# Example\n\n```\nuse regex::RegexSet;\n\nlet set = RegexSet::new(&[\n    r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n    r\"[a-z]+\\.(com|org|net)\",\n]).unwrap();\nlet matches = set.matches(\"foo@example.com\");\nassert!(matches.matched_any());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:874:508":{"id":"0:874:508","crate_id":0,"name":"clone","span":{"filename":"src/regex/bytes.rs","begin":[1482,15],"end":[1482,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:1093:4742":{"id":"a:1:3408:263-0:1093:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2918-0:830:3015":{"id":"b:1:2918-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:191:3462":{"id":"0:191:3462","crate_id":0,"name":"split","span":{"filename":"src/regex/bytes.rs","begin":[562,4],"end":[564,5]},"visibility":"public","docs":"Returns an iterator of substrings of the haystack given, delimited by a\nmatch of the regex. Namely, each element of the iterator corresponds to\na part of the haystack that *isn't* matched by the regular expression.\n\n# Time complexity\n\nSince iterators over all matches requires running potentially many\nsearches on the haystack, and since each search has worst case\n`O(m * n)` time complexity, the overall worst case time complexity for\nthis routine is `O(m * n^2)`.\n\n# Example\n\nTo split a string delimited by arbitrary amounts of spaces or tabs:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"[ \\t]+\").unwrap();\nlet hay = b\"a b \\t  c\\td    e\";\nlet fields: Vec<&[u8]> = re.split(hay).collect();\nassert_eq!(fields, vec![\n    &b\"a\"[..], &b\"b\"[..], &b\"c\"[..], &b\"d\"[..], &b\"e\"[..],\n]);\n```\n\n# Example: more cases\n\nBasic usage:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\" \").unwrap();\nlet hay = b\"Mary had a little lamb\";\nlet got: Vec<&[u8]> = re.split(hay).collect();\nassert_eq!(got, vec![\n    &b\"Mary\"[..], &b\"had\"[..], &b\"a\"[..], &b\"little\"[..], &b\"lamb\"[..],\n]);\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = b\"\";\nlet got: Vec<&[u8]> = re.split(hay).collect();\nassert_eq!(got, vec![&b\"\"[..]]);\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = b\"lionXXtigerXleopard\";\nlet got: Vec<&[u8]> = re.split(hay).collect();\nassert_eq!(got, vec![\n    &b\"lion\"[..], &b\"\"[..], &b\"tiger\"[..], &b\"leopard\"[..],\n]);\n\nlet re = Regex::new(r\"::\").unwrap();\nlet hay = b\"lion::tiger::leopard\";\nlet got: Vec<&[u8]> = re.split(hay).collect();\nassert_eq!(got, vec![&b\"lion\"[..], &b\"tiger\"[..], &b\"leopard\"[..]]);\n```\n\nIf a haystack contains multiple contiguous matches, you will end up\nwith empty spans yielded by the iterator:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = b\"XXXXaXXbXc\";\nlet got: Vec<&[u8]> = re.split(hay).collect();\nassert_eq!(got, vec![\n    &b\"\"[..], &b\"\"[..], &b\"\"[..], &b\"\"[..],\n    &b\"a\"[..], &b\"\"[..], &b\"b\"[..], &b\"c\"[..],\n]);\n\nlet re = Regex::new(r\"/\").unwrap();\nlet hay = b\"(///)\";\nlet got: Vec<&[u8]> = re.split(hay).collect();\nassert_eq!(got, vec![&b\"(\"[..], &b\"\"[..], &b\"\"[..], &b\")\"[..]]);\n```\n\nSeparators at the start or end of a haystack are neighbored by empty\nsubstring.\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"0\").unwrap();\nlet hay = b\"010\";\nlet got: Vec<&[u8]> = re.split(hay).collect();\nassert_eq!(got, vec![&b\"\"[..], &b\"1\"[..], &b\"\"[..]]);\n```\n\nWhen the regex can match the empty string, it splits at every byte\nposition in the haystack. This includes between all UTF-8 code units.\n(The top-level [`Regex::split`](crate::Regex::split) will only split\nat valid UTF-8 boundaries.)\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"\").unwrap();\nlet hay = \"☃\".as_bytes();\nlet got: Vec<&[u8]> = re.split(hay).collect();\nassert_eq!(got, vec![\n    &[][..], &[b'\\xE2'][..], &[b'\\x98'][..], &[b'\\x83'][..], &[][..],\n]);\n```\n\nContiguous separators (commonly shows up with whitespace), can lead to\npossibly surprising behavior. For example, this code is correct:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\" \").unwrap();\nlet hay = b\"    a  b c\";\nlet got: Vec<&[u8]> = re.split(hay).collect();\nassert_eq!(got, vec![\n    &b\"\"[..], &b\"\"[..], &b\"\"[..], &b\"\"[..],\n    &b\"a\"[..], &b\"\"[..], &b\"b\"[..], &b\"c\"[..],\n]);\n```\n\nIt does *not* give you `[\"a\", \"b\", \"c\"]`. For that behavior, you'd want\nto match contiguous space characters:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\" +\").unwrap();\nlet hay = b\"    a  b c\";\nlet got: Vec<&[u8]> = re.split(hay).collect();\n// N.B. This does still include a leading empty span because ' +'\n// matches at the beginning of the haystack.\nassert_eq!(got, vec![&b\"\"[..], &b\"a\"[..], &b\"b\"[..], &b\"c\"[..]]);\n```","links":{"crate::Regex::split":"0:465:3462"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'r","is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:176:150":{"id":"0:176:150","crate_id":0,"name":"Error","span":{"filename":"src/regex/bytes.rs","begin":[137,4],"end":[137,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"b:1:3179-0:991:3722":{"id":"b:1:3179-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1079":{"id":"0:1079","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[135,9],"end":[135,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:1080:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2860-0:958:4239":{"id":"b:1:2860-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2522":{"id":"0:0:2522","crate_id":0,"name":"regex","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1346,1]},"visibility":"public","docs":"This crate provides routines for searching strings for matches of a [regular\nexpression] (aka \"regex\"). The regex syntax supported by this crate is similar\nto other regex engines, but it lacks several features that are not known how to\nimplement efficiently. This includes, but is not limited to, look-around and\nbackreferences. In exchange, all regex searches in this crate have worst case\n`O(m * n)` time complexity, where `m` is proportional to the size of the regex\nand `n` is proportional to the size of the string being searched.\n\n[regular expression]: https://en.wikipedia.org/wiki/Regular_expression\n\nIf you just want API documentation, then skip to the [`Regex`] type. Otherwise,\nhere's a quick example showing one way of parsing the output of a grep-like\nprogram:\n\n```rust\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?m)^([^:]+):([0-9]+):(.+)$\").unwrap();\nlet hay = \"\\\npath/to/foo:54:Blue Harvest\npath/to/bar:90:Something, Something, Something, Dark Side\npath/to/baz:3:It's a Trap!\n\";\n\nlet mut results = vec![];\nfor (_, [path, lineno, line]) in re.captures_iter(hay).map(|c| c.extract()) {\n    results.push((path, lineno.parse::<u64>()?, line));\n}\nassert_eq!(results, vec![\n    (\"path/to/foo\", 54, \"Blue Harvest\"),\n    (\"path/to/bar\", 90, \"Something, Something, Something, Dark Side\"),\n    (\"path/to/baz\", 3, \"It's a Trap!\"),\n]);\n# Ok::<(), Box<dyn std::error::Error>>(())\n```\n\n# Overview\n\nThe primary type in this crate is a [`Regex`]. Its most important methods are\nas follows:\n\n* [`Regex::new`] compiles a regex using the default configuration. A\n[`RegexBuilder`] permits setting a non-default configuration. (For example,\ncase insensitive matching, verbose mode and others.)\n* [`Regex::is_match`] reports whether a match exists in a particular haystack.\n* [`Regex::find`] reports the byte offsets of a match in a haystack, if one\nexists. [`Regex::find_iter`] returns an iterator over all such matches.\n* [`Regex::captures`] returns a [`Captures`], which reports both the byte\noffsets of a match in a haystack and the byte offsets of each matching capture\ngroup from the regex in the haystack.\n[`Regex::captures_iter`] returns an iterator over all such matches.\n\nThere is also a [`RegexSet`], which permits searching for multiple regex\npatterns simultaneously in a single search. However, it currently only reports\nwhich patterns match and *not* the byte offsets of a match.\n\nOtherwise, this top-level crate documentation is organized as follows:\n\n* [Usage](#usage) shows how to add the `regex` crate to your Rust project.\n* [Examples](#examples) provides a limited selection of regex search examples.\n* [Performance](#performance) provides a brief summary of how to optimize regex\nsearching speed.\n* [Unicode](#unicode) discusses support for non-ASCII patterns.\n* [Syntax](#syntax) enumerates the specific regex syntax supported by this\ncrate.\n* [Untrusted input](#untrusted-input) discusses how this crate deals with regex\npatterns or haystacks that are untrusted.\n* [Crate features](#crate-features) documents the Cargo features that can be\nenabled or disabled for this crate.\n* [Other crates](#other-crates) links to other crates in the `regex` family.\n\n# Usage\n\nThe `regex` crate is [on crates.io](https://crates.io/crates/regex) and can be\nused by adding `regex` to your dependencies in your project's `Cargo.toml`.\nOr more simply, just run `cargo add regex`.\n\nHere is a complete example that creates a new Rust project, adds a dependency\non `regex`, creates the source code for a regex search and then runs the\nprogram.\n\nFirst, create the project in a new directory:\n\n```text\n$ mkdir regex-example\n$ cd regex-example\n$ cargo init\n```\n\nSecond, add a dependency on `regex`:\n\n```text\n$ cargo add regex\n```\n\nThird, edit `src/main.rs`. Delete what's there and replace it with this:\n\n```\nuse regex::Regex;\n\nfn main() {\n    let re = Regex::new(r\"Hello (?<name>\\w+)!\").unwrap();\n    let Some(caps) = re.captures(\"Hello Murphy!\") else {\n        println!(\"no match!\");\n        return;\n    };\n    println!(\"The name is: {}\", &caps[\"name\"]);\n}\n```\n\nFourth, run it with `cargo run`:\n\n```text\n$ cargo run\n   Compiling memchr v2.5.0\n   Compiling regex-syntax v0.7.1\n   Compiling aho-corasick v1.0.1\n   Compiling regex v1.8.1\n   Compiling regex-example v0.1.0 (/tmp/regex-example)\n    Finished dev [unoptimized + debuginfo] target(s) in 4.22s\n     Running `target/debug/regex-example`\nThe name is: Murphy\n```\n\nThe first time you run the program will show more output like above. But\nsubsequent runs shouldn't have to re-compile the dependencies.\n\n# Examples\n\nThis section provides a few examples, in tutorial style, showing how to\nsearch a haystack with a regex. There are more examples throughout the API\ndocumentation.\n\nBefore starting though, it's worth defining a few terms:\n\n* A **regex** is a Rust value whose type is `Regex`. We use `re` as a\nvariable name for a regex.\n* A **pattern** is the string that is used to build a regex. We use `pat` as\na variable name for a pattern.\n* A **haystack** is the string that is searched by a regex. We use `hay` as a\nvariable name for a haystack.\n\nSometimes the words \"regex\" and \"pattern\" are used interchangeably.\n\nGeneral use of regular expressions in this crate proceeds by compiling a\n**pattern** into a **regex**, and then using that regex to search, split or\nreplace parts of a **haystack**.\n\n### Example: find a middle initial\n\nWe'll start off with a very simple example: a regex that looks for a specific\nname but uses a wildcard to match a middle initial. Our pattern serves as\nsomething like a template that will match a particular name with *any* middle\ninitial.\n\n```rust\nuse regex::Regex;\n\n// We use 'unwrap()' here because it would be a bug in our program if the\n// pattern failed to compile to a regex. Panicking in the presence of a bug\n// is okay.\nlet re = Regex::new(r\"Homer (.)\\. Simpson\").unwrap();\nlet hay = \"Homer J. Simpson\";\nlet Some(caps) = re.captures(hay) else { return };\nassert_eq!(\"J\", &caps[1]);\n```\n\nThere are a few things worth noticing here in our first example:\n\n* The `.` is a special pattern meta character that means \"match any single\ncharacter except for new lines.\" (More precisely, in this crate, it means\n\"match any UTF-8 encoding of any Unicode scalar value other than `\\n`.\")\n* We can match an actual `.` literally by escaping it, i.e., `\\.`.\n* We use Rust's [raw strings] to avoid needing to deal with escape sequences in\nboth the regex pattern syntax and in Rust's string literal syntax. If we didn't\nuse raw strings here, we would have had to use `\\\\.` to match a literal `.`\ncharacter. That is, `r\"\\.\"` and `\"\\\\.\"` are equivalent patterns.\n* We put our wildcard `.` instruction in parentheses. These parentheses have a\nspecial meaning that says, \"make whatever part of the haystack matches within\nthese parentheses available as a capturing group.\" After finding a match, we\naccess this capture group with `&caps[1]`.\n\n[raw strings]: https://doc.rust-lang.org/stable/reference/tokens.html#raw-string-literals\n\nOtherwise, we execute a search using `re.captures(hay)` and return from our\nfunction if no match occurred. We then reference the middle initial by asking\nfor the part of the haystack that matched the capture group indexed at `1`.\n(The capture group at index 0 is implicit and always corresponds to the entire\nmatch. In this case, that's `Homer J. Simpson`.)\n\n### Example: named capture groups\n\nContinuing from our middle initial example above, we can tweak the pattern\nslightly to give a name to the group that matches the middle initial:\n\n```rust\nuse regex::Regex;\n\n// Note that (?P<middle>.) is a different way to spell the same thing.\nlet re = Regex::new(r\"Homer (?<middle>.)\\. Simpson\").unwrap();\nlet hay = \"Homer J. Simpson\";\nlet Some(caps) = re.captures(hay) else { return };\nassert_eq!(\"J\", &caps[\"middle\"]);\n```\n\nGiving a name to a group can be useful when there are multiple groups in\na pattern. It makes the code referring to those groups a bit easier to\nunderstand.\n\n### Example: validating a particular date format\n\nThis examples shows how to confirm whether a haystack, in its entirety, matches\na particular date format:\n\n```rust\nuse regex::Regex;\n\nlet re = Regex::new(r\"^\\d{4}-\\d{2}-\\d{2}$\").unwrap();\nassert!(re.is_match(\"2010-03-14\"));\n```\n\nNotice the use of the `^` and `$` anchors. In this crate, every regex search is\nrun with an implicit `(?s:.)*?` at the beginning of its pattern, which allows\nthe regex to match anywhere in a haystack. Anchors, as above, can be used to\nensure that the full haystack matches a pattern.\n\nThis crate is also Unicode aware by default, which means that `\\d` might match\nmore than you might expect it to. For example:\n\n```rust\nuse regex::Regex;\n\nlet re = Regex::new(r\"^\\d{4}-\\d{2}-\\d{2}$\").unwrap();\nassert!(re.is_match(\"𝟚𝟘𝟙𝟘-𝟘𝟛-𝟙𝟜\"));\n```\n\nTo only match an ASCII decimal digit, all of the following are equivalent:\n\n* `[0-9]`\n* `(?-u:\\d)`\n* `[[:digit:]]`\n* `[\\d&&\\p{ascii}]`\n\n### Example: finding dates in a haystack\n\nIn the previous example, we showed how one might validate that a haystack,\nin its entirety, corresponded to a particular date format. But what if we wanted\nto extract all things that look like dates in a specific format from a haystack?\nTo do this, we can use an iterator API to find all matches (notice that we've\nremoved the anchors and switched to looking for ASCII-only digits):\n\n```rust\nuse regex::Regex;\n\nlet re = Regex::new(r\"[0-9]{4}-[0-9]{2}-[0-9]{2}\").unwrap();\nlet hay = \"What do 1865-04-14, 1881-07-02, 1901-09-06 and 1963-11-22 have in common?\";\n// 'm' is a 'Match', and 'as_str()' returns the matching part of the haystack.\nlet dates: Vec<&str> = re.find_iter(hay).map(|m| m.as_str()).collect();\nassert_eq!(dates, vec![\n    \"1865-04-14\",\n    \"1881-07-02\",\n    \"1901-09-06\",\n    \"1963-11-22\",\n]);\n```\n\nWe can also iterate over [`Captures`] values instead of [`Match`] values, and\nthat in turn permits accessing each component of the date via capturing groups:\n\n```rust\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?<y>[0-9]{4})-(?<m>[0-9]{2})-(?<d>[0-9]{2})\").unwrap();\nlet hay = \"What do 1865-04-14, 1881-07-02, 1901-09-06 and 1963-11-22 have in common?\";\n// 'm' is a 'Match', and 'as_str()' returns the matching part of the haystack.\nlet dates: Vec<(&str, &str, &str)> = re.captures_iter(hay).map(|caps| {\n    // The unwraps are okay because every capture group must match if the whole\n    // regex matches, and in this context, we know we have a match.\n    //\n    // Note that we use `caps.name(\"y\").unwrap().as_str()` instead of\n    // `&caps[\"y\"]` because the lifetime of the former is the same as the\n    // lifetime of `hay` above, but the lifetime of the latter is tied to the\n    // lifetime of `caps` due to how the `Index` trait is defined.\n    let year = caps.name(\"y\").unwrap().as_str();\n    let month = caps.name(\"m\").unwrap().as_str();\n    let day = caps.name(\"d\").unwrap().as_str();\n    (year, month, day)\n}).collect();\nassert_eq!(dates, vec![\n    (\"1865\", \"04\", \"14\"),\n    (\"1881\", \"07\", \"02\"),\n    (\"1901\", \"09\", \"06\"),\n    (\"1963\", \"11\", \"22\"),\n]);\n```\n\n### Example: simpler capture group extraction\n\nOne can use [`Captures::extract`] to make the code from the previous example a\nbit simpler in this case:\n\n```rust\nuse regex::Regex;\n\nlet re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();\nlet hay = \"What do 1865-04-14, 1881-07-02, 1901-09-06 and 1963-11-22 have in common?\";\nlet dates: Vec<(&str, &str, &str)> = re.captures_iter(hay).map(|caps| {\n    let (_, [year, month, day]) = caps.extract();\n    (year, month, day)\n}).collect();\nassert_eq!(dates, vec![\n    (\"1865\", \"04\", \"14\"),\n    (\"1881\", \"07\", \"02\"),\n    (\"1901\", \"09\", \"06\"),\n    (\"1963\", \"11\", \"22\"),\n]);\n```\n\n`Captures::extract` works by ensuring that the number of matching groups match\nthe number of groups requested via the `[year, month, day]` syntax. If they do,\nthen the substrings for each corresponding capture group are automatically\nreturned in an appropriately sized array. Rust's syntax for pattern matching\narrays does the rest.\n\n### Example: replacement with named capture groups\n\nBuilding on the previous example, perhaps we'd like to rearrange the date\nformats. This can be done by finding each match and replacing it with\nsomething different. The [`Regex::replace_all`] routine provides a convenient\nway to do this, including by supporting references to named groups in the\nreplacement string:\n\n```rust\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?<y>\\d{4})-(?<m>\\d{2})-(?<d>\\d{2})\").unwrap();\nlet before = \"1973-01-05, 1975-08-25 and 1980-10-18\";\nlet after = re.replace_all(before, \"$m/$d/$y\");\nassert_eq!(after, \"01/05/1973, 08/25/1975 and 10/18/1980\");\n```\n\nThe replace methods are actually polymorphic in the replacement, which\nprovides more flexibility than is seen here. (See the documentation for\n[`Regex::replace`] for more details.)\n\n### Example: verbose mode\n\nWhen your regex gets complicated, you might consider using something other\nthan regex. But if you stick with regex, you can use the `x` flag to enable\ninsignificant whitespace mode or \"verbose mode.\" In this mode, whitespace\nis treated as insignificant and one may write comments. This may make your\npatterns easier to comprehend.\n\n```rust\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?x)\n  (?P<y>\\d{4}) # the year, including all Unicode digits\n  -\n  (?P<m>\\d{2}) # the month, including all Unicode digits\n  -\n  (?P<d>\\d{2}) # the day, including all Unicode digits\n\").unwrap();\n\nlet before = \"1973-01-05, 1975-08-25 and 1980-10-18\";\nlet after = re.replace_all(before, \"$m/$d/$y\");\nassert_eq!(after, \"01/05/1973, 08/25/1975 and 10/18/1980\");\n```\n\nIf you wish to match against whitespace in this mode, you can still use `\\s`,\n`\\n`, `\\t`, etc. For escaping a single space character, you can escape it\ndirectly with `\\ `, use its hex character code `\\x20` or temporarily disable\nthe `x` flag, e.g., `(?-x: )`.\n\n### Example: match multiple regular expressions simultaneously\n\nThis demonstrates how to use a [`RegexSet`] to match multiple (possibly\noverlapping) regexes in a single scan of a haystack:\n\n```rust\nuse regex::RegexSet;\n\nlet set = RegexSet::new(&[\n    r\"\\w+\",\n    r\"\\d+\",\n    r\"\\pL+\",\n    r\"foo\",\n    r\"bar\",\n    r\"barfoo\",\n    r\"foobar\",\n]).unwrap();\n\n// Iterate over and collect all of the matches. Each match corresponds to the\n// ID of the matching pattern.\nlet matches: Vec<_> = set.matches(\"foobar\").into_iter().collect();\nassert_eq!(matches, vec![0, 2, 3, 4, 6]);\n\n// You can also test whether a particular regex matched:\nlet matches = set.matches(\"foobar\");\nassert!(!matches.matched(5));\nassert!(matches.matched(6));\n```\n\n# Performance\n\nThis section briefly discusses a few concerns regarding the speed and resource\nusage of regexes.\n\n### Only ask for what you need\n\nWhen running a search with a regex, there are generally three different types\nof information one can ask for:\n\n1. Does a regex match in a haystack?\n2. Where does a regex match in a haystack?\n3. Where do each of the capturing groups match in a haystack?\n\nGenerally speaking, this crate could provide a function to answer only #3,\nwhich would subsume #1 and #2 automatically. However, it can be significantly\nmore expensive to compute the location of capturing group matches, so it's best\nnot to do it if you don't need to.\n\nTherefore, only ask for what you need. For example, don't use [`Regex::find`]\nif you only need to test if a regex matches a haystack. Use [`Regex::is_match`]\ninstead.\n\n### Unicode can impact memory usage and search speed\n\nThis crate has first class support for Unicode and it is **enabled by default**.\nIn many cases, the extra memory required to support it will be negligible and\nit typically won't impact search speed. But it can in some cases.\n\nWith respect to memory usage, the impact of Unicode principally manifests\nthrough the use of Unicode character classes. Unicode character classes\ntend to be quite large. For example, `\\w` by default matches around 140,000\ndistinct codepoints. This requires additional memory, and tends to slow down\nregex compilation. While a `\\w` here and there is unlikely to be noticed,\nwriting `\\w{100}` will for example result in quite a large regex by default.\nIndeed, `\\w` is considerably larger than its ASCII-only version, so if your\nrequirements are satisfied by ASCII, it's probably a good idea to stick to\nASCII classes. The ASCII-only version of `\\w` can be spelled in a number of\nways. All of the following are equivalent:\n\n* `[0-9A-Za-z_]`\n* `(?-u:\\w)`\n* `[[:word:]]`\n* `[\\w&&\\p{ascii}]`\n\nWith respect to search speed, Unicode tends to be handled pretty well, even when\nusing large Unicode character classes. However, some of the faster internal\nregex engines cannot handle a Unicode aware word boundary assertion. So if you\ndon't need Unicode-aware word boundary assertions, you might consider using\n`(?-u:\\b)` instead of `\\b`, where the former uses an ASCII-only definition of\na word character.\n\n### Literals might accelerate searches\n\nThis crate tends to be quite good at recognizing literals in a regex pattern\nand using them to accelerate a search. If it is at all possible to include\nsome kind of literal in your pattern, then it might make search substantially\nfaster. For example, in the regex `\\w+@\\w+`, the engine will look for\noccurrences of `@` and then try a reverse match for `\\w+` to find the start\nposition.\n\n### Avoid re-compiling regexes, especially in a loop\n\nIt is an anti-pattern to compile the same pattern in a loop since regex\ncompilation is typically expensive. (It takes anywhere from a few microseconds\nto a few **milliseconds** depending on the size of the pattern.) Not only is\ncompilation itself expensive, but this also prevents optimizations that reuse\nallocations internally to the regex engine.\n\nIn Rust, it can sometimes be a pain to pass regexes around if they're used from\ninside a helper function. Instead, we recommend using crates like [`once_cell`]\nand [`lazy_static`] to ensure that patterns are compiled exactly once.\n\n[`once_cell`]: https://crates.io/crates/once_cell\n[`lazy_static`]: https://crates.io/crates/lazy_static\n\nThis example shows how to use `once_cell`:\n\n```rust\nuse {\n    once_cell::sync::Lazy,\n    regex::Regex,\n};\n\nfn some_helper_function(haystack: &str) -> bool {\n    static RE: Lazy<Regex> = Lazy::new(|| Regex::new(r\"...\").unwrap());\n    RE.is_match(haystack)\n}\n\nfn main() {\n    assert!(some_helper_function(\"abc\"));\n    assert!(!some_helper_function(\"ac\"));\n}\n```\n\nSpecifically, in this example, the regex will be compiled when it is used for\nthe first time. On subsequent uses, it will reuse the previously built `Regex`.\nNotice how one can define the `Regex` locally to a specific function.\n\n### Sharing a regex across threads can result in contention\n\nWhile a single `Regex` can be freely used from multiple threads simultaneously,\nthere is a small synchronization cost that must be paid. Generally speaking,\none shouldn't expect to observe this unless the principal task in each thread\nis searching with the regex *and* most searches are on short haystacks. In this\ncase, internal contention on shared resources can spike and increase latency,\nwhich in turn may slow down each individual search.\n\nOne can work around this by cloning each `Regex` before sending it to another\nthread. The cloned regexes will still share the same internal read-only portion\nof its compiled state (it's reference counted), but each thread will get\noptimized access to the mutable space that is used to run a search. In general,\nthere is no additional cost in memory to doing this. The only cost is the added\ncode complexity required to explicitly clone the regex. (If you share the same\n`Regex` across multiple threads, each thread still gets its own mutable space,\nbut accessing that space is slower.)\n\n# Unicode\n\nThis section discusses what kind of Unicode support this regex library has.\nBefore showing some examples, we'll summarize the relevant points:\n\n* This crate almost fully implements \"Basic Unicode Support\" (Level 1) as\nspecified by the [Unicode Technical Standard #18][UTS18]. The full details\nof what is supported are documented in [UNICODE.md] in the root of the regex\ncrate repository. There is virtually no support for \"Extended Unicode Support\"\n(Level 2) from UTS#18.\n* The top-level [`Regex`] runs searches *as if* iterating over each of the\ncodepoints in the haystack. That is, the fundamental atom of matching is a\nsingle codepoint.\n* [`bytes::Regex`], in contrast, permits disabling Unicode mode for part of all\nof your pattern in all cases. When Unicode mode is disabled, then a search is\nrun *as if* iterating over each byte in the haystack. That is, the fundamental\natom of matching is a single byte. (A top-level `Regex` also permits disabling\nUnicode and thus matching *as if* it were one byte at a time, but only when\ndoing so wouldn't permit matching invalid UTF-8.)\n* When Unicode mode is enabled (the default), `.` will match an entire Unicode\nscalar value, even when it is encoded using multiple bytes. When Unicode mode\nis disabled (e.g., `(?-u:.)`), then `.` will match a single byte in all cases.\n* The character classes `\\w`, `\\d` and `\\s` are all Unicode-aware by default.\nUse `(?-u:\\w)`, `(?-u:\\d)` and `(?-u:\\s)` to get their ASCII-only definitions.\n* Similarly, `\\b` and `\\B` use a Unicode definition of a \"word\" character.\nTo get ASCII-only word boundaries, use `(?-u:\\b)` and `(?-u:\\B)`. This also\napplies to the special word boundary assertions. (That is, `\\b{start}`,\n`\\b{end}`, `\\b{start-half}`, `\\b{end-half}`.)\n* `^` and `$` are **not** Unicode-aware in multi-line mode. Namely, they only\nrecognize `\\n` (assuming CRLF mode is not enabled) and not any of the other\nforms of line terminators defined by Unicode.\n* Case insensitive searching is Unicode-aware and uses simple case folding.\n* Unicode general categories, scripts and many boolean properties are available\nby default via the `\\p{property name}` syntax.\n* In all cases, matches are reported using byte offsets. Or more precisely,\nUTF-8 code unit offsets. This permits constant time indexing and slicing of the\nhaystack.\n\n[UTS18]: https://unicode.org/reports/tr18/\n[UNICODE.md]: https://github.com/rust-lang/regex/blob/master/UNICODE.md\n\nPatterns themselves are **only** interpreted as a sequence of Unicode scalar\nvalues. This means you can use Unicode characters directly in your pattern:\n\n```rust\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?i)Δ+\").unwrap();\nlet m = re.find(\"ΔδΔ\").unwrap();\nassert_eq!((0, 6), (m.start(), m.end()));\n// alternatively:\nassert_eq!(0..6, m.range());\n```\n\nAs noted above, Unicode general categories, scripts, script extensions, ages\nand a smattering of boolean properties are available as character classes. For\nexample, you can match a sequence of numerals, Greek or Cherokee letters:\n\n```rust\nuse regex::Regex;\n\nlet re = Regex::new(r\"[\\pN\\p{Greek}\\p{Cherokee}]+\").unwrap();\nlet m = re.find(\"abcΔᎠβⅠᏴγδⅡxyz\").unwrap();\nassert_eq!(3..23, m.range());\n```\n\nWhile not specific to Unicode, this library also supports character class set\noperations. Namely, one can nest character classes arbitrarily and perform set\noperations on them. Those set operations are union (the default), intersection,\ndifference and symmetric difference. These set operations tend to be most\nuseful with Unicode character classes. For example, to match any codepoint\nthat is both in the `Greek` script and in the `Letter` general category:\n\n```rust\nuse regex::Regex;\n\nlet re = Regex::new(r\"[\\p{Greek}&&\\pL]+\").unwrap();\nlet subs: Vec<&str> = re.find_iter(\"ΔδΔ𐅌ΔδΔ\").map(|m| m.as_str()).collect();\nassert_eq!(subs, vec![\"ΔδΔ\", \"ΔδΔ\"]);\n\n// If we just matches on Greek, then all codepoints would match!\nlet re = Regex::new(r\"\\p{Greek}+\").unwrap();\nlet subs: Vec<&str> = re.find_iter(\"ΔδΔ𐅌ΔδΔ\").map(|m| m.as_str()).collect();\nassert_eq!(subs, vec![\"ΔδΔ𐅌ΔδΔ\"]);\n```\n\n### Opt out of Unicode support\n\nThe [`bytes::Regex`] type that can be used to search `&[u8]` haystacks. By\ndefault, haystacks are conventionally treated as UTF-8 just like it is with the\nmain `Regex` type. However, this behavior can be disabled by turning off the\n`u` flag, even if doing so could result in matching invalid UTF-8. For example,\nwhen the `u` flag is disabled, `.` will match any byte instead of any Unicode\nscalar value.\n\nDisabling the `u` flag is also possible with the standard `&str`-based `Regex`\ntype, but it is only allowed where the UTF-8 invariant is maintained. For\nexample, `(?-u:\\w)` is an ASCII-only `\\w` character class and is legal in an\n`&str`-based `Regex`, but `(?-u:\\W)` will attempt to match *any byte* that\nisn't in `(?-u:\\w)`, which in turn includes bytes that are invalid UTF-8.\nSimilarly, `(?-u:\\xFF)` will attempt to match the raw byte `\\xFF` (instead of\n`U+00FF`), which is invalid UTF-8 and therefore is illegal in `&str`-based\nregexes.\n\nFinally, since Unicode support requires bundling large Unicode data\ntables, this crate exposes knobs to disable the compilation of those\ndata tables, which can be useful for shrinking binary size and reducing\ncompilation times. For details on how to do that, see the section on [crate\nfeatures](#crate-features).\n\n# Syntax\n\nThe syntax supported in this crate is documented below.\n\nNote that the regular expression parser and abstract syntax are exposed in\na separate crate, [`regex-syntax`](https://docs.rs/regex-syntax).\n\n### Matching one character\n\n<pre class=\"rust\">\n.             any character except new line (includes new line with s flag)\n[0-9]         any ASCII digit\n\\d            digit (\\p{Nd})\n\\D            not digit\n\\pX           Unicode character class identified by a one-letter name\n\\p{Greek}     Unicode character class (general category or script)\n\\PX           Negated Unicode character class identified by a one-letter name\n\\P{Greek}     negated Unicode character class (general category or script)\n</pre>\n\n### Character classes\n\n<pre class=\"rust\">\n[xyz]         A character class matching either x, y or z (union).\n[^xyz]        A character class matching any character except x, y and z.\n[a-z]         A character class matching any character in range a-z.\n[[:alpha:]]   ASCII character class ([A-Za-z])\n[[:^alpha:]]  Negated ASCII character class ([^A-Za-z])\n[x[^xyz]]     Nested/grouping character class (matching any character except y and z)\n[a-y&&xyz]    Intersection (matching x or y)\n[0-9&&[^4]]   Subtraction using intersection and negation (matching 0-9 except 4)\n[0-9--4]      Direct subtraction (matching 0-9 except 4)\n[a-g~~b-h]    Symmetric difference (matching `a` and `h` only)\n[\\[\\]]        Escaping in character classes (matching [ or ])\n[a&&b]        An empty character class matching nothing\n</pre>\n\nAny named character class may appear inside a bracketed `[...]` character\nclass. For example, `[\\p{Greek}[:digit:]]` matches any ASCII digit or any\ncodepoint in the `Greek` script. `[\\p{Greek}&&\\pL]` matches Greek letters.\n\nPrecedence in character classes, from most binding to least:\n\n1. Ranges: `[a-cd]` == `[[a-c]d]`\n2. Union: `[ab&&bc]` == `[[ab]&&[bc]]`\n3. Intersection, difference, symmetric difference. All three have equivalent\nprecedence, and are evaluated in left-to-right order. For example,\n`[\\pL--\\p{Greek}&&\\p{Uppercase}]` == `[[\\pL--\\p{Greek}]&&\\p{Uppercase}]`.\n4. Negation: `[^a-z&&b]` == `[^[a-z&&b]]`.\n\n### Composites\n\n<pre class=\"rust\">\nxy    concatenation (x followed by y)\nx|y   alternation (x or y, prefer x)\n</pre>\n\nThis example shows how an alternation works, and what it means to prefer a\nbranch in the alternation over subsequent branches.\n\n```\nuse regex::Regex;\n\nlet haystack = \"samwise\";\n// If 'samwise' comes first in our alternation, then it is\n// preferred as a match, even if the regex engine could\n// technically detect that 'sam' led to a match earlier.\nlet re = Regex::new(r\"samwise|sam\").unwrap();\nassert_eq!(\"samwise\", re.find(haystack).unwrap().as_str());\n// But if 'sam' comes first, then it will match instead.\n// In this case, it is impossible for 'samwise' to match\n// because 'sam' is a prefix of it.\nlet re = Regex::new(r\"sam|samwise\").unwrap();\nassert_eq!(\"sam\", re.find(haystack).unwrap().as_str());\n```\n\n### Repetitions\n\n<pre class=\"rust\">\nx*        zero or more of x (greedy)\nx+        one or more of x (greedy)\nx?        zero or one of x (greedy)\nx*?       zero or more of x (ungreedy/lazy)\nx+?       one or more of x (ungreedy/lazy)\nx??       zero or one of x (ungreedy/lazy)\nx{n,m}    at least n x and at most m x (greedy)\nx{n,}     at least n x (greedy)\nx{n}      exactly n x\nx{n,m}?   at least n x and at most m x (ungreedy/lazy)\nx{n,}?    at least n x (ungreedy/lazy)\nx{n}?     exactly n x\n</pre>\n\n### Empty matches\n\n<pre class=\"rust\">\n^               the beginning of a haystack (or start-of-line with multi-line mode)\n$               the end of a haystack (or end-of-line with multi-line mode)\n\\A              only the beginning of a haystack (even with multi-line mode enabled)\n\\z              only the end of a haystack (even with multi-line mode enabled)\n\\b              a Unicode word boundary (\\w on one side and \\W, \\A, or \\z on other)\n\\B              not a Unicode word boundary\n\\b{start}, \\<   a Unicode start-of-word boundary (\\W|\\A on the left, \\w on the right)\n\\b{end}, \\>     a Unicode end-of-word boundary (\\w on the left, \\W|\\z on the right))\n\\b{start-half}  half of a Unicode start-of-word boundary (\\W|\\A on the left)\n\\b{end-half}    half of a Unicode end-of-word boundary (\\W|\\z on the right)\n</pre>\n\nThe empty regex is valid and matches the empty string. For example, the\nempty regex matches `abc` at positions `0`, `1`, `2` and `3`. When using the\ntop-level [`Regex`] on `&str` haystacks, an empty match that splits a codepoint\nis guaranteed to never be returned. However, such matches are permitted when\nusing a [`bytes::Regex`]. For example:\n\n```rust\nlet re = regex::Regex::new(r\"\").unwrap();\nlet ranges: Vec<_> = re.find_iter(\"💩\").map(|m| m.range()).collect();\nassert_eq!(ranges, vec![0..0, 4..4]);\n\nlet re = regex::bytes::Regex::new(r\"\").unwrap();\nlet ranges: Vec<_> = re.find_iter(\"💩\".as_bytes()).map(|m| m.range()).collect();\nassert_eq!(ranges, vec![0..0, 1..1, 2..2, 3..3, 4..4]);\n```\n\nNote that an empty regex is distinct from a regex that can never match.\nFor example, the regex `[a&&b]` is a character class that represents the\nintersection of `a` and `b`. That intersection is empty, which means the\ncharacter class is empty. Since nothing is in the empty set, `[a&&b]` matches\nnothing, not even the empty string.\n\n### Grouping and flags\n\n<pre class=\"rust\">\n(exp)          numbered capture group (indexed by opening parenthesis)\n(?P&lt;name&gt;exp)  named (also numbered) capture group (names must be alpha-numeric)\n(?&lt;name&gt;exp)   named (also numbered) capture group (names must be alpha-numeric)\n(?:exp)        non-capturing group\n(?flags)       set flags within current group\n(?flags:exp)   set flags for exp (non-capturing)\n</pre>\n\nCapture group names must be any sequence of alpha-numeric Unicode codepoints,\nin addition to `.`, `_`, `[` and `]`. Names must start with either an `_` or\nan alphabetic codepoint. Alphabetic codepoints correspond to the `Alphabetic`\nUnicode property, while numeric codepoints correspond to the union of the\n`Decimal_Number`, `Letter_Number` and `Other_Number` general categories.\n\nFlags are each a single character. For example, `(?x)` sets the flag `x`\nand `(?-x)` clears the flag `x`. Multiple flags can be set or cleared at\nthe same time: `(?xy)` sets both the `x` and `y` flags and `(?x-y)` sets\nthe `x` flag and clears the `y` flag.\n\nAll flags are by default disabled unless stated otherwise. They are:\n\n<pre class=\"rust\">\ni     case-insensitive: letters match both upper and lower case\nm     multi-line mode: ^ and $ match begin/end of line\ns     allow . to match \\n\nR     enables CRLF mode: when multi-line mode is enabled, \\r\\n is used\nU     swap the meaning of x* and x*?\nu     Unicode support (enabled by default)\nx     verbose mode, ignores whitespace and allow line comments (starting with `#`)\n</pre>\n\nNote that in verbose mode, whitespace is ignored everywhere, including within\ncharacter classes. To insert whitespace, use its escaped form or a hex literal.\nFor example, `\\ ` or `\\x20` for an ASCII space.\n\nFlags can be toggled within a pattern. Here's an example that matches\ncase-insensitively for the first part but case-sensitively for the second part:\n\n```rust\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?i)a+(?-i)b+\").unwrap();\nlet m = re.find(\"AaAaAbbBBBb\").unwrap();\nassert_eq!(m.as_str(), \"AaAaAbb\");\n```\n\nNotice that the `a+` matches either `a` or `A`, but the `b+` only matches\n`b`.\n\nMulti-line mode means `^` and `$` no longer match just at the beginning/end of\nthe input, but also at the beginning/end of lines:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?m)^line \\d+\").unwrap();\nlet m = re.find(\"line one\\nline 2\\n\").unwrap();\nassert_eq!(m.as_str(), \"line 2\");\n```\n\nNote that `^` matches after new lines, even at the end of input:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?m)^\").unwrap();\nlet m = re.find_iter(\"test\\n\").last().unwrap();\nassert_eq!((m.start(), m.end()), (5, 5));\n```\n\nWhen both CRLF mode and multi-line mode are enabled, then `^` and `$` will\nmatch either `\\r` and `\\n`, but never in the middle of a `\\r\\n`:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?mR)^foo$\").unwrap();\nlet m = re.find(\"\\r\\nfoo\\r\\n\").unwrap();\nassert_eq!(m.as_str(), \"foo\");\n```\n\nUnicode mode can also be selectively disabled, although only when the result\n*would not* match invalid UTF-8. One good example of this is using an ASCII\nword boundary instead of a Unicode word boundary, which might make some regex\nsearches run faster:\n\n```rust\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?-u:\\b).+(?-u:\\b)\").unwrap();\nlet m = re.find(\"$$abc$$\").unwrap();\nassert_eq!(m.as_str(), \"abc\");\n```\n\n### Escape sequences\n\nNote that this includes all possible escape sequences, even ones that are\ndocumented elsewhere.\n\n<pre class=\"rust\">\n\\*              literal *, applies to all ASCII except [0-9A-Za-z<>]\n\\a              bell (\\x07)\n\\f              form feed (\\x0C)\n\\t              horizontal tab\n\\n              new line\n\\r              carriage return\n\\v              vertical tab (\\x0B)\n\\A              matches at the beginning of a haystack\n\\z              matches at the end of a haystack\n\\b              word boundary assertion\n\\B              negated word boundary assertion\n\\b{start}, \\<   start-of-word boundary assertion\n\\b{end}, \\>     end-of-word boundary assertion\n\\b{start-half}  half of a start-of-word boundary assertion\n\\b{end-half}    half of a end-of-word boundary assertion\n\\123            octal character code, up to three digits (when enabled)\n\\x7F            hex character code (exactly two digits)\n\\x{10FFFF}      any hex character code corresponding to a Unicode code point\n\\u007F          hex character code (exactly four digits)\n\\u{7F}          any hex character code corresponding to a Unicode code point\n\\U0000007F      hex character code (exactly eight digits)\n\\U{7F}          any hex character code corresponding to a Unicode code point\n\\p{Letter}      Unicode character class\n\\P{Letter}      negated Unicode character class\n\\d, \\s, \\w      Perl character class\n\\D, \\S, \\W      negated Perl character class\n</pre>\n\n### Perl character classes (Unicode friendly)\n\nThese classes are based on the definitions provided in\n[UTS#18](https://www.unicode.org/reports/tr18/#Compatibility_Properties):\n\n<pre class=\"rust\">\n\\d     digit (\\p{Nd})\n\\D     not digit\n\\s     whitespace (\\p{White_Space})\n\\S     not whitespace\n\\w     word character (\\p{Alphabetic} + \\p{M} + \\d + \\p{Pc} + \\p{Join_Control})\n\\W     not word character\n</pre>\n\n### ASCII character classes\n\nThese classes are based on the definitions provided in\n[UTS#18](https://www.unicode.org/reports/tr18/#Compatibility_Properties):\n\n<pre class=\"rust\">\n[[:alnum:]]    alphanumeric ([0-9A-Za-z])\n[[:alpha:]]    alphabetic ([A-Za-z])\n[[:ascii:]]    ASCII ([\\x00-\\x7F])\n[[:blank:]]    blank ([\\t ])\n[[:cntrl:]]    control ([\\x00-\\x1F\\x7F])\n[[:digit:]]    digits ([0-9])\n[[:graph:]]    graphical ([!-~])\n[[:lower:]]    lower case ([a-z])\n[[:print:]]    printable ([ -~])\n[[:punct:]]    punctuation ([!-/:-@\\[-`{-~])\n[[:space:]]    whitespace ([\\t\\n\\v\\f\\r ])\n[[:upper:]]    upper case ([A-Z])\n[[:word:]]     word characters ([0-9A-Za-z_])\n[[:xdigit:]]   hex digit ([0-9A-Fa-f])\n</pre>\n\n# Untrusted input\n\nThis crate is meant to be able to run regex searches on untrusted haystacks\nwithout fear of [ReDoS]. This crate also, to a certain extent, supports\nuntrusted patterns.\n\n[ReDoS]: https://en.wikipedia.org/wiki/ReDoS\n\nThis crate differs from most (but not all) other regex engines in that it\ndoesn't use unbounded backtracking to run a regex search. In those cases,\none generally cannot use untrusted patterns *or* untrusted haystacks because\nit can be very difficult to know whether a particular pattern will result in\ncatastrophic backtracking or not.\n\nWe'll first discuss how this crate deals with untrusted inputs and then wrap\nit up with a realistic discussion about what practice really looks like.\n\n### Panics\n\nOutside of clearly documented cases, most APIs in this crate are intended to\nnever panic regardless of the inputs given to them. For example, `Regex::new`,\n`Regex::is_match`, `Regex::find` and `Regex::captures` should never panic. That\nis, it is an API promise that those APIs will never panic no matter what inputs\nare given to them. With that said, regex engines are complicated beasts, and\nproviding a rock solid guarantee that these APIs literally never panic is\nessentially equivalent to saying, \"there are no bugs in this library.\" That is\na bold claim, and not really one that can be feasibly made with a straight\nface.\n\nDon't get the wrong impression here. This crate is extensively tested, not just\nwith unit and integration tests, but also via fuzz testing. For example, this\ncrate is part of the [OSS-fuzz project]. Panics should be incredibly rare, but\nit is possible for bugs to exist, and thus possible for a panic to occur. If\nyou need a rock solid guarantee against panics, then you should wrap calls into\nthis library with [`std::panic::catch_unwind`].\n\nIt's also worth pointing out that this library will *generally* panic when\nother regex engines would commit undefined behavior. When undefined behavior\noccurs, your program might continue as if nothing bad has happened, but it also\nmight mean your program is open to the worst kinds of exploits. In contrast,\nthe worst thing a panic can do is a denial of service.\n\n[OSS-fuzz project]: https://android.googlesource.com/platform/external/oss-fuzz/+/refs/tags/android-t-preview-1/projects/rust-regex/\n[`std::panic::catch_unwind`]: https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\n\n### Untrusted patterns\n\nThe principal way this crate deals with them is by limiting their size by\ndefault. The size limit can be configured via [`RegexBuilder::size_limit`]. The\nidea of a size limit is that compiling a pattern into a `Regex` will fail if it\nbecomes \"too big.\" Namely, while *most* resources consumed by compiling a regex\nare approximately proportional (albeit with some high constant factors in some\ncases, such as with Unicode character classes) to the length of the pattern\nitself, there is one particular exception to this: counted repetitions. Namely,\nthis pattern:\n\n```text\na{5}{5}{5}{5}{5}{5}\n```\n\nIs equivalent to this pattern:\n\n```text\na{15625}\n```\n\nIn both of these cases, the actual pattern string is quite small, but the\nresulting `Regex` value is quite large. Indeed, as the first pattern shows,\nit isn't enough to locally limit the size of each repetition because they can\nbe stacked in a way that results in exponential growth.\n\nTo provide a bit more context, a simplified view of regex compilation looks\nlike this:\n\n* The pattern string is parsed into a structured representation called an AST.\nCounted repetitions are not expanded and Unicode character classes are not\nlooked up in this stage. That is, the size of the AST is proportional to the\nsize of the pattern with \"reasonable\" constant factors. In other words, one\ncan reasonably limit the memory used by an AST by limiting the length of the\npattern string.\n* The AST is translated into an HIR. Counted repetitions are still *not*\nexpanded at this stage, but Unicode character classes are embedded into the\nHIR. The memory usage of a HIR is still proportional to the length of the\noriginal pattern string, but the constant factors---mostly as a result of\nUnicode character classes---can be quite high. Still though, the memory used by\nan HIR can be reasonably limited by limiting the length of the pattern string.\n* The HIR is compiled into a [Thompson NFA]. This is the stage at which\nsomething like `\\w{5}` is rewritten to `\\w\\w\\w\\w\\w`. Thus, this is the stage\nat which [`RegexBuilder::size_limit`] is enforced. If the NFA exceeds the\nconfigured size, then this stage will fail.\n\n[Thompson NFA]: https://en.wikipedia.org/wiki/Thompson%27s_construction\n\nThe size limit helps avoid two different kinds of exorbitant resource usage:\n\n* It avoids permitting exponential memory usage based on the size of the\npattern string.\n* It avoids long search times. This will be discussed in more detail in the\nnext section, but worst case search time *is* dependent on the size of the\nregex. So keeping regexes limited to a reasonable size is also a way of keeping\nsearch times reasonable.\n\nFinally, it's worth pointing out that regex compilation is guaranteed to take\nworst case `O(m)` time, where `m` is proportional to the size of regex. The\nsize of the regex here is *after* the counted repetitions have been expanded.\n\n**Advice for those using untrusted regexes**: limit the pattern length to\nsomething small and expand it as needed. Configure [`RegexBuilder::size_limit`]\nto something small and then expand it as needed.\n\n### Untrusted haystacks\n\nThe main way this crate guards against searches from taking a long time is by\nusing algorithms that guarantee a `O(m * n)` worst case time and space bound.\nNamely:\n\n* `m` is proportional to the size of the regex, where the size of the regex\nincludes the expansion of all counted repetitions. (See the previous section on\nuntrusted patterns.)\n* `n` is proportional to the length, in bytes, of the haystack.\n\nIn other words, if you consider `m` to be a constant (for example, the regex\npattern is a literal in the source code), then the search can be said to run\nin \"linear time.\" Or equivalently, \"linear time with respect to the size of the\nhaystack.\"\n\nBut the `m` factor here is important not to ignore. If a regex is\nparticularly big, the search times can get quite slow. This is why, in part,\n[`RegexBuilder::size_limit`] exists.\n\n**Advice for those searching untrusted haystacks**: As long as your regexes\nare not enormous, you should expect to be able to search untrusted haystacks\nwithout fear. If you aren't sure, you should benchmark it. Unlike backtracking\nengines, if your regex is so big that it's likely to result in slow searches,\nthis is probably something you'll be able to observe regardless of what the\nhaystack is made up of.\n\n### Iterating over matches\n\nOne thing that is perhaps easy to miss is that the worst case time\ncomplexity bound of `O(m * n)` applies to methods like [`Regex::is_match`],\n[`Regex::find`] and [`Regex::captures`]. It does **not** apply to\n[`Regex::find_iter`] or [`Regex::captures_iter`]. Namely, since iterating over\nall matches can execute many searches, and each search can scan the entire\nhaystack, the worst case time complexity for iterators is `O(m * n^2)`.\n\nOne example of where this occurs is when a pattern consists of an alternation,\nwhere an earlier branch of the alternation requires scanning the entire\nhaystack only to discover that there is no match. It also requires a later\nbranch of the alternation to have matched at the beginning of the search. For\nexample, consider the pattern `.*[^A-Z]|[A-Z]` and the haystack `AAAAA`. The\nfirst search will scan to the end looking for matches of `.*[^A-Z]` even though\na finite automata engine (as in this crate) knows that `[A-Z]` has already\nmatched the first character of the haystack. This is due to the greedy nature\nof regex searching. That first search will report a match at the first `A` only\nafter scanning to the end to discover that no other match exists. The next\nsearch then begins at the second `A` and the behavior repeats.\n\nThere is no way to avoid this. This means that if both patterns and haystacks\nare untrusted and you're iterating over all matches, you're susceptible to\nworst case quadratic time complexity. One possible way to mitigate this\nis to drop down to the lower level `regex-automata` crate and use its\n`meta::Regex` iterator APIs. There, you can configure the search to operate\nin \"earliest\" mode by passing a `Input::new(haystack).earliest(true)` to\n`meta::Regex::find_iter` (for example). By enabling this mode, you give up\nthe normal greedy match semantics of regex searches and instead ask the regex\nengine to immediately stop as soon as a match has been found. Enabling this\nmode will thus restore the worst case `O(m * n)` time complexity bound, but at\nthe cost of different semantics.\n\n### Untrusted inputs in practice\n\nWhile providing a `O(m * n)` worst case time bound on all searches goes a long\nway toward preventing [ReDoS], that doesn't mean every search you can possibly\nrun will complete without burning CPU time. In general, there are a few ways\nfor the `m * n` time bound to still bite you:\n\n* You are searching an exceptionally long haystack. No matter how you slice\nit, a longer haystack will take more time to search. This crate may often make\nvery quick work of even long haystacks because of its literal optimizations,\nbut those aren't available for all regexes.\n* Unicode character classes can cause searches to be quite slow in some cases.\nThis is especially true when they are combined with counted repetitions. While\nthe regex size limit above will protect you from the most egregious cases,\nthe default size limit still permits pretty big regexes that can execute more\nslowly than one might expect.\n* While routines like [`Regex::find`] and [`Regex::captures`] guarantee\nworst case `O(m * n)` search time, routines like [`Regex::find_iter`] and\n[`Regex::captures_iter`] actually have worst case `O(m * n^2)` search time.\nThis is because `find_iter` runs many searches, and each search takes worst\ncase `O(m * n)` time. Thus, iteration of all matches in a haystack has\nworst case `O(m * n^2)`. A good example of a pattern that exhibits this is\n`(?:A+){1000}|` or even `.*[^A-Z]|[A-Z]`.\n\nIn general, unstrusted haystacks are easier to stomach than untrusted patterns.\nUntrusted patterns give a lot more control to the caller to impact the\nperformance of a search. In many cases, a regex search will actually execute in\naverage case `O(n)` time (i.e., not dependent on the size of the regex), but\nthis can't be guaranteed in general. Therefore, permitting untrusted patterns\nmeans that your only line of defense is to put a limit on how big `m` (and\nperhaps also `n`) can be in `O(m * n)`. `n` is limited by simply inspecting\nthe length of the haystack while `m` is limited by *both* applying a limit to\nthe length of the pattern *and* a limit on the compiled size of the regex via\n[`RegexBuilder::size_limit`].\n\nIt bears repeating: if you're accepting untrusted patterns, it would be a good\nidea to start with conservative limits on `m` and `n`, and then carefully\nincrease them as needed.\n\n# Crate features\n\nBy default, this crate tries pretty hard to make regex matching both as fast\nas possible and as correct as it can be. This means that there is a lot of\ncode dedicated to performance, the handling of Unicode data and the Unicode\ndata itself. Overall, this leads to more dependencies, larger binaries and\nlonger compile times. This trade off may not be appropriate in all cases, and\nindeed, even when all Unicode and performance features are disabled, one is\nstill left with a perfectly serviceable regex engine that will work well in\nmany cases. (Note that code is not arbitrarily reducible, and for this reason,\nthe [`regex-lite`](https://docs.rs/regex-lite) crate exists to provide an even\nmore minimal experience by cutting out Unicode and performance, but still\nmaintaining the linear search time bound.)\n\nThis crate exposes a number of features for controlling that trade off. Some\nof these features are strictly performance oriented, such that disabling them\nwon't result in a loss of functionality, but may result in worse performance.\nOther features, such as the ones controlling the presence or absence of Unicode\ndata, can result in a loss of functionality. For example, if one disables the\n`unicode-case` feature (described below), then compiling the regex `(?i)a`\nwill fail since Unicode case insensitivity is enabled by default. Instead,\ncallers must use `(?i-u)a` to disable Unicode case folding. Stated differently,\nenabling or disabling any of the features below can only add or subtract from\nthe total set of valid regular expressions. Enabling or disabling a feature\nwill never modify the match semantics of a regular expression.\n\nMost features below are enabled by default. Features that aren't enabled by\ndefault are noted.\n\n### Ecosystem features\n\n* **std** -\n  When enabled, this will cause `regex` to use the standard library. In terms\n  of APIs, `std` causes error types to implement the `std::error::Error`\n  trait. Enabling `std` will also result in performance optimizations,\n  including SIMD and faster synchronization primitives. Notably, **disabling\n  the `std` feature will result in the use of spin locks**. To use a regex\n  engine without `std` and without spin locks, you'll need to drop down to\n  the [`regex-automata`](https://docs.rs/regex-automata) crate.\n* **logging** -\n  When enabled, the `log` crate is used to emit messages about regex\n  compilation and search strategies. This is **disabled by default**. This is\n  typically only useful to someone working on this crate's internals, but might\n  be useful if you're doing some rabbit hole performance hacking. Or if you're\n  just interested in the kinds of decisions being made by the regex engine.\n\n### Performance features\n\n* **perf** -\n  Enables all performance related features except for `perf-dfa-full`. This\n  feature is enabled by default is intended to cover all reasonable features\n  that improve performance, even if more are added in the future.\n* **perf-dfa** -\n  Enables the use of a lazy DFA for matching. The lazy DFA is used to compile\n  portions of a regex to a very fast DFA on an as-needed basis. This can\n  result in substantial speedups, usually by an order of magnitude on large\n  haystacks. The lazy DFA does not bring in any new dependencies, but it can\n  make compile times longer.\n* **perf-dfa-full** -\n  Enables the use of a full DFA for matching. Full DFAs are problematic because\n  they have worst case `O(2^n)` construction time. For this reason, when this\n  feature is enabled, full DFAs are only used for very small regexes and a\n  very small space bound is used during determinization to avoid the DFA\n  from blowing up. This feature is not enabled by default, even as part of\n  `perf`, because it results in fairly sizeable increases in binary size and\n  compilation time. It can result in faster search times, but they tend to be\n  more modest and limited to non-Unicode regexes.\n* **perf-onepass** -\n  Enables the use of a one-pass DFA for extracting the positions of capture\n  groups. This optimization applies to a subset of certain types of NFAs and\n  represents the fastest engine in this crate for dealing with capture groups.\n* **perf-backtrack** -\n  Enables the use of a bounded backtracking algorithm for extracting the\n  positions of capture groups. This usually sits between the slowest engine\n  (the PikeVM) and the fastest engine (one-pass DFA) for extracting capture\n  groups. It's used whenever the regex is not one-pass and is small enough.\n* **perf-inline** -\n  Enables the use of aggressive inlining inside match routines. This reduces\n  the overhead of each match. The aggressive inlining, however, increases\n  compile times and binary size.\n* **perf-literal** -\n  Enables the use of literal optimizations for speeding up matches. In some\n  cases, literal optimizations can result in speedups of _several_ orders of\n  magnitude. Disabling this drops the `aho-corasick` and `memchr` dependencies.\n* **perf-cache** -\n  This feature used to enable a faster internal cache at the cost of using\n  additional dependencies, but this is no longer an option. A fast internal\n  cache is now used unconditionally with no additional dependencies. This may\n  change in the future.\n\n### Unicode features\n\n* **unicode** -\n  Enables all Unicode features. This feature is enabled by default, and will\n  always cover all Unicode features, even if more are added in the future.\n* **unicode-age** -\n  Provide the data for the\n  [Unicode `Age` property](https://www.unicode.org/reports/tr44/tr44-24.html#Character_Age).\n  This makes it possible to use classes like `\\p{Age:6.0}` to refer to all\n  codepoints first introduced in Unicode 6.0\n* **unicode-bool** -\n  Provide the data for numerous Unicode boolean properties. The full list\n  is not included here, but contains properties like `Alphabetic`, `Emoji`,\n  `Lowercase`, `Math`, `Uppercase` and `White_Space`.\n* **unicode-case** -\n  Provide the data for case insensitive matching using\n  [Unicode's \"simple loose matches\" specification](https://www.unicode.org/reports/tr18/#Simple_Loose_Matches).\n* **unicode-gencat** -\n  Provide the data for\n  [Unicode general categories](https://www.unicode.org/reports/tr44/tr44-24.html#General_Category_Values).\n  This includes, but is not limited to, `Decimal_Number`, `Letter`,\n  `Math_Symbol`, `Number` and `Punctuation`.\n* **unicode-perl** -\n  Provide the data for supporting the Unicode-aware Perl character classes,\n  corresponding to `\\w`, `\\s` and `\\d`. This is also necessary for using\n  Unicode-aware word boundary assertions. Note that if this feature is\n  disabled, the `\\s` and `\\d` character classes are still available if the\n  `unicode-bool` and `unicode-gencat` features are enabled, respectively.\n* **unicode-script** -\n  Provide the data for\n  [Unicode scripts and script extensions](https://www.unicode.org/reports/tr24/).\n  This includes, but is not limited to, `Arabic`, `Cyrillic`, `Hebrew`,\n  `Latin` and `Thai`.\n* **unicode-segment** -\n  Provide the data necessary to provide the properties used to implement the\n  [Unicode text segmentation algorithms](https://www.unicode.org/reports/tr29/).\n  This enables using classes like `\\p{gcb=Extend}`, `\\p{wb=Katakana}` and\n  `\\p{sb=ATerm}`.\n\n# Other crates\n\nThis crate has two required dependencies and several optional dependencies.\nThis section briefly describes them with the goal of raising awareness of how\ndifferent components of this crate may be used independently.\n\nIt is somewhat unusual for a regex engine to have dependencies, as most regex\nlibraries are self contained units with no dependencies other than a particular\nenvironment's standard library. Indeed, for other similarly optimized regex\nengines, most or all of the code in the dependencies of this crate would\nnormally just be unseparable or coupled parts of the crate itself. But since\nRust and its tooling ecosystem make the use of dependencies so easy, it made\nsense to spend some effort de-coupling parts of this crate and making them\nindependently useful.\n\nWe only briefly describe each crate here.\n\n* [`regex-lite`](https://docs.rs/regex-lite) is not a dependency of `regex`,\nbut rather, a standalone zero-dependency simpler version of `regex` that\nprioritizes compile times and binary size. In exchange, it eschews Unicode\nsupport and performance. Its match semantics are as identical as possible to\nthe `regex` crate, and for the things it supports, its APIs are identical to\nthe APIs in this crate. In other words, for a lot of use cases, it is a drop-in\nreplacement.\n* [`regex-syntax`](https://docs.rs/regex-syntax) provides a regular expression\nparser via `Ast` and `Hir` types. It also provides routines for extracting\nliterals from a pattern. Folks can use this crate to do analysis, or even to\nbuild their own regex engine without having to worry about writing a parser.\n* [`regex-automata`](https://docs.rs/regex-automata) provides the regex engines\nthemselves. One of the downsides of finite automata based regex engines is that\nthey often need multiple internal engines in order to have similar or better\nperformance than an unbounded backtracking engine in practice. `regex-automata`\nin particular provides public APIs for a PikeVM, a bounded backtracker, a\none-pass DFA, a lazy DFA, a fully compiled DFA and a meta regex engine that\ncombines all them together. It also has native multi-pattern support and\nprovides a way to compile and serialize full DFAs such that they can be loaded\nand searched in a no-std no-alloc environment. `regex-automata` itself doesn't\neven have a required dependency on `regex-syntax`!\n* [`memchr`](https://docs.rs/memchr) provides low level SIMD vectorized\nroutines for quickly finding the location of single bytes or even substrings\nin a haystack. In other words, it provides fast `memchr` and `memmem` routines.\nThese are used by this crate in literal optimizations.\n* [`aho-corasick`](https://docs.rs/aho-corasick) provides multi-substring\nsearch. It also provides SIMD vectorized routines in the case where the number\nof substrings to search for is relatively small. The `regex` crate also uses\nthis for literal optimizations.","links":{"`bytes::Regex`":"0:860:2681","`Regex::captures_iter`":"0:462:3404","`RegexBuilder`":"0:824:2715","`Regex::replace`":"0:471:3559","`Captures`":"0:522:3373","`RegexBuilder::size_limit`":"0:70:2706","`Regex::new`":"0:453:1249","`Regex`":"0:968:2681","`Regex::find_iter`":"0:457:3315","`Regex::replace_all`":"0:474:3618","`Regex::is_match`":"0:454:3282","`RegexSet`":"0:1103:2691","`Regex::captures`":"0:460:3180","`Regex::find`":"0:455:3296","`Match`":"0:973:3298","`Captures::extract`":"0:533:3984"},"attrs":["#![no_std]","#![deny(missing_docs)]","#![warn(missing_debug_implementations)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:129:2524","0:6-0:848:150","0:815:2529","0:8-0:52:2521","0:9-0:426:2521","0:10-0:752:2521"],"is_stripped":false}}},"b:1:2863-0:1007:3405":{"id":"b:1:2863-0:1007:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3185-0:1007:3405":{"id":"b:1:3185-0:1007:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:1016:3463":{"id":"a:1:45870:4917-0:1016:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:3408:263-0:917:3491":{"id":"a:1:3408:263-0:917:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3179-0:1103:2691":{"id":"b:1:3179-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2865:31184":{"id":"1:2865:31184","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:194:3490":{"id":"0:194:3490","crate_id":0,"name":"splitn","span":{"filename":"src/regex/bytes.rs","begin":[637,4],"end":[643,5]},"visibility":"public","docs":"Returns an iterator of at most `limit` substrings of the haystack\ngiven, delimited by a match of the regex. (A `limit` of `0` will return\nno substrings.) Namely, each element of the iterator corresponds to a\npart of the haystack that *isn't* matched by the regular expression.\nThe remainder of the haystack that is not split will be the last\nelement in the iterator.\n\n# Time complexity\n\nSince iterators over all matches requires running potentially many\nsearches on the haystack, and since each search has worst case\n`O(m * n)` time complexity, the overall worst case time complexity for\nthis routine is `O(m * n^2)`.\n\nAlthough note that the worst case time here has an upper bound given\nby the `limit` parameter.\n\n# Example\n\nGet the first two words in some haystack:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"\\W+\").unwrap();\nlet hay = b\"Hey! How are you?\";\nlet fields: Vec<&[u8]> = re.splitn(hay, 3).collect();\nassert_eq!(fields, vec![&b\"Hey\"[..], &b\"How\"[..], &b\"are you?\"[..]]);\n```\n\n# Examples: more cases\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\" \").unwrap();\nlet hay = b\"Mary had a little lamb\";\nlet got: Vec<&[u8]> = re.splitn(hay, 3).collect();\nassert_eq!(got, vec![&b\"Mary\"[..], &b\"had\"[..], &b\"a little lamb\"[..]]);\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = b\"\";\nlet got: Vec<&[u8]> = re.splitn(hay, 3).collect();\nassert_eq!(got, vec![&b\"\"[..]]);\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = b\"lionXXtigerXleopard\";\nlet got: Vec<&[u8]> = re.splitn(hay, 3).collect();\nassert_eq!(got, vec![&b\"lion\"[..], &b\"\"[..], &b\"tigerXleopard\"[..]]);\n\nlet re = Regex::new(r\"::\").unwrap();\nlet hay = b\"lion::tiger::leopard\";\nlet got: Vec<&[u8]> = re.splitn(hay, 2).collect();\nassert_eq!(got, vec![&b\"lion\"[..], &b\"tiger::leopard\"[..]]);\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = b\"abcXdef\";\nlet got: Vec<&[u8]> = re.splitn(hay, 1).collect();\nassert_eq!(got, vec![&b\"abcXdef\"[..]]);\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = b\"abcdef\";\nlet got: Vec<&[u8]> = re.splitn(hay, 2).collect();\nassert_eq!(got, vec![&b\"abcdef\"[..]]);\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = b\"abcXdef\";\nlet got: Vec<&[u8]> = re.splitn(hay, 0).collect();\nassert!(got.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'r","is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["limit",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[1264,0],"end":[1432,1]},"visibility":"default","docs":"Auxiliary methods.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:224:359","0:225:3759","0:226:3775","0:227:3701","0:228:3807"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3185-0:865:3298":{"id":"b:1:3185-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3175-0:917:3491":{"id":"b:1:3175-0:917:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3190-0:936:4044":{"id":"b:1:3190-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:650:3627":{"id":"0:650:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/string.rs","begin":[2448,4],"end":[2450,5]},"visibility":"default","docs":"Return a fixed unchanging replacement string.\n\nWhen doing replacements, if access to [`Captures`] is not needed (e.g.,\nthe replacement string does not need `$` expansion), then it can be\nbeneficial to avoid finding sub-captures.\n\nIn general, this is called once for every call to a replacement routine\nsuch as [`Regex::replace_all`].","links":{"`Regex::replace_all`":"0:474:3618","`Captures`":"0:522:3373"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'r","is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"type":{"primitive":"str"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:1044:4044":{"id":"a:1:36058:4992-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:1099:508":{"id":"0:1099:508","crate_id":0,"name":"clone","span":{"filename":"src/regexset/bytes.rs","begin":[683,9],"end":[683,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SetMatchesIter","id":"0:1093:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:730:1017":{"id":"0:730:1017","crate_id":0,"name":"into_iter","span":{"filename":"src/regexset/bytes.rs","begin":[605,4],"end":[607,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8581:177","args":null}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:45870:4917-0:958:4239":{"id":"a:1:45870:4917-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2860-0:1115:4744":{"id":"b:1:2860-0:1115:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45871:4916-0:836:2715":{"id":"a:1:45871:4916-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:45871:4916-0:926:3760":{"id":"a:1:45871:4916-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:4055-0:1016:3463":{"id":"b:1:4055-0:1016:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1115:4744":{"id":"0:1115:4744","crate_id":0,"name":"SetMatchesIntoIter","span":{"filename":"src/regexset/string.rs","begin":[634,0],"end":[637,1]},"visibility":"public","docs":"An owned iterator over the set of matches from a regex set.\n\nThis will always produces matches in ascending order of index, where the\nindex corresponds to the index of the regex that matched with respect to\nits position when initially building the set.\n\nThis iterator is created by calling `SetMatches::into_iter` via the\n`IntoIterator` trait. This is automatically done in `for` loops.\n\n# Example\n\n```\nuse regex::RegexSet;\n\nlet set = RegexSet::new([\n    r\"[0-9]\",\n    r\"[a-z]\",\n    r\"[A-Z]\",\n    r\"\\p{Greek}\",\n]).unwrap();\nlet hay = \"βa1\";\nlet mut matches = vec![];\nfor index in set.matches(hay) {\n    matches.push(index);\n}\nassert_eq!(matches, vec![0, 1, 3]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:36000:251-0:1115:4744","a:1:3408:263-0:1115:4744","a:1:3443:5223-0:1115:4744","a:1:36058:4992-0:1115:4744","a:1:45870:4917-0:1115:4744","a:1:45871:4916-0:1115:4744","b:1:2860-0:1115:4744","b:1:2863-0:1115:4744","b:1:3175-0:1115:4744","b:1:3179-0:1115:4744","b:1:3185-0:1115:4744","b:1:3190-0:1115:4744","b:1:4055-0:1115:4744","b:1:8585-0:1115:4744","0:1118","0:794","0:798","0:800"]}}},"0:734:4157":{"id":"0:734:4157","crate_id":0,"name":"size_hint","span":{"filename":"src/regexset/bytes.rs","begin":[655,4],"end":[657,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}}]},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:183:3315":{"id":"0:183:3315","crate_id":0,"name":"find_iter","span":{"filename":"src/regex/bytes.rs","begin":[262,4],"end":[264,5]},"visibility":"public","docs":"Returns an iterator that yields successive non-overlapping matches in\nthe given haystack. The iterator yields values of type [`Match`].\n\n# Time complexity\n\nNote that since `find_iter` runs potentially many searches on the\nhaystack and since each search has worst case `O(m * n)` time\ncomplexity, the overall worst case time complexity for iteration is\n`O(m * n^2)`.\n\n# Example\n\nFind every word with exactly 13 Unicode word characters:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();\nlet hay = b\"Retroactively relinquishing remunerations is reprehensible.\";\nlet matches: Vec<_> = re.find_iter(hay).map(|m| m.as_bytes()).collect();\nassert_eq!(matches, vec![\n    &b\"Retroactively\"[..],\n    &b\"relinquishing\"[..],\n    &b\"remunerations\"[..],\n    &b\"reprehensible\"[..],\n]);\n```","links":{"`Match`":"0:865:3298"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'r","is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Matches","id":"0:890:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:830:3015":{"id":"a:1:36058:4992-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2342,0],"end":[2342,58]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3179-0:249:3373":{"id":"b:1:3179-0:249:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:795:185":{"id":"0:795:185","crate_id":0,"name":"Item","span":{"filename":"src/regexset/string.rs","begin":[640,4],"end":[640,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"primitive":"usize"}}}},"0:172":{"id":"0:172","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[127,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:173:150","0:174:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:482:3663":{"id":"0:482:3663","crate_id":0,"name":"shortest_match_at","span":{"filename":"src/regex/string.rs","begin":[1033,4],"end":[1041,5]},"visibility":"public","docs":"Returns the same as [`Regex::shortest_match`], but starts the search at\nthe given offset.\n\nThe significance of the starting point is that it takes the surrounding\ncontext into consideration. For example, the `\\A` anchor can only match\nwhen `start == 0`.\n\nIf a match is found, the offset returned is relative to the beginning\nof the haystack, not the beginning of the search.\n\n# Panics\n\nThis panics when `start >= haystack.len() + 1`.\n\n# Example\n\nThis example shows the significance of `start` by demonstrating how it\ncan be used to permit look-around assertions in a regex to take the\nsurrounding context into account.\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"\\bchew\\b\").unwrap();\nlet hay = \"eschew\";\n// We get a match here, but it's probably not intended.\nassert_eq!(re.shortest_match(&hay[2..]), Some(4));\n// No match because the  assertions take the context into account.\nassert_eq!(re.shortest_match_at(hay, 2), None);\n```","links":{"`Regex::shortest_match`":"0:481:3662"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}],["start",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:502:3807":{"id":"0:502:3807","crate_id":0,"name":"capture_locations","span":{"filename":"src/regex/string.rs","begin":[1422,4],"end":[1424,5]},"visibility":"public","docs":"Returns a fresh allocated set of capture locations that can\nbe reused in multiple calls to [`Regex::captures_read`] or\n[`Regex::captures_read_at`].\n\nThe returned locations can be used for any subsequent search for this\nparticular regex. There is no guarantee that it is correct to use for\nother regexes, even if they have the same number of capture groups.\n\n# Example\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(.)(.)(\\w+)\").unwrap();\nlet mut locs = re.capture_locations();\nassert!(re.captures_read(&mut locs, \"Padron\").is_some());\nassert_eq!(locs.get(0), Some((0, 6)));\nassert_eq!(locs.get(1), Some((0, 1)));\nassert_eq!(locs.get(2), Some((1, 2)));\nassert_eq!(locs.get(3), Some((2, 6)));\n```","links":{"`Regex::captures_read`":"0:490:3720","`Regex::captures_read_at`":"0:492:3723"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:4055-0:522:3373":{"id":"b:1:4055-0:522:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:249:3373":{"id":"a:1:45870:4917-0:249:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"4:6135:1898":{"id":"4:6135:1898","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3175-0:926:3760":{"id":"b:1:3175-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:515:847":{"id":"0:515:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/string.rs","begin":[1570,4],"end":[1576,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:681:3627":{"id":"0:681:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/string.rs","begin":[2553,4],"end":[2555,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"str"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:69:2705":{"id":"0:69:2705","crate_id":0,"name":"octal","span":{"filename":"src/builders.rs","begin":[651,8],"end":[654,9]},"visibility":"public","docs":"This configures octal mode for the entire pattern.\n\nOctal syntax is a little-known way of uttering Unicode codepoints\nin a pattern. For example, `a`, `\\x61`, `\\u0061` and `\\141` are all\nequivalent patterns, where the last example shows octal syntax.\n\nWhile supporting octal syntax isn't in and of itself a problem,\nit does make good error messages harder. That is, in PCRE based\nregex engines, syntax like `\\1` invokes a backreference, which is\nexplicitly unsupported this library. However, many users expect\nbackreferences to be supported. Therefore, when octal support\nis disabled, the error message will explicitly mention that\nbackreferences aren't supported.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::RegexBuilder;\n\n// Normally this pattern would not compile, with an error message\n// about backreferences not being supported. But with octal mode\n// enabled, octal escape sequences work.\nlet re = RegexBuilder::new(r\"\\141\")\n    .octal(true)\n    .build()\n    .unwrap();\nassert!(re.is_match(\"a\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:685:3627":{"id":"0:685:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/string.rs","begin":[2585,4],"end":[2587,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"str"}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3179-0:958:4239":{"id":"b:1:3179-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3175-0:958:4239":{"id":"b:1:3175-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:816-0:1066:4239":{"id":"b:4:816-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:865:3298":{"id":"a:1:45870:4917-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:964:508":{"id":"0:964:508","crate_id":0,"name":"clone","span":{"filename":"src/regex/bytes.rs","begin":[2590,9],"end":[2590,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:962":{"id":"0:962","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2590,9],"end":[2590,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["0:964:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:676:3639":{"id":"0:676:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/string.rs","begin":[2534,4],"end":[2536,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:948:847":{"id":"0:948:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/bytes.rs","begin":[2360,16],"end":[2360,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:465:3462":{"id":"0:465:3462","crate_id":0,"name":"split","span":{"filename":"src/regex/string.rs","begin":[553,4],"end":[555,5]},"visibility":"public","docs":"Returns an iterator of substrings of the haystack given, delimited by a\nmatch of the regex. Namely, each element of the iterator corresponds to\na part of the haystack that *isn't* matched by the regular expression.\n\n# Time complexity\n\nSince iterators over all matches requires running potentially many\nsearches on the haystack, and since each search has worst case\n`O(m * n)` time complexity, the overall worst case time complexity for\nthis routine is `O(m * n^2)`.\n\n# Example\n\nTo split a string delimited by arbitrary amounts of spaces or tabs:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"[ \\t]+\").unwrap();\nlet hay = \"a b \\t  c\\td    e\";\nlet fields: Vec<&str> = re.split(hay).collect();\nassert_eq!(fields, vec![\"a\", \"b\", \"c\", \"d\", \"e\"]);\n```\n\n# Example: more cases\n\nBasic usage:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\" \").unwrap();\nlet hay = \"Mary had a little lamb\";\nlet got: Vec<&str> = re.split(hay).collect();\nassert_eq!(got, vec![\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = \"\";\nlet got: Vec<&str> = re.split(hay).collect();\nassert_eq!(got, vec![\"\"]);\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = \"lionXXtigerXleopard\";\nlet got: Vec<&str> = re.split(hay).collect();\nassert_eq!(got, vec![\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet re = Regex::new(r\"::\").unwrap();\nlet hay = \"lion::tiger::leopard\";\nlet got: Vec<&str> = re.split(hay).collect();\nassert_eq!(got, vec![\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf a haystack contains multiple contiguous matches, you will end up\nwith empty spans yielded by the iterator:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"X\").unwrap();\nlet hay = \"XXXXaXXbXc\";\nlet got: Vec<&str> = re.split(hay).collect();\nassert_eq!(got, vec![\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n\nlet re = Regex::new(r\"/\").unwrap();\nlet hay = \"(///)\";\nlet got: Vec<&str> = re.split(hay).collect();\nassert_eq!(got, vec![\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a haystack are neighbored by empty\nsubstring.\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"0\").unwrap();\nlet hay = \"010\";\nlet got: Vec<&str> = re.split(hay).collect();\nassert_eq!(got, vec![\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a regex, it splits at every valid\nUTF-8 boundary by default (which includes the beginning and end of the\nhaystack):\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"\").unwrap();\nlet hay = \"rust\";\nlet got: Vec<&str> = re.split(hay).collect();\nassert_eq!(got, vec![\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n\n// Splitting by an empty string is UTF-8 aware by default!\nlet re = Regex::new(r\"\").unwrap();\nlet hay = \"☃\";\nlet got: Vec<&str> = re.split(hay).collect();\nassert_eq!(got, vec![\"\", \"☃\", \"\"]);\n```\n\nContiguous separators (commonly shows up with whitespace), can lead to\npossibly surprising behavior. For example, this code is correct:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\" \").unwrap();\nlet hay = \"    a  b c\";\nlet got: Vec<&str> = re.split(hay).collect();\nassert_eq!(got, vec![\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does *not* give you `[\"a\", \"b\", \"c\"]`. For that behavior, you'd want\nto match contiguous space characters:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\" +\").unwrap();\nlet hay = \"    a  b c\";\nlet got: Vec<&str> = re.split(hay).collect();\n// N.B. This does still include a leading empty span because ' +'\n// matches at the beginning of the haystack.\nassert_eq!(got, vec![\"\", \"a\", \"b\", \"c\"]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'r","is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3190-0:836:2715":{"id":"b:1:3190-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3190-0:1057:4226":{"id":"b:1:3190-0:1057:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:841:847":{"id":"0:841:847","crate_id":0,"name":"fmt","span":{"filename":"src/builders.rs","begin":[1371,20],"end":[1371,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[104,0],"end":[109,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:11020:133","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:166:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:949:4226":{"id":"0:949:4226","crate_id":0,"name":"ReplacerRef","span":{"filename":"src/regex/bytes.rs","begin":[2559,0],"end":[2559,49]},"visibility":"public","docs":"A by-reference adaptor for a [`Replacer`].\n\nThis permits reusing the same `Replacer` value in multiple calls to a\nreplacement routine like [`Regex::replace_all`].\n\nThis type is created by [`Replacer::by_ref`].","links":{"`Regex::replace_all`":"0:200:3618","`Replacer::by_ref`":"0:380:4225","`Replacer`":"0:376:3561"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:949:4226","a:1:3408:263-0:949:4226","a:1:3443:5223-0:949:4226","a:1:36058:4992-0:949:4226","a:1:45870:4917-0:949:4226","a:1:45871:4916-0:949:4226","b:1:2860-0:949:4226","b:1:2863-0:949:4226","b:1:3175-0:949:4226","b:1:3179-0:949:4226","b:1:3185-0:949:4226","b:1:3190-0:949:4226","b:1:4055-0:949:4226","0:954","0:414"]}}},"b:1:3190-0:1034:3760":{"id":"b:1:3190-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1087:847":{"id":"0:1087:847","crate_id":0,"name":"fmt","span":{"filename":"src/regexset/bytes.rs","begin":[462,16],"end":[462,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:144:847":{"id":"0:144:847","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[69,4],"end":[78,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:301:211":{"id":"0:301:211","crate_id":0,"name":"Output","span":{"filename":"src/regex/bytes.rs","begin":[2016,4],"end":[2016,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"slice":{"primitive":"u8"}}}}},"b:1:3185-0:1115:4744":{"id":"b:1:3185-0:1115:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:498:359":{"id":"0:498:359","crate_id":0,"name":"as_str","span":{"filename":"src/regex/string.rs","begin":[1275,4],"end":[1277,5]},"visibility":"public","docs":"Returns the original string of this regex.\n\n# Example\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"foo\\w+bar\").unwrap();\nassert_eq!(re.as_str(), r\"foo\\w+bar\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1106":{"id":"0:1106","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:1107:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:806:4157":{"id":"0:806:4157","crate_id":0,"name":"size_hint","span":{"filename":"src/regexset/string.rs","begin":[689,4],"end":[691,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}}]},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:307":{"id":"0:307","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2074,0],"end":[2146,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:308:3638","0:310:1062"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2863-0:1066:4239":{"id":"b:1:2863-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3190-0:1103:2691":{"id":"b:1:3190-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:409:3627":{"id":"0:409:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/bytes.rs","begin":[2537,4],"end":[2539,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36000:251-0:830:3015":{"id":"a:1:36000:251-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3190-0:1115:4744":{"id":"b:1:3190-0:1115:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:224:359":{"id":"0:224:359","crate_id":0,"name":"as_str","span":{"filename":"src/regex/bytes.rs","begin":[1276,4],"end":[1278,5]},"visibility":"public","docs":"Returns the original string of this regex.\n\n# Example\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"foo\\w+bar\").unwrap();\nassert_eq!(re.as_str(), r\"foo\\w+bar\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:45870:4917-0:991:3722":{"id":"a:1:45870:4917-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:713:3861":{"id":"0:713:3861","crate_id":0,"name":"is_empty","span":{"filename":"src/regexset/bytes.rs","begin":[415,4],"end":[417,5]},"visibility":"public","docs":"Returns `true` if this set contains no regexes.\n\n# Example\n\n```\nuse regex::bytes::RegexSet;\n\nassert!(RegexSet::empty().is_empty());\nassert!(!RegexSet::new([r\"[0-9]\"]).unwrap().is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2918-0:926:3760":{"id":"b:1:2918-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:826":{"id":"0:826","crate_id":0,"name":null,"span":{"filename":"src/builders.rs","begin":[211,13],"end":[211,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:827:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:4:816-0:836:2715":{"id":"b:4:816-0:836:2715","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:8587:185":{"id":"1:8587:185","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}},"0:188:3404":{"id":"0:188:3404","crate_id":0,"name":"captures_iter","span":{"filename":"src/regex/bytes.rs","begin":[420,4],"end":[425,5]},"visibility":"public","docs":"Returns an iterator that yields successive non-overlapping matches in\nthe given haystack. The iterator yields values of type [`Captures`].\n\nThis is the same as [`Regex::find_iter`], but instead of only providing\naccess to the overall match, each value yield includes access to the\nmatches of all capture groups in the regex. Reporting this extra match\ndata is potentially costly, so callers should only use `captures_iter`\nover `find_iter` when they actually need access to the capture group\nmatches.\n\n# Time complexity\n\nNote that since `captures_iter` runs potentially many searches on the\nhaystack and since each search has worst case `O(m * n)` time\ncomplexity, the overall worst case time complexity for iteration is\n`O(m * n^2)`.\n\n# Example\n\nWe can use this to find all movie titles and their release years in\nsome haystack, where the movie is formatted like \"'Title' (xxxx)\":\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();\nlet hay = b\"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";\nlet mut movies = vec![];\nfor (_, [title, year]) in re.captures_iter(hay).map(|c| c.extract()) {\n    // OK because [0-9]{4} can only match valid UTF-8.\n    let year = std::str::from_utf8(year).unwrap();\n    movies.push((title, year.parse::<i64>()?));\n}\nassert_eq!(movies, vec![\n    (&b\"Citizen Kane\"[..], 1941),\n    (&b\"The Wizard of Oz\"[..], 1939),\n    (&b\"M\"[..], 1931),\n]);\n# Ok::<(), Box<dyn std::error::Error>>(())\n```\n\nOr with named groups:\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>[0-9]{4})\\)\").unwrap();\nlet hay = b\"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";\nlet mut it = re.captures_iter(hay);\n\nlet caps = it.next().unwrap();\nassert_eq!(&caps[\"title\"], b\"Citizen Kane\");\nassert_eq!(&caps[\"year\"], b\"1941\");\n\nlet caps = it.next().unwrap();\nassert_eq!(&caps[\"title\"], b\"The Wizard of Oz\");\nassert_eq!(&caps[\"year\"], b\"1939\");\n\nlet caps = it.next().unwrap();\nassert_eq!(&caps[\"title\"], b\"M\");\nassert_eq!(&caps[\"year\"], b\"1931\");\n```","links":{"`Regex::find_iter`":"0:183:3315","`Captures`":"0:249:3373"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'r","is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36000:251-0:1034:3760":{"id":"a:1:36000:251-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:126:2706":{"id":"0:126:2706","crate_id":0,"name":"size_limit","span":{"filename":"src/builders.rs","begin":[2447,8],"end":[2450,9]},"visibility":"public","docs":"Sets the approximate size limit, in bytes, of the compiled regex.\n\nThis roughly corresponds to the number of heap memory, in\nbytes, occupied by a single regex. If the regex would otherwise\napproximately exceed this limit, then compiling that regex will\nfail.\n\nThe main utility of a method like this is to avoid compiling\nregexes that use an unexpected amount of resources, such as\ntime and memory. Even if the memory usage of a large regex is\nacceptable, its search time may not be. Namely, worst case time\ncomplexity for search is `O(m * n)`, where `m ~ len(pattern)` and\n`n ~ len(haystack)`. That is, search time depends, in part, on the\nsize of the compiled regex. This means that putting a limit on the\nsize of the regex limits how much a regex can impact search time.\n\nFor more information about regex size limits, see the section on\n[untrusted inputs](crate#untrusted-input) in the top-level crate\ndocumentation.\n\nThe default for this is some reasonable number that permits most\npatterns to compile successfully.\n\n# Example\n\n```\n# if !cfg!(target_pointer_width = \"64\") { return; } // see #1041\nuse regex::bytes::RegexSetBuilder;\n\n// It may surprise you how big some seemingly small patterns can\n// be! Since \\w is Unicode aware, this generates a regex that can\n// match approximately 140,000 distinct codepoints.\nassert!(\n    RegexSetBuilder::new([r\"\\w\"])\n        .size_limit(45_000)\n        .build()\n        .is_err()\n);\n```","links":{"crate#untrusted-input":"0:0:2522"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["bytes",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3443:5223-0:1044:4044":{"id":"a:1:3443:5223-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:633":{"id":"0:633","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2374,0],"end":[2393,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["size_hint","eq_by","cycle","try_find","try_fold","le","inspect","take","map_while","max_by","intersperse_with","lt","advance_by","by_ref","is_sorted","array_chunks","enumerate","rposition","try_for_each","eq","try_collect","max_by_key","scan","for_each","nth","is_sorted_by","sum","rev","peekable","fold","position","collect_into","collect","flat_map","min","filter","partial_cmp","step_by","ge","is_sorted_by_key","product","unzip","reduce","count","partition","flatten","min_by","filter_map","gt","chain","cmp","skip","__iterator_get_unchecked","cmp_by","copied","try_reduce","partition_in_place","map","map_windows","find","skip_while","min_by_key","zip","next_chunk","all","partial_cmp_by","cloned","find_map","is_partitioned","fuse","max","take_while","any","intersperse","ne","last"],"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:636:185","0:637:1264","0:640:4157","0:641:613"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2863-0:936:4044":{"id":"b:1:2863-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36058:4992-0:1007:3405":{"id":"a:1:36058:4992-0:1007:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:120:2699":{"id":"0:120:2699","crate_id":0,"name":"dot_matches_new_line","span":{"filename":"src/builders.rs","begin":[2162,8],"end":[2168,9]},"visibility":"public","docs":"This configures dot-matches-new-line mode for the entire pattern.\n\nPerhaps surprisingly, the default behavior for `.` is not to match\nany character, but rather, to match any character except for the\nline terminator (which is `\\n` by default). When this mode is\nenabled, the behavior changes such that `.` truly matches any\ncharacter.\n\nThis setting can also be configured using the inline flag `s` in\nthe pattern. For example, `(?s:.)` and `\\p{any}` are equivalent\nregexes.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::bytes::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\"foo.bar\"])\n    .dot_matches_new_line(true)\n    .build()\n    .unwrap();\nlet hay = b\"foo\\nbar\";\nassert!(re.is_match(hay));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3190-0:908:3463":{"id":"b:1:3190-0:908:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:36058:4992-0:249:3373":{"id":"a:1:36058:4992-0:249:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:504":{"id":"0:504","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[1496,0],"end":[1567,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:506:1813","0:507:733","0:508:3861","0:509:1062","0:510:3865","0:511:359"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3179-0:936:4044":{"id":"b:1:3179-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:368:4157":{"id":"0:368:4157","crate_id":0,"name":"size_hint","span":{"filename":"src/regex/bytes.rs","begin":[2377,4],"end":[2379,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}}]},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:418:3627":{"id":"0:418:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/bytes.rs","begin":[2566,4],"end":[2568,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'r","is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3175-0:842:3015":{"id":"b:1:3175-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:828":{"id":"0:828","crate_id":0,"name":null,"span":{"filename":"src/builders.rs","begin":[211,20],"end":[211,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:829:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3190-0:249:3373":{"id":"b:1:3190-0:249:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2863-0:830:3015":{"id":"b:1:2863-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3443:5223-0:883:3722":{"id":"a:1:3443:5223-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:3443:5223-0:917:3491":{"id":"a:1:3443:5223-0:917:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2863-0:998:3317":{"id":"b:1:2863-0:998:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3443:5223-0:1025:3491":{"id":"a:1:3443:5223-0:1025:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:1075:847":{"id":"0:1075:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/string.rs","begin":[2577,16],"end":[2577,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:4055-0:842:3015":{"id":"b:1:4055-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:454:3282":{"id":"0:454:3282","crate_id":0,"name":"is_match","span":{"filename":"src/regex/string.rs","begin":[204,4],"end":[206,5]},"visibility":"public","docs":"Returns true if and only if there is a match for the regex anywhere\nin the haystack given.\n\nIt is recommended to use this method if all you need to do is test\nwhether a match exists, since the underlying matching engine may be\nable to do less work.\n\n# Example\n\nTest if some haystack contains at least one word with exactly 13\nUnicode word characters:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();\nlet hay = \"I categorically deny having triskaidekaphobia.\";\nassert!(re.is_match(hay));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1085:508":{"id":"0:1085:508","crate_id":0,"name":"clone","span":{"filename":"src/regexset/bytes.rs","begin":[462,9],"end":[462,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3190-0:842:3015":{"id":"b:1:3190-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2532,0],"end":[2540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:376:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"alloc::borrow::Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}}}},"items":["0:408:3639","0:409:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:129:2524":{"id":"0:129:2524","crate_id":0,"name":"bytes","span":{"filename":"src/bytes.rs","begin":[1,0],"end":[91,73]},"visibility":"public","docs":"Search for regex matches in `&[u8]` haystacks.\n\nThis module provides a nearly identical API via [`Regex`] to the one found in\nthe top-level of this crate. There are two important differences:\n\n1. Matching is done on `&[u8]` instead of `&str`. Additionally, `Vec<u8>`\nis used where `String` would have been used in the top-level API.\n2. Unicode support can be disabled even when disabling it would result in\nmatching invalid UTF-8 bytes.\n\n# Example: match null terminated string\n\nThis shows how to find all null-terminated strings in a slice of bytes. This\nworks even if a C string contains invalid UTF-8.\n\n```rust\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"(?-u)(?<cstr>[^\\x00]+)\\x00\").unwrap();\nlet hay = b\"foo\\x00qu\\xFFux\\x00baz\\x00\";\n\n// Extract all of the strings without the NUL terminator from each match.\n// The unwrap is OK here since a match requires the `cstr` capture to match.\nlet cstrs: Vec<&[u8]> =\n    re.captures_iter(hay)\n      .map(|c| c.name(\"cstr\").unwrap().as_bytes())\n      .collect();\nassert_eq!(cstrs, vec![&b\"foo\"[..], &b\"qu\\xFFux\"[..], &b\"baz\"[..]]);\n```\n\n# Example: selectively enable Unicode support\n\nThis shows how to match an arbitrary byte pattern followed by a UTF-8 encoded\nstring (e.g., to extract a title from a Matroska file):\n\n```rust\nuse regex::bytes::Regex;\n\nlet re = Regex::new(\n    r\"(?-u)\\x7b\\xa9(?:[\\x80-\\xfe]|[\\x40-\\xff].)(?u:(.*))\"\n).unwrap();\nlet hay = b\"\\x12\\xd0\\x3b\\x5f\\x7b\\xa9\\x85\\xe2\\x98\\x83\\x80\\x98\\x54\\x76\\x68\\x65\";\n\n// Notice that despite the `.*` at the end, it will only match valid UTF-8\n// because Unicode mode was enabled with the `u` flag. Without the `u` flag,\n// the `.*` would match the rest of the bytes regardless of whether they were\n// valid UTF-8.\nlet (_, [title]) = re.captures(hay).unwrap().extract();\nassert_eq!(title, b\"\\xE2\\x98\\x83\");\n// We can UTF-8 decode the title now. And the unwrap here\n// is correct because the existence of a match guarantees\n// that `title` is valid UTF-8.\nlet title = std::str::from_utf8(title).unwrap();\nassert_eq!(title, \"☃\");\n```\n\nIn general, if the Unicode flag is enabled in a capture group and that capture\nis part of the overall match, then the capture is *guaranteed* to be valid\nUTF-8.\n\n# Syntax\n\nThe supported syntax is pretty much the same as the syntax for Unicode\nregular expressions with a few changes that make sense for matching arbitrary\nbytes:\n\n1. The `u` flag can be disabled even when disabling it might cause the regex to\nmatch invalid UTF-8. When the `u` flag is disabled, the regex is said to be in\n\"ASCII compatible\" mode.\n2. In ASCII compatible mode, Unicode character classes are not allowed. Literal\nUnicode scalar values outside of character classes are allowed.\n3. In ASCII compatible mode, Perl character classes (`\\w`, `\\d` and `\\s`)\nrevert to their typical ASCII definition. `\\w` maps to `[[:word:]]`, `\\d` maps\nto `[[:digit:]]` and `\\s` maps to `[[:space:]]`.\n4. In ASCII compatible mode, word boundaries use the ASCII compatible `\\w` to\ndetermine whether a byte is a word byte or not.\n5. Hexadecimal notation can be used to specify arbitrary bytes instead of\nUnicode codepoints. For example, in ASCII compatible mode, `\\xFF` matches the\nliteral byte `\\xFF`, while in Unicode mode, `\\xFF` is the Unicode codepoint\n`U+00FF` that matches its UTF-8 encoding of `\\xC3\\xBF`. Similarly for octal\nnotation when enabled.\n6. In ASCII compatible mode, `.` matches any *byte* except for `\\n`. When the\n`s` flag is additionally enabled, `.` matches any byte.\n\n# Performance\n\nIn general, one should expect performance on `&[u8]` to be roughly similar to\nperformance on `&str`.","links":{"`Regex`":"0:860:2681"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:131-0:90:2524","0:132-0:151:2524","0:133-0:689:2524"],"is_stripped":false}}},"b:1:2918-0:1044:4044":{"id":"b:1:2918-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:898:847":{"id":"0:898:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/bytes.rs","begin":[2163,9],"end":[2163,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:344:185":{"id":"0:344:185","crate_id":0,"name":"Item","span":{"filename":"src/regex/bytes.rs","begin":[2293,4],"end":[2293,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}}}},"0:444:149":{"id":"0:444:149","crate_id":0,"name":"Err","span":{"filename":"src/regex/string.rs","begin":[121,4],"end":[121,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"a:1:36058:4992-0:883:3722":{"id":"a:1:36058:4992-0:883:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:3408:263-0:1057:4226":{"id":"a:1:3408:263-0:1057:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:4055-0:1044:4044":{"id":"b:1:4055-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1062":{"id":"0:1062","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2545,9],"end":[2545,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["0:1065:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:45870:4917-0:860:2681":{"id":"a:1:45870:4917-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:1129:847":{"id":"0:1129:847","crate_id":0,"name":"fmt","span":{"filename":"src/regexset/string.rs","begin":[679,16],"end":[679,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:735":{"id":"0:735","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[660,0],"end":[669,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8656:134","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:736:4752"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:36000:251-0:865:3298":{"id":"a:1:36000:251-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:4:816-0:865:3298":{"id":"b:4:816-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["4:818:3636","4:819:31190","4:820:31191"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4055-0:991:3722":{"id":"b:1:4055-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1118":{"id":"0:1118","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[633,9],"end":[633,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:1119:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:36000:251-0:1025:3491":{"id":"a:1:36000:251-0:1025:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3185-0:842:3015":{"id":"b:1:3185-0:842:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:845:508":{"id":"0:845:508","crate_id":0,"name":"clone","span":{"filename":"src/builders.rs","begin":[1965,13],"end":[1965,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:994":{"id":"0:994","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2071,9],"end":[2071,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:995:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2918-0:1066:4239":{"id":"b:1:2918-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1012":{"id":"0:1012","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2215,9],"end":[2215,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:1015:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:652:4225":{"id":"0:652:4225","crate_id":0,"name":"by_ref","span":{"filename":"src/regex/string.rs","begin":[2474,4],"end":[2476,5]},"visibility":"default","docs":"Returns a type that implements `Replacer`, but that borrows and wraps\nthis `Replacer`.\n\nThis is useful when you want to take a generic `Replacer` (which might\nnot be cloneable) and use it without consuming it, so it can be used\nmore than once.\n\n# Example\n\n```\nuse regex::{Regex, Replacer};\n\nfn replace_all_twice<R: Replacer>(\n    re: Regex,\n    src: &str,\n    mut rep: R,\n) -> String {\n    let dst = re.replace_all(src, rep.by_ref());\n    let dst = re.replace_all(&dst, rep.by_ref());\n    dst.into_owned()\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'r","is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:170:149":{"id":"0:170:149","crate_id":0,"name":"Err","span":{"filename":"src/regex/bytes.rs","begin":[119,4],"end":[119,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"a:1:36000:251-0:1076:2691":{"id":"a:1:36000:251-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:722":{"id":"0:722","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[591,0],"end":[599,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:723:4743","0:724:185","0:725:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:248:878":{"id":"0:248:878","crate_id":0,"name":"from","span":{"filename":"src/regex/bytes.rs","begin":[1576,4],"end":[1578,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["m",{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}]],"output":{"resolved_path":{"name":"core::ops::Range","id":"1:43364:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:298":{"id":"0:298","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2015,0],"end":[2023,1]},"visibility":"default","docs":"Get a matching capture group's haystack substring by name.\n\nThe haystack substring returned can't outlive the `Captures` object if this\nmethod is used, because of how `Index` is defined (normally `a[i]` is part\nof `a` and can't outlive it). To work around this limitation, do that, use\n[`Captures::name`] instead.\n\n`'h` is the lifetime of the matched haystack, but the lifetime of the\n`&str` returned by this implementation is the lifetime of the `Captures`\nvalue itself.\n\n`'n` is the lifetime of the group name used to index the `Captures` value.\n\n# Panics\n\nIf there is no matching group at the given name.","links":{"`Captures::name`":"0:258:1223"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:43332:4078","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'n","is_mutable":false,"type":{"primitive":"str"}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:301:211","0:302:1000"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2860-0:917:3491":{"id":"b:1:2860-0:917:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2863-0:949:4226":{"id":"b:1:2863-0:949:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:500:3775":{"id":"0:500:3775","crate_id":0,"name":"captures_len","span":{"filename":"src/regex/string.rs","begin":[1356,4],"end":[1358,5]},"visibility":"public","docs":"Returns the number of captures groups in this regex.\n\nThis includes all named and unnamed groups, including the implicit\nunnamed group that is always present and corresponds to the entire\nmatch.\n\nSince the implicit unnamed group is always included in this length, the\nlength returned is guaranteed to be greater than zero.\n\n# Example\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"foo\").unwrap();\nassert_eq!(1, re.captures_len());\n\nlet re = Regex::new(r\"(foo)\").unwrap();\nassert_eq!(2, re.captures_len());\n\nlet re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();\nassert_eq!(5, re.captures_len());\n\nlet re = Regex::new(r\"[a&&b]\").unwrap();\nassert_eq!(1, re.captures_len());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:442:847":{"id":"0:442:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/string.rs","begin":[115,4],"end":[117,5]},"visibility":"default","docs":"Shows the original regular expression.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2863-0:1016:3463":{"id":"b:1:2863-0:1016:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:1016:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:111:2709":{"id":"0:111:2709","crate_id":0,"name":"nest_limit","span":{"filename":"src/builders.rs","begin":[1953,8],"end":[1956,9]},"visibility":"public","docs":"Set the nesting limit for this parser.\n\nThe nesting limit controls how deep the abstract syntax tree is\nallowed to be. If the AST exceeds the given limit (e.g., with too\nmany nested groups), then an error is returned by the parser.\n\nThe purpose of this limit is to act as a heuristic to prevent stack\noverflow for consumers that do structural induction on an AST using\nexplicit recursion. While this crate never does this (instead using\nconstant stack space and moving the call stack to the heap), other\ncrates may.\n\nThis limit is not checked until the entire AST is parsed.\nTherefore, if callers want to put a limit on the amount of heap\nspace used, then they should impose a limit on the length, in\nbytes, of the concrete pattern string. In particular, this is\nviable since this parser implementation will limit itself to heap\nspace proportional to the length of the pattern string. See also\nthe [untrusted inputs](crate#untrusted-input) section in the\ntop-level crate documentation for more information about this.\n\nNote that a nest limit of `0` will return a nest limit error for\nmost patterns but not all. For example, a nest limit of `0` permits\n`a` but not `ab`, since `ab` requires an explicit concatenation,\nwhich results in a nest depth of `1`. In general, a nest limit is\nnot something that manifests in an obvious way in the concrete\nsyntax, therefore, it should not be used in a granular way.\n\n# Example\n\n```\nuse regex::bytes::RegexBuilder;\n\nassert!(RegexBuilder::new(r\"a\").nest_limit(0).build().is_ok());\nassert!(RegexBuilder::new(r\"ab\").nest_limit(0).build().is_err());\n```","links":{"crate#untrusted-input":"0:0:2522"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["limit",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:836:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:90:2524":{"id":"0:90:2524","crate_id":0,"name":"bytes","span":{"filename":"src/builders.rs","begin":[1357,0],"end":[1357,20]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:836:2715","0:842:3015"],"is_stripped":true}}},"0:620":{"id":"0:620","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2314,0],"end":[2314,60]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9109:162","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:45871:4916-0:1081:4659":{"id":"a:1:45871:4916-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2860-0:860:2681":{"id":"b:1:2860-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8585-0:908:3463":{"id":"b:1:8585-0:908:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1038":{"id":"0:1038","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2326,9],"end":[2326,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["0:1040:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:1033:847":{"id":"0:1033:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/string.rs","begin":[2294,9],"end":[2294,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:3408:263-0:1044:4044":{"id":"a:1:3408:263-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:457:3315":{"id":"0:457:3315","crate_id":0,"name":"find_iter","span":{"filename":"src/regex/string.rs","begin":[264,4],"end":[266,5]},"visibility":"public","docs":"Returns an iterator that yields successive non-overlapping matches in\nthe given haystack. The iterator yields values of type [`Match`].\n\n# Time complexity\n\nNote that since `find_iter` runs potentially many searches on the\nhaystack and since each search has worst case `O(m * n)` time\ncomplexity, the overall worst case time complexity for iteration is\n`O(m * n^2)`.\n\n# Example\n\nFind every word with exactly 13 Unicode word characters:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();\nlet hay = \"Retroactively relinquishing remunerations is reprehensible.\";\nlet matches: Vec<_> = re.find_iter(hay).map(|m| m.as_str()).collect();\nassert_eq!(matches, vec![\n    \"Retroactively\",\n    \"relinquishing\",\n    \"remunerations\",\n    \"reprehensible\",\n]);\n```","links":{"`Match`":"0:973:3298"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'r","is_mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Matches","id":"0:998:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36058:4992-0:848:150":{"id":"a:1:36058:4992-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:36058:4992","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:629":{"id":"0:629","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2348,0],"end":[2348,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8711:4166","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:3443:5223-0:1057:4226":{"id":"a:1:3443:5223-0:1057:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:45871:4916-0:522:3373":{"id":"a:1:45871:4916-0:522:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:45871:4916","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36000:251-0:949:4226":{"id":"a:1:36000:251-0:949:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:990:739":{"id":"0:990:739","crate_id":0,"name":"eq","span":{"filename":"src/regex/string.rs","begin":[1489,26],"end":[1489,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36000:251-0:1115:4744":{"id":"a:1:36000:251-0:1115:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:423:3627":{"id":"0:423:3627","crate_id":0,"name":"no_expansion","span":{"filename":"src/regex/bytes.rs","begin":[2598,4],"end":[2600,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"slice":{"primitive":"u8"}}}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:8-0:52:2521":{"id":"0:8-0:52:2521","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1329,16],"end":[1329,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"crate::builders::string","name":"string","id":"0:52:2521","is_glob":true}}},"0:499:3759":{"id":"0:499:3759","crate_id":0,"name":"capture_names","span":{"filename":"src/regex/string.rs","begin":[1325,4],"end":[1327,5]},"visibility":"public","docs":"Returns an iterator over the capture names in this regex.\n\nThe iterator returned yields elements of type `Option<&str>`. That is,\nthe iterator yields values for all capture groups, even ones that are\nunnamed. The order of the groups corresponds to the order of the group's\ncorresponding opening parenthesis.\n\nThe first element of the iterator always yields the group corresponding\nto the overall match, and this group is always unnamed. Therefore, the\niterator always yields at least one group.\n\n# Example\n\nThis shows basic usage with a mix of named and unnamed capture groups:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();\nlet mut names = re.capture_names();\nassert_eq!(names.next(), Some(None));\nassert_eq!(names.next(), Some(Some(\"a\")));\nassert_eq!(names.next(), Some(Some(\"b\")));\nassert_eq!(names.next(), Some(None));\n// the '(?:.)' group is non-capturing and so doesn't appear here!\nassert_eq!(names.next(), Some(Some(\"c\")));\nassert_eq!(names.next(), None);\n```\n\nThe iterator always yields at least one element, even for regexes with\nno capture groups and even for regexes that can never match:\n\n```\nuse regex::Regex;\n\nlet re = Regex::new(r\"\").unwrap();\nlet mut names = re.capture_names();\nassert_eq!(names.next(), Some(None));\nassert_eq!(names.next(), None);\n\nlet re = Regex::new(r\"[a&&b]\").unwrap();\nlet mut names = re.capture_names();\nassert_eq!(names.next(), Some(None));\nassert_eq!(names.next(), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:954":{"id":"0:954","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2558,9],"end":[2558,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["0:957:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:450:150":{"id":"0:450:150","crate_id":0,"name":"Error","span":{"filename":"src/regex/string.rs","begin":[139,4],"end":[139,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"a:1:45870:4917-0:1076:2691":{"id":"a:1:45870:4917-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:117:2126":{"id":"0:117:2126","crate_id":0,"name":"unicode","span":{"filename":"src/builders.rs","begin":[2063,8],"end":[2066,9]},"visibility":"public","docs":"This configures Unicode mode for the all of the patterns.\n\nEnabling Unicode mode does a number of things:\n\n* Most fundamentally, it causes the fundamental atom of matching\nto be a single codepoint. When Unicode mode is disabled, it's a\nsingle byte. For example, when Unicode mode is enabled, `.` will\nmatch `💩` once, where as it will match 4 times when Unicode mode\nis disabled. (Since the UTF-8 encoding of `💩` is 4 bytes long.)\n* Case insensitive matching uses Unicode simple case folding rules.\n* Unicode character classes like `\\p{Letter}` and `\\p{Greek}` are\navailable.\n* Perl character classes are Unicode aware. That is, `\\w`, `\\s` and\n`\\d`.\n* The word boundary assertions, `\\b` and `\\B`, use the Unicode\ndefinition of a word character.\n\nNote that unlike the top-level `RegexSet` for searching `&str`,\nit is permitted to disable Unicode mode even if the resulting\npattern could match invalid UTF-8. For example, `(?-u:.)` is not\na valid pattern for a top-level `RegexSet`, but is valid for a\n`bytes::RegexSet`.\n\nFor more details on the Unicode support in this crate, see the\n[Unicode section](crate#unicode) in this crate's top-level\ndocumentation.\n\nThe default for this is `true`.\n\n# Example\n\n```\nuse regex::bytes::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\"\\w\"])\n    .unicode(false)\n    .build()\n    .unwrap();\n// Normally greek letters would be included in \\w, but since\n// Unicode mode is disabled, it only matches ASCII letters.\nassert!(!re.is_match(\"δ\".as_bytes()));\n\nlet re = RegexSetBuilder::new([r\"s\"])\n    .case_insensitive(true)\n    .unicode(false)\n    .build()\n    .unwrap();\n// Normally 'ſ' is included when searching for 's' case\n// insensitively due to Unicode's simple case folding rules. But\n// when Unicode mode is disabled, only ASCII case insensitive rules\n// are used.\nassert!(!re.is_match(\"ſ\".as_bytes()));\n```\n\nSince this builder is for constructing a\n[`bytes::RegexSet`](RegexSet), one can disable Unicode mode even if\nit would match invalid UTF-8:\n\n```\nuse regex::bytes::RegexSetBuilder;\n\nlet re = RegexSetBuilder::new([r\".\"])\n    .unicode(false)\n    .build()\n    .unwrap();\n// Normally greek letters would be included in \\w, but since\n// Unicode mode is disabled, it only matches ASCII letters.\nassert!(re.is_match(b\"\\xFF\"));\n```","links":{"crate#unicode":"0:0:2522","RegexSet":"0:1076:2691"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexSetBuilder","id":"0:842:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:404:3639":{"id":"0:404:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/bytes.rs","begin":[2523,4],"end":[2525,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Vec","id":"4:7390:282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:408:3639":{"id":"0:408:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/bytes.rs","begin":[2533,4],"end":[2535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Vec","id":"4:7390:282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:3179-0:899:3405":{"id":"b:1:3179-0:899:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:899:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2860-0:908:3463":{"id":"b:1:2860-0:908:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3190-0:1044:4044":{"id":"b:1:3190-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2860-0:848:150":{"id":"b:1:2860-0:848:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:763":{"id":"0:763","crate_id":0,"name":null,"span":{"filename":"src/regexset/string.rs","begin":[137,0],"end":[447,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:764:1249","0:767:4612","0:769:3282","0:770:3283","0:771:4658","0:772:4660","0:775:1062","0:776:3861","0:777:2676"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:4055-0:865:3298":{"id":"b:1:4055-0:865:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3443:5223-0:926:3760":{"id":"a:1:3443:5223-0:926:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:926:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3179-0:1066:4239":{"id":"b:1:3179-0:1066:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:1066:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2860-0:936:4044":{"id":"b:1:2860-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4055-0:1088:4744":{"id":"b:1:4055-0:1088:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:857":{"id":"0:857","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[7,16],"end":[7,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:36002:260","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2860-0:968:2681":{"id":"b:1:2860-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:803:185":{"id":"0:803:185","crate_id":0,"name":"Item","span":{"filename":"src/regexset/string.rs","begin":[683,4],"end":[683,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"primitive":"usize"}}}},"a:1:3443:5223-0:860:2681":{"id":"a:1:3443:5223-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:600:613":{"id":"0:600:613","crate_id":0,"name":"count","span":{"filename":"src/regex/string.rs","begin":[2235,4],"end":[2242,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:67:2703":{"id":"0:67:2703","crate_id":0,"name":"swap_greed","span":{"filename":"src/builders.rs","begin":[548,8],"end":[551,9]},"visibility":"public","docs":"This configures swap-greed mode for the entire pattern.\n\nWhen swap-greed mode is enabled, patterns like `a+` will become\nnon-greedy and patterns like `a+?` will become greedy. In other\nwords, the meanings of `a+` and `a+?` are switched.\n\nThis setting can also be configured using the inline flag `U` in\nthe pattern.\n\nThe default for this is `false`.\n\n# Example\n\n```\nuse regex::RegexBuilder;\n\nlet re = RegexBuilder::new(r\"a+\")\n    .swap_greed(true)\n    .build()\n    .unwrap();\nassert_eq!(Some(\"a\"), re.find(\"aaa\").map(|m| m.as_str()));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["yes",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:1065:847":{"id":"0:1065:847","crate_id":0,"name":"fmt","span":{"filename":"src/regex/string.rs","begin":[2545,9],"end":[2545,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/builders.rs","begin":[216,4],"end":[778,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RegexBuilder","id":"0:824:2715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:59:1249","0:60:2687","0:61:2126","0:62:2697","0:63:2698","0:64:2699","0:65:2700","0:66:2701","0:67:2703","0:68:2704","0:69:2705","0:70:2706","0:71:2708","0:72:2709"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:590:613":{"id":"0:590:613","crate_id":0,"name":"count","span":{"filename":"src/regex/string.rs","begin":[2188,4],"end":[2195,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:740:185":{"id":"0:740:185","crate_id":0,"name":"Item","span":{"filename":"src/regexset/bytes.rs","begin":[687,4],"end":[687,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"primitive":"usize"}}}},"b:1:3190-0:968:2681":{"id":"b:1:3190-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2918-0:968:2681":{"id":"b:1:2918-0:968:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3190-0:830:3015":{"id":"b:1:3190-0:830:3015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSetBuilder","id":"0:830:3015","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3185-0:522:3373":{"id":"b:1:3185-0:522:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8585-0:1034:3760":{"id":"b:1:8585-0:1034:3760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureNames","id":"0:1034:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'r"}],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:3185-0:1088:4744":{"id":"b:1:3185-0:1088:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:890:3317":{"id":"0:890:3317","crate_id":0,"name":"Matches","span":{"filename":"src/regex/bytes.rs","begin":[2164,0],"end":[2167,1]},"visibility":"public","docs":"An iterator over all non-overlapping matches in a haystack.\n\nThis iterator yields [`Match`] values. The iterator stops when no more\nmatches can be found.\n\n`'r` is the lifetime of the compiled regular expression and `'h` is the\nlifetime of the haystack.\n\nThis iterator is created by [`Regex::find_iter`].\n\n# Time complexity\n\nNote that since an iterator runs potentially many searches on the haystack\nand since each search has worst case `O(m * n)` time complexity, the\noverall worst case time complexity for iteration is `O(m * n^2)`.","links":{"`Match`":"0:865:3298","`Regex::find_iter`":"0:183:3315"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:890:3317","a:1:3408:263-0:890:3317","a:1:3443:5223-0:890:3317","a:1:36058:4992-0:890:3317","a:1:45870:4917-0:890:3317","a:1:45871:4916-0:890:3317","b:1:2860-0:890:3317","b:1:2863-0:890:3317","b:1:3175-0:890:3317","b:1:3179-0:890:3317","b:1:3185-0:890:3317","b:1:3190-0:890:3317","b:1:4055-0:890:3317","b:1:8585-0:890:3317","0:895","0:312","0:319"]}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2512,0],"end":[2520,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:376:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"alloc::vec::Vec","id":"4:7390:282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}},"items":["0:400:3639","0:401:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2863-0:1076:2691":{"id":"b:1:2863-0:1076:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1076:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4055-0:249:3373":{"id":"b:1:4055-0:249:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3175-0:1025:3491":{"id":"b:1:3175-0:1025:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:1025:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:570":{"id":"0:570","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2023,0],"end":[2031,1]},"visibility":"default","docs":"Get a matching capture group's haystack substring by name.\n\nThe haystack substring returned can't outlive the `Captures` object if this\nmethod is used, because of how `Index` is defined (normally `a[i]` is part\nof `a` and can't outlive it). To work around this limitation, do that, use\n[`Captures::name`] instead.\n\n`'h` is the lifetime of the matched haystack, but the lifetime of the\n`&str` returned by this implementation is the lifetime of the `Captures`\nvalue itself.\n\n`'n` is the lifetime of the group name used to index the `Captures` value.\n\n# Panics\n\nIf there is no matching group at the given name.","links":{"`Captures::name`":"0:531:1223"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:43332:4078","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'n","is_mutable":false,"type":{"primitive":"str"}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["0:573:211","0:574:1000"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:2860-0:249:3373":{"id":"b:1:2860-0:249:3373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:673":{"id":"0:673","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2529,0],"end":[2537,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3680:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3143:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:648:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"generic":"F"},"items":["0:676:3639"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:3190-0:1088:4744":{"id":"b:1:3190-0:1088:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1088:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:936:4044":{"id":"0:936:4044","crate_id":0,"name":"SubCaptureMatches","span":{"filename":"src/regex/bytes.rs","begin":[2361,0],"end":[2364,1]},"visibility":"public","docs":"An iterator over all group matches in a [`Captures`] value.\n\nThis iterator yields values of type `Option<Match<'h>>`, where `'h` is the\nlifetime of the haystack that the matches are for. The order of elements\nyielded corresponds to the order of the opening parenthesis for the group\nin the regex pattern. `None` is yielded for groups that did not participate\nin the match.\n\nThe first element always corresponds to the implicit group for the overall\nmatch. Since this iterator is created by a [`Captures`] value, and a\n`Captures` value is only created when a match occurs, it follows that the\nfirst element yielded by this iterator is guaranteed to be non-`None`.\n\nThe lifetime `'c` corresponds to the lifetime of the `Captures` value that\ncreated this iterator, and the lifetime `'h` corresponds to the originally\nmatched haystack.","links":{"`Captures`":"0:249:3373"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:36000:251-0:936:4044","a:1:3408:263-0:936:4044","a:1:3443:5223-0:936:4044","a:1:36058:4992-0:936:4044","a:1:45870:4917-0:936:4044","a:1:45871:4916-0:936:4044","b:1:2860-0:936:4044","b:1:2863-0:936:4044","b:1:2918-0:936:4044","b:1:3175-0:936:4044","b:1:3179-0:936:4044","b:1:3185-0:936:4044","b:1:3190-0:936:4044","b:1:4055-0:936:4044","b:1:8585-0:936:4044","b:4:816-0:936:4044","0:941","0:945","0:361","0:370","0:373"]}}},"b:1:3190-0:973:3298":{"id":"b:1:3190-0:973:3298","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Match","id":"0:973:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3193:150","1:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3443:5223-0:1081:4659":{"id":"a:1:3443:5223-0:1081:4659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:480":{"id":"0:480","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[968,0],"end":[1260,1]},"visibility":"default","docs":"A group of advanced or \"lower level\" search methods. Some methods permit\nstarting the search at a position greater than `0` in the haystack. Other\nmethods permit reusing allocations, for example, when extracting the\nmatches for capture groups.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Regex","id":"0:968:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:481:3662","0:482:3663","0:484:3283","0:485:3299","0:488:3374","0:490:3720","0:492:3723"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:45870:4917-0:908:3463":{"id":"a:1:45870:4917-0:908:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2918-0:860:2681":{"id":"b:1:2918-0:860:2681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2916:4911","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Regex","id":"0:860:2681","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:2920:31185"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:684:3639":{"id":"0:684:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/string.rs","begin":[2581,4],"end":[2583,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["_",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:522:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"String","id":"4:7976:259","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2863-0:1057:4226":{"id":"b:1:2863-0:1057:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1086":{"id":"0:1086","crate_id":0,"name":null,"span":{"filename":"src/regexset/bytes.rs","begin":[462,16],"end":[462,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatches","id":"0:1081:4659","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:1087:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:1:8585-0:1115:4744":{"id":"b:1:8585-0:1115:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8763:190","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8581:177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:8587:185","1:8588:4743","1:8589:1017"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2863-0:958:4239":{"id":"b:1:2863-0:958:4239","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"NoExpand","id":"0:958:4239","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:228:3807":{"id":"0:228:3807","crate_id":0,"name":"capture_locations","span":{"filename":"src/regex/bytes.rs","begin":[1419,4],"end":[1421,5]},"visibility":"public","docs":"Returns a fresh allocated set of capture locations that can\nbe reused in multiple calls to [`Regex::captures_read`] or\n[`Regex::captures_read_at`].\n\n# Example\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"(.)(.)(\\w+)\").unwrap();\nlet mut locs = re.capture_locations();\nassert!(re.captures_read(&mut locs, b\"Padron\").is_some());\nassert_eq!(locs.get(0), Some((0, 6)));\nassert_eq!(locs.get(1), Some((0, 1)));\nassert_eq!(locs.get(2), Some((1, 2)));\nassert_eq!(locs.get(3), Some((2, 6)));\n```","links":{"`Regex::captures_read`":"0:216:3720","`Regex::captures_read_at`":"0:218:3723"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:382":{"id":"0:382","crate_id":0,"name":null,"span":{"filename":"src/regex/bytes.rs","begin":[2472,0],"end":[2480,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:376:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"N"}}}},"items":["0:385:3639","0:386:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:1:3443:5223-0:1007:3405":{"id":"a:1:3443:5223-0:1007:3405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'r","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3443:5223","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureMatches","id":"0:1007:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:665":{"id":"0:665","crate_id":0,"name":null,"span":{"filename":"src/regex/string.rs","begin":[2509,0],"end":[2517,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","no_expansion"],"trait":{"name":"Replacer","id":"0:648:3561","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"alloc::borrow::Cow","id":"4:821:122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"constraints":[]}}}},"items":["0:667:3639","0:668:3627"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:400:3639":{"id":"0:400:3639","crate_id":0,"name":"replace_append","span":{"filename":"src/regex/bytes.rs","begin":[2513,4],"end":[2515,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["caps",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Captures","id":"0:249:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Vec","id":"4:7390:282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:1:36000:251-0:936:4044":{"id":"a:1:36000:251-0:936:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'c","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:936:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:1:36000:251-0:991:3722":{"id":"a:1:36000:251-0:991:3722","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"CaptureLocations","id":"0:991:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:2860-0:1044:4044":{"id":"b:1:2860-0:1044:4044","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SubCaptureMatches","id":"0:1044:4044","args":{"angle_bracketed":{"args":[{"lifetime":"'c"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2862:3179"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:830:3015":{"id":"0:830:3015","crate_id":0,"name":"RegexSetBuilder","span":{"filename":"src/builders.rs","begin":[787,4],"end":[789,5]},"visibility":"public","docs":"A configurable builder for a [`RegexSet`].\n\nThis builder can be used to programmatically set flags such as\n`i` (case insensitive) and `x` (for verbose mode). This builder\ncan also be used to configure things like the line terminator\nand a size limit on the compiled regular expression.","links":{"`RegexSet`":"0:1103:2691"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:73","a:1:36000:251-0:830:3015","a:1:3408:263-0:830:3015","a:1:3443:5223-0:830:3015","a:1:36058:4992-0:830:3015","a:1:45870:4917-0:830:3015","a:1:45871:4916-0:830:3015","b:1:2860-0:830:3015","b:1:2863-0:830:3015","b:1:2918-0:830:3015","b:1:3175-0:830:3015","b:1:3179-0:830:3015","b:1:3185-0:830:3015","b:1:3190-0:830:3015","b:1:4055-0:830:3015","b:4:816-0:830:3015","0:832","0:834"]}}},"a:1:45870:4917-0:1057:4226":{"id":"a:1:45870:4917-0:1057:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:1057:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"b:1:3175-0:908:3463":{"id":"b:1:3175-0:908:3463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Split","id":"0:908:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:218:3723":{"id":"0:218:3723","crate_id":0,"name":"captures_read_at","span":{"filename":"src/regex/bytes.rs","begin":[1235,4],"end":[1244,5]},"visibility":"public","docs":"Returns the same as [`Regex::captures_read`], but starts the search at\nthe given offset.\n\nThe significance of the starting point is that it takes the surrounding\ncontext into consideration. For example, the `\\A` anchor can only\nmatch when `start == 0`.\n\n# Panics\n\nThis panics when `start >= haystack.len() + 1`.\n\n# Example\n\nThis example shows the significance of `start` by demonstrating how it\ncan be used to permit look-around assertions in a regex to take the\nsurrounding context into account.\n\n```\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"\\bchew\\b\").unwrap();\nlet hay = b\"eschew\";\nlet mut locs = re.capture_locations();\n// We get a match here, but it's probably not intended.\nassert!(re.captures_read(&mut locs, &hay[2..]).is_some());\n// No match because the  assertions take the context into account.\nassert!(re.captures_read_at(&mut locs, hay, 2).is_none());\n```","links":{"`Regex::captures_read`":"0:216:3720"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["locs",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"CaptureLocations","id":"0:883:3722","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["start",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Match","id":"0:865:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:1:2863-0:917:3491":{"id":"b:1:2863-0:917:3491","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SplitN","id":"0:917:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'r"},{"lifetime":"'h"}],"constraints":[]}}}},"items":["1:2865:31184"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1108:4659":{"id":"0:1108:4659","crate_id":0,"name":"SetMatches","span":{"filename":"src/regexset/string.rs","begin":[459,0],"end":[459,34]},"visibility":"public","docs":"A set of matches returned by a regex set.\n\nValues of this type are constructed by [`RegexSet::matches`].","links":{"`RegexSet::matches`":"0:771:4658"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:780","a:1:36000:251-0:1108:4659","a:1:3408:263-0:1108:4659","a:1:3443:5223-0:1108:4659","a:1:36058:4992-0:1108:4659","a:1:45870:4917-0:1108:4659","a:1:45871:4916-0:1108:4659","b:1:2860-0:1108:4659","b:1:2863-0:1108:4659","b:1:2918-0:1108:4659","b:1:3175-0:1108:4659","b:1:3179-0:1108:4659","b:1:3185-0:1108:4659","b:1:3190-0:1108:4659","b:1:4055-0:1108:4659","b:4:816-0:1108:4659","0:1111","0:1113","0:785","0:789"]}}},"b:1:3175-0:1103:2691":{"id":"b:1:3175-0:1103:2691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"RegexSet","id":"0:1103:2691","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3178:5378"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3188:150":{"id":"1:3188:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}}},"0:173:150":{"id":"0:173:150","crate_id":0,"name":"Error","span":{"filename":"src/regex/bytes.rs","begin":[128,4],"end":[128,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Error","id":"0:848:150","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"b:1:3179-0:1115:4744":{"id":"b:1:3179-0:1115:4744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIntoIter","id":"0:1115:4744","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["1:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:45870:4917-0:1120:4742":{"id":"a:1:45870:4917-0:1120:4742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:45870:4917","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"SetMatchesIter","id":"0:1120:4742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:1:3185-0:949:4226":{"id":"b:1:3185-0:949:4226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"ReplacerRef","id":"0:949:4226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"R"}}],"constraints":[]}}}},"items":["1:3188:150","1:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"6:7446:9546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:6774:2050":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"6:6709:9408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:14679:7390":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:14857:7430":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:4620:283":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"21:2157:6489":{"crate_id":21,"path":["regex_syntax","ast","Literal"],"kind":"struct"},"20:4497:4972":{"crate_id":20,"path":["regex_automata","nfa","thompson","nfa","Transition"],"kind":"struct"},"20:4228:2668":{"crate_id":20,"path":["regex_automata","nfa","thompson","compiler","Config"],"kind":"struct"},"1:47669:10209":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12667:7114":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:1159:35250":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4976:8935":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:16132:7772":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:1543:8717":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:51051:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:10603:26847":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:45702:10174":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:12361:10897":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:48826:10247":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:14466:5636":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"22:2492:6472":{"crate_id":22,"path":["aho_corasick","util","primitives","StateID"],"kind":"struct"},"2:756:9852":{"crate_id":2,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"22:2169:6432":{"crate_id":22,"path":["aho_corasick","packed","teddy","generic","FatMaskBuilder"],"kind":"struct"},"5:4341:19692":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"20:3539:4972":{"crate_id":20,"path":["regex_automata","dfa","onepass","Transition"],"kind":"struct"},"1:3660:4915":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"6:6527:9314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:16382:7863":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:11545:38579":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:6771:9427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:14052:7259":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:12852:775":{"crate_id":5,"path":["std","f128"],"kind":"primitive"},"6:6420:9262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:48450:5766":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"22:2245:9872":{"crate_id":22,"path":["aho_corasick","util","buffer","Buffer"],"kind":"struct"},"6:1688:8816":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"20:4963:6670":{"crate_id":20,"path":["regex_automata","util","look","Look"],"kind":"enum"},"20:4177:4971":{"crate_id":20,"path":["regex_automata","nfa","thompson","builder","State"],"kind":"enum"},"1:44134:10131":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:706:5738":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:50025:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:14259:7308":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:48246:10226":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:9396:9765":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6366:8139":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11921:10572":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"11:440:12139":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:50282:10269":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:48351:10230":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:4614:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"22:1841:2659":{"crate_id":22,"path":["aho_corasick","packed","api","MatchKind"],"kind":"enum"},"1:44434:5619":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"20:4519:2668":{"crate_id":20,"path":["regex_automata","nfa","thompson","pikevm","Config"],"kind":"struct"},"17:13328:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"20:4442:4971":{"crate_id":20,"path":["regex_automata","nfa","thompson","nfa","State"],"kind":"enum"},"11:706:10706":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"22:2418:6466":{"crate_id":22,"path":["aho_corasick","util","prefilter","StartBytesTwo"],"kind":"struct"},"17:10845:7013":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:14652:7087":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:48579:5732":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:49904:10255":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:44582:5624":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:46283:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"22:1953:5738":{"crate_id":22,"path":["aho_corasick","packed","teddy","builder","Searcher"],"kind":"struct"},"1:11022:5437":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:46058:225":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"5:12844:1791":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"6:590:8689":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:12853:10613":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13004:7140":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"22:1675:10402":{"crate_id":22,"path":["aho_corasick","automaton","StreamFindIter"],"kind":"struct"},"17:13071:7147":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:6639:9378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:6571:8173":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:1586:168":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"21:2971:5374":{"crate_id":21,"path":["regex_syntax","hir","Hir"],"kind":"struct"},"1:37312:5794":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:7728:5181":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:5982:9442":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"1:2364:201":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"20:5219:3181":{"crate_id":20,"path":["regex_automata","util","primitives","PatternID"],"kind":"struct"},"22:1749:4971":{"crate_id":22,"path":["aho_corasick","nfa","contiguous","State"],"kind":"struct"},"21:3024:6669":{"crate_id":21,"path":["regex_syntax","hir","Class"],"kind":"enum"},"5:9741:9779":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"20:5105:5708":{"crate_id":20,"path":["regex_automata","util","prefilter","memchr","Memchr3"],"kind":"struct"},"20:3480:2668":{"crate_id":20,"path":["regex_automata","dfa","onepass","Config"],"kind":"struct"},"5:9649:9777":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:25213:19648":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:14524:7366":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:51777:10327":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13050:7145":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:14494:7363":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5376:9078":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:46663:5440":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"20:4542:4143":{"crate_id":20,"path":["regex_automata","nfa","thompson","pikevm","FindMatches"],"kind":"struct"},"16:6950:8203":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:25881:19326":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:5677:9228":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:1498:8695":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:16909:7992":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"22:2742:4962":{"crate_id":22,"path":["aho_corasick","util","search","Anchored"],"kind":"enum"},"6:6412:9260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:49985:10258":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:4239:8071":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:16694:7232":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:4915:8907":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:3149:175":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:7429:9541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:4637:12473":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"21:3311:5864":{"crate_id":21,"path":["regex_syntax","unicode","UnicodeWordError"],"kind":"struct"},"4:6889:4877":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:15558:7619":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"20:4743:10412":{"crate_id":20,"path":["regex_automata","util","alphabet","ByteClassElementRanges"],"kind":"struct"},"1:44308:10141":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:8623:8420":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:2397:26908":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:14915:7443":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:12914:10900":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"4:5683:35250":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:16396:7865":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:34413:31424":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:15758:7679":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6444:9278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13095:7149":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:9374:10822":{"crate_id":5,"path":["std","pipe","PipeWriter"],"kind":"struct"},"1:46642:5438":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:10211:26834":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"4:3984:9676":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:51715:10324":{"crate_id":1,"path":["core","core_arch","x86","__m128h"],"kind":"struct"},"16:6623:8179":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:8267:9654":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:5604:9192":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:10035:218":{"crate_id":1,"path":["core","pin","PinCoerceUnsized"],"kind":"trait"},"5:8427:6945":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"1:47658:10919":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:7518:8296":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:14892:7442":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:11746:7034":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"20:4049:10493":{"crate_id":20,"path":["regex_automata","meta","wrappers","Hybrid"],"kind":"struct"},"6:8031:9649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:14454:7355":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:796:4877":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:4150:8069":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"23:1237:6305":{"crate_id":23,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"1:9157:34487":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:7386:19773":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:1740:6600":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:11142:40730":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"20:5664:4503":{"crate_id":20,"path":["regex_automata","util","search","PatternSetIter"],"kind":"struct"},"16:6171:8110":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"20:5580:6868":{"crate_id":20,"path":["regex_automata","util","determinize","state","StateBuilderMatches"],"kind":"struct"},"17:16076:7760":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:9119:5470":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"17:11708:6989":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13656:7145":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:11024:5438":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:25943:19648":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:46921:6629":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"22:2160:6431":{"crate_id":22,"path":["aho_corasick","packed","teddy","generic","SlimMaskBuilder"],"kind":"struct"},"17:15942:7724":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:3893:5817":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"20:3844:10480":{"crate_id":20,"path":["regex_automata","meta","error","RetryQuadraticError"],"kind":"struct"},"1:47212:10205":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:14588:10908":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:1511:8701":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:2621:19646":{"crate_id":5,"path":["std","fs","exists"],"kind":"function"},"5:11286:38578":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11191:40731":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"21:1961:19678":{"crate_id":21,"path":["regex_syntax","ast","ErrorKind"],"kind":"enum"},"1:50579:10280":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"20:4726:10505":{"crate_id":20,"path":["regex_automata","util","alphabet","ByteClassRepresentatives"],"kind":"struct"},"17:11348:26863":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:5594:9187":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:1079:10711":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:26452:9915":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:7041:8047":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:698:10730":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"20:3908:3491":{"crate_id":20,"path":["regex_automata","meta","regex","SplitN"],"kind":"struct"},"16:7551:26781":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:3701:10862":{"crate_id":4,"path":["alloc","collections","btree","set","CursorMut"],"kind":"struct"},"4:3128:35467":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:26341:9900":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"11:2226:8531":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:2618:8021":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:12415:9817":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"6:5236:9021":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:3227:127":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"21:2429:6594":{"crate_id":21,"path":["regex_syntax","ast","ClassSetRange"],"kind":"struct"},"5:11250:152":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:26710:9933":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:12321:7071":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"21:2835:10433":{"crate_id":21,"path":["regex_syntax","hir","literal","PreferenceTrie"],"kind":"struct"},"16:6656:10648":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:14465:7358":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"18:754:6345":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"11:0:4863":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:48850:10925":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:15692:7662":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:46134:4743":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:26472:9919":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:14940:7447":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:5026:8961":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:5063:8980":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:7459:10668":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"20:5345:6473":{"crate_id":20,"path":["regex_automata","util","primitives","WithPatternIDIter"],"kind":"struct"},"18:598:31177":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:9557:10825":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:44220:12497":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"4:41:4945":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4995:8943":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:13554:5757":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:544:7997":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11695:10564":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:6766:9426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"5:6430:233":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:7835:26782":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"22:2773:2659":{"crate_id":22,"path":["aho_corasick","util","search","MatchKind"],"kind":"enum"},"1:14563:217":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:9118:5665":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:11240:9687":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:2588:8020":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:9715:10795":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:13711:7193":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12423:7077":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"5:8432:10803":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"20:4170:6781":{"crate_id":20,"path":["regex_automata","nfa","thompson","backtrack","Visited"],"kind":"struct"},"5:6913:10785":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:46937:31574":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:8098:5649":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"20:5718:4963":{"crate_id":20,"path":["regex_automata","util","search","MatchErrorKind"],"kind":"enum"},"22:1866:40761":{"crate_id":22,"path":["aho_corasick","packed","api","ForceAlgorithm"],"kind":"enum"},"5:11257:9793":{"crate_id":5,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"5:10929:10823":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:3478:10752":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"4:7952:9849":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"23:993:6310":{"crate_id":23,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"17:14746:7400":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:2341:133":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"5:9523:19771":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"22:2807:6484":{"crate_id":22,"path":["aho_corasick","util","special","Special"],"kind":"struct"},"17:13015:7141":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:1572:5471":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:2906:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"22:1929:4885":{"crate_id":22,"path":["aho_corasick","packed","pattern","Pattern"],"kind":"struct"},"4:7964:10881":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"20:4139:10501":{"crate_id":20,"path":["regex_automata","nfa","thompson","backtrack","TryCapturesMatches"],"kind":"struct"},"17:14120:7274":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:7763:35340":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13917:7232":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"20:4301:3155":{"crate_id":20,"path":["regex_automata","nfa","thompson","error","BuildError"],"kind":"struct"},"20:4787:10509":{"crate_id":20,"path":["regex_automata","util","alphabet","ByteSetIter"],"kind":"struct"},"1:25098:34958":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:26303:9893":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6026:8040":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"20:5629:3298":{"crate_id":20,"path":["regex_automata","util","search","Match"],"kind":"struct"},"17:11682:10563":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4956:8927":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"21:2040:4960":{"crate_id":21,"path":["regex_syntax","ast","Span"],"kind":"struct"},"17:12074:10577":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:7561:9615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12765:7119":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"7:31:25750":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:11945:254":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:1660:223":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"20:3917:5367":{"crate_id":20,"path":["regex_automata","meta","regex","Cache"],"kind":"struct"},"21:2454:6597":{"crate_id":21,"path":["regex_syntax","ast","ClassSetBinaryOp"],"kind":"struct"},"6:6463:9280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:50255:10268":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:5385:9082":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:1562:25843":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:45568:12526":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"9:471:25763":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:8242:19648":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"1:5046:5229":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:44104:10130":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:47980:5756":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"20:4882:6849":{"crate_id":20,"path":["regex_automata","util","interpolate","CaptureRef"],"kind":"struct"},"21:2761:156":{"crate_id":21,"path":["regex_syntax","error","Formatter"],"kind":"struct"},"17:13781:7202":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:48317:10229":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"20:4368:6809":{"crate_id":20,"path":["regex_automata","nfa","thompson","map","Utf8BoundedMap"],"kind":"struct"},"5:6065:9678":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"20:3748:6759":{"crate_id":20,"path":["regex_automata","hybrid","error","CacheError"],"kind":"struct"},"6:6612:9369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13189:7048":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:6040:8043":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"9:436:25764":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:821:122":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:2425:10539":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:14639:7384":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:15005:7455":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:3340:5470":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:6694:10655":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:51507:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:16009:7741":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"21:2317:6548":{"crate_id":21,"path":["regex_syntax","ast","ClassUnicode"],"kind":"struct"},"1:51173:10302":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:8966:5335":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:5280:8091":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"11:1021:10714":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:51281:10306":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:15255:7145":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:1661:8803":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:2608:19644":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"6:1636:8784":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:46892:5447":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"20:5451:2668":{"crate_id":20,"path":["regex_automata","util","start","Config"],"kind":"struct"},"20:3899:3463":{"crate_id":20,"path":["regex_automata","meta","regex","Split"],"kind":"struct"},"23:1545:6357":{"crate_id":23,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:2871:6652":{"crate_id":21,"path":["regex_syntax","hir","translate","Translator"],"kind":"struct"},"9:0:4861":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:15890:7710":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"11:2429:4743":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:26600:9923":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"22:1811:3298":{"crate_id":22,"path":["aho_corasick","nfa","noncontiguous","Match"],"kind":"struct"},"1:11020:133":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:2752:12433":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:16094:7764":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"20:3928:2668":{"crate_id":20,"path":["regex_automata","meta","regex","Config"],"kind":"struct"},"5:12837:443":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"5:2596:19638":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"1:7004:5648":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:26374:9903":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:7441:35309":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"11:2332:10714":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"23:1500:6348":{"crate_id":23,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"5:6952:9680":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:48416:12581":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:5136:8996":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5587:9185":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:8261:9653":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10412:26841":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"20:4615:4972":{"crate_id":20,"path":["regex_automata","nfa","thompson","range_trie","Transition"],"kind":"struct"},"5:11215:9783":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"4:3130:9825":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:6791:9435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:4981:8082":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:3625:19672":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:46209:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:2177:710":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:44520:5634":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:7575:9774":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:50862:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"9:381:25765":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"22:1902:6355":{"crate_id":22,"path":["aho_corasick","packed","api","FindIter"],"kind":"struct"},"4:962:19544":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:4182:8070":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:5540:9161":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:3585:8065":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"5:12169:9806":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12042:7055":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:44482:5622":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:6729:10663":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6835:10666":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:10650:7006":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"21:2531:6551":{"crate_id":21,"path":["regex_syntax","ast","Repetition"],"kind":"struct"},"17:13973:7247":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:9481:9770":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:26677:9930":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"20:5162:5825":{"crate_id":20,"path":["regex_automata","util","primitives","NonMaxUsize"],"kind":"struct"},"23:909:6305":{"crate_id":23,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"20:4119:6776":{"crate_id":20,"path":["regex_automata","nfa","thompson","backtrack","BoundedBacktracker"],"kind":"struct"},"23:1015:6319":{"crate_id":23,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"20:3578:31043":{"crate_id":20,"path":["regex_automata","dfa","onepass","BuildErrorKind"],"kind":"enum"},"6:7461:9552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:9069:19747":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"22:1757:31160":{"crate_id":22,"path":["aho_corasick","nfa","contiguous","StateTrans"],"kind":"enum"},"1:50214:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:36001:253":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:12722:7048":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"20:4677:6842":{"crate_id":20,"path":["regex_automata","util","alphabet","Unit"],"kind":"struct"},"20:3858:10482":{"crate_id":20,"path":["regex_automata","meta","regex","RegexI"],"kind":"struct"},"17:13937:7242":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:7467:9554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:44357:10143":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"14:0:4865":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:3139:6895":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:44996:5459":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:16929:7264":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:3450:5225":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"16:8102:8357":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:12627:38614":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:1194:10714":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"18:643:6878":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:5507:9152":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:12144:10582":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"14:204:4876":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"21:3281:5375":{"crate_id":21,"path":["regex_syntax","parser","ParserBuilder"],"kind":"struct"},"20:3608:6368":{"crate_id":20,"path":["regex_automata","hybrid","dfa","DFA"],"kind":"struct"},"20:5657:4961":{"crate_id":20,"path":["regex_automata","util","search","PatternSetInsertError"],"kind":"struct"},"5:5828:10771":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"1:11278:12554":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:5330:9067":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:6206:5337":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"3:0:4858":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"6:4811:8838":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:5582:19555":{"crate_id":4,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"17:15036:7461":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"18:608:6647":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:2024:10742":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"5:1062:10708":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:5307:9058":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:1966:5595":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:477:8623":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"20:5239:6472":{"crate_id":20,"path":["regex_automata","util","primitives","StateID"],"kind":"struct"},"5:10549:10171":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"5:11315:10773":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"21:1811:10424":{"crate_id":21,"path":["regex_syntax","utf8","ScalarRange"],"kind":"struct"},"5:2427:9784":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"14:7:10702":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:12861:1963":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"1:3910:34018":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:26390:31414":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:46037:227":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"20:4535:6817":{"crate_id":20,"path":["regex_automata","nfa","thompson","pikevm","PikeVM"],"kind":"struct"},"1:51667:10322":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:4363:19696":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"23:1007:6318":{"crate_id":23,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"16:7987:8352":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:51105:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:47157:10199":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:15470:7556":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:51657:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"11:770:8529":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:44779:5644":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:7485:9565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:8071:11626":{"crate_id":5,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"17:11733:10555":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:11761:10848":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:9608:10830":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:15155:7484":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:37379:5792":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:10963:239":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"17:12904:7121":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:15977:7733":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:48563:5730":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:15405:7505":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:34401:5447":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"21:3316:10441":{"crate_id":21,"path":["regex_syntax","unicode","SimpleCaseFolder"],"kind":"struct"},"20:3562:6724":{"crate_id":20,"path":["regex_automata","dfa","onepass","Slots"],"kind":"struct"},"5:12105:4971":{"crate_id":5,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"17:15021:7457":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:50997:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"4:2626:9829":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:6589:284":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:7904:8346":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"20:4212:2665":{"crate_id":20,"path":["regex_automata","nfa","thompson","builder","Builder"],"kind":"struct"},"21:3322:31140":{"crate_id":21,"path":["regex_syntax","unicode","ClassQuery"],"kind":"enum"},"1:48427:10232":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:14089:7265":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:7348:9512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"20:4362:4972":{"crate_id":20,"path":["regex_automata","nfa","thompson","literal_trie","Transition"],"kind":"struct"},"5:4492:12148":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"9:168:11401":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:2358:10715":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:12308:7070":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:51186:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"4:3505:4944":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:44529:10147":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:4635:35259":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"20:4159:9818":{"crate_id":20,"path":["regex_automata","nfa","thompson","backtrack","Frame"],"kind":"enum"},"5:3815:19665":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"6:5490:9146":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:6711:6842":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:2857:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4888:8898":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12124:6944":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:3671:4990":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"12:0:4864":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:12863:1028":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"20:4354:10503":{"crate_id":20,"path":["regex_automata","nfa","thompson","literal_trie","StateChunksIter"],"kind":"struct"},"17:15169:7485":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"23:1049:31176":{"crate_id":23,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"1:2286:12448":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"5:5499:216":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"5:12808:5367":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:46078:239":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:12366:10591":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:2952:213":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5249:9025":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:45871:4916":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:8176:8359":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10362:26839":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:11413:38602":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"23:1479:31036":{"crate_id":23,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"11:1138:10718":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:5415:8095":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"20:4643:3463":{"crate_id":20,"path":["regex_automata","nfa","thompson","range_trie","Split"],"kind":"struct"},"5:1049:10720":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"22:1837:10409":{"crate_id":22,"path":["aho_corasick","nfa","noncontiguous","QueuedSet"],"kind":"struct"},"1:48217:10218":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:4293:19689":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"20:2359:10459":{"crate_id":20,"path":["regex_automata","util","iter","TryCapturesIter"],"kind":"struct"},"4:7743:10880":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:35924:8535":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:7721:9840":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:49998:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:7369:8050":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"9:491:8600":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:2916:4911":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1:13779:3247":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:9464:9769":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:48232:10223":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:5033:19714":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:47620:9881":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12087:10578":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:12813:19598":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:3876:270":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:7880:8146":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:2682:8024":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:38177:5802":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:51348:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:8728:9732":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"22:2201:10412":{"crate_id":22,"path":["aho_corasick","util","alphabet","ByteClassElementRanges"],"kind":"struct"},"17:14731:7397":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:51213:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:1555:8726":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"11:1062:25842":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"11:1578:10721":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:13328:10902":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:50295:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:3146:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:1520:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:14868:4886":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"22:2719:173":{"crate_id":22,"path":["aho_corasick","util","search","Input"],"kind":"struct"},"1:26410:31415":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:15183:7488":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:3238:150":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"5:3730:9735":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"1:2957:147":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:5215:9009":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:2638:8022":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:6660:9390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:6131:267":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:8331:5653":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:50417:10274":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:5501:9151":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"23:1508:6351":{"crate_id":23,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"1:10457:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:48034:5761":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:3803:10544":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:48016:3317":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"20:5213:6470":{"crate_id":20,"path":["regex_automata","util","primitives","SmallIndexIter"],"kind":"struct"},"4:7288:4951":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2988:8038":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:3159:273":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:15772:7683":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:1035:5470":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:7452:9548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:5528:31100":{"crate_id":20,"path":["regex_automata","util","wire","DeserializeErrorKind"],"kind":"enum"},"20:4757:6435":{"crate_id":20,"path":["regex_automata","util","alphabet","ByteSet"],"kind":"struct"},"16:7072:26778":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:5422:10766":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:4338:9818":{"crate_id":20,"path":["regex_automata","nfa","thompson","literal_trie","Frame"],"kind":"struct"},"5:12458:38613":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"17:12968:7137":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:2076:5609":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"20:4152:5367":{"crate_id":20,"path":["regex_automata","nfa","thompson","backtrack","Cache"],"kind":"struct"},"6:5338:9071":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:8148:8058":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"11:2135:10714":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:6535:9319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:48900:10251":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:11932:19648":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:5055:8975":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:8352:9674":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:6701:9404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"13:272:8519":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:5284:9044":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:12143:5471":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"20:4841:5822":{"crate_id":20,"path":["regex_automata","util","captures","GroupInfoErrorKind"],"kind":"enum"},"1:44342:12520":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:14203:7291":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:43444:229":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:5274:12491":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:45596:4960":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:6667:9391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"9:49:11391":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"21:2485:6490":{"crate_id":21,"path":["regex_syntax","ast","Assertion"],"kind":"struct"},"14:222:8506":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"21:3356:31143":{"crate_id":21,"path":["regex_syntax","utf8","Utf8Sequence"],"kind":"enum"},"1:47165:10201":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:12250:10895":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:50363:10272":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:1058:10707":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:5331:5331":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"4:3407:6593":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:36091:280":{"crate_id":1,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"5:12846:1928":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"16:6850:8191":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12351:7160":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"20:5463:6673":{"crate_id":20,"path":["regex_automata","util","start","Start"],"kind":"enum"},"16:8063:26783":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:25969:35191":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"4:6344:4899":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"20:5523:10523":{"crate_id":20,"path":["regex_automata","util","wire","DeserializeError"],"kind":"struct"},"17:15209:7490":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:12855:957":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"20:4081:10497":{"crate_id":20,"path":["regex_automata","meta","wrappers","ReverseHybridEngine"],"kind":"struct"},"9:413:25766":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:16032:7749":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:48644:12591":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"21:3241:6700":{"crate_id":21,"path":["regex_syntax","hir","PropertiesI"],"kind":"struct"},"5:12856:963":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"1:50687:10284":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:48559:5728":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:4909:8906":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:14535:7367":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"20:4037:10492":{"crate_id":20,"path":["regex_automata","meta","wrappers","OnePassEngine"],"kind":"struct"},"17:16619:7908":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"20:4071:10495":{"crate_id":20,"path":["regex_automata","meta","wrappers","DFAEngine"],"kind":"struct"},"4:7733:4877":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"23:1401:6877":{"crate_id":23,"path":["memchr","cow","Imp"],"kind":"enum"},"1:50147:10264":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:44409:12506":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:16052:7755":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:15143:7483":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:6939:8202":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"11:1912:6600":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:50403:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:4954:8081":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11904:10569":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"21:2366:6550":{"crate_id":21,"path":["regex_syntax","ast","ClassBracketed"],"kind":"struct"},"1:3677:153":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"5:8328:19620":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"16:7256:8265":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"18:698:6358":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:9125:9761":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"5:5238:19733":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:2858:8032":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:1734:6599":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"21:2330:31113":{"crate_id":21,"path":["regex_syntax","ast","ClassUnicodeKind"],"kind":"enum"},"1:45818:4743":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:49944:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"23:1515:6352":{"crate_id":23,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"17:16322:7842":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"20:3985:10486":{"crate_id":20,"path":["regex_automata","meta","strategy","ReverseSuffix"],"kind":"struct"},"6:5360:9076":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:9765:5183":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:47173:10202":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"21:2468:31110":{"crate_id":21,"path":["regex_syntax","ast","ClassSetBinaryOpKind"],"kind":"enum"},"21:2692:6629":{"crate_id":21,"path":["regex_syntax","ast","Flag"],"kind":"enum"},"21:3108:6670":{"crate_id":21,"path":["regex_syntax","hir","Look"],"kind":"enum"},"17:12182:7057":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:3352:35461":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:2484:8015":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13468:7176":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:10837:39276":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"20:4602:6825":{"crate_id":20,"path":["regex_automata","nfa","thompson","range_trie","RangeTrie"],"kind":"struct"},"23:1391:6334":{"crate_id":23,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:7466:35313":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:8162:8048":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:7546:9608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:7720:12149":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"21:2853:10426":{"crate_id":21,"path":["regex_syntax","hir","print","Printer"],"kind":"struct"},"20:4015:6776":{"crate_id":20,"path":["regex_automata","meta","wrappers","BoundedBacktracker"],"kind":"struct"},"1:25162:19247":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:16781:7964":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:47721:10921":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:9385:211":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"6:8008:9637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"23:1587:6359":{"crate_id":23,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"20:3863:6764":{"crate_id":20,"path":["regex_automata","meta","regex","RegexInfo"],"kind":"struct"},"6:5636:9212":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:12441:9818":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:2994:214":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:14926:7445":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:5301:9055":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"11:783:8530":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:15550:7618":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"21:2266:6572":{"crate_id":21,"path":["regex_syntax","ast","ClassAscii"],"kind":"struct"},"5:11220:9686":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"6:4948:8925":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:14424:10904":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:489:8629":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"23:1250:6306":{"crate_id":23,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"21:2857:10427":{"crate_id":21,"path":["regex_syntax","hir","print","Writer"],"kind":"struct"},"16:2948:8036":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:14028:7255":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:14718:7395":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:45861:5182":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:51693:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"6:5447:9115":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:4956:9532":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"20:4059:6773":{"crate_id":20,"path":["regex_automata","meta","wrappers","HybridCache"],"kind":"struct"},"4:7785:223":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:2746:8027":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:5569:9178":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:12957:7133":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:8220:8361":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6820:26776":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"21:3263:6710":{"crate_id":21,"path":["regex_syntax","hir","LookSet"],"kind":"struct"},"16:6736:40717":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:44427:10914":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:6806:8039":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:36549:5787":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:47782:4889":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"20:5120:6401":{"crate_id":20,"path":["regex_automata","util","prefilter","teddy","Teddy"],"kind":"struct"},"1:45754:10176":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:8746:250":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"1:4889:10887":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:48571:5733":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12172:7056":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:15989:7734":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:8290:9660":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10909:6892":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"16:7505:8293":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"20:5613:4958":{"crate_id":20,"path":["regex_automata","util","search","HalfMatch"],"kind":"struct"},"5:9422:9767":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"1:43336:5811":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"22:1819:2665":{"crate_id":22,"path":["aho_corasick","nfa","noncontiguous","Builder"],"kind":"struct"},"1:25233:6428":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:47916:3491":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:11279:7048":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:5015:12481":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:8134:8057":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"21:2641:6625":{"crate_id":21,"path":["regex_syntax","ast","SetFlags"],"kind":"struct"},"5:9710:10794":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:46882:10186":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:51200:10303":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11240:40732":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:16440:7880":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6717:9412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:8444:9687":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"5:11588:9797":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"20:3805:5367":{"crate_id":20,"path":["regex_automata","hybrid","regex","Cache"],"kind":"struct"},"1:44197:5754":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"21:429:5748":{"crate_id":21,"path":["regex_syntax","debug","Bytes"],"kind":"struct"},"17:15529:7608":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:51553:10317":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"20:4835:5821":{"crate_id":20,"path":["regex_automata","util","captures","GroupInfoError"],"kind":"struct"},"17:16765:7959":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"20:4103:2668":{"crate_id":20,"path":["regex_automata","nfa","thompson","backtrack","Config"],"kind":"struct"},"1:51741:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"20:4771:6437":{"crate_id":20,"path":["regex_automata","util","alphabet","BitSet"],"kind":"struct"},"5:11028:10752":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"5:6909:5652":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"17:15898:7712":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:12865:1508":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"1:3887:5814":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:6565:9342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"18:521:6348":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:14403:7344":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:8284:9659":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:45945:10183":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"17:12068:10576":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"19:0:1370":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:9054:9751":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"9:346:25779":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:9596:6543":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:14233:7303":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:2794:8029":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:47629:9882":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"11:828:10720":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"20:3870:6765":{"crate_id":20,"path":["regex_automata","meta","regex","RegexInfoI"],"kind":"struct"},"5:3577:10757":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:16798:7966":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:6508:9312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"15:317:12127":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:4900:8079":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:47741:10922":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:8859:19713":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:25132:34964":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:25160:19648":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:11836:7038":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:10794:5459":{"crate_id":1,"path":["core","fmt","builders","FromFn"],"kind":"struct"},"20:5750:10532":{"crate_id":20,"path":["regex_automata","util","sparse_set","SparseSetIter"],"kind":"struct"},"20:3662:31052":{"crate_id":20,"path":["regex_automata","hybrid","dfa","StateSaver"],"kind":"enum"},"17:10959:7016":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:16872:7986":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:51024:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:7981:5628":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:6363:5635":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6747:8181":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:2489:9857":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"7:78:25757":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:7652:38611":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"22:2372:6458":{"crate_id":22,"path":["aho_corasick","util","prefilter","RareByteOffset"],"kind":"struct"},"1:34787:5217":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"16:6419:7999":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"22:2700:6477":{"crate_id":22,"path":["aho_corasick","util","primitives","WithStateIDIter"],"kind":"struct"},"20:3532:5367":{"crate_id":20,"path":["regex_automata","dfa","onepass","Cache"],"kind":"struct"},"6:542:8663":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:22:863":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:51609:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1:13314:12561":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:14978:7451":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:11283:9876":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:5075:19705":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:922:10857":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:4699:10764":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:44183:10136":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"20:4634:6838":{"crate_id":20,"path":["regex_automata","nfa","thompson","range_trie","NextInsert"],"kind":"struct"},"1:13570:5758":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:15196:7489":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:16654:7938":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:15240:7496":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:2177:210":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:6724:9413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"5:4811:19714":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:5394:9088":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13341:26849":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:44789:5645":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"22:2681:6475":{"crate_id":22,"path":["aho_corasick","util","primitives","StateIDError"],"kind":"struct"},"18:589:6319":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:6290:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:46320:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:43685:12455":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:16350:7857":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:5353:9075":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:37513:5793":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"20:3693:2665":{"crate_id":20,"path":["regex_automata","hybrid","dfa","Builder"],"kind":"struct"},"6:4835:8855":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:9136:9762":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:9802:5184":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:11243:169":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:43404:228":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:12298:10759":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:6624:9376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:16284:7832":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:2892:32415":{"crate_id":1,"path":["core","clone","uninit","InitializingSlice"],"kind":"struct"},"1:25631:9889":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:7492:8291":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:5111:8085":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5268:9036":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"20:4611:4971":{"crate_id":20,"path":["regex_automata","nfa","thompson","range_trie","State"],"kind":"struct"},"1:51481:10313":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:2528:8017":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:8257:2665":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"1:47771:5743":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:16919:7259":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"20:4926:5738":{"crate_id":20,"path":["regex_automata","util","iter","Searcher"],"kind":"struct"},"1:51561:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"20:4627:6835":{"crate_id":20,"path":["regex_automata","nfa","thompson","range_trie","NextIter"],"kind":"struct"},"20:4867:5824":{"crate_id":20,"path":["regex_automata","util","captures","GroupInfoAllNames"],"kind":"struct"},"16:3832:8067":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7398:40718":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:51517:10315":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"11:738:10707":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:49877:10254":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:14138:7275":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:14991:7452":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:47812:3463":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:8789:3463":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"18:573:6878":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:16272:7829":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:651:6878":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:50876:10291":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:4466:9778":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:44259:10138":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:43464:5813":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"11:1898:6598":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"21:3229:6699":{"crate_id":21,"path":["regex_syntax","hir","Properties"],"kind":"struct"},"4:5294:9778":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"11:683:5471":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:50727:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"4:2391:35343":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:50741:10286":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:47690:5619":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:4724:10886":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:48129:5754":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"20:3959:6769":{"crate_id":20,"path":["regex_automata","meta","strategy","Pre"],"kind":"struct"},"6:7602:9630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:15794:7685":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12114:10580":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"21:3173:111":{"crate_id":21,"path":["regex_syntax","hir","Capture"],"kind":"struct"},"5:12338:10760":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"23:1061:6330":{"crate_id":23,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"1:48104:5744":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"20:4253:4974":{"crate_id":20,"path":["regex_automata","nfa","thompson","compiler","Compiler"],"kind":"struct"},"5:12824:38575":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:51321:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"22:2425:6467":{"crate_id":22,"path":["aho_corasick","util","prefilter","StartBytesThree"],"kind":"struct"},"16:6500:25883":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:239:10855":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13081:26978":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:12151:8531":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:8776:5644":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"17:10334:26838":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"20:4020:10490":{"crate_id":20,"path":["regex_automata","meta","wrappers","BoundedBacktrackerEngine"],"kind":"struct"},"1:47788:5749":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"20:3793:4143":{"crate_id":20,"path":["regex_automata","hybrid","regex","FindMatches"],"kind":"struct"},"17:10977:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:894:10629":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"14:40:7230":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"20:5082:6435":{"crate_id":20,"path":["regex_automata","util","prefilter","byteset","ByteSet"],"kind":"struct"},"6:8302:9662":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:11606:174":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"7:0:2024":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:10534:26845":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13754:7197":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:48755:10246":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:41929:5804":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"22:2594:5827":{"crate_id":22,"path":["aho_corasick","util","primitives","PatternIDIter"],"kind":"struct"},"17:12239:7063":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:44160:10134":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:50052:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:12101:10579":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:51416:10311":{"crate_id":1,"path":["core","core_arch","simd","u32x32"],"kind":"struct"},"21:3056:6671":{"crate_id":21,"path":["regex_syntax","hir","ClassUnicodeRange"],"kind":"struct"},"1:36058:4992":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"20:4794:10510":{"crate_id":20,"path":["regex_automata","util","alphabet","ByteSetRangeIter"],"kind":"struct"},"1:3282:5611":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:13729:7196":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:47731:9885":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:50201:10266":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:16811:7972":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"22:2601:6473":{"crate_id":22,"path":["aho_corasick","util","primitives","WithPatternIDIter"],"kind":"struct"},"17:16422:7874":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:1700:8820":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13125:7153":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:12840:1991":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"4:7896:9843":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:2112:829":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"4:0:329":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:34380:4941":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:5725:7006":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:999:4743":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:4265:8072":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"22:1604:10402":{"crate_id":22,"path":["aho_corasick","ahocorasick","StreamFindIter"],"kind":"struct"},"17:15650:7655":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"22:2056:6421":{"crate_id":22,"path":["aho_corasick","packed","teddy","builder","x86_64","FatAVX2"],"kind":"struct"},"1:51591:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"21:2087:31102":{"crate_id":21,"path":["regex_syntax","ast","Ast"],"kind":"enum"},"17:12293:7067":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:515:197":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"20:4902:5450":{"crate_id":20,"path":["regex_automata","util","interpolate","Ref"],"kind":"enum"},"1:50160:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"22:2283:4963":{"crate_id":22,"path":["aho_corasick","util","error","MatchErrorKind"],"kind":"enum"},"1:48587:5735":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"21:3297:150":{"crate_id":21,"path":["regex_syntax","unicode","Error"],"kind":"enum"},"17:15957:7726":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:10639:34488":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:3122:19648":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"11:338:8525":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:2246:10538":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11980:10575":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:3485:5790":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:11031:10754":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:51146:10301":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:8656:134":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"10:0:4862":{"crate_id":10,"path":["adler"],"kind":"module"},"5:8902:9521":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:12410:10594":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:8249:9651":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:1419:10715":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:2184:9853":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:45018:5656":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:8011:8056":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:8763:190":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:3408:263":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:50835:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"4:309:35250":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"18:689:6318":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:3386:35462":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:6522:9313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"21:2812:6648":{"crate_id":21,"path":["regex_syntax","hir","literal","Seq"],"kind":"struct"},"11:696:4743":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:563:8675":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"22:1728:2665":{"crate_id":22,"path":["aho_corasick","dfa","Builder"],"kind":"struct"},"1:37446:5791":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:6803:198":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"20:4025:6771":{"crate_id":20,"path":["regex_automata","meta","wrappers","BoundedBacktrackerCache"],"kind":"struct"},"1:13898:12574":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:26688:9931":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:44511:5633":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"23:1579:6358":{"crate_id":23,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:3495:5788":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"20:5691:2659":{"crate_id":20,"path":["regex_automata","util","search","MatchKind"],"kind":"enum"},"4:2298:19577":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:7103:10792":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:10680:7008":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"23:1448:5738":{"crate_id":23,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"17:12866:10614":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:16258:7823":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:9700:247":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"20:2544:10463":{"crate_id":20,"path":["regex_automata","util","pool","PoolGuard"],"kind":"struct"},"1:44491:5632":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"21:2907:6658":{"crate_id":21,"path":["regex_syntax","hir","translate","TranslatorI"],"kind":"struct"},"1:15:3159":{"crate_id":1,"path":["core","write"],"kind":"macro"},"5:8486:9689":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"4:6322:4898":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"6:5630:9209":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"21:1932:6506":{"crate_id":21,"path":["regex_syntax","ast","print","PrinterBuilder"],"kind":"struct"},"6:6494:9301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:989:5471":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:14666:7389":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:4968:5450":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:15882:7708":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:2854:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:51119:10300":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"20:4945:10517":{"crate_id":20,"path":["regex_automata","util","iter","MatchesIter"],"kind":"struct"},"16:2878:8033":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"20:4858:4165":{"crate_id":20,"path":["regex_automata","util","captures","GroupInfoPatternNames"],"kind":"struct"},"20:5744:6876":{"crate_id":20,"path":["regex_automata","util","sparse_set","SparseSet"],"kind":"struct"},"6:1534:8711":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:6606:219":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:5460:9125":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:12252:7064":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"20:3599:10419":{"crate_id":20,"path":["regex_automata","dfa","remapper","Remapper"],"kind":"struct"},"1:42094:5807":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:40053:5803":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:12849:777":{"crate_id":5,"path":["std","f16"],"kind":"primitive"},"5:12862:1945":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"1:26098:19321":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:10558:26846":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"20:5128:6348":{"crate_id":20,"path":["regex_automata","util","prefilter","Prefilter"],"kind":"struct"},"20:4876:4987":{"crate_id":20,"path":["regex_automata","util","escape","DebugByte"],"kind":"struct"},"17:10448:26842":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"4:7704:4922":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"21:2653:6547":{"crate_id":21,"path":["regex_syntax","ast","Flags"],"kind":"struct"},"20:4241:2656":{"crate_id":20,"path":["regex_automata","nfa","thompson","compiler","WhichCaptures"],"kind":"enum"},"5:9450:10824":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:4248:19686":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"22:2582:5826":{"crate_id":22,"path":["aho_corasick","util","primitives","PatternIDError"],"kind":"struct"},"1:3680:154":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"22:2310:31156":{"crate_id":22,"path":["aho_corasick","util","prefilter","Candidate"],"kind":"enum"},"5:2850:38591":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:8737:9733":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"21:2847:6506":{"crate_id":21,"path":["regex_syntax","hir","print","PrinterBuilder"],"kind":"struct"},"6:4983:8938":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6673:9394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:15052:7462":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:8591:10808":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"1:26483:12360":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:50781:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:2580:12423":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"6:1731:8832":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"11:102:8520":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11591:26863":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"5:3167:10468":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:45520:182":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:13201:10555":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"5:12427:38560":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:15615:7654":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:4307:19691":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:48437:10236":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:51489:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"6:521:8651":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"11:1047:10715":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:6142:26772":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:324:4887":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13300:10625":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:581:5217":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13276:10623":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:47204:10204":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:51294:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:50133:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:10982:156":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"16:5755:8099":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:51499:10314":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:45736:10175":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11537:10558":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:7366:9521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:1745:6593":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:7027:8213":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:48818:10923":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:3480:4880":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:4298:35250":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:47182:169":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"21:3200:6491":{"crate_id":21,"path":["regex_syntax","hir","Dot"],"kind":"enum"},"1:8416:5657":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:46357:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:6841:8190":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:11893:7045":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:45870:4917":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:4544:10762":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:659:6355":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:1212:10719":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:4463:12146":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12816:10610":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"22:2710:10419":{"crate_id":22,"path":["aho_corasick","util","remapper","Remapper"],"kind":"struct"},"6:4921:8910":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"20:5114:6450":{"crate_id":20,"path":["regex_automata","util","prefilter","memmem","Memmem"],"kind":"struct"},"6:5558:9172":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13288:10624":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:14040:7258":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"20:2299:10457":{"crate_id":20,"path":["regex_automata","util","iter","TryHalfMatchesIter"],"kind":"struct"},"4:812:266":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13546:7181":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"6:5038:8967":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:8014:9639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"22:2189:10410":{"crate_id":22,"path":["aho_corasick","util","alphabet","ByteClassIter"],"kind":"struct"},"16:7165:8239":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"22:1595:10401":{"crate_id":22,"path":["aho_corasick","ahocorasick","FindOverlappingIter"],"kind":"struct"},"5:4042:10759":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:10746:7010":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"21:2557:31105":{"crate_id":21,"path":["regex_syntax","ast","RepetitionKind"],"kind":"enum"},"17:13409:6965":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"20:3498:10469":{"crate_id":20,"path":["regex_automata","dfa","onepass","InternalBuilder"],"kind":"struct"},"6:7389:9539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"11:1878:5470":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"0:0:2522":{"crate_id":0,"path":["regex"],"kind":"module"},"1:48555:5734":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"16:7977:8054":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"4:7940:9847":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:501:8634":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:46003:10185":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"6:4900:8901":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:5262:19735":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:6109:8105":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:5439:9110":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:48095:5746":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:519:6951":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:16369:7858":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"22:2110:6423":{"crate_id":22,"path":["aho_corasick","packed","teddy","generic","Slim"],"kind":"struct"},"5:5687:133":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"1:918:202":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"21:1910:31125":{"crate_id":21,"path":["regex_syntax","ast","parse","ClassState"],"kind":"enum"},"16:8480:8409":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:47798:5748":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:3787:5436":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"1:50606:10281":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:13344:5740":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:1493:8693":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13264:10622":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"4:3381:6598":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:9723:174":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"1:2284:12447":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12280:7066":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"23:999:6310":{"crate_id":23,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"16:5316:8092":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:3866:5812":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:5143:230":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:3401:279":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"16:4764:8075":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:15852:7703":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:8340:9672":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:38004:5800":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"20:0:2533":{"crate_id":20,"path":["regex_automata"],"kind":"module"},"1:47648:9883":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:1638:10706":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:10665:7007":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:6935:35250":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"4:1248:12151":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:12119:5470":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:5459:32406":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"1:14805:164":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:48839:31665":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:43501:10006":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"21:2395:31103":{"crate_id":21,"path":["regex_syntax","ast","ClassSetItem"],"kind":"enum"},"1:11032:5441":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:1723:4944":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"22:1856:2668":{"crate_id":22,"path":["aho_corasick","packed","api","Config"],"kind":"struct"},"5:585:38589":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12452:10598":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:7104:35250":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11655:7032":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"21:3073:6655":{"crate_id":21,"path":["regex_syntax","hir","ClassBytes"],"kind":"struct"},"16:5142:8086":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:11534:9766":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"21:2745:150":{"crate_id":21,"path":["regex_syntax","error","Error"],"kind":"enum"},"5:2105:5610":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"17:16739:7953":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:51733:10325":{"crate_id":1,"path":["core","core_arch","x86","__m256h"],"kind":"struct"},"6:5522:9159":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"21:1898:31124":{"crate_id":21,"path":["regex_syntax","ast","parse","GroupState"],"kind":"enum"},"20:4066:6368":{"crate_id":20,"path":["regex_automata","meta","wrappers","DFA"],"kind":"struct"},"21:0:2530":{"crate_id":21,"path":["regex_syntax"],"kind":"module"},"17:12134:10581":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:557:8672":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4848:8865":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:613:31178":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:14791:7405":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13025:7142":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:11669:10562":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:12853:969":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"1:49931:10256":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:5403:10547":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"11:840:19605":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:47412:10207":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:4958:9860":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6460:26775":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:13160:10621":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"5:5030:19736":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:155:7995":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:3311:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:12359:10761":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:8543:8414":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:15129:7482":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:50646:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"23:1111:5470":{"crate_id":23,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"1:44803:5646":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:15668:7660":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:5377:8094":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:11741:9802":{"crate_id":5,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"20:3853:2681":{"crate_id":20,"path":["regex_automata","meta","regex","Regex"],"kind":"struct"},"5:2431:19631":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"4:8084:4944":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:35977:10912":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:6157:8107":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:14064:7262":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:45802:5470":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:14720:119":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:8766:5631":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"20:3512:6368":{"crate_id":20,"path":["regex_automata","dfa","onepass","DFA"],"kind":"struct"},"5:9616:9774":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:51543:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:12915:26977":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:7621:38609":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:786:19594":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:2022:10741":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"16:6406:8142":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12526:26953":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"22:2181:6433":{"crate_id":22,"path":["aho_corasick","util","alphabet","ByteClasses"],"kind":"struct"},"1:45012:5654":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13425:7174":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:8708:8427":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:10812:7012":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:6814:9441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:46976:150":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:51723:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:13852:7215":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:7264:4950":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:3712:4943":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"23:1145:6300":{"crate_id":23,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"1:26425:31416":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"22:1778:4973":{"crate_id":22,"path":["aho_corasick","nfa","noncontiguous","NFA"],"kind":"struct"},"1:48767:232":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:14692:7392":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5346:8093":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"21:423:10423":{"crate_id":21,"path":["regex_syntax","debug","Byte"],"kind":"struct"},"5:1728:6598":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:1091:10713":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:4833:19715":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:8509:10806":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:15866:7706":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:51375:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"4:1557:5470":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:6880:9456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:4343:5471":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:3123:12306":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"23:1425:5707":{"crate_id":23,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"21:3306:10440":{"crate_id":21,"path":["regex_syntax","unicode","CaseFoldError"],"kind":"struct"},"20:4954:10518":{"crate_id":20,"path":["regex_automata","util","iter","CapturesIter"],"kind":"struct"},"5:4351:19693":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"23:142:31174":{"crate_id":23,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"6:7306:9488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:2201:10862":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:16606:7229":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:35966:10911":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"5:8847:9736":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:1647:8792":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:2465:8009":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:9369:10821":{"crate_id":5,"path":["std","pipe","PipeReader"],"kind":"struct"},"20:4386:6811":{"crate_id":20,"path":["regex_automata","nfa","thompson","map","Utf8SuffixMap"],"kind":"struct"},"6:6778:9428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"20:5434:6476":{"crate_id":20,"path":["regex_automata","util","primitives","StateIDIter"],"kind":"struct"},"23:1415:5706":{"crate_id":23,"path":["memchr","memchr","Memchr"],"kind":"struct"},"1:47397:10206":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:50592:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"4:8100:4946":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5107:8994":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"20:4826:5823":{"crate_id":20,"path":["regex_automata","util","captures","GroupInfoInner"],"kind":"struct"},"4:3373:6600":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:6600:9364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15267:7499":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:15659:7659":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5044:8970":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5414:9097":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:5184:9000":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:6759:9425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"22:2208:6434":{"crate_id":22,"path":["aho_corasick","util","alphabet","ByteClassSet"],"kind":"struct"},"21:2863:6651":{"crate_id":21,"path":["regex_syntax","hir","translate","TranslatorBuilder"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13570:7183":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:7330:9505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5400:9089":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"22:2323:2665":{"crate_id":22,"path":["aho_corasick","util","prefilter","Builder"],"kind":"struct"},"16:4692:8074":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:833:10708":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:6824:9444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:8865:10816":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"11:2504:25838":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"22:1802:4972":{"crate_id":22,"path":["aho_corasick","nfa","noncontiguous","Transition"],"kind":"struct"},"17:13673:7188":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"5:3575:10756":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:6513:38593":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:2833:10749":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:11269:9733":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:7279:8266":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"22:2347:6450":{"crate_id":22,"path":["aho_corasick","util","prefilter","Memmem"],"kind":"struct"},"1:12288:10896":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"15:338:11388":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:741:9851":{"crate_id":2,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"11:807:4944":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:2424:10746":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7956:8350":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:8898:10817":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:43512:10007":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:27275:249":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:9112:5472":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:8308:9663":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"21:1921:10425":{"crate_id":21,"path":["regex_syntax","ast","parse","NestLimiter"],"kind":"struct"},"17:10894:10548":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"17:12978:7139":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:47638:10918":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"23:934:6309":{"crate_id":23,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"9:319:8577":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:5260:9032":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:8273:9655":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11044:10551":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:50768:10287":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"14:162:10702":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"22:2333:6449":{"crate_id":22,"path":["aho_corasick","util","prefilter","Packed"],"kind":"struct"},"16:7966:8351":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"20:4576:6819":{"crate_id":20,"path":["regex_automata","nfa","thompson","pikevm","ActiveStates"],"kind":"struct"},"21:2145:6552":{"crate_id":21,"path":["regex_syntax","ast","Concat"],"kind":"struct"},"6:582:8685":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"22:2257:19678":{"crate_id":22,"path":["aho_corasick","util","error","ErrorKind"],"kind":"enum"},"17:12790:10605":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"11:2542:6502":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"20:5046:6852":{"crate_id":20,"path":["regex_automata","util","look","LookMatcher"],"kind":"struct"},"16:3439:8064":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:5511:10891":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:12018:7053":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:2872:10748":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"21:2596:6502":{"crate_id":21,"path":["regex_syntax","ast","Group"],"kind":"struct"},"5:3532:10754":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13312:10626":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:50552:10279":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"18:623:31176":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:8128:6996":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13174:7032":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:6792:8185":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"1:11410:32445":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:48888:4921":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"22:1792:4971":{"crate_id":22,"path":["aho_corasick","nfa","noncontiguous","State"],"kind":"struct"},"5:8480:131":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"21:2677:31109":{"crate_id":21,"path":["regex_syntax","ast","FlagsItemKind"],"kind":"enum"},"5:4242:19687":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:50349:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:12181:9810":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"22:2394:6462":{"crate_id":22,"path":["aho_corasick","util","prefilter","RareBytesThree"],"kind":"struct"},"1:7204:9874":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:7413:10667":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:3565:5801":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:36761:5786":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"21:3290:5863":{"crate_id":21,"path":["regex_syntax","parser","Parser"],"kind":"struct"},"11:2554:8533":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:3683:155":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:1679:8810":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:8138:10797":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"22:2303:6348":{"crate_id":22,"path":["aho_corasick","util","prefilter","Prefilter"],"kind":"struct"},"16:3693:8066":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:50066:10261":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:6457:9778":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:51583:10318":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:48583:5727":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:12323:5762":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:50889:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:13531:5760":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:5687:8098":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:8532:5668":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"20:4333:6807":{"crate_id":20,"path":["regex_automata","nfa","thompson","literal_trie","LiteralTrie"],"kind":"struct"},"16:8055:10696":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11230:10554":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:5024:5451":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:26233:9891":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:15434:7525":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:11231:9790":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:42673:5808":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"15:405:25875":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"22:2148:6428":{"crate_id":22,"path":["aho_corasick","packed","teddy","generic","Mask"],"kind":"struct"},"6:4824:8847":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"4:1610:8529":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:45003:5652":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:6202:4877":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"17:14150:7278":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:44543:5636":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:46394:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:6172:10774":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:5808:10770":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"6:574:8680":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"20:4424:10449":{"crate_id":20,"path":["regex_automata","nfa","thompson","nfa","Inner"],"kind":"struct"},"17:10510:26844":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:26178:9890":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11574:32447":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"23:1187:6309":{"crate_id":23,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"6:5146:8997":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"20:3835:40741":{"crate_id":20,"path":["regex_automata","meta","error","RetryError"],"kind":"enum"},"5:6605:38597":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:5290:9047":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:10452:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:50228:10267":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:2818:8030":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:3203:150":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"21:2934:150":{"crate_id":21,"path":["regex_syntax","hir","Error"],"kind":"struct"},"1:50957:10294":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"11:406:12137":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"15:0:4866":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:3440:39736":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:12275:11881":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:16858:7982":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:4147:10761":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"4:3710:10863":{"crate_id":4,"path":["alloc","collections","btree","set","CursorMutKey"],"kind":"struct"},"5:6265:32442":{"crate_id":5,"path":["std","sync","lazy_lock","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"13:0:4859":{"crate_id":13,"path":["std_detect"],"kind":"module"},"22:218:19648":{"crate_id":22,"path":["aho_corasick","automaton","private","Sealed"],"kind":"trait"},"17:14339:7315":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:9409:9766":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:2658:8023":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:2582:19634":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:2422:151":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"1:44293:10139":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"21:2442:6595":{"crate_id":21,"path":["regex_syntax","ast","ClassSetUnion"],"kind":"struct"},"6:5016:8954":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:5728:6552":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"6:6749:9418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:6450:9279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:14705:7393":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:1922:4944":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"11:1918:6593":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11093:40729":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"23:1229:6302":{"crate_id":23,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"5:11302:10802":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:12509:7081":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:9031:4971":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"18:765:31036":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12333:7073":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"20:4307:31043":{"crate_id":20,"path":["regex_automata","nfa","thompson","error","BuildErrorKind"],"kind":"enum"},"5:10003:38598":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"22:1663:10401":{"crate_id":22,"path":["aho_corasick","automaton","FindOverlappingIter"],"kind":"struct"},"11:1083:40710":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"23:1271:6310":{"crate_id":23,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"1:51601:10319":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:729:19592":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:8590:4991":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:50714:10285":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:1234:10536":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:8047:12153":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:11026:5439":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:15279:7503":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:5548:9166":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:5205:9002":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:50309:10270":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:43424:227":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:7537:9605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:47880:5763":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:25919:19327":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:1593:8750":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"20:4735:10411":{"crate_id":20,"path":["regex_automata","util","alphabet","ByteClassElements"],"kind":"struct"},"1:26666:9929":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:7876:5393":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:50268:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:44213:5752":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:5009:8951":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"22:1961:6416":{"crate_id":22,"path":["aho_corasick","packed","teddy","builder","x86_64","SlimSSSE3"],"kind":"struct"},"17:16476:7884":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:7829:4743":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:9705:248":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:50660:10283":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:5088:8993":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"23:1216:6300":{"crate_id":23,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"21:3091:6672":{"crate_id":21,"path":["regex_syntax","hir","ClassBytesRange"],"kind":"struct"},"17:13441:26851":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:4602:10885":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:48633:10243":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"4:7989:4878":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:5424:9104":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6911:8200":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:5860:116":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"1:44605:5640":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"22:2715:10420":{"crate_id":22,"path":["aho_corasick","util","remapper","IndexMapper"],"kind":"struct"},"17:316:4987":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"20:3777:6761":{"crate_id":20,"path":["regex_automata","hybrid","id","LazyStateIDError"],"kind":"struct"},"1:2754:12434":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:12488:7079":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:25746:19245":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:50376:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:6864:26777":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"18:680:6310":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:16059:7756":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:51254:10305":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:5253:8090":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:25837:19325":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:5647:8097":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:26611:9924":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"5:11306:10843":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"5:10657:10740":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:9677:10782":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:47416:10208":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"20:4711:6433":{"crate_id":20,"path":["regex_automata","util","alphabet","ByteClasses"],"kind":"struct"},"17:12199:7059":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:16484:7887":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"20:3653:10478":{"crate_id":20,"path":["regex_automata","hybrid","dfa","LazyRef"],"kind":"struct"},"1:46118:5470":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:51362:10309":{"crate_id":1,"path":["core","core_arch","simd","u16x64"],"kind":"struct"},"1:9918:4885":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6096:10630":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:50525:10278":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:7347:8273":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:12687:10604":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:14869:7433":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:48567:5729":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"20:5599:4960":{"crate_id":20,"path":["regex_automata","util","search","Span"],"kind":"struct"},"6:5649:9218":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"20:5737:6873":{"crate_id":20,"path":["regex_automata","util","sparse_set","SparseSets"],"kind":"struct"},"22:1186:4987":{"crate_id":22,"path":["aho_corasick","util","debug","DebugByte"],"kind":"struct"},"17:15066:7464":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"21:2665:6627":{"crate_id":21,"path":["regex_syntax","ast","FlagsItem"],"kind":"struct"},"6:1525:8706":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"20:3878:4143":{"crate_id":20,"path":["regex_automata","meta","regex","FindMatches"],"kind":"struct"},"20:3969:7173":{"crate_id":20,"path":["regex_automata","meta","strategy","Core"],"kind":"struct"},"16:6254:8122":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"20:5069:10519":{"crate_id":20,"path":["regex_automata","util","pool","inner","CacheLine"],"kind":"struct"},"20:5326:5826":{"crate_id":20,"path":["regex_automata","util","primitives","PatternIDError"],"kind":"struct"},"21:2133:6503":{"crate_id":21,"path":["regex_syntax","ast","Alternation"],"kind":"struct"},"22:1828:4974":{"crate_id":22,"path":["aho_corasick","nfa","noncontiguous","Compiler"],"kind":"struct"},"1:2215:1445":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"6:6741:9417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:25144:34967":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:50471:10276":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"22:1875:2665":{"crate_id":22,"path":["aho_corasick","packed","api","Builder"],"kind":"struct"},"22:2379:6459":{"crate_id":22,"path":["aho_corasick","util","prefilter","RareBytesOne"],"kind":"struct"},"17:16086:7763":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:8280:7085":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"17:12700:7117":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:2180:209":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"20:4394:6812":{"crate_id":20,"path":["regex_automata","nfa","thompson","map","Utf8SuffixKey"],"kind":"struct"},"1:26563:19648":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"23:1569:6318":{"crate_id":23,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:5985:19753":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"5:11078:7085":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:13039:7143":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:49917:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:11517:7024":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:4506:5470":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6237:8117":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:5513:9154":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:6476:5623":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:12858:1969":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"1:51227:10304":{"crate_id":1,"path":["core","core_arch","simd","f16x32"],"kind":"struct"},"17:13900:7230":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13111:7150":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:44451:5620":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:8562:8417":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"23:1559:6310":{"crate_id":23,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:7031:10786":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"23:971:6318":{"crate_id":23,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"23:978:165":{"crate_id":23,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"21:2279:31112":{"crate_id":21,"path":["regex_syntax","ast","ClassAsciiKind"],"kind":"enum"},"23:947:6310":{"crate_id":23,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"5:4958:9534":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"20:4093:10498":{"crate_id":20,"path":["regex_automata","meta","wrappers","ReverseDFA"],"kind":"struct"},"23:1024:31177":{"crate_id":23,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"1:4053:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:46126:5471":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:4701:9778":{"crate_id":4,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"16:6873:8196":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:12850:780":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"17:15844:7700":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"20:5180:5828":{"crate_id":20,"path":["regex_automata","util","primitives","SmallIndex"],"kind":"struct"},"1:3624:5809":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:2770:8028":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:12195:9811":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:2548:8018":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:9458:4743":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"23:1208:6298":{"crate_id":23,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"14:31:10702":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:0:4867":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:51038:10297":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"4:5990:4950":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:15925:7716":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:4911:19732":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"23:0:2532":{"crate_id":23,"path":["memchr"],"kind":"module"},"5:11210:9781":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:12397:10592":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:8247:9682":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"22:2757:3298":{"crate_id":22,"path":["aho_corasick","util","search","Match"],"kind":"struct"},"17:10255:26836":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:485:10534":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"21:2250:31111":{"crate_id":21,"path":["regex_syntax","ast","ClassPerlKind"],"kind":"enum"},"16:6638:10639":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"5:1054:10706":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:5553:1039":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:45901:4918":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:12402:3491":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:4066:4944":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:14579:7375":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:3933:35250":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:49958:10257":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:50943:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:2918:8035":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"21:2821:6489":{"crate_id":21,"path":["regex_syntax","hir","literal","Literal"],"kind":"struct"},"1:51525:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"6:8199:9650":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:8581:177":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:16110:7767":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"18:96:5707":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:6586:8176":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:2738:711":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:2654:4801":{"crate_id":5,"path":["std","io"],"kind":"module"},"1:4819:5449":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"16:3985:6908":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"16:8500:8410":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"23:1158:6302":{"crate_id":23,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"4:5:2050":{"crate_id":4,"path":["alloc","vec"],"kind":"macro"},"1:46172:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:6740:233":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:50903:10292":{"crate_id":1,"path":["core","core_arch","simd","f16x16"],"kind":"struct"},"17:12840:10612":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:7762:8329":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:5077:5452":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:5707:26771":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:50079:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"18:515:6881":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:12175:10849":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:44379:9861":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1:50795:10288":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:9603:10829":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:7999:4879":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:9672:199":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:25744:19648":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:726:6889":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"23:899:6302":{"crate_id":23,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"17:596:10535":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:12226:9814":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"22:2386:6460":{"crate_id":22,"path":["aho_corasick","util","prefilter","RareBytesTwo"],"kind":"struct"},"1:26008:19329":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:527:8654":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:6414:9677":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12641:10601":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:44369:5748":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:11407:40734":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:44989:10154":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:12436:10596":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:7089:10789":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:11581:7029":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"20:4936:10516":{"crate_id":20,"path":["regex_automata","util","iter","HalfMatchesIter"],"kind":"struct"},"23:964:6310":{"crate_id":23,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"5:0:1819":{"crate_id":5,"path":["std"],"kind":"module"},"4:918:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3403:121":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:44614:5641":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:8343:10802":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:1403:8299":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:4656:12474":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:10141:26833":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:8183:38615":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"22:1651:6355":{"crate_id":22,"path":["aho_corasick","automaton","FindIter"],"kind":"struct"},"17:15814:7689":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"20:3700:6369":{"crate_id":20,"path":["regex_automata","hybrid","dfa","OverlappingState"],"kind":"struct"},"1:44300:10140":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:16847:7981":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:26655:9928":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:7220:8252":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:4479:19712":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:45542:10159":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"21:2609:31104":{"crate_id":21,"path":["regex_syntax","ast","GroupKind"],"kind":"enum"},"6:6545:9326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:48196:12580":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:44205:5753":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:44098:5753":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:8328:9668":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:915:12361":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"5:4301:19690":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:7189:26779":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:36000:251":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"11:2146:10715":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:0:4868":{"crate_id":17,"path":["object"],"kind":"module"},"5:4279:19688":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:6058:9677":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:26721:9934":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:14626:7381":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:45027:5659":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:6267:8123":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:4861:8875":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:5247:19734":{"crate_id":5,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:51389:10310":{"crate_id":1,"path":["core","core_arch","simd","i32x32"],"kind":"struct"},"6:5344:9072":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:45680:31444":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:5794:10767":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"1:44595:5639":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"10:44:8541":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"22:2728:4960":{"crate_id":22,"path":["aho_corasick","util","search","Span"],"kind":"struct"},"1:45793:185":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:3046:25913":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:50916:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:11822:10568":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:1719:4877":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:10050:12527":{"crate_id":1,"path":["core","random","RandomSource"],"kind":"trait"},"11:2449:4877":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:45892:5051":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"20:3721:31043":{"crate_id":20,"path":["regex_automata","hybrid","error","BuildErrorKind"],"kind":"enum"},"16:3012:25912":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:7468:8290":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:2456:10542":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6300:8130":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:43252:5473":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"22:1625:31146":{"crate_id":22,"path":["aho_corasick","ahocorasick","AhoCorasickKind"],"kind":"enum"},"2:0:539":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"11:123:8521":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"20:2416:10460":{"crate_id":20,"path":["regex_automata","util","lazy","lazy","Lazy"],"kind":"struct"},"16:3306:8006":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:11571:9779":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"11:309:8522":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"11:1886:4877":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"20:4555:4148":{"crate_id":20,"path":["regex_automata","nfa","thompson","pikevm","CapturesMatches"],"kind":"struct"},"1:8570:158":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"23:144:31175":{"crate_id":23,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"1:8536:5667":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4989:8940":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"20:3644:10460":{"crate_id":20,"path":["regex_automata","hybrid","dfa","Lazy"],"kind":"struct"},"5:2755:10747":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:1707:8823":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13517:7180":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"11:2475:4944":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"4:755:10856":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:50174:10265":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:15873:7707":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:7542:11622":{"crate_id":5,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"22:1883:5738":{"crate_id":22,"path":["aho_corasick","packed","api","Searcher"],"kind":"struct"},"16:901:4987":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:15116:7481":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"23:1137:6298":{"crate_id":23,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"16:8317:26785":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"18:718:6886":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:46148:208":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11947:7032":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:48111:5752":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"20:4042:6772":{"crate_id":20,"path":["regex_automata","meta","wrappers","OnePassCache"],"kind":"struct"},"20:4409:6813":{"crate_id":20,"path":["regex_automata","nfa","thompson","map","Utf8SuffixEntry"],"kind":"struct"},"21:2221:31116":{"crate_id":21,"path":["regex_syntax","ast","HexLiteralKind"],"kind":"enum"},"6:6874:9455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:9991:151":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:44561:5647":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"20:5492:2668":{"crate_id":20,"path":["regex_automata","util","syntax","Config"],"kind":"struct"},"5:10952:38603":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"23:1454:6339":{"crate_id":23,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"6:5431:1318":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"14:167:25848":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"22:2138:6401":{"crate_id":22,"path":["aho_corasick","packed","teddy","generic","Teddy"],"kind":"struct"},"6:6653:9389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:51065:10298":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"23:1081:6302":{"crate_id":23,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"1:34113:12307":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:7034:19765":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:15949:7725":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:16498:7890":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"23:1095:6306":{"crate_id":23,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"23:886:6300":{"crate_id":23,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"17:11934:10573":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:6900:9470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"20:3990:10487":{"crate_id":20,"path":["regex_automata","meta","strategy","ReverseInner"],"kind":"struct"},"16:3124:25914":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"21:1834:31123":{"crate_id":21,"path":["regex_syntax","ast","parse","Primitive"],"kind":"enum"},"16:8595:10701":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:34386:9936":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11397:10556":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:50106:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:25604:19648":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:6981:8059":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:5071:19702":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:44389:10913":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"5:8719:5651":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"1:3507:5795":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:7982:5629":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:7339:9511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:48259:10227":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"23:1490:40898":{"crate_id":23,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"1:4:1335":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"16:6062:8045":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"23:1179:6306":{"crate_id":23,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"17:11425:10557":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10229:26835":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"20:4126:10500":{"crate_id":20,"path":["regex_automata","nfa","thompson","backtrack","TryFindMatches"],"kind":"struct"},"17:14191:7288":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"20:4347:4971":{"crate_id":20,"path":["regex_automata","nfa","thompson","literal_trie","State"],"kind":"struct"},"17:13838:7214":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:8783:5748":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"21:2379:31117":{"crate_id":21,"path":["regex_syntax","ast","ClassSet"],"kind":"enum"},"17:16311:7841":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:7015:4743":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"20:2386:10460":{"crate_id":20,"path":["regex_automata","util","lazy","Lazy"],"kind":"struct"},"17:3584:10543":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:495:8631":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:14557:7374":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:15676:7661":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:50700:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:13608:5747":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12828:10611":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:11943:38605":{"crate_id":5,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"21:2920:6547":{"crate_id":21,"path":["regex_syntax","hir","translate","Flags"],"kind":"struct"},"16:7786:40720":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"20:4475:4970":{"crate_id":20,"path":["regex_automata","nfa","thompson","nfa","SparseTransitions"],"kind":"struct"},"1:51308:10307":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:43494:5815":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"23:1069:6298":{"crate_id":23,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"17:16731:7952":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"5:12843:356":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"22:1736:4973":{"crate_id":22,"path":["aho_corasick","nfa","contiguous","NFA"],"kind":"struct"},"1:50849:10290":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:26459:9918":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:49863:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:8711:4166":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:3515:5797":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"8:0:4860":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:5914:10773":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"17:15537:7611":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"22:1642:6369":{"crate_id":22,"path":["aho_corasick","automaton","OverlappingState"],"kind":"struct"},"16:7804:40721":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:7575:9624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:48777:240":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"11:1103:10717":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:6632:9377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:1963:10738":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"16:5740:7007":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:3510:5796":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:12986:5739":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"11:2375:10725":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:48591:9796":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:16825:7975":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:4842:8077":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:11794:10566":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:9379:10823":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"2:353:239":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:12160:10586":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"11:871:10712":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"11:1905:6599":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:14446:7353":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"18:481:6334":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:4590:10884":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"13:125:40712":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"20:5509:10520":{"crate_id":20,"path":["regex_automata","util","wire","AlignAs"],"kind":"struct"},"1:50120:10263":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:7713:4743":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7997:8055":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"22:1922:4969":{"crate_id":22,"path":["aho_corasick","packed","pattern","PatternIter"],"kind":"struct"},"22:0:2531":{"crate_id":22,"path":["aho_corasick"],"kind":"module"},"1:14765:9888":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"20:5338:5827":{"crate_id":20,"path":["regex_automata","util","primitives","PatternIDIter"],"kind":"struct"},"5:5615:215":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"20:3715:3155":{"crate_id":20,"path":["regex_automata","hybrid","error","BuildError"],"kind":"struct"},"22:1613:6363":{"crate_id":22,"path":["aho_corasick","ahocorasick","AhoCorasickBuilder"],"kind":"struct"},"5:9759:9780":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:3805:19647":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"16:4118:8068":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:8033:11623":{"crate_id":5,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"20:2920:2658":{"crate_id":20,"path":["regex_automata","util","syntax"],"kind":"module"},"5:762:5614":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"20:4750:6434":{"crate_id":20,"path":["regex_automata","util","alphabet","ByteClassSet"],"kind":"struct"},"17:321:10533":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"21:2782:10432":{"crate_id":21,"path":["regex_syntax","hir","interval","IntervalSetIter"],"kind":"struct"},"20:3620:5367":{"crate_id":20,"path":["regex_automata","hybrid","dfa","Cache"],"kind":"struct"},"5:6051:233":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:14536:34572":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:6179:10778":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:46544:10894":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"22:2433:5828":{"crate_id":22,"path":["aho_corasick","util","primitives","SmallIndex"],"kind":"struct"},"6:5576:9180":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:7870:4888":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"20:5645:4502":{"crate_id":20,"path":["regex_automata","util","search","PatternSet"],"kind":"struct"},"5:12209:10796":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"22:225:31148":{"crate_id":22,"path":["aho_corasick","automaton","Automaton"],"kind":"trait"},"11:1003:8299":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6335:8133":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"20:4032:10491":{"crate_id":20,"path":["regex_automata","meta","wrappers","OnePass"],"kind":"struct"},"1:51769:2231":{"crate_id":1,"path":["core","core_arch","x86","bf16"],"kind":"struct"},"17:15965:7727":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:50565:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:4927:8080":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:8057:11625":{"crate_id":5,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"16:4808:8076":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:48086:5751":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:549:8667":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"11:1156:10719":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:10964:5436":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:15594:7649":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"21:2841:4971":{"crate_id":21,"path":["regex_syntax","hir","literal","State"],"kind":"struct"},"1:50390:10273":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"21:2880:31139":{"crate_id":21,"path":["regex_syntax","hir","translate","HirFrame"],"kind":"enum"},"21:2791:6641":{"crate_id":21,"path":["regex_syntax","hir","literal","Extractor"],"kind":"struct"},"1:8271:5651":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11564:10559":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:51078:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:6681:9396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:5447:8096":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:15802:7686":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:15827:7695":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:37245:4881":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:3980:19685":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:15721:7670":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5368:9077":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:3655:5474":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:12879:10615":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:13845:5737":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"11:361:12132":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"20:3998:6817":{"crate_id":20,"path":["regex_automata","meta","wrappers","PikeVM"],"kind":"struct"},"20:4801:3373":{"crate_id":20,"path":["regex_automata","util","captures","Captures"],"kind":"struct"},"4:1018:19545":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11054:40728":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:1649:10707":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:507:6878":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:7209:8251":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:47701:10920":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:9544:9773":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:2568:8019":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:4355:19694":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:7355:8049":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:2308:8299":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"22:174:40764":{"crate_id":22,"path":["aho_corasick","ahocorasick","AcAutomaton"],"kind":"trait"},"16:2448:8007":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:16593:7215":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"5:8045:11624":{"crate_id":5,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"20:3981:10485":{"crate_id":20,"path":["regex_automata","meta","strategy","ReverseAnchored"],"kind":"struct"},"1:43349:226":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"21:2981:31133":{"crate_id":21,"path":["regex_syntax","hir","HirKind"],"kind":"enum"},"5:8879:9738":{"crate_id":5,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"4:5455:4898":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"16:7334:8271":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"22:1586:6355":{"crate_id":22,"path":["aho_corasick","ahocorasick","FindIter"],"kind":"struct"},"17:14477:7360":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"22:2693:6476":{"crate_id":22,"path":["aho_corasick","util","primitives","StateIDIter"],"kind":"struct"},"4:1669:10861":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:2287:12423":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"14:216:8505":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:34348:4913":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:5073:19704":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:483:8626":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:7516:9591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:1712:5470":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"20:4817:5820":{"crate_id":20,"path":["regex_automata","util","captures","GroupInfo"],"kind":"struct"},"1:36088:5226":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"16:8666:4066":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"21:3390:6713":{"crate_id":21,"path":["regex_syntax","utf8","Utf8Range"],"kind":"struct"},"1:26633:9926":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"16:6901:8199":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:46431:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:11631:10560":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:3434:39594":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13060:7146":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"18:531:6352":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11849:26882":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:48760:163":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:11619:7031":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"20:2143:4057":{"crate_id":20,"path":["regex_automata","util","captures","CapturesDebugMap"],"kind":"struct"},"1:25339:19244":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11643:10561":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:8808:10815":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:735:6339":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:16300:7836":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:614:19577":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"20:2592:10462":{"crate_id":20,"path":["regex_automata","util","pool","inner","Pool"],"kind":"struct"},"21:3014:6489":{"crate_id":21,"path":["regex_syntax","hir","Literal"],"kind":"struct"},"21:2237:6549":{"crate_id":21,"path":["regex_syntax","ast","ClassPerl"],"kind":"struct"},"1:51011:10296":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"11:2568:8536":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"4:4714:35259":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:43332:4078":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:7912:9844":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:11521:9765":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:1567:8734":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:5469:9131":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"11:2389:5470":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"11:879:10713":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:11502:26861":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:16066:7757":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"20:4280:6800":{"crate_id":20,"path":["regex_automata","nfa","thompson","compiler","Utf8State"],"kind":"struct"},"20:5673:4962":{"crate_id":20,"path":["regex_automata","util","search","Anchored"],"kind":"enum"},"6:5274:9038":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:3853:5471":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:680:6996":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:8609:8060":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11435:40735":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:4668:9778":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:14951:7448":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:9629:38546":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"22:1892:40762":{"crate_id":22,"path":["aho_corasick","packed","api","SearchKind"],"kind":"enum"},"1:3155:274":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"20:5706:4959":{"crate_id":20,"path":["regex_automata","util","search","MatchError"],"kind":"struct"},"16:8118:223":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:7013:8211":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"22:2466:6470":{"crate_id":22,"path":["aho_corasick","util","primitives","SmallIndexIter"],"kind":"struct"},"1:25119:34961":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:113:5708":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:50930:10293":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:46656:5439":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"21:1885:6500":{"crate_id":21,"path":["regex_syntax","ast","parse","ParserI"],"kind":"struct"},"1:47862:5764":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"0:815:2529":{"crate_id":0,"path":["regex","escape"],"kind":"function"},"1:46013:223":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"5:12842:1400":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"23:1166:6305":{"crate_id":23,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"16:8230:26784":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:1284:12152":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:1434:10714":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:7916:10689":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:6285:9778":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:1007:8529":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:1043:4944":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"20:4591:31056":{"crate_id":20,"path":["regex_automata","nfa","thompson","pikevm","FollowEpsilon"],"kind":"enum"},"1:50498:10277":{"crate_id":1,"path":["core","core_arch","simd","f16x8"],"kind":"struct"},"1:25957:19328":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:5671:9226":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"21:269:40742":{"crate_id":21,"path":["regex_syntax","ast","visitor","ClassFrame"],"kind":"enum"},"4:7298:4952":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:5243:9022":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:7975:39313":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"17:14602:7380":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:44173:10135":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:3999:10862":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:2702:8025":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:6203:26773":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:5844:10772":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"6:7412:9540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:15780:7684":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11807:10567":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:1619:8530":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:1599:10722":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13689:26820":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:3937:10545":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"20:5097:5707":{"crate_id":20,"path":["regex_automata","util","prefilter","memchr","Memchr2"],"kind":"struct"},"22:2215:6435":{"crate_id":22,"path":["aho_corasick","util","alphabet","ByteSet"],"kind":"struct"},"4:1588:4743":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:47569:10917":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:12792:10852":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"22:2101:3298":{"crate_id":22,"path":["aho_corasick","packed","teddy","generic","Match"],"kind":"struct"},"5:1947:736":{"crate_id":5,"path":["std","env"],"kind":"module"},"5:3534:10755":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"21:2947:19678":{"crate_id":21,"path":["regex_syntax","hir","ErrorKind"],"kind":"enum"},"4:3827:194":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12225:7062":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"21:3049:10435":{"crate_id":21,"path":["regex_syntax","hir","ClassUnicodeIter"],"kind":"struct"},"5:11034:10756":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:43364:223":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:13839:5738":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"20:4419:4973":{"crate_id":20,"path":["regex_automata","nfa","thompson","nfa","NFA"],"kind":"struct"},"21:3038:6548":{"crate_id":21,"path":["regex_syntax","hir","ClassUnicode"],"kind":"struct"},"1:48763:176":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:6678:10652":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"21:2197:31115":{"crate_id":21,"path":["regex_syntax","ast","SpecialLiteralKind"],"kind":"enum"},"1:45555:10161":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"20:3572:3155":{"crate_id":20,"path":["regex_automata","dfa","onepass","BuildError"],"kind":"struct"},"6:536:8660":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:51267:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:11573:7028":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:51535:10316":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:14811:7406":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:48860:192":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:50336:10271":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13102:26979":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:14246:7307":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:8454:9688":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"6:5320:9063":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:8596:19678":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:51463:10312":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1715:8827":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"23:956:6314":{"crate_id":23,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"1:51132:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:8924:9739":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:1671:8809":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:6481:9292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:8586:10807":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:50984:10295":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:46507:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"23:878:6298":{"crate_id":23,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"5:3698:9778":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"1:7209:9872":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:14512:7364":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:80:5706":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:14743:284":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:25642:34969":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"4:6736:19562":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:26622:9925":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"5:12857:944":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"17:12742:7118":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:11717:32450":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"21:1948:150":{"crate_id":21,"path":["regex_syntax","ast","Error"],"kind":"struct"},"17:10632:26848":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"21:2576:31106":{"crate_id":21,"path":["regex_syntax","ast","RepetitionRange"],"kind":"enum"},"17:11289:40733":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:4441:12145":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:16431:7878":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:5492:465":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:51159:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:6779:8184":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:35970:4066":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:3143:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"20:5076:6360":{"crate_id":20,"path":["regex_automata","util","prefilter","aho_corasick","AhoCorasick"],"kind":"struct"},"1:44331:10142":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:5196:8088":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"22:2006:6419":{"crate_id":22,"path":["aho_corasick","packed","teddy","builder","x86_64","SlimAVX2"],"kind":"struct"},"4:2187:9676":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"20:4528:2665":{"crate_id":20,"path":["regex_automata","nfa","thompson","pikevm","Builder"],"kind":"struct"},"6:7986:9636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10939:7015":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"21:2803:31135":{"crate_id":21,"path":["regex_syntax","hir","literal","ExtractKind"],"kind":"enum"},"16:7713:40719":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:5496:9149":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"11:669:5470":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12377:26952":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"4:7976:259":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"5:12860:1957":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"20:3525:10473":{"crate_id":20,"path":["regex_automata","dfa","onepass","SparseTransitionIter"],"kind":"struct"},"17:10900:10549":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"6:469:4181":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:16410:7872":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"22:2790:31147":{"crate_id":22,"path":["aho_corasick","util","search","StartKind"],"kind":"enum"},"5:8262:9683":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13610:7185":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:12859:1951":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"1:25329:19648":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:13214:7155":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"5:9685:9778":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:9109:162":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"21:2717:31126":{"crate_id":21,"path":["regex_syntax","either","Either"],"kind":"enum"},"6:5224:9014":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:4940:8923":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:11294:10817":{"crate_id":5,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:10644:11411":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:51402:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:44501:146":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"22:1945:2665":{"crate_id":22,"path":["aho_corasick","packed","teddy","builder","Builder"],"kind":"struct"},"16:906:10533":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"16:5170:8087":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:11235:165":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:0:1067":{"crate_id":6,"path":["libc"],"kind":"module"},"5:1203:10715":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:34760:208":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"4:2338:9824":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:48575:5731":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:8813:19684":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"20:5040:6711":{"crate_id":20,"path":["regex_automata","util","look","LookSetIter"],"kind":"struct"},"20:4003:10489":{"crate_id":20,"path":["regex_automata","meta","wrappers","PikeVMEngine"],"kind":"struct"},"1:51649:10321":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:5003:8948":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12943:7128":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"11:2575:4888":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:12444:10899":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:16461:7883":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:3962:132":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11474:26860":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:4625:10763":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:2838:8031":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:5070:8982":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:1628:10720":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:25341:6428":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"21:2075:6545":{"crate_id":21,"path":["regex_syntax","ast","Comment"],"kind":"struct"},"1:26051:19648":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:10484:26843":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:8525:8412":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:26022:12433":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:16883:7988":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:4894:10888":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:8517:9676":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11548:26862":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:50322:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"20:5573:6867":{"crate_id":20,"path":["regex_automata","util","determinize","state","StateBuilderEmpty"],"kind":"struct"},"16:4871:8078":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:3840:5470":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:7753:9841":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:16331:7844":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12342:7074":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"22:2229:6437":{"crate_id":22,"path":["aho_corasick","util","alphabet","BitSet"],"kind":"struct"},"16:7539:8298":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"11:374:12135":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:46997:5448":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:44145:31439":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:10678:10833":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"23:1464:6343":{"crate_id":23,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"17:15740:7671":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:26318:6850":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"20:3637:6742":{"crate_id":20,"path":["regex_automata","hybrid","dfa","SearchProgress"],"kind":"struct"},"17:13324:10627":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10052:12528":{"crate_id":1,"path":["core","random","Random"],"kind":"trait"},"17:15225:7492":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:4885:234":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"15:299:12123":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:15082:7468":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:7158:246":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"22:2412:6465":{"crate_id":22,"path":["aho_corasick","util","prefilter","StartBytesOne"],"kind":"struct"},"6:568:8677":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:8308:19596":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:44321:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:16895:7991":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:35984:5450":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"20:3755:6760":{"crate_id":20,"path":["regex_automata","hybrid","id","LazyStateID"],"kind":"struct"},"20:3675:2668":{"crate_id":20,"path":["regex_automata","hybrid","dfa","Config"],"kind":"struct"},"20:3818:3155":{"crate_id":20,"path":["regex_automata","meta","error","BuildError"],"kind":"struct"},"17:14218:7297":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"11:1672:40708":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:49971:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:26288:9892":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:16292:7835":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:6702:4910":{"crate_id":4,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"20:4583:6821":{"crate_id":20,"path":["regex_automata","nfa","thompson","pikevm","SlotTable"],"kind":"struct"},"20:3568:10475":{"crate_id":20,"path":["regex_automata","dfa","onepass","SlotsIter"],"kind":"struct"},"17:12212:7061":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"20:3556:6723":{"crate_id":20,"path":["regex_automata","dfa","onepass","Epsilons"],"kind":"struct"},"16:2504:8016":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:44654:5627":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:4771:9859":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:11873:26883":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"21:2628:6622":{"crate_id":21,"path":["regex_syntax","ast","CaptureName"],"kind":"struct"},"5:3796:39363":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:5229:10546":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:50457:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:12864:2034":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"5:9568:10449":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:12933:7126":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:3480:10753":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:14056:123":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:1068:19605":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:6755:19564":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:47712:9884":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:44460:5631":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:7881:19543":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:1818:35250":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:26352:31412":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"20:4512:4969":{"crate_id":20,"path":["regex_automata","nfa","thompson","nfa","PatternIter"],"kind":"struct"},"20:5441:6477":{"crate_id":20,"path":["regex_automata","util","primitives","WithStateIDIter"],"kind":"struct"},"5:8802:10813":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:48066:5750":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:14771:7402":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"21:3186:6551":{"crate_id":21,"path":["regex_syntax","hir","Repetition"],"kind":"struct"},"20:4098:10499":{"crate_id":20,"path":["regex_automata","meta","wrappers","ReverseDFAEngine"],"kind":"struct"},"6:5481:9140":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"4:5732:19557":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"17:12476:10600":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:1694:8819":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4966:8932":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:25971:12433":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"4:7821:4743":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:9575:38545":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:6387:10632":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"10:36:8540":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:6438:26774":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"23:1039:31178":{"crate_id":23,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"1:29675:286":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:2964:8037":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"22:2193:10411":{"crate_id":22,"path":["aho_corasick","util","alphabet","ByteClassElements"],"kind":"struct"},"1:45714:9736":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:1085:10712":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"22:2340:10417":{"crate_id":22,"path":["aho_corasick","util","prefilter","MemmemBuilder"],"kind":"struct"},"16:2433:25911":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:13590:7126":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:44573:5638":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:11034:5442":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:13634:26852":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:12434:9818":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"20:3888:4148":{"crate_id":20,"path":["regex_automata","meta","regex","CapturesMatches"],"kind":"struct"},"4:7390:282":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"20:3812:2665":{"crate_id":20,"path":["regex_automata","hybrid","regex","Builder"],"kind":"struct"},"1:45985:10184":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1:50187:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:51685:10323":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"21:1859:5375":{"crate_id":21,"path":["regex_syntax","ast","parse","ParserBuilder"],"kind":"struct"},"1:50430:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"18:563:6883":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"23:1472:6345":{"crate_id":23,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"20:4719:10410":{"crate_id":20,"path":["regex_automata","util","alphabet","ByteClassIter"],"kind":"struct"},"5:1180:8299":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:51759:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1:51675:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"5:5130:10765":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"22:1912:6407":{"crate_id":22,"path":["aho_corasick","packed","pattern","Patterns"],"kind":"struct"},"1:37658:5798":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"20:4264:6799":{"crate_id":20,"path":["regex_automata","nfa","thompson","compiler","ThompsonRef"],"kind":"struct"},"6:5623:9206":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6474:9288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:1448:10719":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:11030:219":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"16:2898:8034":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:2988:207":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:1588:8748":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:11392:38599":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"20:4287:6803":{"crate_id":20,"path":["regex_automata","nfa","thompson","compiler","Utf8Node"],"kind":"struct"},"1:3413:4912":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12893:10616":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:45035:5661":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:2598:19639":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"5:12866:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"22:1712:6368":{"crate_id":22,"path":["aho_corasick","dfa","DFA"],"kind":"struct"},"4:2212:10863":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:5314:9060":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"22:1685:10403":{"crate_id":22,"path":["aho_corasick","automaton","StreamChunkIter"],"kind":"struct"},"4:1264:35464":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:11829:8597":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:11278:38576":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"20:5136:31065":{"crate_id":20,"path":["regex_automata","util","prefilter","Choice"],"kind":"enum"},"22:1936:6402":{"crate_id":22,"path":["aho_corasick","packed","rabinkarp","RabinKarp"],"kind":"struct"},"17:13876:7229":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"9:227:4971":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"20:5519:10521":{"crate_id":20,"path":["regex_automata","util","wire","SerializeError"],"kind":"struct"},"21:2545:6614":{"crate_id":21,"path":["regex_syntax","ast","RepetitionOp"],"kind":"struct"},"20:3737:31045":{"crate_id":20,"path":["regex_automata","hybrid","error","StartError"],"kind":"enum"},"21:283:40743":{"crate_id":21,"path":["regex_syntax","ast","visitor","ClassInduct"],"kind":"enum"},"1:26366:9902":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7383:8275":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:14418:7349":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"21:2170:31107":{"crate_id":21,"path":["regex_syntax","ast","LiteralKind"],"kind":"enum"},"20:3159:10468":{"crate_id":20,"path":["regex_automata","util","determinize","state","Repr"],"kind":"struct"},"5:3668:5656":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"4:3134:35465":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:3642:128":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"20:2239:3869":{"crate_id":20,"path":["regex_automata","util","escape","DebugHaystack"],"kind":"struct"},"20:4112:2665":{"crate_id":20,"path":["regex_automata","nfa","thompson","backtrack","Builder"],"kind":"struct"},"1:46951:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:8796:5750":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"16:8206:8046":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:10676:10834":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"22:1580:6360":{"crate_id":22,"path":["aho_corasick","ahocorasick","AhoCorasick"],"kind":"struct"},"20:4272:10502":{"crate_id":20,"path":["regex_automata","nfa","thompson","compiler","Utf8Compiler"],"kind":"struct"},"16:8582:10698":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"20:4486:4968":{"crate_id":20,"path":["regex_automata","nfa","thompson","nfa","DenseTransitions"],"kind":"struct"},"1:14441:10907":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"16:6186:8112":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:852:10711":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"22:2124:6426":{"crate_id":22,"path":["aho_corasick","packed","teddy","generic","Fat"],"kind":"struct"},"17:16121:7771":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:48402:10231":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:47758:4890":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:3803:224":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:36973:5789":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:7925:12520":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:491:6877":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13385:26850":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:7314:9493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10919:5748":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:48609:135":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"21:1868:5863":{"crate_id":21,"path":["regex_syntax","ast","parse","Parser"],"kind":"struct"},"21:3336:40744":{"crate_id":21,"path":["regex_syntax","unicode","CanonicalClassQuery"],"kind":"enum"},"20:3550:6722":{"crate_id":20,"path":["regex_automata","dfa","onepass","PatternEpsilons"],"kind":"struct"},"1:11581:32449":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"16:8093:10697":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:48120:5753":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:2411:9828":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:12416:5765":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:3152:157":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:16753:7957":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"11:1882:4743":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:9442:5470":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"22:2251:3155":{"crate_id":22,"path":["aho_corasick","util","error","BuildError"],"kind":"struct"},"1:0:597":{"crate_id":1,"path":["core"],"kind":"module"},"20:5590:173":{"crate_id":20,"path":["regex_automata","util","search","Input"],"kind":"struct"},"1:12211:5747":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:41984:5805":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"20:3951:2665":{"crate_id":20,"path":["regex_automata","meta","regex","Builder"],"kind":"struct"},"6:1601:8755":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:16139:7774":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:12839:504":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"16:8040:40724":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"23:1436:5708":{"crate_id":23,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"1:43386:225":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12987:7183":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:4508:9778":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"5:9998:10803":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:6967:8042":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:14102:7266":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:7359:9517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:1573:8736":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13957:7243":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:674:19583":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"6:1518:8703":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:2722:8026":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:869:166":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:5158:8998":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"21:3405:10447":{"crate_id":21,"path":["regex_syntax","utf8","Utf8Sequences"],"kind":"struct"},"21:3084:10436":{"crate_id":21,"path":["regex_syntax","hir","ClassBytesIter"],"kind":"struct"},"20:3788:2681":{"crate_id":20,"path":["regex_automata","hybrid","regex","Regex"],"kind":"struct"},"17:12266:7065":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:5222:8089":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:5683:9231":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"23:922:6306":{"crate_id":23,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"5:4946:19691":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"22:2403:6464":{"crate_id":22,"path":["aho_corasick","util","prefilter","StartBytesBuilder"],"kind":"struct"},"5:9508:19769":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:1033:4877":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:8318:9667":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:16102:7766":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:8854:9737":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"23:1258:6309":{"crate_id":23,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"20:4376:6810":{"crate_id":20,"path":["regex_automata","nfa","thompson","map","Utf8BoundedEntry"],"kind":"struct"},"5:11191:10842":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:45830:5181":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"5:4045:10760":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:36059:5227":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:51471:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"20:4008:6770":{"crate_id":20,"path":["regex_automata","meta","wrappers","PikeVMCache"],"kind":"struct"},"5:8983:6646":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"22:2354:6451":{"crate_id":22,"path":["aho_corasick","util","prefilter","RareBytesBuilder"],"kind":"struct"},"17:11967:10574":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11181:10553":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:11347:9767":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"5:462:10728":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13238:7156":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:6995:8204":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:7156:8238":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:48877:10250":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"11:498:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:25609:19249":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"4:7777:4743":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:50538:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:6692:9398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:16836:7980":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:45774:206":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"21:1942:10427":{"crate_id":21,"path":["regex_syntax","ast","print","Writer"],"kind":"struct"},"20:2150:4063":{"crate_id":20,"path":["regex_automata","util","captures","fmt","Key"],"kind":"struct"},"11:2560:40707":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:25134:34966":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"11:2548:8532":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:7793:9676":{"crate_id":4,"path":["alloc","collections","btree","set","Cursor"],"kind":"struct"},"1:4160:4877":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:8025:8353":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"11:1891:4944":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:12854:951":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"5:11649:9798":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:16149:7779":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11994:7048":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:44473:5621":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6915:9481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"23:1200:6310":{"crate_id":23,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"20:5090:5706":{"crate_id":20,"path":["regex_automata","util","prefilter","memchr","Memchr"],"kind":"struct"},"1:26065:19322":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14964:7450":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:50822:10289":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:44644:5643":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:25108:34958":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:1020:8530":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:26093:19323":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:10281:26837":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:50511:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"21:2063:6544":{"crate_id":21,"path":["regex_syntax","ast","WithComments"],"kind":"struct"},"1:50808:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"20:619:1151":{"crate_id":20,"path":["regex_automata","meta"],"kind":"module"},"1:36090:118":{"crate_id":1,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"5:12851:797":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"17:12464:10599":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:35991:10001":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"16:6082:8101":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"20:3824:31043":{"crate_id":20,"path":["regex_automata","meta","error","BuildErrorKind"],"kind":"enum"},"1:44552:5637":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"22:2271:4959":{"crate_id":22,"path":["aho_corasick","util","error","MatchError"],"kind":"struct"},"17:16018:7742":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:6692:9677":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:13666:10628":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:13828:4885":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"18:635:6330":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:7302:8267":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:11330:38556":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"11:2119:8299":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:50012:10259":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:11553:9796":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"4:3347:6599":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:3881:159":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"20:2090:3180":{"crate_id":20,"path":["regex_automata","util","captures"],"kind":"module"},"5:11407:38601":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:14162:7279":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:2308:9822":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:14759:7401":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:14174:7280":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:3443:5223":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:16000:7738":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:46246:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:456:10726":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:48076:5745":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:37831:5799":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"21:2497:31108":{"crate_id":21,"path":["regex_syntax","ast","AssertionKind"],"kind":"enum"},"1:50039:10260":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:11028:5440":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:8491:9692":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:13133:10618":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:5076:8984":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:2857:9832":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:14271:7311":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6438:9275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"20:4294:6804":{"crate_id":20,"path":["regex_automata","nfa","thompson","compiler","Utf8LastTransition"],"kind":"struct"},"1:49890:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"22:2365:6456":{"crate_id":22,"path":["aho_corasick","util","prefilter","RareByteOffsets"],"kind":"struct"},"20:3491:2665":{"crate_id":20,"path":["regex_automata","dfa","onepass","Builder"],"kind":"struct"},"1:50241:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:44630:5642":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:5083:8084":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:2413:25884":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:8322:19597":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:48468:5767":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:25121:34963":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"20:3604:10420":{"crate_id":20,"path":["regex_automata","dfa","remapper","IndexMapper"],"kind":"struct"},"20:5556:4971":{"crate_id":20,"path":["regex_automata","util","determinize","state","State"],"kind":"struct"},"1:25221:19246":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:781:10733":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:976:5470":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:8264:8369":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:8255:9652":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:12220:9813":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:51092:10299":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:13850:5736":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"21:2350:31114":{"crate_id":21,"path":["regex_syntax","ast","ClassUnicodeOpKind"],"kind":"enum"},"1:13494:5759":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11722:7048":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"22:1702:31155":{"crate_id":22,"path":["aho_corasick","automaton","StreamChunk"],"kind":"enum"},"16:8633:26786":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:8957:5336":{"crate_id":5,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:48785:220":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"5:12845:1827":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"17:13811:7206":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:778:10731":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:2295:9854":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"14:189:25855":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"20:2627:10463":{"crate_id":20,"path":["regex_automata","util","pool","inner","PoolGuard"],"kind":"struct"},"1:50093:10262":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:6637:10780":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:13990:7249":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:3108:8061":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:9831:10741":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:50673:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:3201:239":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"1:51619:10320":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:8296:9661":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6382:9235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7055:8215":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:8437:9686":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:8466:152":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"1:4260:4743":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6887:8041":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:51627:10253":{"crate_id":1,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"16:6121:8044":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"0:129:2524":{"crate_id":0,"path":["regex","bytes"],"kind":"module"},"11:2409:5471":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:639:12075":{"crate_id":5,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"1:42039:5806":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:5153:19701":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:12430:10898":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12654:10602":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:1999:10740":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"5:1965:10739":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"5:10820:116":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:13147:10620":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:10713:7009":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"20:2329:10458":{"crate_id":20,"path":["regex_automata","util","iter","TryMatchesIter"],"kind":"struct"},"1:25090:5217":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"20:4657:40739":{"crate_id":20,"path":["regex_automata","nfa","thompson","range_trie","SplitRange"],"kind":"enum"},"6:1629:8780":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:8295:8373":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"20:4692:31057":{"crate_id":20,"path":["regex_automata","util","alphabet","UnitKind"],"kind":"enum"},"17:16197:7816":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:3138:35466":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:5659:9219":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"5:4471:12147":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:46470:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:6732:9414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:4933:8919":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:51240:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:11132:10552":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:14077:7264":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:15705:7667":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"20:5458:6860":{"crate_id":20,"path":["regex_automata","util","start","StartByteMap"],"kind":"struct"},"1:47194:4971":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:7801:9842":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:13821:2204":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:47830:5762":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:4894:8899":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:51751:10326":{"crate_id":1,"path":["core","core_arch","x86","__m512h"],"kind":"struct"},"17:16712:7242":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"21:2772:6638":{"crate_id":21,"path":["regex_syntax","hir","interval","IntervalSet"],"kind":"struct"},"22:2455:6468":{"crate_id":22,"path":["aho_corasick","util","primitives","SmallIndexError"],"kind":"struct"},"16:7421:26780":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:5453:10766":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5531:9160":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:50444:10275":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"20:4568:5367":{"crate_id":20,"path":["regex_automata","nfa","thompson","pikevm","Cache"],"kind":"struct"},"23:1530:6355":{"crate_id":23,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11769:7036":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:8501:10805":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"21:1938:10426":{"crate_id":21,"path":["regex_syntax","ast","print","Printer"],"kind":"struct"},"17:15094:7470":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:7935:8347":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:5058:8083":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"20:4807:4180":{"crate_id":20,"path":["regex_automata","util","captures","CapturesPatternIter"],"kind":"struct"},"1:47934:5765":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"20:4054:10494":{"crate_id":20,"path":["regex_automata","meta","wrappers","HybridEngine"],"kind":"struct"},"1:45810:5471":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:11338:10555":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:6251:10779":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"11:444:12140":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"23:1034:6647":{"crate_id":23,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"17:14431:7351":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"20:2527:10462":{"crate_id":20,"path":["regex_automata","util","pool","Pool"],"kind":"struct"},"6:5126:8995":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:14827:7411":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:7198:5625":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:3887:6900":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:3748:10758":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:26699:9932":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:46649:5437":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:16245:7817":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:9493:19770":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"4:4268:4877":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"20:5422:6475":{"crate_id":20,"path":["regex_automata","util","primitives","StateIDError"],"kind":"struct"},"17:14009:7254":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:9433:9768":{"crate_id":5,"path":["std","random","DefaultRandomSource"],"kind":"struct"},"20:4076:10496":{"crate_id":20,"path":["regex_automata","meta","wrappers","ReverseHybrid"],"kind":"struct"},"6:7584:9627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:9109:9756":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"1:2091:9778":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:50619:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:10779:7011":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:3127:3636":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:1723:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:50970:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:12804:10609":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"18:538:6882":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:3437:39735":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"20:5052:6854":{"crate_id":20,"path":["regex_automata","util","look","UnicodeWordBoundaryError"],"kind":"struct"},"23:1523:6769":{"crate_id":23,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:2051:6543":{"crate_id":21,"path":["regex_syntax","ast","Position"],"kind":"struct"},"1:25215:19243":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"20:5585:6869":{"crate_id":20,"path":["regex_automata","util","determinize","state","StateBuilderNFA"],"kind":"struct"},"1:12168:3463":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"20:3849:10481":{"crate_id":20,"path":["regex_automata","meta","error","RetryFailError"],"kind":"struct"},"5:12838:1245":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"1:51429:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:10020:131":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:16044:7752":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"20:5202:6468":{"crate_id":20,"path":["regex_automata","util","primitives","SmallIndexError"],"kind":"struct"},"1:50754:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:4738:32442":{"crate_id":1,"path":["core","cell","lazy","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"18:0:2532":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:46959:5447":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:50633:10282":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:4436:9778":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:1716:4743":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"22:2472:3181":{"crate_id":22,"path":["aho_corasick","util","primitives","PatternID"],"kind":"struct"},"5:2911:10751":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:8873:10813":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13480:7177":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:1504:8698":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:26644:9927":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:51335:10308":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:36002:260":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"18:670:6357":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:11015:123":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:7946:8053":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:1353:10537":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:13504:7178":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5642:9215":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:5198:9001":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10390:26840":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:46909:10197":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:5170:8999":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:4402:8073":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:3925:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"23:1123:6310":{"crate_id":23,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"6:5406:9092":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:50484:10253":{"crate_id":1,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"21:3275:6711":{"crate_id":21,"path":["regex_syntax","hir","LookSetIter"],"kind":"struct"},"1:12947:10901":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:47962:5755":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:43288:5810":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:14388:7340":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"22:1770:2665":{"crate_id":22,"path":["aho_corasick","nfa","contiguous","Builder"],"kind":"struct"},"20:4620:6832":{"crate_id":20,"path":["regex_automata","nfa","thompson","range_trie","NextDupe"],"kind":"struct"},"1:49850:10252":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:9562:119":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"20:4086:6774":{"crate_id":20,"path":["regex_automata","meta","wrappers","ReverseHybridCache"],"kind":"struct"},"20:5028:6710":{"crate_id":20,"path":["regex_automata","util","look","LookSet"],"kind":"struct"},"5:4960:9536":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"}},"external_crates":{"23":{"name":"memchr","html_root_url":null},"20":{"name":"regex_automata","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"aho_corasick","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"regex_syntax","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":34}