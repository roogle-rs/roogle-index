{"root":"0:0:1677","crate_version":"2.2.2","includes_private":false,"index":{"0:496:2937":{"id":"0:496:2937","crate_id":0,"name":"set_hostname","span":{"filename":"src/quirks.rs","begin":[162,0],"end":[194,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-hostname","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_hostname",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10242:1582":{"id":"2:10242:1582","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10243:1533","2:10244:4079","2:10246:3470"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23089:17236":{"id":"2:23089:17236","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23090:7458","2:23091:59983","2:23092:59984"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23082:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3269:211":{"id":"2:3269:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:919":{"id":"0:919","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,9],"end":[165,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:920:408"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:649":{"id":"0:649","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2869,0],"end":[2881,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Target","id":"21:56:221","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:651:2339","0:652:652","0:653:2341"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:7928:4749":{"id":"2:7928:4749","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7929:59748","2:7930:59749","2:7931:59746","2:7932:59744","2:7933:59750","2:7934:59747","2:7935:59745"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:534:1840":{"id":"0:534:1840","crate_id":0,"name":"password","span":{"filename":"src/lib.rs","begin":[901,4],"end":[913,5]},"visibility":"public","docs":"Return the password for this URL, if any, as a percent-encoded ASCII string.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms:secret123@example.com\")?;\nassert_eq!(url.password(), Some(\"secret123\"));\n\nlet url = Url::parse(\"ftp://:secret123@example.com\")?;\nassert_eq!(url.password(), Some(\"secret123\"));\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.password(), None);\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.password(), None);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:654":{"id":"0:654","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2883,0],"end":[2889,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Drop","id":"2:3516:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:656:578"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2869-0:932:2036":{"id":"b:2:2869-0:932:2036","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2871:1581"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10309:189":{"id":"2:10309:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10310:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4723:1582":{"id":"1:4723:1582","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4724:2085","1:4725:59082","1:4727:59083","1:4728:5372","1:4729:59084","1:4730:59085","1:4731:3470","1:4740:2654"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:891:2900":{"id":"0:891:2900","crate_id":0,"name":"BeforePath","span":{"filename":"src/slicing.rs","begin":[92,4],"end":[92,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:610:997":{"id":"0:610:997","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[2562,4],"end":[2564,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"cmp::Ordering","id":"2:37627:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:386:1595":{"id":"0:386:1595","crate_id":0,"name":"path_segments","span":{"filename":"src/path_segments.rs","begin":[9,0],"end":[246,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:861:1596"],"is_stripped":true}},"0:712:1592":{"id":"0:712:1592","crate_id":0,"name":"Origin","span":{"filename":"src/origin.rs","begin":[54,0],"end":[60,1]},"visibility":"public","docs":"The origin of an URL\n\nTwo URLs with the same origin are considered\nto originate from the same entity and can therefore trust\neach other.\n\nThe origin is determined based on the scheme as follows:\n\n- If the scheme is \"blob\" the origin is the origin of the\n  URL contained in the path component. If parsing fails,\n  it is an opaque origin.\n- If the scheme is \"ftp\", \"http\", \"https\", \"ws\", or \"wss\",\n  then the origin is a tuple of the scheme, host, and port.\n- If the scheme is anything else, the origin is opaque, meaning\n  the URL does not have the same origin as any other URL.\n\nFor more information see <https://url.spec.whatwg.org/#origin>","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:713:2551","0:716:2536"],"impls":[]}},"0:533:1834":{"id":"0:533:1834","crate_id":0,"name":"username","span":{"filename":"src/lib.rs","begin":[868,4],"end":[875,5]},"visibility":"public","docs":"Return the username for this URL (typically the empty string)\nas a percent-encoded ASCII string.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.username(), \"rms\");\n\nlet url = Url::parse(\"ftp://:secret123@example.com\")?;\nassert_eq!(url.username(), \"\");\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.username(), \"\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:504:715":{"id":"0:504:715","crate_id":0,"name":"hash","span":{"filename":"src/quirks.rs","begin":[265,0],"end":[267,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-hash","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:532:1709":{"id":"0:532:1709","crate_id":0,"name":"cannot_be_a_base","span":{"filename":"src/lib.rs","begin":[842,4],"end":[844,5]},"visibility":"public","docs":"Return whether this URL is a cannot-be-a-base URL,\nmeaning that parsing a relative URL string with this URL as the base will return an error.\n\nThis is the case if the scheme and `:` delimiter are not followed by a `/` slash,\nas is typically the case of `data:` and `mailto:` URLs.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(!url.cannot_be_a_base());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.cannot_be_a_base());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(url.cannot_be_a_base());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:549:1731":{"id":"0:549:1731","crate_id":0,"name":"query","span":{"filename":"src/lib.rs","begin":[1271,4],"end":[1283,5]},"visibility":"public","docs":"Return this URL’s query string, if any, as a percent-encoded ASCII string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\nfn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/products?page=2\")?;\nlet query = url.query();\nassert_eq!(query, Some(\"page=2\"));\n\nlet url = Url::parse(\"https://example.com/products\")?;\nlet query = url.query();\nassert!(query.is_none());\n\nlet url = Url::parse(\"https://example.com/?country=español\")?;\nlet query = url.query();\nassert_eq!(query, Some(\"country=espa%C3%B1ol\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9260:3574":{"id":"2:9260:3574","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[149,38],"end":[149,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::origin::Origin","name":"Origin","id":"0:712:1592","glob":false}},"0:680:1589":{"id":"0:680:1589","crate_id":0,"name":"Host","span":{"filename":"src/host.rs","begin":[42,0],"end":[60,1]},"visibility":"public","docs":"The host name of an URL.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:682:1781","0:685:1778","0:688:1779"],"impls":[]}},"0:524:306":{"id":"0:524:306","crate_id":0,"name":"as_str","span":{"filename":"src/lib.rs","begin":[538,4],"end":[540,5]},"visibility":"public","docs":"Return the serialization of this URL.\n\nThis is fast since that serialization is already stored in the `Url` struct.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url_str = \"https://example.net/\";\nlet url = Url::parse(url_str)?;\nassert_eq!(url.as_str(), url_str);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:210:1570":{"id":"0:210:1570","crate_id":0,"name":"parser","span":{"filename":"src/parser.rs","begin":[9,0],"end":[1606,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:754:1593","0:790:1594"],"is_stripped":true}},"0:183:1590":{"id":"0:183:1590","crate_id":0,"name":"origin","span":{"filename":"src/origin.rs","begin":[9,0],"end":[113,31]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:712:1592","0:735:1591"],"is_stripped":true}},"2:3492:116":{"id":"2:3492:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:221","2:3494:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9259:3575":{"id":"2:9259:3575","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:501:2944":{"id":"0:501:2944","crate_id":0,"name":"set_pathname","span":{"filename":"src/quirks.rs","begin":[233,0],"end":[248,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-pathname","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_pathname",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:14242:4253":{"id":"2:14242:4253","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14243:56608","2:14244:56609","2:14245:56610","2:14246:56611","2:14247:56612","2:14248:56613","2:14249:2654"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::host::Host","name":"Host","id":"0:680:1589","glob":false}},"2:3310:3088":{"id":"2:3310:3088","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[149,24],"end":[149,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::origin::OpaqueOrigin","name":"OpaqueOrigin","id":"0:735:1591","glob":false}},"b:2:2872-0:932:2036":{"id":"b:2:2872-0:932:2036","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2866:3112","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2874:54626"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22840:4765":{"id":"2:22840:4765","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22841:60023","2:22842:1227","2:22843:1228","2:22844:60024","2:22845:60025","2:22846:60026","2:22847:60027","2:22848:60028","2:22849:60029","2:22850:60030"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:438:753":{"id":"0:438:753","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["_",{"kind":"resolved_path","inner":{"name":"RangeFull","id":"2:45860:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13428:304":{"id":"2:13428:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:16010:2990","`u8`":"1:16021:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13529:61033":{"id":"2:13529:61033","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13054:3426","prim@char":"1:16004:2985"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6861:3354":{"id":"1:6861:3354","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:57387"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:489:1840":{"id":"0:489:1840","crate_id":0,"name":"password","span":{"filename":"src/quirks.rs","begin":[83,0],"end":[85,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-password","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10540:146":{"id":"2:10540:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10541:652","2:10542:2085","2:10543:54634","2:10544:54635","2:10545:54636","2:10546:54637","2:10547:54638","2:10548:54639","2:10549:54640","2:10550:54641","2:10551:54642","2:10552:54643","2:10553:54644","2:10554:54645","2:10555:54646","2:10556:1533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:928":{"id":"0:928","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,15],"end":[191,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:930:408"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:556:1996":{"id":"0:556:1996","crate_id":0,"name":"set_fragment","span":{"filename":"src/lib.rs","begin":[1383,4],"end":[1397,5]},"visibility":"public","docs":"Change this URL’s fragment identifier.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com/data.csv\")?;\nassert_eq!(url.as_str(), \"https://example.com/data.csv\");\nurl.set_fragment(Some(\"cell=4,1-6,2\"));\nassert_eq!(url.as_str(), \"https://example.com/data.csv#cell=4,1-6,2\");\nassert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n\nurl.set_fragment(None);\nassert_eq!(url.as_str(), \"https://example.com/data.csv\");\nassert!(url.fragment().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["fragment",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13442:1768":{"id":"2:13442:1768","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:16004:2985"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49432:2640","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:612:715":{"id":"0:612:715","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[2570,4],"end":[2575,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"H"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"hash::Hasher","id":"2:10540:146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:447:753":{"id":"0:447:753","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"resolved_path","inner":{"name":"Range","id":"2:45876:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Position","id":"0:870:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8473:3089":{"id":"2:8473:3089","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8474:793","2:8475:1718"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3427:3166":{"id":"2:3427:3166","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3429:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8413:3090":{"id":"2:8413:3090","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8415:2149","2:8417:3842","2:8418:3843"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:537:1568":{"id":"0:537:1568","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[1012,4],"end":[1019,5]},"visibility":"public","docs":"Return the parsed representation of the host for this URL.\nNon-ASCII domain labels are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\n\nCannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\ndon’t have a host.\n\nSee also the `host_str` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/index.html\")?;\nassert!(url.host().is_some());\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.host().is_some());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(url.host().is_none());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(url.host().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Host","id":"0:680:1589","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5789:4339":{"id":"1:5789:4339","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5790:57516"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8400:136":{"id":"2:8400:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8402:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:570:2080":{"id":"0:570:2080","crate_id":0,"name":"set_port","span":{"filename":"src/lib.rs","begin":[1657,4],"end":[1667,5]},"visibility":"public","docs":"Change this URL’s port number.\n\nNote that default port numbers are not reflected in the serialization.\n\nIf this URL is cannot-be-a-base, does not have a host, or has the `file` scheme;\ndo nothing and return `Err`.\n\n# Examples\n\n```\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"ssh://example.net:2048/\")?;\n\nurl.set_port(Some(4096)).map_err(|_| \"cannot be base\")?;\nassert_eq!(url.as_str(), \"ssh://example.net:4096/\");\n\nurl.set_port(None).map_err(|_| \"cannot be base\")?;\nassert_eq!(url.as_str(), \"ssh://example.net/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nKnown default port numbers are not reflected:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://example.org/\")?;\n\nurl.set_port(Some(443)).map_err(|_| \"cannot be base\")?;\nassert!(url.port().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot set port for cannot-be-a-base URLs:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\n\nlet result = url.set_port(Some(80));\nassert!(result.is_err());\n\nlet result = url.set_port(None);\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["port",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:482:2914":{"id":"0:482:2914","crate_id":0,"name":"href","span":{"filename":"src/quirks.rs","begin":[37,0],"end":[39,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-href","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3172:149":{"id":"2:3172:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3174:1752"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10301:3117":{"id":"2:10301:3117","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10302:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:889:2899":{"id":"0:889:2899","crate_id":0,"name":"AfterPort","span":{"filename":"src/slicing.rs","begin":[91,4],"end":[91,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3505:3170":{"id":"2:3505:3170","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3506:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3492:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:791:2612":{"id":"0:791:2612","crate_id":0,"name":"Backslash","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:5727:3350":{"id":"1:5727:3350","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5728:6470","1:5729:57099","1:5730:57100"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3169:74":{"id":"2:3169:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3171:2340"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:652:652":{"id":"0:652:652","crate_id":0,"name":"finish","span":{"filename":"src/lib.rs","begin":[2874,4],"end":[2878,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:450:1600":{"id":"0:450:1600","crate_id":0,"name":"quirks","span":{"filename":"src/quirks.rs","begin":[9,0],"end":[287,1]},"visibility":"public","docs":"Getters and setters for URL components implemented per https://url.spec.whatwg.org/#api\n\nUnless you need to be interoperable with web browsers,\nyou probably want to use `Url` method instead.","links":{},"attrs":["#[doc(hidden)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:480:2466","0:481:2528","0:482:2914","0:483:2916","0:484:1590","0:485:2919","0:486:2921","0:487:1834","0:488:2163","0:489:1840","0:490:2147","0:491:1568","0:492:2106","0:495:2935","0:496:2937","0:497:1616","0:498:2080","0:500:2942","0:501:2944","0:502:2948","0:503:2951","0:504:715","0:505:2955"],"is_stripped":true}},"0:606:604":{"id":"0:606:604","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2546,4],"end":[2548,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:789:3114":{"id":"5:789:3114","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"5:6084:61671":{"id":"5:6084:61671","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3091","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4254","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3091","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4254","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3337:3110":{"id":"2:3337:3110","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:181","2:3340:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2572:127":{"id":"1:2572:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2573:4076","1:2575:2586","1:2576:4077","1:2577:4078"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10299:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9343:4355":{"id":"1:9343:4355","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9344:57585","1:9345:57586","1:9346:57587","1:9347:57588","1:9348:57589","1:9349:40108","1:9350:57584"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:539:1616":{"id":"0:539:1616","crate_id":0,"name":"port","span":{"filename":"src/lib.rs","begin":[1076,4],"end":[1078,5]},"visibility":"public","docs":"Return the port number for this URL, if any.\n\nNote that default port numbers are never reflected by the serialization,\nuse the `port_or_known_default()` method if you want a default port number returned.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.port(), None);\n\nlet url = Url::parse(\"https://example.com:443/\")?;\nassert_eq!(url.port(), None);\n\nlet url = Url::parse(\"ssh://example.com:22\")?;\nassert_eq!(url.port(), Some(22));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6104:1751":{"id":"5:6104:1751","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:3091"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3091","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4254","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:567:2058":{"id":"0:567:2058","crate_id":0,"name":"path_segments_mut","span":{"filename":"src/lib.rs","begin":[1573,4],"end":[1579,5]},"visibility":"public","docs":"Return an object with methods to manipulate this URL’s path segments.\n\nReturn `Err(())` if this URL is cannot-be-a-base.","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PathSegmentsMut","id":"0:861:1596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:735:1591":{"id":"0:735:1591","crate_id":0,"name":"OpaqueOrigin","span":{"filename":"src/origin.rs","begin":[113,0],"end":[113,31]},"visibility":"public","docs":"Opaque identifier for URLs that have file or other schemes","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"b:2:3198-0:921:1621":{"id":"b:2:3198-0:921:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3201:1752"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6103:61674":{"id":"5:6103:61674","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:548:1595":{"id":"0:548:1595","crate_id":0,"name":"path_segments","span":{"filename":"src/lib.rs","begin":[1238,4],"end":[1245,5]},"visibility":"public","docs":"Unless this URL is cannot-be-a-base,\nreturn an iterator of '/' slash-separated path segments,\neach as a percent-encoded ASCII string.\n\nReturn `None` for cannot-be-a-base URLs.\n\nWhen `Some` is returned, the iterator always contains at least one string\n(which may be empty).\n\n# Examples\n\n```\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet url = Url::parse(\"https://example.com/foo/bar\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"foo\"));\nassert_eq!(path_segments.next(), Some(\"bar\"));\nassert_eq!(path_segments.next(), None);\n\nlet url = Url::parse(\"https://example.com\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"\"));\nassert_eq!(path_segments.next(), None);\n\nlet url = Url::parse(\"data:text/plain,HelloWorld\")?;\nassert!(url.path_segments().is_none());\n\nlet url = Url::parse(\"https://example.com/countries/việt nam\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"countries\"));\nassert_eq!(path_segments.next(), Some(\"vi%E1%BB%87t%20nam\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy :: manual_strip)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"str::Split","id":"2:49462:1949","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:585:2231":{"id":"0:585:2231","crate_id":0,"name":"from_directory_path","span":{"filename":"src/lib.rs","begin":[2340,4],"end":[2346,5]},"visibility":"public","docs":"Convert a directory name as `std::path::Path` into an URL in the `file` scheme.\n\nThis returns `Err` if the given path is not absolute or,\non Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n\nCompared to `from_file_path`, this ensure that URL’s the path has a trailing slash\nso that the entire path is considered when using this URL as a base URL.\n\nFor example:\n\n* `\"index.html\"` parsed with `Url::from_directory_path(Path::new(\"/var/www\"))`\n  as the base URL is `file:///var/www/index.html`\n* `\"index.html\"` parsed with `Url::from_file_path(Path::new(\"/var/www\"))`\n  as the base URL is `file:///var/index.html`, which might not be what was intended.\n\nNote that `std::path` does not consider trailing slashes significant\nand usually does not include them (e.g. in `Path::parent()`).","links":{},"attrs":["#[cfg(any(unix, windows, target_os = \"redox\"))]","#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["path",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3166:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7441:185","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:799:2620":{"id":"0:799:2620","crate_id":0,"name":"ExpectedFileDoubleSlash","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:761:2507":{"id":"0:761:2507","crate_id":0,"name":"InvalidIpv4Address","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:1075:4372":{"id":"1:1075:4372","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:3114","1:1077:5122","1:1078:55036","1:1079:2664","1:1080:55037","1:1081:55035","1:1082:55034"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13488:61023":{"id":"2:13488:61023","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:615:305":{"id":"0:615:305","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[2581,4],"end":[2583,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10530:142":{"id":"2:10530:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10531:715","2:10533:4032"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:565:2049":{"id":"0:565:2049","crate_id":0,"name":"set_path","span":{"filename":"src/lib.rs","begin":[1548,4],"end":[1567,5]},"visibility":"public","docs":"Change this URL’s path.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com\")?;\nurl.set_path(\"api/comments\");\nassert_eq!(url.as_str(), \"https://example.com/api/comments\");\nassert_eq!(url.path(), \"/api/comments\");\n\nlet mut url = Url::parse(\"https://example.com/api\")?;\nurl.set_path(\"data/report.csv\");\nassert_eq!(url.as_str(), \"https://example.com/data/report.csv\");\nassert_eq!(url.path(), \"/data/report.csv\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13537:5122":{"id":"2:13537:5122","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13508:61028":{"id":"2:13508:61028","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6085:1988":{"id":"5:6085:1988","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13513:61031":{"id":"2:13513:61031","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13084:4089":{"id":"2:13084:4089","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3396:3159":{"id":"2:3396:3159","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3398:181","2:3399:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:755:2108":{"id":"0:755:2108","crate_id":0,"name":"EmptyHost","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:690:1542":{"id":"0:690:1542","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[59,9],"end":[59,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"1:11250:2444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:875:2892":{"id":"0:875:2892","crate_id":0,"name":"BeforeUsername","span":{"filename":"src/slicing.rs","begin":[84,4],"end":[84,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:801:2622":{"id":"0:801:2622","crate_id":0,"name":"FileWithHostAndWindowsDrive","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13426:1969":{"id":"2:13426:1969","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12525:2337"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:512:1651":{"id":"0:512:1651","crate_id":0,"name":"parse","span":{"filename":"src/lib.rs","begin":[240,4],"end":[249,5]},"visibility":"public","docs":"Parse an URL string with the configuration so far.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::ParseError","id":"0:754:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13436:55505":{"id":"2:13436:55505","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10934:214":{"id":"2:10934:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10936:181","2:10937:2805","2:10938:9564","2:10939:55504","2:10940:55505","2:10941:753","2:10942:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10925:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22804:4866":{"id":"2:22804:4866","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22805:4778","2:22806:60023","2:22807:1227","2:22808:1228","2:22809:43503","2:22810:60085","2:22811:60086","2:22812:60087","2:22813:60088","2:22814:60089","2:22815:60024","2:22816:60025","2:22817:60026","2:22818:60027","2:22819:60028","2:22820:60029","2:22821:60030"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3310:3088-0:908:1602":{"id":"a:2:3310:3088-0:908:1602","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3310:3088","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:607":{"id":"0:607","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2552,0],"end":[2557,1]},"visibility":"crate","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","min","max"],"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2957:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:608:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:791:3891":{"id":"5:791:3891","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13473:55534":{"id":"2:13473:55534","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13054:3426","`DoubleEndedIterator`":"2:8448:120","str::split":"1:16010:2990","prim@char":"1:16004:2985"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49480:4115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13467:1723":{"id":"2:13467:1723","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:8448:120","str::split_whitespace":"1:16010:2990","str::rsplit":"1:16010:2990","prim@char":"1:16004:2985","self::pattern":"2:13054:3426"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49462:1949","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23470:17255":{"id":"2:23470:17255","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23471:59657","2:23472:59658","2:23473:59659"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23465:4780","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3358:3153":{"id":"2:3358:3153","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3360:181","2:3361:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13438:4420":{"id":"2:13438:4420","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:16010:2990","crate::ops::Index":"2:3577:2860","`str`":"1:16010:2990"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2926:124":{"id":"2:2926:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13440:1717":{"id":"2:13440:1717","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:16010:2990"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3740:3176":{"id":"2:3740:3176","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3742:58344"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:715:1542":{"id":"0:715:1542","crate_id":0,"name":"0","span":{"filename":"src/origin.rs","begin":[56,11],"end":[56,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"OpaqueOrigin","id":"0:735:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:13419:1718":{"id":"2:13419:1718","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13500:61026":{"id":"2:13500:61026","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:16004:2985","str::rmatch_indices":"1:16010:2990","self::pattern":"2:13054:3426","`DoubleEndedIterator`":"2:8448:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49612:4111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6106:55036":{"id":"5:6106:55036","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:16010:2990"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13497:61025":{"id":"2:13497:61025","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:16004:2985","`DoubleEndedIterator`":"2:8448:120","self::pattern":"2:13054:3426","str::matches":"1:16010:2990"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49684:4114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:511:1649":{"id":"0:511:1649","crate_id":0,"name":"syntax_violation_callback","span":{"filename":"src/lib.rs","begin":[234,4],"end":[237,5]},"visibility":"public","docs":"Call the provided function or closure for a non-fatal `SyntaxViolation`\nwhen it occurs during parsing. Note that since the provided function is\n`Fn`, the caller might need to utilize _interior mutability_, such as with\na `RefCell`, to collect the violations.\n\n## Example\n```\nuse std::cell::RefCell;\nuse url::{Url, SyntaxViolation};\n# use url::ParseError;\n# fn run() -> Result<(), url::ParseError> {\nlet violations = RefCell::new(Vec::new());\nlet url = Url::options()\n    .syntax_violation_callback(Some(&|v| violations.borrow_mut().push(v)))\n    .parse(\"https:////example.com\")?;\nassert_eq!(url.as_str(), \"https://example.com/\");\nassert_eq!(violations.into_inner(),\n           vec!(SyntaxViolation::ExpectedDoubleSlash));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["new",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"kind":"resolved_path","inner":{"name":"Fn","id":"2:3519:130","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"SyntaxViolation","id":"0:790:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":null}},"param_names":[]}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8404:151":{"id":"2:8404:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8405:1676","2:8406:3844","2:8407:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13538:55037":{"id":"2:13538:55037","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3372:3158":{"id":"2:3372:3158","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:1356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13517:2733":{"id":"2:13517:2733","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:16004:2985","self::pattern":"2:13054:3426"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:440:181":{"id":"0:440:181","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[20,4],"end":[20,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"0:719:1543":{"id":"0:719:1543","crate_id":0,"name":"1","span":{"filename":"src/origin.rs","begin":[59,18],"end":[59,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Host","id":"0:680:1589","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},"0:497:1616":{"id":"0:497:1616","crate_id":0,"name":"port","span":{"filename":"src/quirks.rs","begin":[198,0],"end":[200,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-port","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:873:2891":{"id":"0:873:2891","crate_id":0,"name":"AfterScheme","span":{"filename":"src/slicing.rs","begin":[83,4],"end":[83,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13434:55504":{"id":"2:13434:55504","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:921:1621":{"id":"b:5:787-0:921:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["5:789:3114","5:790:2002","5:791:3891"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2872-0:921:1621":{"id":"b:2:2872-0:921:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2866:3112","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2874:54626"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"26:103:6046":{"id":"26:103:6046","crate_id":26,"name":"Array","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["26:104:1676","26:105:62256","26:106:60753","26:107:62257","26:108:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:920:408":{"id":"0:920:408","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[165,9],"end":[165,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:436":{"id":"0:436","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[12,0],"end":[17,1]},"visibility":{"restricted":{"parent":"0:416:1597","path":"::slicing"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3577:2860","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFull","id":"2:45860:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:437:181","0:438:753"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:899:2904":{"id":"0:899:2904","crate_id":0,"name":"BeforeFragment","span":{"filename":"src/slicing.rs","begin":[96,4],"end":[96,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:893:2901":{"id":"0:893:2901","crate_id":0,"name":"AfterPath","span":{"filename":"src/slicing.rs","begin":[93,4],"end":[93,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:443:181":{"id":"0:443:181","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[27,4],"end":[27,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"2:13520:15763":{"id":"2:13520:15763","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13054:3426","prim@char":"1:16004:2985"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3104:3217":{"id":"2:3104:3217","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3103:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3212:1417":{"id":"2:3212:1417","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:579:2163":{"id":"0:579:2163","crate_id":0,"name":"set_username","span":{"filename":"src/lib.rs","begin":[2061,4],"end":[2110,5]},"visibility":"public","docs":"Change this URL’s username.\n\nIf this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n# Examples\n\nCannot setup username from mailto(cannot-be-base)\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rmz@example.com\")?;\nlet result = url.set_username(\"user1\");\nassert_eq!(url.as_str(), \"mailto:rmz@example.com\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nSetup username to user1\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"ftp://:secre1@example.com/\")?;\nlet result = url.set_username(\"user1\");\nassert!(result.is_ok());\nassert_eq!(url.username(), \"user1\");\nassert_eq!(url.as_str(), \"ftp://user1:secre1@example.com/\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["username",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:921:1621":{"id":"b:2:3213-0:921:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3216:127","2:3217:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:536:1777":{"id":"0:536:1777","crate_id":0,"name":"host_str","span":{"filename":"src/lib.rs","begin":[973,4],"end":[979,5]},"visibility":"public","docs":"Return the string representation of the host (domain or IP address) for this URL, if any.\n\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\nIPv6 addresses are given between `[` and `]` brackets.\n\nCannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\ndon’t have a host.\n\nSee also the `host` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/index.html\")?;\nassert_eq!(url.host_str(), Some(\"127.0.0.1\"));\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.host_str(), Some(\"example.com\"));\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert_eq!(url.host_str(), None);\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert_eq!(url.host_str(), None);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3216:127":{"id":"2:3216:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38808:3216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:870:1598":{"id":"0:870:1598","crate_id":0,"name":"Position","span":{"filename":"src/slicing.rs","begin":[81,0],"end":[98,1]},"visibility":"public","docs":"Indicates a position within a URL based on its components.\n\nA range of positions can be used for slicing `Url`:\n\n```rust\n# use url::{Url, Position};\n# fn something(some_url: Url) {\nlet serialization: &str = &some_url[..];\nlet serialization_without_fragment: &str = &some_url[..Position::AfterQuery];\nlet authority: &str = &some_url[Position::BeforeUsername..Position::AfterPort];\nlet data_url_payload: &str = &some_url[Position::BeforePath..Position::AfterQuery];\nlet scheme_relative: &str = &some_url[Position::BeforeUsername..];\n# }\n```\n\nIn a pseudo-grammar (where `[`…`]?` makes a sub-sequence optional),\nURL components and delimiters that separate them are:\n\n```notrust\nurl =\n    scheme \":\"\n    [ \"//\" [ username [ \":\" password ]? \"@\" ]? host [ \":\" port ]? ]?\n    path [ \"?\" query ]? [ \"#\" fragment ]?\n```\n\nWhen a given component is not present,\nits \"before\" and \"after\" position are the same\n(so that `&some_url[BeforeFoo..AfterFoo]` is the empty string)\nand component ordering is preserved\n(so that a missing query \"is between\" a path and a fragment).\n\nThe end of a component and the start of the next are either the same or separate\nby a delimiter.\n(Not that the initial `/` of a path is considered part of the path here, not a delimiter.)\nFor example, `&url[..BeforeFragment]` would include a `#` delimiter (if present in `url`),\nso `&url[..AfterQuery]` might be desired instead.\n\n`BeforeScheme` and `AfterFragment` are always the start and end of the entire URL,\nso `&url[BeforeScheme..X]` is the same as `&url[..X]`\nand `&url[X..AfterFragment]` is the same as `&url[X..]`.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:871:2890","0:873:2891","0:875:2892","0:877:2893","0:879:2894","0:881:2895","0:883:2896","0:885:2897","0:887:2898","0:889:2899","0:891:2900","0:893:2901","0:895:2902","0:897:2903","0:899:2904","0:901:2905"],"impls":[]}},"1:6557:3360":{"id":"1:6557:3360","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6558:57524","1:6559:57525"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:520:1708":{"id":"0:520:1708","crate_id":0,"name":"make_relative","span":{"filename":"src/lib.rs","begin":[401,4],"end":[490,5]},"visibility":"public","docs":"Creates a relative URL if possible, with this URL as the base URL.\n\nThis is the inverse of [`join`].\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet base = Url::parse(\"https://example.net/a/b.html\")?;\nlet url = Url::parse(\"https://example.net/a/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = Url::parse(\"https://example.net/a/b/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = Url::parse(\"https://example.net/a/d/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"../d/c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b.html?c=d\")?;\nlet url = Url::parse(\"https://example.net/a/b.html?e=f\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"?e=f\"));\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf this URL can't be a base for the given URL, `None` is returned.\nThis is for example the case if the scheme, host or port are not the same.\n\n[`join`]: #method.join","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5775:3347":{"id":"1:5775:3347","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:56858","1:5777:56859","1:5778:56860","1:5779:56861"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:718:1542":{"id":"0:718:1542","crate_id":0,"name":"0","span":{"filename":"src/origin.rs","begin":[59,10],"end":[59,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:2871:1581":{"id":"2:2871:1581","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:687:1542":{"id":"0:687:1542","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[52,9],"end":[52,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11232:2443","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:3201:1752":{"id":"2:3201:1752","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3175:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13430:2805":{"id":"2:13430:2805","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3384:3157":{"id":"2:3384:3157","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3386:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:592:126":{"id":"0:592:126","crate_id":0,"name":"Err","span":{"filename":"src/lib.rs","begin":[2490,4],"end":[2490,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:754:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"a:2:3310:3088-0:932:2036":{"id":"a:2:3310:3088-0:932:2036","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3310:3088","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5837:4094":{"id":"5:5837:4094","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:1693"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13539:55035":{"id":"2:13539:55035","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6091:61673":{"id":"5:6091:61673","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3347:3151":{"id":"2:3347:3151","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:597:1416":{"id":"0:597:1416","crate_id":0,"name":"try_from","span":{"filename":"src/lib.rs","begin":[2501,4],"end":[2503,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3182:227","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13532:61034":{"id":"2:13532:61034","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13054:3426","prim@char":"1:16004:2985"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3519:130":{"id":"2:3519:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3521:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3522:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6415:1397":{"id":"5:6415:1397","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13540:55034":{"id":"2:13540:55034","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3274:3087":{"id":"2:3274:3087","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:416:1597":{"id":"0:416:1597","crate_id":0,"name":"slicing","span":{"filename":"src/slicing.rs","begin":[9,0],"end":[187,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:870:1598"],"is_stripped":true}},"2:13417":{"id":"2:13417","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12514:1340","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13418:793","2:13419:1718","2:13420:61015","2:13421:61016","2:13423:61017","2:13426:1969","2:13427:61018","2:13428:304","2:13429:9575","2:13430:2805","2:13432:9564","2:13434:55504","2:13436:55505","2:13438:4420","2:13439:61019","2:13440:1717","2:13441:55525","2:13442:1768","2:13443:4658","2:13444:2324","2:13445:33161","2:13446:33151","2:13447:5449","2:13448:61020","2:13449:33146","2:13450:2496","2:13453:1774","2:13456:2111","2:13459:2113","2:13463:1714","2:13467:1723","2:13470:33018","2:13473:55534","2:13476:61021","2:13479:61022","2:13482:55536","2:13485:55538","2:13488:61023","2:13491:61024","2:13494:1565","2:13497:61025","2:13500:61026","2:13503:61027","2:13506:2949","2:13508:61028","2:13510:61029","2:13512:61030","2:13513:61031","2:13514:2643","2:13517:2733","2:13520:15763","2:13523:55540","2:13526:61032","2:13529:61033","2:13532:61034","2:13535:1651","2:13537:5122","2:13538:55037","2:13539:55035","2:13540:55034","2:13541:61035","2:13543:4374","2:13544:61036"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:551:1733":{"id":"0:551:1733","crate_id":0,"name":"fragment","span":{"filename":"src/lib.rs","begin":[1346,4],"end":[1351,5]},"visibility":"public","docs":"Return this URL’s fragment identifier, if any.\n\nA fragment is the part of the URL after the `#` symbol.\nThe fragment is optional and, if present, contains a fragment identifier\nthat identifies a secondary resource, such as a section heading\nof a document.\n\nIn HTML, the fragment identifier is usually the id attribute of a an element\nthat is scrolled to on load. Browsers typically will not send the fragment portion\nof a URL to the server.\n\n**Note:** the parser did *not* percent-encode this component,\nbut the input may have been percent-encoded already.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/data.csv#row=4\")?;\n\nassert_eq!(url.fragment(), Some(\"row=4\"));\n\nlet url = Url::parse(\"https://example.com/data.csv#cell=4,1-6,2\")?;\n\nassert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:656:578":{"id":"0:656:578","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[2884,4],"end":[2888,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:599:660":{"id":"0:599:660","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2509,4],"end":[2511,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["formatter",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10252:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10241:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:885:2897":{"id":"0:885:2897","crate_id":0,"name":"AfterHost","span":{"filename":"src/slicing.rs","begin":[89,4],"end":[89,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:6863:3355":{"id":"1:6863:3355","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6864:59199"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:519:1693":{"id":"0:519:1693","crate_id":0,"name":"join","span":{"filename":"src/lib.rs","begin":[356,4],"end":[358,5]},"visibility":"public","docs":"Parse a string as an URL, with this URL as the base URL.\n\nThe inverse of this is [`make_relative`].\n\nNote: a trailing slash is significant.\nWithout it, the last path component is considered to be a “file” name\nto be removed to get at the “directory” that is used as the base:\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet base = Url::parse(\"https://example.net/a/b.html\")?;\nlet url = base.join(\"c.png\")?;\nassert_eq!(url.as_str(), \"https://example.net/a/c.png\");  // Not /a/b.html/c.png\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = base.join(\"c.png\")?;\nassert_eq!(url.as_str(), \"https://example.net/a/b/c.png\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an URL from the given string\nwith this URL as the base URL, a [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html\n[`make_relative`]: #method.make_relative","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::ParseError","id":"0:754:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:809:2630":{"id":"0:809:2630","crate_id":0,"name":"TabOrNewlineIgnored","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:510:1624":{"id":"0:510:1624","crate_id":0,"name":"encoding_override","span":{"filename":"src/lib.rs","begin":[207,4],"end":[210,5]},"visibility":"public","docs":"Override the character encoding of query strings.\nThis is a legacy concept only relevant for HTML.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["new",{"kind":"resolved_path","inner":{"name":"EncodingOverride","id":"21:95:1599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:713:2551":{"id":"0:713:2551","crate_id":0,"name":"Opaque","span":{"filename":"src/origin.rs","begin":[56,4],"end":[56,24]},"visibility":"default","docs":"A globally unique identifier","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"OpaqueOrigin","id":"0:735:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:573:2106":{"id":"0:573:2106","crate_id":0,"name":"set_host","span":{"filename":"src/lib.rs","begin":[1790,4],"end":[1845,5]},"visibility":"public","docs":"Change this URL’s host.\n\nRemoving the host (calling this with `None`)\nwill also remove any username, password, and port number.\n\n# Examples\n\nChange host:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_host(Some(\"rust-lang.org\"));\nassert!(result.is_ok());\nassert_eq!(url.as_str(), \"https://rust-lang.org/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nRemove host:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_host(None);\nassert!(result.is_ok());\nassert_eq!(url.as_str(), \"foo:/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot remove host for 'special' schemes (e.g. `http`):\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_host(None);\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"https://example.net/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change or remove host for cannot-be-a-base URLs:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\n\nlet result = url.set_host(Some(\"rust-lang.org\"));\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\n\nlet result = url.set_host(None);\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf this URL is cannot-be-a-base or there is an error parsing the given `host`,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["host",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:754:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10311:3121":{"id":"2:10311:3121","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10312:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6088:61672":{"id":"5:6088:61672","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6685:3348":{"id":"1:6685:3348","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6686:57467","1:6687:8300","1:6688:8301","1:6689:8303","1:6690:8302","1:6691:8304","1:6692:8305","1:6693:8307","1:6694:6512","1:6695:8310","1:6696:8311","1:6697:8312","1:6698:8313","1:6699:8314","1:6700:8315","1:6701:8308","1:6702:8309"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10307:3124":{"id":"2:10307:3124","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10308:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2869-0:921:1621":{"id":"b:2:2869-0:921:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2871:1581"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6787:4351":{"id":"1:6787:4351","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6788:8418","1:6789:56876"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13523:55540":{"id":"2:13523:55540","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16004:2985","self::pattern":"2:13054:3426"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13432:9564":{"id":"2:13432:9564","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13526:61032":{"id":"2:13526:61032","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13054:3426","prim@char":"1:16004:2985"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:653:2341":{"id":"0:653:2341","crate_id":0,"name":"Finished","span":{"filename":"src/lib.rs","begin":[2880,4],"end":[2880,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"0:716:2536":{"id":"0:716:2536","crate_id":0,"name":"Tuple","span":{"filename":"src/origin.rs","begin":[59,4],"end":[59,36]},"visibility":"default","docs":"Consists of the URL's scheme, host and port","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Host","id":"0:680:1589","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},{"kind":"primitive","inner":"u16"}]}},"0:529:1590":{"id":"0:529:1590","crate_id":0,"name":"origin","span":{"filename":"src/lib.rs","begin":[761,4],"end":[763,5]},"visibility":"public","docs":"Return the origin of this URL (<https://url.spec.whatwg.org/#origin>)\n\nNote: this returns an opaque origin for `file:` URLs, which causes\n`url.origin() != url.origin()`.\n\n# Examples\n\nURL with `ftp` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://example.com/foo\")?;\nassert_eq!(url.origin(),\n           Origin::Tuple(\"ftp\".into(),\n                         Host::Domain(\"example.com\".into()),\n                         21));\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with `blob` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"blob:https://example.com/foo\")?;\nassert_eq!(url.origin(),\n           Origin::Tuple(\"https\".into(),\n                         Host::Domain(\"example.com\".into()),\n                         443));\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with `file` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert!(!url.origin().is_tuple());\n\nlet other_url = Url::parse(\"file:///tmp/foo\")?;\nassert!(url.origin() != other_url.origin());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with other scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"foo:bar\")?;\nassert!(!url.origin().is_tuple());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Origin","id":"0:712:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:596:127":{"id":"0:596:127","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[2499,4],"end":[2499,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:754:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"2:13427:61018":{"id":"2:13427:61018","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:8880:3205":{"id":"2:8880:3205","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:682:1781":{"id":"0:682:1781","crate_id":0,"name":"Domain","span":{"filename":"src/host.rs","begin":[47,4],"end":[47,13]},"visibility":"default","docs":"A DNS domain name, as '.' dot-separated labels.\nNon-ASCII labels are encoded in punycode per IDNA if this is the host of\na special URL, or percent encoded for non-special URLs. Hosts for\nnon-special URLs are also called opaque hosts.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"S"}]}},"0:938:660":{"id":"0:938:660","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2853,9],"end":[2853,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10252:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10241:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3175:135":{"id":"2:3175:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3177:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3525:132":{"id":"2:3525:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527:181","2:3528:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3178:228":{"id":"2:3178:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3180:127","2:3181:1417"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:594":{"id":"0:594","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2498,0],"end":[2504,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:596:127","0:597:1416"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3581:3171":{"id":"2:3581:3171","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3583:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3577:2860","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3380:3155":{"id":"2:3380:3155","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2967:184":{"id":"2:2967:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2969:997","2:2970:826","2:2971:792","2:2972:713","2:2973:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3278:217":{"id":"2:3278:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13446:33151":{"id":"2:13446:33151","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:16010:2990"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49745:4096","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:522:971":{"id":"0:522:971","crate_id":0,"name":"options","span":{"filename":"src/lib.rs","begin":[511,4],"end":[517,5]},"visibility":"public","docs":"Return a default `ParseOptions` that can fully configure the URL parser.\n\n# Examples\n\nGet default `ParseOptions`, then change base url\n\n```rust\nuse url::Url;\n# use url::ParseError;\n# fn run() -> Result<(), ParseError> {\nlet options = Url::options();\nlet api = Url::parse(\"https://api.example.com\")?;\nlet base_url = options.base_url(Some(&api));\nlet version_url = base_url.parse(\"version.json\")?;\nassert_eq!(version_url.as_str(), \"https://api.example.com/version.json\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10313:3122":{"id":"2:10313:3122","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10314:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:608:415":{"id":"0:608:415","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[2554,4],"end":[2556,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"cmp::Ordering","id":"2:37627:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5719:3346":{"id":"1:5719:3346","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5720:54971","1:5721:54973","1:5722:54972","1:5723:54974"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:490:2147":{"id":"0:490:2147","crate_id":0,"name":"set_password","span":{"filename":"src/quirks.rs","begin":[89,0],"end":[95,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-password","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_password",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"a:2:9259:3575-0:908:1602":{"id":"a:2:9259:3575-0:908:1602","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9259:3575","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3352:3150":{"id":"2:3352:3150","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:181","2:3355:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:790:2002":{"id":"5:790:2002","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4000:68":{"id":"2:4000:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4001:1429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:507":{"id":"0:507","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,0],"end":[250,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:509:1623","0:510:1624","0:511:1649","0:512:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3281:220-0:932:2036":{"id":"a:2:3281:220-0:932:2036","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:561:2011":{"id":"0:561:2011","crate_id":0,"name":"set_query","span":{"filename":"src/lib.rs","begin":[1436,4],"end":[1461,5]},"visibility":"public","docs":"Change this URL’s query string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com/products\")?;\nassert_eq!(url.as_str(), \"https://example.com/products\");\n\nurl.set_query(Some(\"page=2\"));\nassert_eq!(url.as_str(), \"https://example.com/products?page=2\");\nassert_eq!(url.query(), Some(\"page=2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["query",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:480:2466":{"id":"0:480:2466","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/quirks.rs","begin":[18,0],"end":[23,1]},"visibility":"public","docs":"https://url.spec.whatwg.org/#dom-url-domaintoascii","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:651:2339":{"id":"0:651:2339","crate_id":0,"name":"as_mut_string","span":{"filename":"src/lib.rs","begin":[2870,4],"end":[2872,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13514:2643":{"id":"2:13514:2643","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:16004:2985","self::pattern":"2:13054:3426"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13084:4089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2866:3112":{"id":"2:2866:3112","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:54626"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:441:753":{"id":"0:441:753","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[21,4],"end":[23,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"resolved_path","inner":{"name":"RangeFrom","id":"2:45901:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Position","id":"0:870:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:442":{"id":"0:442","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[26,0],"end":[31,1]},"visibility":{"restricted":{"parent":"0:416:1597","path":"::slicing"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3577:2860","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeTo","id":"2:45922:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Position","id":"0:870:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:443:181","0:444:753"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:601:681":{"id":"0:601:681","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[2516,4],"end":[2518,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:10:5982":{"id":"24:10:5982","crate_id":24,"name":"BidiDataSource","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:11:5987"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3440:3169":{"id":"2:3440:3169","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3442:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13418:793":{"id":"2:13418:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:16004:2985"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:540:1885":{"id":"0:540:1885","crate_id":0,"name":"port_or_known_default","span":{"filename":"src/lib.rs","begin":[1108,4],"end":[1110,5]},"visibility":"public","docs":"Return the port number for this URL, or the default port number if it is known.\n\nThis method only knows the default port number\nof the `http`, `https`, `ws`, `wss` and `ftp` schemes.\n\nFor URLs in these schemes, this method always returns `Some(_)`.\nFor other schemes, it is the same as `Url::port()`.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"foo://example.com\")?;\nassert_eq!(url.port_or_known_default(), None);\n\nlet url = Url::parse(\"foo://example.com:1456\")?;\nassert_eq!(url.port_or_known_default(), Some(1456));\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.port_or_known_default(), Some(443));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:514:1651":{"id":"0:514:1651","crate_id":0,"name":"parse","span":{"filename":"src/lib.rs","begin":[275,4],"end":[277,5]},"visibility":"public","docs":"Parse an absolute URL from a string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.net\")?;\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an absolute URL from the given string,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::ParseError","id":"0:754:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3734:137":{"id":"2:3734:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3736:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:495:2935":{"id":"0:495:2935","crate_id":0,"name":"hostname","span":{"filename":"src/quirks.rs","begin":[156,0],"end":[158,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-hostname","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6959:3351":{"id":"1:6959:3351","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6960:57450"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5741:3348":{"id":"1:5741:3348","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5742:7955","1:5743:54917","1:5744:6470","1:5745:58885","1:5746:4580","1:5747:4581","1:5748:58886","1:5749:1304","1:5750:58887","1:5751:58888","1:5752:58889","1:5753:58890","1:5754:58891","1:5755:58892","1:5756:58893","1:5757:58894"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:3114","5:785:2002","5:786:3891"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:587:2268":{"id":"0:587:2268","crate_id":0,"name":"to_file_path","span":{"filename":"src/lib.rs","begin":[2457,4],"end":[2470,5]},"visibility":"public","docs":"Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.\n\n**Note:** This does not actually check the URL’s `scheme`,\nand may give nonsensical results for other schemes.\nIt is the user’s responsibility to check the URL’s scheme before calling this.\n\n```\n# use url::Url;\n# let url = Url::parse(\"file:///etc/passwd\").unwrap();\nlet path = url.to_file_path();\n```\n\nReturns `Err` if the host is neither empty nor `\"localhost\"` (except on Windows, where\n`file:` URLs may have a non-local host),\nor if `Path::new_opt()` returns `None`.\n(That is, if the percent-decoded path contains a NUL byte or,\nfor a Windows path, is not UTF-8.)","links":{},"attrs":["#[inline]","#[cfg(any(unix, windows, target_os = \"redox\"))]","#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:7332:186","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13510:61029":{"id":"2:13510:61029","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13535:1651":{"id":"2:13535:1651","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12993:2276","FromStr::Err":"2:12993:2276"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2863:97":{"id":"2:2863:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2865:1581"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13443:4658":{"id":"2:13443:4658","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:16004:2985"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49438:4101","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:484:1590":{"id":"0:484:1590","crate_id":0,"name":"origin","span":{"filename":"src/quirks.rs","begin":[48,0],"end":[50,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-origin","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:6105:4192":{"id":"5:6105:4192","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3717:3174":{"id":"2:3717:3174","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3648:3173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8367:4702":{"id":"2:8367:4702","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8369:3883"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8887:4748":{"id":"2:8887:4748","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7928:4749","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9259:3575-0:921:1621":{"id":"a:2:9259:3575-0:921:1621","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9259:3575","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:2:4002-0:932:2036":{"id":"b:2:4002-0:932:2036","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:4000:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:4004:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5647:3344":{"id":"1:5647:3344","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5648:56855","1:5649:3776"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13491:61024":{"id":"2:13491:61024","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:515:1672":{"id":"0:515:1672","crate_id":0,"name":"parse_with_params","span":{"filename":"src/lib.rs","begin":[305,4],"end":[319,5]},"visibility":"public","docs":"Parse an absolute URL from a string and add params to its query string.\n\nExisting params are not removed.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse_with_params(\"https://example.net?dont=clobberme\",\n                                 &[(\"lang\", \"rust\"), (\"browser\", \"servo\")])?;\nassert_eq!(\"https://example.net/?dont=clobberme&lang=rust&browser=servo\", url.as_str());\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an absolute URL from the given string,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::ParseError","id":"0:754:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8404:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8404:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3166:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3166:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5785:3345":{"id":"1:5785:3345","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5786:54917"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:936":{"id":"0:936","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2853,9],"end":[2853,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:938:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:611":{"id":"0:611","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2568,0],"end":[2576,1]},"visibility":"crate","docs":"URLs hash like their serialization.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10530:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:612:715"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13439:61019":{"id":"2:13439:61019","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:16010:2990","str::slice_unchecked":"1:16010:2990","crate::ops::IndexMut":"2:3581:3171"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3648:3173":{"id":"2:3648:3173","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3650:59621","2:3651:59622","2:3652:2496"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:12501:5115":{"id":"2:12501:5115","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12502:1676","2:12503:60753"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:688:1779":{"id":"0:688:1779","crate_id":0,"name":"Ipv6","span":{"filename":"src/host.rs","begin":[59,4],"end":[59,18]},"visibility":"default","docs":"An IPv6 address.\n`Url::host_str` returns the serialization of that address between `[` and `]` brackets,\nin the format per [RFC 5952 *A Recommendation\nfor IPv6 Address Text Representation*](https://tools.ietf.org/html/rfc5952):\nlowercase hexadecimal with maximal `::` compression.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"1:11250:2444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:13449:33146":{"id":"2:13449:33146","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49754:4095","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:895:2902":{"id":"0:895:2902","crate_id":0,"name":"BeforeQuery","span":{"filename":"src/slicing.rs","begin":[94,4],"end":[94,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3281:220":{"id":"2:3281:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5653:2301":{"id":"1:5653:2301","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5654:2329","1:5655:1969"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4748:4171":{"id":"1:4748:4171","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4749:59210","1:4750:59211","1:4751:59212","1:4753:4170","1:4754:59213","1:4756:1723","1:4757:5449"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4666:4164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:56:221":{"id":"21:56:221","crate_id":21,"name":"Target","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:57:2339","21:58:652","21:59:2341"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:614":{"id":"0:614","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2579,0],"end":[2584,1]},"visibility":"crate","docs":"Return the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3166:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:615:305"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8448:120":{"id":"2:8448:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8449:3837","2:8450:3838","2:8451:3839","2:8452:3840","2:8456:3841","2:8459:1714"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:926":{"id":"0:926","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,9],"end":[191,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:486:2921":{"id":"0:486:2921","crate_id":0,"name":"set_protocol","span":{"filename":"src/quirks.rs","begin":[60,0],"end":[67,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-protocol","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_protocol",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13459:2113":{"id":"2:13459:2113","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:13054:3426","prim@char":"1:16004:2985","`None`":"2:47495:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9260:3574-0:908:1602":{"id":"a:2:9260:3574-0:908:1602","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9260:3574","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:767:2602":{"id":"0:767:2602","crate_id":0,"name":"RelativeUrlWithoutBase","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3277:218":{"id":"2:3277:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12993:2276":{"id":"2:12993:2276","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12994:126","2:12995:2277"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:773:2607":{"id":"0:773:2607","crate_id":0,"name":"Overflow","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13456:2111":{"id":"2:13456:2111","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13054:3426","prim@char":"1:16004:2985"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:877:2893":{"id":"0:877:2893","crate_id":0,"name":"AfterUsername","span":{"filename":"src/slicing.rs","begin":[85,4],"end":[85,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3211:127":{"id":"2:3211:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"2:13512:61030":{"id":"2:13512:61030","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:550:1967":{"id":"0:550:1967","crate_id":0,"name":"query_pairs","span":{"filename":"src/lib.rs","begin":[1310,4],"end":[1312,5]},"visibility":"public","docs":"Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return an iterator of (key, value) pairs.\n\n# Examples\n\n```rust\nuse std::borrow::Cow;\n\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/products?page=2&sort=desc\")?;\nlet mut pairs = url.query_pairs();\n\nassert_eq!(pairs.count(), 2);\n\nassert_eq!(pairs.next(), Some((Cow::Borrowed(\"page\"), Cow::Borrowed(\"2\"))));\nassert_eq!(pairs.next(), Some((Cow::Borrowed(\"sort\"), Cow::Borrowed(\"desc\"))));\n# Ok(())\n# }\n# run().unwrap();\n","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"form_urlencoded::Parse","id":"21:97:1968","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:605":{"id":"0:605","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2544,0],"end":[2549,1]},"visibility":"crate","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:606:604"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:861:1596":{"id":"0:861:1596","crate_id":0,"name":"PathSegmentsMut","span":{"filename":"src/path_segments.rs","begin":[37,0],"end":[42,1]},"visibility":"public","docs":"Exposes methods to manipulate the path of an URL that is not cannot-be-base.\n\nThe path always starts with a `/` slash, and is made of slash-separated segments.\nThere is always at least one segment (which may be the empty string).\n\nExamples:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"mailto:me@example.com\")?;\nassert!(url.path_segments_mut().is_err());\n\nlet mut url = Url::parse(\"http://example.net/foo/index.html\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .pop().push(\"img\").push(\"2/100%.png\");\nassert_eq!(url.as_str(), \"http://example.net/foo/img/2%2F100%25.png\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:811:2632":{"id":"0:811:2632","crate_id":0,"name":"UnencodedAtSign","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:0:1677":{"id":"0:0:1677","crate_id":0,"name":"url","span":{"filename":"src/lib.rs","begin":[9,0],"end":[2889,1]},"visibility":"public","docs":"\nrust-url is an implementation of the [URL Standard](http://url.spec.whatwg.org/)\nfor the [Rust](http://rust-lang.org/) programming language.\n\n\n# URL parsing and data structures\n\nFirst, URL parsing may fail for various reasons and therefore returns a `Result`.\n\n```\nuse url::{Url, ParseError};\n\nassert!(Url::parse(\"http://[:::1]\") == Err(ParseError::InvalidIpv6Address))\n```\n\nLet’s parse a valid URL and look at its components.\n\n```\nuse url::{Url, Host, Position};\n# use url::ParseError;\n# fn run() -> Result<(), ParseError> {\nlet issue_list_url = Url::parse(\n    \"https://github.com/rust-lang/rust/issues?labels=E-easy&state=open\"\n)?;\n\n\nassert!(issue_list_url.scheme() == \"https\");\nassert!(issue_list_url.username() == \"\");\nassert!(issue_list_url.password() == None);\nassert!(issue_list_url.host_str() == Some(\"github.com\"));\nassert!(issue_list_url.host() == Some(Host::Domain(\"github.com\")));\nassert!(issue_list_url.port() == None);\nassert!(issue_list_url.path() == \"/rust-lang/rust/issues\");\nassert!(issue_list_url.path_segments().map(|c| c.collect::<Vec<_>>()) ==\n        Some(vec![\"rust-lang\", \"rust\", \"issues\"]));\nassert!(issue_list_url.query() == Some(\"labels=E-easy&state=open\"));\nassert!(&issue_list_url[Position::BeforePath..] == \"/rust-lang/rust/issues?labels=E-easy&state=open\");\nassert!(issue_list_url.fragment() == None);\nassert!(!issue_list_url.cannot_be_a_base());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nSome URLs are said to be *cannot-be-a-base*:\nthey don’t have a username, password, host, or port,\nand their \"path\" is an arbitrary string rather than slash-separated segments:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet data_url = Url::parse(\"data:text/plain,Hello?World#\")?;\n\nassert!(data_url.cannot_be_a_base());\nassert!(data_url.scheme() == \"data\");\nassert!(data_url.path() == \"text/plain,Hello\");\nassert!(data_url.path_segments().is_none());\nassert!(data_url.query() == Some(\"World\"));\nassert!(data_url.fragment() == Some(\"\"));\n# Ok(())\n# }\n# run().unwrap();\n```\n\n## Serde\n\nEnable the `serde` feature to include `Deserialize` and `Serialize` implementations for `url::Url`.\n\n# Base URL\n\nMany contexts allow URL *references* that can be relative to a *base URL*:\n\n```html\n<link rel=\"stylesheet\" href=\"../main.css\">\n```\n\nSince parsed URLs are absolute, giving a base is required for parsing relative URLs:\n\n```\nuse url::{Url, ParseError};\n\nassert!(Url::parse(\"../main.css\") == Err(ParseError::RelativeUrlWithoutBase))\n```\n\nUse the `join` method on an `Url` to use it as a base URL:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet this_document = Url::parse(\"http://servo.github.io/rust-url/url/index.html\")?;\nlet css_url = this_document.join(\"../main.css\")?;\nassert_eq!(css_url.as_str(), \"http://servo.github.io/rust-url/main.css\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Feature: `serde`\n\nIf you enable the `serde` feature, [`Url`](struct.Url.html) will implement\n[`serde::Serialize`](https://docs.rs/serde/1/serde/trait.Serialize.html) and\n[`serde::Deserialize`](https://docs.rs/serde/1/serde/trait.Deserialize.html).\nSee [serde documentation](https://serde.rs) for more information.\n\n```toml\nurl = { version = \"2\", features = [\"serde\"] }\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/url/2.2.2\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:4","0:94","0:98","0:101","0:105","0:108","0:111","0:114","0:117","0:908:1602","0:921:1621","0:932:2036"],"is_stripped":false}},"0:901:2905":{"id":"0:901:2905","crate_id":0,"name":"AfterFragment","span":{"filename":"src/slicing.rs","begin":[97,4],"end":[97,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:771:2107":{"id":"0:771:2107","crate_id":0,"name":"SetHostOnCannotBeABaseUrl","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:583:2217":{"id":"0:583:2217","crate_id":0,"name":"from_file_path","span":{"filename":"src/lib.rs","begin":[2303,4],"end":[2319,5]},"visibility":"public","docs":"Convert a file name as `std::path::Path` into an URL in the `file` scheme.\n\nThis returns `Err` if the given path is not absolute or,\non Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n\n# Examples\n\nOn Unix-like platforms:\n\n```\n# if cfg!(unix) {\nuse url::Url;\n\n# fn run() -> Result<(), ()> {\nlet url = Url::from_file_path(\"/tmp/foo.txt\")?;\nassert_eq!(url.as_str(), \"file:///tmp/foo.txt\");\n\nlet url = Url::from_file_path(\"../foo.txt\");\nassert!(url.is_err());\n\nlet url = Url::from_file_path(\"https://google.com/\");\nassert!(url.is_err());\n# Ok(())\n# }\n# run().unwrap();\n# }\n```","links":{},"attrs":["#[cfg(any(unix, windows, target_os = \"redox\"))]","#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["path",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3166:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7441:185","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3417:3164":{"id":"2:3417:3164","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3419:181","2:3420:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:485:2919":{"id":"0:485:2919","crate_id":0,"name":"protocol","span":{"filename":"src/quirks.rs","begin":[54,0],"end":[56,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-protocol","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:757:2595":{"id":"0:757:2595","crate_id":0,"name":"IdnaError","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:5008:1588":{"id":"1:5008:1588","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5009:3197","1:5010:1916"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3204:681":{"id":"2:3204:681","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10575:4027":{"id":"2:10575:4027","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10576:146","2:10577:34283","2:10578:57068"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[151,0],"end":[151,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::path_segments::PathSegmentsMut","name":"PathSegmentsMut","id":"0:861:1596","glob":false}},"0:790:1594":{"id":"0:790:1594","crate_id":0,"name":"SyntaxViolation","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"public","docs":"Non-fatal syntax violations that can occur during parsing.\n\nThis may be extended in the future so exhaustive matching is\ndiscouraged with an unused variant.","links":{},"attrs":["#[allow(clippy :: manual_non_exhaustive)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:791:2612","0:793:2614","0:795:2616","0:797:2618","0:799:2620","0:801:2622","0:803:2624","0:805:2626","0:807:2628","0:809:2630","0:811:2632"],"impls":[]}},"1:5797:4341":{"id":"1:5797:4341","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5798:6470"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3435:3168":{"id":"2:3435:3168","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3437:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13485:55538":{"id":"2:13485:55538","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:16004:2985","str::splitn":"1:16010:2990","self::pattern":"2:13054:3426"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49584:4116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13444:2324":{"id":"2:13444:2324","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49448:4100","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3202-0:908:1602":{"id":"b:2:3202-0:908:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3204:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3368:3111":{"id":"2:3368:3111","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:593:2277":{"id":"0:593:2277","crate_id":0,"name":"from_str","span":{"filename":"src/lib.rs","begin":[2493,4],"end":[2495,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::ParseError","id":"0:754:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13450:2496":{"id":"2:13450:2496","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13054:3426","prim@char":"1:16004:2985"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13543:4374":{"id":"2:13543:4374","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:16004:2985"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49770:4106","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2957:177":{"id":"2:2957:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2958:415","2:2959:3807","2:2960:2518","2:2961:3836"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3208-0:932:2036":{"id":"b:2:3208-0:932:2036","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3178:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3211:127","2:3212:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:4002-0:908:1602":{"id":"b:2:4002-0:908:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:4000:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4004:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3406:3161":{"id":"2:3406:3161","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:181","2:3409:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3279:106":{"id":"2:3279:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:602":{"id":"0:602","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2522,0],"end":[2538,1]},"visibility":"crate","docs":"Debug the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:603:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3281:220-0:908:1602":{"id":"a:2:3281:220-0:908:1602","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3198-0:932:2036":{"id":"b:2:3198-0:932:2036","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3201:1752"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:4666:4164":{"id":"1:4666:4164","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4667:4526","1:4668:56883","1:4670:56884","1:4671:56885","1:4672:4165","1:4673:56886","1:4674:56887","1:4676:56888","1:4677:2654","1:4678:2324","1:4679:3850","1:4681:2001"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:437:181":{"id":"0:437:181","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[13,4],"end":[13,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"0:759:2597":{"id":"0:759:2597","crate_id":0,"name":"InvalidPort","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13767:138":{"id":"2:13767:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13768:181","2:13769:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8602:157":{"id":"2:8602:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8603:1676","2:8604:922","2:8605:3845","2:8608:3846","2:8609:495","2:8611:2501","2:8614:3847","2:8615:3848","2:8616:3849","2:8617:3850","2:8619:3851","2:8621:3852","2:8622:3853","2:8624:841","2:8627:3854","2:8634:3855","2:8636:3856","2:8639:2513","2:8640:1724","2:8641:3857","2:8643:2669","2:8645:3858","2:8648:1308","2:8649:2001","2:8650:3859","2:8654:3860","2:8657:3861","2:8658:3862","2:8659:3863","2:8661:2654","2:8662:1917","2:8664:3864","2:8667:3865","2:8669:3866","2:8679:3867","2:8694:3868","2:8696:3869","2:8700:3870","2:8709:3871","2:8712:3872","2:8714:3873","2:8717:276","2:8724:294","2:8731:2113","2:8738:3874","2:8747:3875","2:8757:1014","2:8764:3876","2:8771:3807","2:8772:2518","2:8773:3809","2:8785:3808","2:8792:3806","2:8804:3805","2:8811:3877","2:8812:3878","2:8817:3879","2:8820:3880","2:8823:3881","2:8824:3882","2:8826:3883","2:8828:415","2:8831:3884","2:8834:997","2:8837:3885","2:8840:604","2:8843:3886","2:8846:907","2:8848:826","2:8850:792","2:8852:713","2:8854:696","2:8856:3887","2:8857:3888","2:8865:3889"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6437:3358":{"id":"1:6437:3358","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6438:4580","1:6439:4581","1:6440:9216","1:6441:54818","1:6443:54822","1:6445:54819","1:6446:54820","1:6448:54821"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3729:224":{"id":"2:3729:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3730:181","2:3731:3176","2:3732:686","2:3733:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3734:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2872-0:908:1602":{"id":"b:2:2872-0:908:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2866:3112","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2874:54626"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13453:1774":{"id":"2:13453:1774","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13054:3426","prim@char":"1:16004:2985"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:883:2896":{"id":"0:883:2896","crate_id":0,"name":"BeforeHost","span":{"filename":"src/slicing.rs","begin":[88,4],"end":[88,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3269:211-0:921:1621":{"id":"a:2:3269:211-0:921:1621","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:3516:2342":{"id":"2:3516:2342","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3517:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3364:3152":{"id":"2:3364:3152","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3365:181","2:3366:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13506:2949":{"id":"2:13506:2949","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13441:55525":{"id":"2:13441:55525","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:16010:2990"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3401:3160":{"id":"2:3401:3160","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23774:4775":{"id":"2:23774:4775","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23775:4778"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23770:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13782:150":{"id":"2:13782:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13783:181","2:13784:150","2:13785:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2888:104":{"id":"2:2888:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:408","2:2890:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:531:1819":{"id":"0:531:1819","crate_id":0,"name":"has_authority","span":{"filename":"src/lib.rs","begin":[811,4],"end":[814,5]},"visibility":"public","docs":"Return whether the URL has an 'authority',\nwhich can contain a username, password, host, and port number.\n\nURLs that do *not* are either path-only like `unix:/run/foo.socket`\nor cannot-be-a-base like `data:text/plain,Stuff`.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.has_authority());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.has_authority());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(!url.has_authority());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:793:2614":{"id":"0:793:2614","crate_id":0,"name":"C0SpaceIgnored","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:500:2942":{"id":"0:500:2942","crate_id":0,"name":"pathname","span":{"filename":"src/quirks.rs","begin":[228,0],"end":[230,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-pathname","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13482:55536":{"id":"2:13482:55536","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13054:3426","prim@char":"1:16004:2985","str::rsplitn":"1:16010:2990"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49566:4117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5735:3349":{"id":"1:5735:3349","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5736:6470","1:5737:8705"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3202-0:921:1621":{"id":"b:2:3202-0:921:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3204:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10303:3116":{"id":"2:10303:3116","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10304:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:908:1602":{"id":"0:908:1602","crate_id":0,"name":"Url","span":{"filename":"src/lib.rs","begin":[166,0],"end":[188,1]},"visibility":"public","docs":"A parsed URL record.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:513","a:2:3281:220-0:908:1602","a:2:3310:3088-0:908:1602","a:2:9259:3575-0:908:1602","a:2:3269:211-0:908:1602","a:2:9260:3574-0:908:1602","b:2:3213-0:908:1602","b:2:3202-0:908:1602","b:2:2869-0:908:1602","b:2:2872-0:908:1602","b:2:3208-0:908:1602","b:2:4002-0:908:1602","b:2:3198-0:908:1602","b:5:6413-0:908:1602","b:5:787-0:908:1602","0:436","0:439","0:442","0:445","0:919","0:591","0:594","0:598","0:600","0:602","0:604","0:605","0:607","0:609","0:611","0:614"]}},"b:5:787-0:908:1602":{"id":"b:5:787-0:908:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:3114","5:790:2002","5:791:3891"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:591":{"id":"0:591","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2489,0],"end":[2496,1]},"visibility":"crate","docs":"Parse a string as an URL, without a base URL or encoding override.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:592:126","0:593:2277"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3342:3154":{"id":"2:3342:3154","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:446:181":{"id":"0:446:181","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[34,4],"end":[34,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"0:603:660":{"id":"0:603:660","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2524,4],"end":[2537,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["formatter",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10252:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10241:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3202-0:932:2036":{"id":"b:2:3202-0:932:2036","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3204:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13476:61021":{"id":"2:13476:61021","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"1:16010:2990","str::split":"1:16010:2990","self::pattern":"2:13054:3426","prim@char":"1:16004:2985","`DoubleEndedIterator`":"2:8448:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49512:4119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:502:2948":{"id":"0:502:2948","crate_id":0,"name":"search","span":{"filename":"src/quirks.rs","begin":[251,0],"end":[253,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-search","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:538:1867":{"id":"0:538:1867","crate_id":0,"name":"domain","span":{"filename":"src/lib.rs","begin":[1044,4],"end":[1049,5]},"visibility":"public","docs":"If this URL has a host and it is a domain name (not an IP address), return it.\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/\")?;\nassert_eq!(url.domain(), None);\n\nlet url = Url::parse(\"mailto:rms@example.net\")?;\nassert_eq!(url.domain(), None);\n\nlet url = Url::parse(\"https://example.com/\")?;\nassert_eq!(url.domain(), Some(\"example.com\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:6413-0:908:1602":{"id":"b:5:6413-0:908:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10299:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6411:223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6415:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[150,24],"end":[150,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::ParseError","name":"ParseError","id":"0:754:1593","glob":false}},"1:7795:4463":{"id":"1:7795:4463","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7796:57702"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:887:2898":{"id":"0:887:2898","crate_id":0,"name":"BeforePort","span":{"filename":"src/slicing.rs","begin":[90,4],"end":[90,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13079:4090":{"id":"2:13079:4090","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13081:3837","2:13082:59817","2:13083:59818"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13073:4091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[153,0],"end":[153,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"form_urlencoded::EncodingOverride","name":"EncodingOverride","id":"21:95:1599","glob":false}},"2:3812:3182":{"id":"2:3812:3182","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9259:3575-0:932:2036":{"id":"a:2:9259:3575-0:932:2036","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9259:3575","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:8883:4025":{"id":"2:8883:4025","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:930:408":{"id":"0:930:408","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[191,15],"end":[191,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10305:3123":{"id":"2:10305:3123","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10306:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:530:1710":{"id":"0:530:1710","crate_id":0,"name":"scheme","span":{"filename":"src/lib.rs","begin":[781,4],"end":[783,5]},"visibility":"public","docs":"Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert_eq!(url.scheme(), \"file\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:604":{"id":"0:604","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2541,0],"end":[2541,18]},"visibility":"crate","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:4004:1429":{"id":"2:4004:1429","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46031:3335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:577:2147":{"id":"0:577:2147","crate_id":0,"name":"set_password","span":{"filename":"src/lib.rs","begin":[1968,4],"end":[2023,5]},"visibility":"public","docs":"Change this URL’s password.\n\nIf this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rmz@example.com\")?;\nlet result = url.set_password(Some(\"secret_password\"));\nassert!(result.is_err());\n\nlet mut url = Url::parse(\"ftp://user1:secret1@example.com\")?;\nlet result = url.set_password(Some(\"secret_password\"));\nassert_eq!(url.password(), Some(\"secret_password\"));\n\nlet mut url = Url::parse(\"ftp://user2:@example.com\")?;\nlet result = url.set_password(Some(\"secret2\"));\nassert!(result.is_ok());\nassert_eq!(url.password(), Some(\"secret2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["password",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:513":{"id":"0:513","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,0],"end":[2486,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:514:1651","0:515:1672","0:519:1693","0:520:1708","0:522:971","0:524:306","0:525:1751","0:529:1590","0:530:1710","0:531:1819","0:532:1709","0:533:1834","0:534:1840","0:535:1844","0:536:1777","0:537:1568","0:538:1867","0:539:1616","0:540:1885","0:542:1906","0:547:1002","0:548:1595","0:549:1731","0:550:1967","0:551:1733","0:556:1996","0:561:2011","0:563:1678","0:565:2049","0:567:2058","0:570:2080","0:573:2106","0:576:2135","0:577:2147","0:579:2163","0:581:2196","0:583:2217","0:585:2231","0:587:2268"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:4051:3334":{"id":"2:4051:3334","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4052:4078"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3269:211-0:908:1602":{"id":"a:2:3269:211-0:908:1602","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3247:115":{"id":"2:3247:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:769:2604":{"id":"0:769:2604","crate_id":0,"name":"RelativeUrlWithCannotBeABaseBase","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13447:5449":{"id":"2:13447:5449","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49716:4109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3208-0:921:1621":{"id":"b:2:3208-0:921:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3178:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3211:127","2:3212:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:22940:4358":{"id":"2:22940:4358","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22930:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3423:3165":{"id":"2:3423:3165","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13423:61017":{"id":"2:13423:61017","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:16010:2990"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:481:2528":{"id":"0:481:2528","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/quirks.rs","begin":[26,0],"end":[34,1]},"visibility":"public","docs":"https://url.spec.whatwg.org/#dom-url-domaintounicode","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:23137:4779":{"id":"2:23137:4779","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23774:4775","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23128:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3431:3167":{"id":"2:3431:3167","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:120:1568":{"id":"0:120:1568","crate_id":0,"name":"host","span":{"filename":"src/host.rs","begin":[9,0],"end":[480,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:680:1589"],"is_stripped":true}},"0:754:1593":{"id":"0:754:1593","crate_id":0,"name":"ParseError","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"public","docs":"Errors that can occur during parsing.\n\nThis may be extended in the future so exhaustive matching is\ndiscouraged with an unused variant.","links":{},"attrs":["#[allow(clippy :: manual_non_exhaustive)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:755:2108","0:757:2595","0:759:2597","0:761:2507","0:763:2463","0:765:2114","0:767:2602","0:769:2604","0:771:2107","0:773:2607"],"impls":[]}},"2:22877:4865":{"id":"2:22877:4865","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22878:4778","2:22879:1247","2:22880:1272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2921:183":{"id":"2:2921:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2923:604","2:2924:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6459:3359":{"id":"1:6459:3359","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6460:57427","1:6461:8378","1:6462:57428","1:6463:57429","1:6464:57430","1:6465:57431"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13420:61015":{"id":"2:13420:61015","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23465:4780":{"id":"2:23465:4780","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23466:1270","2:23467:1269","2:23468:1267","2:23469:1266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22877:4865","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"form_urlencoded","name":"form_urlencoded","id":"21:0:1566","glob":false}},"a:2:3281:220-0:921:1621":{"id":"a:2:3281:220-0:921:1621","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:13494:1565":{"id":"2:13494:1565","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:8448:120","str::matches":"1:16010:2990","self::pattern":"2:13054:3426","prim@char":"1:16004:2985"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49666:4113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2869-0:908:1602":{"id":"b:2:2869-0:908:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2871:1581"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:535:1844":{"id":"0:535:1844","crate_id":0,"name":"has_host","span":{"filename":"src/lib.rs","begin":[936,4],"end":[938,5]},"visibility":"public","docs":"Equivalent to `url.host().is_some()`.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.has_host());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.has_host());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(!url.has_host());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13445:33161":{"id":"2:13445:33161","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:16010:2990"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49736:4098","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:805:2626":{"id":"0:805:2626","crate_id":0,"name":"NullInFragment","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:871:2890":{"id":"0:871:2890","crate_id":0,"name":"BeforeScheme","span":{"filename":"src/slicing.rs","begin":[82,4],"end":[82,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:932:2036":{"id":"0:932:2036","crate_id":0,"name":"UrlQuery","span":{"filename":"src/lib.rs","begin":[2854,0],"end":[2857,1]},"visibility":"public","docs":"Implementation detail of `Url::query_pairs_mut`. Typically not used directly.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:3281:220-0:932:2036","a:2:3310:3088-0:932:2036","a:2:9259:3575-0:932:2036","a:2:3269:211-0:932:2036","a:2:9260:3574-0:932:2036","b:2:3213-0:932:2036","b:2:3202-0:932:2036","b:2:2869-0:932:2036","b:2:2872-0:932:2036","b:2:3208-0:932:2036","b:2:4002-0:932:2036","b:2:3198-0:932:2036","0:936","0:649","0:654"]}},"5:6107:2664":{"id":"5:6107:2664","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:16010:2990"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[150,36],"end":[150,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::SyntaxViolation","name":"SyntaxViolation","id":"0:790:1594","glob":false}},"0:492:2106":{"id":"0:492:2106","crate_id":0,"name":"set_host","span":{"filename":"src/quirks.rs","begin":[105,0],"end":[152,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-host","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_host",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:897:2903":{"id":"0:897:2903","crate_id":0,"name":"AfterQuery","span":{"filename":"src/slicing.rs","begin":[95,4],"end":[95,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:444:753":{"id":"0:444:753","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[28,4],"end":[30,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"resolved_path","inner":{"name":"RangeTo","id":"2:45922:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Position","id":"0:870:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9260:3574-0:921:1621":{"id":"a:2:9260:3574-0:921:1621","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9260:3574","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:581:2196":{"id":"0:581:2196","crate_id":0,"name":"set_scheme","span":{"filename":"src/lib.rs","begin":[2223,4],"end":[2272,5]},"visibility":"public","docs":"Change this URL’s scheme.\n\nDo nothing and return `Err` under the following circumstances:\n\n* If the new scheme is not in `[a-zA-Z][a-zA-Z0-9+.-]+`\n* If this URL is cannot-be-a-base and the new scheme is one of\n  `http`, `https`, `ws`, `wss` or `ftp`\n* If either the old or new scheme is `http`, `https`, `ws`,\n  `wss` or `ftp` and the other is not one of these\n* If the new scheme is `file` and this URL includes credentials\n  or has a non-null port\n* If this URL's scheme is `file` and its host is empty or null\n\nSee also [the URL specification's section on legal scheme state\noverrides](https://url.spec.whatwg.org/#scheme-state).\n\n# Examples\n\nChange the URL’s scheme from `https` to `foo`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_scheme(\"http\");\nassert_eq!(url.as_str(), \"http://example.net/\");\nassert!(result.is_ok());\n# Ok(())\n# }\n# run().unwrap();\n```\nChange the URL’s scheme from `foo` to `bar`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_scheme(\"bar\");\nassert_eq!(url.as_str(), \"bar://example.net\");\nassert!(result.is_ok());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL’s scheme from `https` to `foõ`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_scheme(\"foõ\");\nassert_eq!(url.as_str(), \"https://example.net/\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL’s scheme from `mailto` (cannot-be-a-base) to `https`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\nlet result = url.set_scheme(\"https\");\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\nCannot change the URL’s scheme from `foo` to `https`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_scheme(\"https\");\nassert_eq!(url.as_str(), \"foo://example.net\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\nCannot change the URL’s scheme from `http` to `foo`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"http://example.net\")?;\nlet result = url.set_scheme(\"foo\");\nassert_eq!(url.as_str(), \"http://example.net/\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy :: result_unit_err, clippy :: suspicious_operation_groupings)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["scheme",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3208-0:908:1602":{"id":"b:2:3208-0:908:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3178:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3211:127","2:3212:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:14166:141":{"id":"2:14166:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14167:277","2:14168:518","2:14169:280","2:14170:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"25:344:6015":{"id":"25:344:6015","crate_id":25,"name":"UnicodeNormalization","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:346:54630","25:347:54631","25:348:3245","25:349:54632","25:350:54633","25:351:6023"],"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:498:2080":{"id":"0:498:2080","crate_id":0,"name":"set_port","span":{"filename":"src/quirks.rs","begin":[204,0],"end":[224,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-port","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_port",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:921:1621":{"id":"0:921:1621","crate_id":0,"name":"ParseOptions","span":{"filename":"src/lib.rs","begin":[192,0],"end":[196,1]},"visibility":"public","docs":"Full configuration for the URL parser.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:507","a:2:3281:220-0:921:1621","a:2:3310:3088-0:921:1621","a:2:9259:3575-0:921:1621","a:2:3269:211-0:921:1621","a:2:9260:3574-0:921:1621","b:2:3213-0:921:1621","b:2:3202-0:921:1621","b:2:2869-0:921:1621","b:2:2872-0:921:1621","b:2:3208-0:921:1621","b:2:4002-0:921:1621","b:2:3198-0:921:1621","b:5:787-0:921:1621","0:926","0:928"]}},"1:4741:4168":{"id":"1:4741:4168","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4742:57604","1:4743:40514","1:4744:57605","1:4745:57606"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13429:9575":{"id":"2:13429:9575","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16021:2999"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:807:2628":{"id":"0:807:2628","crate_id":0,"name":"PercentDecode","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:3198-0:908:1602":{"id":"b:2:3198-0:908:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3201:1752"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:503:2951":{"id":"0:503:2951","crate_id":0,"name":"set_search","span":{"filename":"src/quirks.rs","begin":[256,0],"end":[262,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-search","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_search",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13479:61022":{"id":"2:13479:61022","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:16010:2990","str::split":"1:16010:2990","prim@char":"1:16004:2985","self::pattern":"2:13054:3426"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49530:4118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13421:61016":{"id":"2:13421:61016","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6790:3358":{"id":"1:6790:3358","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6791:9217"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13073:4091":{"id":"2:13073:4091","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13075:4651","2:13076:922","2:13077:60371","2:13078:60372"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22751:4864":{"id":"2:22751:4864","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22752:4778","2:22753:60023","2:22754:60185","2:22755:60186","2:22756:60187","2:22757:43503","2:22758:60188","2:22759:60189","2:22760:60190","2:22761:60191","2:22762:60192","2:22763:60193","2:22764:60194","2:22765:60195","2:22766:60196","2:22767:60197","2:22768:60089","2:22769:60198","2:22770:59658","2:22771:59657","2:22772:59659","2:22773:60024","2:22774:60025","2:22775:60026","2:22776:60027"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:4350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:576:2135":{"id":"0:576:2135","crate_id":0,"name":"set_ip_host","span":{"filename":"src/lib.rs","begin":[1928,4],"end":[1939,5]},"visibility":"public","docs":"Change this URL’s host to the given IP address.\n\nIf this URL is cannot-be-a-base, do nothing and return `Err`.\n\nCompared to `Url::set_host`, this skips the host parser.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"http://example.com\")?;\nurl.set_ip_host(\"127.0.0.1\".parse().unwrap());\nassert_eq!(url.host_str(), Some(\"127.0.0.1\"));\nassert_eq!(url.as_str(), \"http://127.0.0.1/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL's from mailto(cannot-be-base) to ip:\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.com\")?;\nlet result = url.set_ip_host(\"127.0.0.1\".parse().unwrap());\n\nassert_eq!(url.as_str(), \"mailto:rms@example.com\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["address",{"kind":"resolved_path","inner":{"name":"IpAddr","id":"1:11208:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:445":{"id":"0:445","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[33,0],"end":[38,1]},"visibility":{"restricted":{"parent":"0:416:1597","path":"::slicing"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3577:2860","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Range","id":"2:45876:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Position","id":"0:870:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:446:181","0:447:753"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8363:4703":{"id":"2:8363:4703","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8365:3882"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:684:1542":{"id":"0:684:1542","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[47,11],"end":[47,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"S"}},"2:3577:2860":{"id":"2:3577:2860","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3579:181","2:3580:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:765:2114":{"id":"0:765:2114","crate_id":0,"name":"InvalidDomainCharacter","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:4002-0:921:1621":{"id":"b:2:4002-0:921:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:4000:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:4004:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2874:54626":{"id":"2:2874:54626","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3217:1416":{"id":"2:3217:1416","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:547:1002":{"id":"0:547:1002","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[1190,4],"end":[1197,5]},"visibility":"public","docs":"Return the path for this URL, as a percent-encoded ASCII string.\nFor cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'.\nFor other URLs, this starts with a '/' slash\nand continues with slash-separated path segments.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/api/versions?page=2\")?;\nassert_eq!(url.path(), \"/api/versions\");\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.path(), \"/\");\n\nlet url = Url::parse(\"https://example.com/countries/việt nam\")?;\nassert_eq!(url.path(), \"/countries/vi%E1%BB%87t%20nam\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:803:2624":{"id":"0:803:2624","crate_id":0,"name":"NonUrlCodePoint","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:685:1778":{"id":"0:685:1778","crate_id":0,"name":"Ipv4","span":{"filename":"src/host.rs","begin":[52,4],"end":[52,18]},"visibility":"default","docs":"An IPv4 address.\n`Url::host_str` returns the serialization of this address,\nas four decimal integers separated by `.` dots.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11232:2443","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:488:2163":{"id":"0:488:2163","crate_id":0,"name":"set_username","span":{"filename":"src/quirks.rs","begin":[77,0],"end":[79,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-username","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_username",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"b:2:3213-0:908:1602":{"id":"b:2:3213-0:908:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3216:127","2:3217:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10299:119":{"id":"2:10299:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10300:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13544:61036":{"id":"2:13544:61036","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:16004:2985"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49779:4107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9260:3574-0:932:2036":{"id":"a:2:9260:3574-0:932:2036","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9260:3574","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:505:2955":{"id":"0:505:2955","crate_id":0,"name":"set_hash","span":{"filename":"src/quirks.rs","begin":[270,0],"end":[279,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-hash","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_hash",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1340","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:61671","5:6085:1988","5:6088:61672","5:6091:61673","5:6103:61674","5:6104:1751","5:6105:4192","5:6106:55036","5:6107:2664"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3182:227":{"id":"2:3182:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3184:127","2:3185:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13463:1714":{"id":"2:13463:1714","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13054:3426","prim@char":"1:16004:2985","`None`":"2:47495:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:563:1678":{"id":"0:563:1678","crate_id":0,"name":"query_pairs_mut","span":{"filename":"src/lib.rs","begin":[1495,4],"end":[1513,5]},"visibility":"public","docs":"Manipulate this URL’s query string, viewed as a sequence of name/value pairs\nin `application/x-www-form-urlencoded` syntax.\n\nThe return value has a method-chaining API:\n\n```rust\n# use url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net?lang=fr#nav\")?;\nassert_eq!(url.query(), Some(\"lang=fr\"));\n\nurl.query_pairs_mut().append_pair(\"foo\", \"bar\");\nassert_eq!(url.query(), Some(\"lang=fr&foo=bar\"));\nassert_eq!(url.as_str(), \"https://example.net/?lang=fr&foo=bar#nav\");\n\nurl.query_pairs_mut()\n    .clear()\n    .append_pair(\"foo\", \"bar & baz\")\n    .append_pair(\"saisons\", \"\\u{00C9}t\\u{00E9}+hiver\");\nassert_eq!(url.query(), Some(\"foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver\"));\nassert_eq!(url.as_str(),\n           \"https://example.net/?foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver#nav\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nNote: `url.query_pairs_mut().clear();` is equivalent to `url.set_query(Some(\"\"))`,\nnot `url.set_query(None)`.\n\nThe state of `Url` is unspecified if this return value is leaked without being dropped.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"form_urlencoded::Serializer","id":"21:50:2035","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3389:3162":{"id":"2:3389:3162","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:181","2:3391:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:439":{"id":"0:439","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[19,0],"end":[24,1]},"visibility":{"restricted":{"parent":"0:416:1597","path":"::slicing"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3577:2860","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFrom","id":"2:45901:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Position","id":"0:870:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:440:181","0:441:753"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13470:33018":{"id":"2:13470:33018","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:16004:2985","self::pattern":"2:13054:3426"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12846:4097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:609":{"id":"0:609","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2560,0],"end":[2565,1]},"visibility":"crate","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:610:997"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:491:1568":{"id":"0:491:1568","crate_id":0,"name":"host","span":{"filename":"src/quirks.rs","begin":[99,0],"end":[101,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-host","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:4783:4249":{"id":"2:4783:4249","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4784:1676","2:4785:60306","2:4786:3846"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:600":{"id":"0:600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2515,0],"end":[2519,1]},"visibility":"crate","docs":"String converstion.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:601:681"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:881:2895":{"id":"0:881:2895","crate_id":0,"name":"AfterPassword","span":{"filename":"src/slicing.rs","begin":[87,4],"end":[87,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3269:211-0:932:2036":{"id":"a:2:3269:211-0:932:2036","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13541:61035":{"id":"2:13541:61035","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:16004:2985"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49761:4105","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3559:3179":{"id":"2:3559:3179","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3561:237","2:3562:206","2:3563:59906"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10292:109":{"id":"2:10292:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10293:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3376:3156":{"id":"2:3376:3156","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3378:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:720:1544":{"id":"0:720:1544","crate_id":0,"name":"2","span":{"filename":"src/origin.rs","begin":[59,32],"end":[59,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u16"}},"0:879:2894":{"id":"0:879:2894","crate_id":0,"name":"BeforePassword","span":{"filename":"src/slicing.rs","begin":[86,4],"end":[86,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3522:131":{"id":"2:3522:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3525:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5833:4093":{"id":"5:5833:4093","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13064:2646":{"id":"2:13064:2646","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13066:4091","2:13067:60136","2:13068:60137","2:13069:60138","2:13070:60140","2:13071:60139","2:13072:60141"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:598":{"id":"0:598","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2507,0],"end":[2512,1]},"visibility":"crate","docs":"Display the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10299:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:599:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3310:3088-0:921:1621":{"id":"a:2:3310:3088-0:921:1621","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3310:3088","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:795:2616":{"id":"0:795:2616","crate_id":0,"name":"EmbeddedCredentials","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13448:61020":{"id":"2:13448:61020","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49726:4110","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:763:2463":{"id":"0:763:2463","crate_id":0,"name":"InvalidIpv6Address","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3166:75":{"id":"2:3166:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:797:2618":{"id":"0:797:2618","crate_id":0,"name":"ExpectedDoubleSlash","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13503:61027":{"id":"2:13503:61027","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13054:3426","prim@char":"1:16004:2985","str::match_indices":"1:16010:2990","`DoubleEndedIterator`":"2:8448:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49630:4112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6859:3352":{"id":"1:6859:3352","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6860:56747"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3411:3163":{"id":"2:3411:3163","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:181","2:3414:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:525:1751":{"id":"0:525:1751","crate_id":0,"name":"into_string","span":{"filename":"src/lib.rs","begin":[562,4],"end":[564,5]},"visibility":"public","docs":"Return the serialization of this URL.\n\nThis consumes the `Url` and takes ownership of the `String` stored in it.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url_str = \"https://example.net/\";\nlet url = Url::parse(url_str)?;\nassert_eq!(String::from(url), url_str);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"2.3.0\", note = \"use Into<String>\")]"],"deprecation":{"since":"2.3.0","note":"use Into<String>"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:932:2036":{"id":"b:2:3213-0:932:2036","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3216:127","2:3217:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:483:2916":{"id":"0:483:2916","crate_id":0,"name":"set_href","span":{"filename":"src/quirks.rs","begin":[42,0],"end":[45,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-href","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:754:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3775:3181":{"id":"2:3775:3181","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:542:1906":{"id":"0:542:1906","crate_id":0,"name":"socket_addrs","span":{"filename":"src/lib.rs","begin":[1139,4],"end":[1165,5]},"visibility":"public","docs":"Resolve a URL’s host and port number to `SocketAddr`.\n\nIf the URL has the default port number of a scheme that is unknown to this library,\n`default_port_number` provides an opportunity to provide the actual port number.\nIn non-example code this should be implemented either simply as `|| None`,\nor by matching on the URL’s `.scheme()`.\n\nIf the host is a domain, it is resolved using the standard library’s DNS support.\n\n# Examples\n\n```no_run\nlet url = url::Url::parse(\"https://example.net/\").unwrap();\nlet addrs = url.socket_addrs(|| None).unwrap();\nstd::net::TcpStream::connect(&*addrs)\n# ;\n```\n\n```\n/// With application-specific known default port numbers\nfn socket_addrs(url: url::Url) -> std::io::Result<Vec<std::net::SocketAddr>> {\n    url.socket_addrs(|| match url.scheme() {\n        \"socks5\" | \"socks5h\" => Some(1080),\n        _ => None,\n    })\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["default_port_number",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Fn","id":"2:3519:130","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:11156:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"impl Fn() -> Option<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Fn","id":"2:3519:130","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:487:1834":{"id":"0:487:1834","crate_id":0,"name":"username","span":{"filename":"src/quirks.rs","begin":[71,0],"end":[73,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-username","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:114":{"id":"0:114","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::slicing::Position","name":"Position","id":"0:870:1598","glob":false}},"0:509:1623":{"id":"0:509:1623","crate_id":0,"name":"base_url","span":{"filename":"src/lib.rs","begin":[200,4],"end":[203,5]},"visibility":"public","docs":"Change the base URL","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["new",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"17:8954:5863":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:48549:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:5008:1588":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"6:1712:7738":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:4157:5920":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:23774:4775":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:12712:6730":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13772:7076":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:5423:8206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:6685:8426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"9:749:5270":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:3396:3159":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:3241:5763":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7378:5589":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:1651:4441":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:24771:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"8:0:2959":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"19:117:6297":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:2219:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:50037:4645":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:8367:4702":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:11360:3138":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:49448:4100":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"23:154:62218":{"crate_id":23,"path":["idna","uts46","Mapping"],"kind":"enum"},"17:13172:6903":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:46650:4696":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10571:9129":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:0:2967":{"crate_id":17,"path":["object"],"kind":"module"},"16:5384:5471":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:12645:6723":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"12:1256:4441":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:11414:4614":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:13073:4091":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:10307:3124":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:5952:4612":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:8121:5222":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:10427:6197":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:5631:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:3714:7152":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:10292:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"13:232:7453":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:5875:6161":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:2433:9205":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:2162:4375":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:1457:4440":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:1619:4438":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:4434:4189":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"24:120:5988":{"crate_id":24,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"5:1694:5228":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:3182:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:46730:4709":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:3269:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:1415:3197":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:6695:8310":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:8164:9767":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:11208:1586":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"17:13062:6862":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4148:7913":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"14:250:7408":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:9639:54940":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"16:2991:5768":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:8639:3266":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:2777:5235":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:4823:7172":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:11232:2443":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"2:4783:4249":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:12744:6201":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"22:32:1580":{"crate_id":22,"path":["percent_encoding","utf8_percent_encode"],"kind":"function"},"2:25243:4920":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:3274:3087":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13370:6952":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"24:394:9079":{"crate_id":24,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"16:7477:5607":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:1721:7744":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:2395:9203":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"14:194:46010":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:3522:6319":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:4012:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:10447:9189":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:12095:6613":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:10804:4523":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:10299:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"12:1666:5412":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:3018:5758":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:53255:4785":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"12:379:5406":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:13064:2646":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:6459:3359":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:1843:6152":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10106:5925":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"14:0:2964":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:3329:3197":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:46631:4694":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11696:6535":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"23:85:9752":{"crate_id":23,"path":["idna","uts46","Mapper"],"kind":"struct"},"2:51721:4783":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"25:298:6041":{"crate_id":25,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"17:12598:6709":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:9634:6193":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:4885:4929":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:16010:2990":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:22840:4765":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"24:416:5976":{"crate_id":24,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"16:3145:5769":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:4473:4191":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:23470:17255":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:3366:1583":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:6569:5788":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:12227:3269":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:11098:4169":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:3172:5760":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"12:2398:7458":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"12:895:5391":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:7042:5803":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:4448:7161":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"9:963:5333":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"9:0:2960":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:5930:4610":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:53341:4823":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:7804:5594":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:5979:8271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:50198:4987":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:13477:6978":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:23465:4780":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:3883:7766":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:6634:59610":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:47682:3844":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4067:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:634:7617":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:12116:3197":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:53380:4788":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:1236:9105":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"12:940:4434":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11254:5888":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:7226:5657":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"12:162:5403":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:5244:8108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:1526:7621":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"12:764:4024":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:48795:4030":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:46328:4872":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:3717:3174":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:3734:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:12385:6674":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"12:750:3197":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11653:6524":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:10580:4028":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:3368:3111":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:11231:5890":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:56325:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:6764:4156":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:50241:5047":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:13506:6986":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:50174:4989":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"12:952:4435":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:4762:7170":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12456:6688":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:47674:4024":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:2218:5191":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:11588:6514":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:10366:6466":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:6132:8332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:7649:4453":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:16027:3005":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:16029:3007":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:49959:4642":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:10266:5836":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:5971:8266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:47691:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:16009:2989":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11628:6519":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"12:1147:4440":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:15122:8709":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:10377:9017":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:4443:3197":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4055:7869":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:11970:6591":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:12735:4979":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:49462:1949":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:10710:3328":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"21:50:2035":{"crate_id":21,"path":["form_urlencoded","Serializer"],"kind":"struct"},"1:11156:1587":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:3351:4540":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"18:775:6302":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"2:8887:4748":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:46374:5100":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"0:932:2036":{"crate_id":0,"path":["url","UrlQuery"],"kind":"struct"},"2:46052:2291":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:51523:4818":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13819:7087":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:2262:5233":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:32334:4278":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"26:1210:4881":{"crate_id":26,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"17:13446:6970":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"24:439:5978":{"crate_id":24,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"2:49251:4960":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"12:399:5405":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:49716:4109":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:13258:6926":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:15498:5430":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:5647:3344":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:2027:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:4599:6155":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"17:9264:6392":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:1740:7750":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:1011:3197":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11026:9149":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:3038:3114":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7216:5656":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"26:1036:6061":{"crate_id":26,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"6:4446:8010":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:11962:6589":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:8379:5129":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:14633:4167":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:5735:3349":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"7:0:1481":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:15483:54810":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:12051:6603":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:3365:5506":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:5889:6164":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"5:8106:4254":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:11575:3194":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:4790:7171":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:24129:8469":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:10403:5869":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:5766:5495":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:23089:17236":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:4493:8030":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:47528:1676":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:7663:4454":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:1531:7623":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:5736:5491":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:1597:3197":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:38871:3800":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:6893:4701":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11420:4572":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:45784:3183":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:49530:4118":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:4852:7173":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"12:2059:4378":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:838:4091":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:49279:4963":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"12:183:5407":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:2945:5779":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"12:2412:7460":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:23942:5012":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:9979:4941":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:52403:4802":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"25:0:3229":{"crate_id":25,"path":["unicode_normalization"],"kind":"module"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:9332:5856":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4028:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:49612:4111":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11915:6574":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:10887:6445":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:8883:4025":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:7286:9207":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5564:8248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:5727:3350":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"9:692:5268":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:4639:4156":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:10477:5867":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:2187:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:8463:5154":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7856:5664":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:11358:5858":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13598:7011":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:10844:5870":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"18:721:6304":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:49326:4966":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:8250:3204":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10179:6406":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:6211:8386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:6438:4698":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:46603:4691":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:49361:4969":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:900:4493":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"18:0:2968":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:53556:8662":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:14242:4186":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:10309:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:24567:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"20:0:1565":{"crate_id":20,"path":["matches"],"kind":"module"},"2:10530:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:12138:4397":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:13587:9769":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:49754:4095":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6077:8318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:3091:5817":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:10661:11958":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7884:5592":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12234:6634":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:3417:3164":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:13154:6898":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:10809:4346":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:8330:3363":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:15986:54811":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:5789:4339":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"12:2419:3204":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:14166:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:8446:4376":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:1302:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:7174:5652":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"12:472:9762":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"9:927:45436":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:3682:4174":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:49584:4116":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:3347:3151":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7333:5604":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:136:9754":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"22:46:1578":{"crate_id":22,"path":["percent_encoding","percent_decode"],"kind":"function"},"1:1501:4433":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:10458:6355":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:1748:7754":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:4386:7159":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:580:7588":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:3877:7765":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:12262:4406":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:8027:4513":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"6:3972:7829":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:46473:3366":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:2751:3329":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:10407:5897":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"25:429:6040":{"crate_id":25,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"1:15185:4414":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"12:869:4375":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:32299:4277":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:50451:3331":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:6787:4351":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:7332:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:7507:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:13865:7101":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11378:5857":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:8602:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:51378:4782":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12155:6624":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:7927:4512":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:46551:3382":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:7185:5653":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:49200:4957":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:13282:6932":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:3320:5818":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:1149:9197":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"22:15:2569":{"crate_id":22,"path":["percent_encoding","AsciiSet"],"kind":"struct"},"5:1644:4429":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:6640:8414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:5421:5473":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:5456:5475":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:52796:4828":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13963:7126":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:830:5946":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:16026:3004":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:22853:4350":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:5522:5481":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:11356:4956":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12756:6737":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:55967:4849":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:10925:4350":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:10566:4489":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:6054:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:6699:8314":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:12501:5115":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10975:9145":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:11434:4579":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:1190:11960":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:16002:2983":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:48850:8586":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:5273:5512":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"12:971:4436":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"26:745:6057":{"crate_id":26,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"5:1195:9766":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13180:6904":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"12:2052:4377":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:47614:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13547:7000":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:13963:59989":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:13465:6977":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:13746:7067":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:9063:3276":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:23676:60364":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:52085:4815":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:49371:4970":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:7732:4457":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:2773:5780":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:9174:9208":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:10516:5872":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:8803:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:12742:4523":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:9759:9109":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:9809:62206":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6072:5603":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:626:7612":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:1600:7662":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:52438:4784":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:13939:54942":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:1493:4431":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11604:6515":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:9440:6397":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:4400:4555":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:9260:3574":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:46453:4874":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:4535:7164":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"21:105:3221":{"crate_id":21,"path":["form_urlencoded","ByteSerialize"],"kind":"struct"},"2:53595:8663":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:46711:4707":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:7629:4452":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:22751:4864":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:11598:3195":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:7642:5159":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"18:651:5952":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:1507:4434":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"9:776:5315":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:46343:5105":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:1621:7676":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:3341:4535":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:12795:4981":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10788:9134":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10028:9114":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:6922:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:12302:4482":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"11:0:2962":{"crate_id":11,"path":["adler"],"kind":"module"},"18:645:5955":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:49339:4967":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"9:996:5334":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:11847:6572":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:6954:5127":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:1635:4428":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"12:1121:4439":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:6082:4569":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:3488:4376":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:50178:4991":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"18:637:6302":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:16021:2999":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:11138:4024":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:11957:4973":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:7549:5593":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:5790:5496":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:8404:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:867:5949":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:5298:8135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:24068:8463":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4127:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:6257:5158":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:24805:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:5101:4937":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6032:5514":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:3993:7839":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"12:466:9761":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:3839:6152":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:7792:4461":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:7236:5658":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:9600:62209":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:12252:3279":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:15509:5430":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:16017:2995":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:10140:5870":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:51285:4805":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12287:6641":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:11163:1949":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6391:5637":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13760:7073":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:24635:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:9974:4940":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:4506:7163":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:4666:4164":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:1727:7747":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:812:5944":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:16005:2986":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:12023:4458":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:45860:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"22:77:2628":{"crate_id":22,"path":["percent_encoding","PercentDecode"],"kind":"struct"},"2:22604:60756":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13192:6909":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13240:6918":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:8473:3089":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"26:830:6058":{"crate_id":26,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"1:6319:4578":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:12699:6729":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:10463:715":{"crate_id":2,"path":["core","hash"],"kind":"module"},"25:418:6039":{"crate_id":25,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"17:12521:6697":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:9763:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:46397:5101":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:10584:5919":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:49512:4119":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:1588:7654":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10420:5896":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:3488:5767":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:5995:8283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:13084:4089":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:2397:4427":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:23082:4350":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:10623:9133":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:45922:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:13163:6902":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:15474:8712":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:3920:7793":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:3372:3158":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:10052:9116":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"12:1703:5414":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:4512:4187":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:16019:2997":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:48136:3265":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:9766:6194":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:24873:5015":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:15216:4416":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"15:269:5426":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:5029:7178":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:6951:8442":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"12:1183:5400":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:46691:4700":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:8400:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7295:5602":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:13659:4426":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:7870:5591":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"9:900:7514":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:9186:5861":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:6636:5601":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:3197:4526":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:15045:59027":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:1551:7631":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6219:5633":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:46284:4106":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:3337:3110":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:4000:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:1472:4439":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:3882:4182":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11082:5862":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:783:6196":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:3577:2860":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"9:27:5317":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:5433:5474":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:47018:8573":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:50344:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:1662:7708":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:3736:4181":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:1459:4429":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"12:2066:4379":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:5717:5490":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11147:6458":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6949:5799":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:12057:6174":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:10587:4497":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:11250:2444":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"6:4440:8007":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:5837:4094":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:5903:1340":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"17:542:5518":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:3907:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:1497:4432":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10599:9131":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:56364:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10041:9115":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4075:7879":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:4230:7156":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:38808:3216":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11993:6596":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6591:5643":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:4734:7169":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:46561:3381":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:4477:7162":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12118:6619":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:11120:3328":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:16024:3002":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:13318:6937":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:10279:5849":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:3812:3182":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:46590:3328":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"18:621:6301":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:14317:4137":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:32340:4279":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:46621:4693":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:4402:7992":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:2754:5507":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:47666:3197":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"12:2036:3844":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:5330:6393":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:8481:4395":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"14:56:6487":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:12795:6748":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:7250:5659":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:8839:9208":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:12307:6647":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"12:1203:5401":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"26:1054:6062":{"crate_id":26,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"16:6269:5635":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:8474:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:4242:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:3376:3156":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:49666:4113":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:2793:3330":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:12343:6653":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:5030:3826":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:46468:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"26:0:3230":{"crate_id":26,"path":["tinyvec"],"kind":"module"},"2:3389:3162":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:46:7463":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:14069:1572":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:547:5492":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:593:7594":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:13627:7018":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:4684:4166":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:8391:5130":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13780:7079":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:10452:6199":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:23139:4778":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4356:7970":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:8138:5223":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:9139:3278":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:13331:6942":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:7441:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:6959:3351":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:5415:4156":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:533:7557":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:2769:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:47926:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"7:38:45332":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:4066:3333":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:2512:5898":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:3281:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:3772:7153":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:56403:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:821:5945":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:14588:8706":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:9933:9112":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:56338:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"9:1075:5336":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:3384:3157":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:46312:4870":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6176:5631":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:3506:5766":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:2967:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:7073:5649":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:5207:8094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:3729:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:2543:5866":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:13221:6917":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10160:6404":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:11297:8685":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:9574:5864":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:11317:54817":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:8388:3194":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:13279:9012":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:51076:4824":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:4038:7863":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:13923:4455":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:2889:5774":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11130:4172":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"18:755:62213":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"9:469:45442":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"24:10:5982":{"crate_id":24,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"17:13348:6947":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4386:7986":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:22602:60758":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"25:407:62243":{"crate_id":25,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"2:14:2085":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:7467:5586":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:51180:4825":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12467:6689":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:3561:4178":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:11457:8299":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:4135:7909":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:22581:60759":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:5505:5480":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7571:5581":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5475:8220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:11674:3199":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:12053:4460":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:4723:1582":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:4051:3334":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:7795:4463":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:51211:4813":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"12:1238:5402":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:24499:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"18:802:5943":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:607:7602":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:4995:7177":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:2269:4439":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:53399:8651":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:32500:59966":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"16:4641:7166":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:10988:9146":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"23:191:2609":{"crate_id":23,"path":["idna","uts46","Errors"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:13119:6897":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13554:7001":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:7158:5651":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:8973:3282":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:9971:62207":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:9771:6195":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"2:49046:5119":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4538:8048":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:4921:4930":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:6744:5793":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:1567:7639":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:48583:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:11277:6463":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"9:234:5293":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:6859:3352":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:14821:4460":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"15:0:2965":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:9719:9108":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:52163:4822":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:16018:2996":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:6181:8369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:1633:4439":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:14609:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:11453:4352":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13386:6955":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:13893:9190":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:6252:5634":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:3352:3150":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:13767:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:47842:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:46066:3825":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:6557:3360":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:51030:8592":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:8130:4375":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:7843:5663":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:6605:5599":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:23770:4350":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:4432:4188":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:13817:60305":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:51492:4814":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:13205:6914":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2166:4376":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:3648:4179":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:15019:4458":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6021:5753":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:50170:4986":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"6:4142:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:9060:3275":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11932:6580":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:5430:8207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:6899:8429":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:10295:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:10435:9122":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:50202:4988":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5308:8142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:5488:5479":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:6208:5632":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:51642:4794":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:5707:5488":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"16:7146:5650":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10377:5899":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:9280:6393":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:46059:4671":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:6166:5630":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11406:6468":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:3247:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:16003:2984":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:48635:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"14:11:9008":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:2269:4754":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:5580:5484":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:3048:60892":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:11738:6540":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:9368:6395":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:15235:4423":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:4242:6152":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:13098:6892":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:1438:3844":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:11245:4954":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:53439:8655":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:740:9099":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:3323:4529":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:50398:4998":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:11206:4097":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:57699:8671":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:7849:6171":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:22877:4865":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:45812:3180":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:11539:6503":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10236:5841":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4256:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"12:2404:62201":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8132:4513":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:50354:8591":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"18:152:9755":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:6031:8299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:3505:3170":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:11365:3132":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:45901:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4270:3343":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"12:2040:4375":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:14626:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:51744:4786":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:9162:5889":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11640:6522":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:49986:4643":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11186:6460":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:586:7591":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:10502:6407":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:15975:11961":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:6620:5786":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:48619:3815":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:11397:4117":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:46111:4881":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13978:7127":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:713:3804":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:2484:47753":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:3549:7151":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12741:6733":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:13620:7016":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:5175:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:46391:4106":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:4215:4375":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"24:425:5977":{"crate_id":24,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"1:4510:4186":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:24121:8468":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2177:4378":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:3987:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:10926:9141":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13429:6963":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:5975:5626":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4434:8006":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:46366:4107":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:49042:5120":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:51051:8593":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:46031:3335":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:6437:3358":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:16014:2992":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4020:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"12:856:4429":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:52939:4796":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:994:5221":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"0:921:1621":{"crate_id":0,"path":["url","ParseOptions"],"kind":"struct"},"17:10950:9143":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:49480:4115":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:4474:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:1132:3336":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:13786:4465":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:11354:3139":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:10646:11956":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:10952:4475":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:24237:5028":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9065:47665":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:6247:8405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:672:40808":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:5996:5627":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:12725:6731":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:6094:8320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"18:791:5942":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:49779:4107":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:8849:5886":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:6126:8331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10684:12961":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:12038:4459":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:11924:4972":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:14952:6204":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:24839:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:48272:3123":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:13284:9768":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"2:48531:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"16:5231:7179":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:6937:3356":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:51397:8596":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:10840:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:12811:4982":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:11114:3197":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:14808:4354":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:10577:54809":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:601:7599":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:3040:8447":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:5960:4613":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:50439:3332":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:6688:5184":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:12405:6207":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:4088:7884":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12247:6636":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:1634:7683":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:4671:7167":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:10242:1582":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:5387:8191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:8413:3090":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:9768:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:51769:4787":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:1017:4513":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:12773:9212":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"17:294:9101":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:49432:2640":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:8646:3267":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:46682:4705":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"21:34:3219":{"crate_id":21,"path":["form_urlencoded","ParseIntoOwned"],"kind":"struct"},"17:10558:9126":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:3966:7827":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:4704:7168":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:46989:8569":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:9729:62205":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:4306:4024":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"23:0:2343":{"crate_id":23,"path":["idna"],"kind":"module"},"12:432:5404":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:49894:4640":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:1618:3844":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:11180:3134":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:46434:5104":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:49381:4971":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"12:815:4432":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:53454:8656":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:10667:4383":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:6491:5639":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:894:4492":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4230:7927":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4208:7925":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:12993:2276":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:5314:6392":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:5536:3264":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:5452:8214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:10816:4525":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:11555:6507":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:52325:4795":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:1041:4371":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13296:6933":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:5500:3142":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:2314:5900":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:24185:39833":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:9689:62204":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:24703:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:3522:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"12:114:9760":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:88:40409":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:10304:5852":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:3970:6152":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:23137:4779":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:6024:8295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:3427:3166":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:5360:5470":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:51147:4792":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:7514:5605":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2508:4250":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:12132:3844":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:12257:3280":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:2794:5509":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:4741:4168":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:1152:9199":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:52589:4808":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:16007:2987":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:5328:8158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:56351:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3341:5188":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:3364:3152":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:47553:3844":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:9476:6398":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:6731:5792":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:6150:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:923:5220":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:6518:5640":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:13685:7060":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10061:9117":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:12010:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:15032:4459":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"9:1056:5328":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:886:5950":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:3429:5510":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:13130:4636":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:49842:4633":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"3:323:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"25:344:6015":{"crate_id":25,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"16:7264:5600":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:10305:3123":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"24:382:62221":{"crate_id":24,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"17:10611:9132":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:49405:4108":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:47545:4024":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:50058:4647":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:9528:4100":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:6101:5580":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:51673:4798":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:618:7607":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:4008:9106":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:5632:5486":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"23:148:9087":{"crate_id":23,"path":["idna","uts46","StringTableSlice"],"kind":"struct"},"17:12582:6706":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:16022:3000":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:11685:3200":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"24:0:3228":{"crate_id":24,"path":["unicode_bidi"],"kind":"module"},"17:13453:6971":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:50071:9194":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"17:10128:5927":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13394:6957":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:5968:4615":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:15201:4415":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:56377:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10962:9144":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:11077:4196":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:9210:47668":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4526:8043":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13402:6959":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:1626:7678":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13574:7007":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11947:6584":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:12671:6725":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:2863:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:46771:4713":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:14643:59025":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:8263:4445":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:8488:4396":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:14079:5000":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:565:7579":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"26:515:6146":{"crate_id":26,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"1:4080:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"11:54:5389":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:1524:4436":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:10618:4137":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:48258:3116":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:3440:3169":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:49761:4105":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:3604:6323":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:23871:5010":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11714:6536":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12327:6648":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10673:47853":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:5855:5498":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:2155:3197":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:53302:4803":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"23:141:113":{"crate_id":23,"path":["idna","punycode","Decoder"],"kind":"struct"},"2:24669:4516":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:6697:8312":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:46673:4697":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:3406:3161":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:5271:8128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"12:979:4437":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:5797:4341":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:3362:4379":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11616:6518":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:6934:8437":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:10001:47715":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13912:7115":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:10529:6408":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:2310:5252":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:48803:8581":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:47537:3197":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:11767:6549":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11001:9147":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:10489:5871":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:13637:7023":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:7738:5661":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"18:169:9758":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:32159:5059":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:6718:5791":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:10575:4027":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"21:97:1968":{"crate_id":21,"path":["form_urlencoded","Parse"],"kind":"struct"},"2:46290:8554":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:46486:5038":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:0:1331":{"crate_id":1,"path":["std"],"kind":"module"},"1:11402:1587":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"0:908:1602":{"crate_id":0,"path":["url","Url"],"kind":"struct"},"14:216:46016":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:432:3091":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:12004:4456":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:15229:4422":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:14936:6203":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:1235:5231":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"12:933:4433":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:9133:47667":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:3194:4524":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12610:6711":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:47605:4080":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:13961:4457":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:12083:8696":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:12494:6693":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10814:5916":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:9551:5887":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:5595:5485":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:53518:8660":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:47968:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"18:705:6302":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:4728:4861":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:3559:3179":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:23128:4350":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"18:850:5947":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:3375:5189":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:7824:6166":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:13532:6996":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:14034:4456":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"18:668:5957":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:12282:4481":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6780:5646":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11304:47671":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:9088:47666":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:3960:7826":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:1733:4573":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7195:5654":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:23664:4357":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"24:454:5979":{"crate_id":24,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"17:11835:6569":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4332:7959":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:1472:4375":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"14:47:9008":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:6004:8289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:11193:3135":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"6:5363:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6964:8443":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12373:6672":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:3339:4534":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:12010:6599":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:51696:4801":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:3411:3163":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:8160:3844":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:4394:4553":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:6117:8327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:50186:4994":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:6511:4699":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:5485:8222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:7111:6166":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:4955:7176":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:16023:3001":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:9296:6394":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:10962:1912":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6014:5628":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:10313:3122":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:2912:5756":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"21:0:1566":{"crate_id":21,"path":["form_urlencoded"],"kind":"module"},"17:9659:62211":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:11524:2309":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:2458:9206":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11159:6459":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12507:6694":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:53465:8657":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:48279:3124":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:11340:3137":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:12735:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:10934:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:46980:3271":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:11809:6564":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"12:1784:6150":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:3981:7834":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:7670:3851":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:3310:3088":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:7117:3645":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"23:182:3235":{"crate_id":23,"path":["idna","uts46","Config"],"kind":"struct"},"16:7342:5618":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:53419:8653":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:7453:6152":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:3336:4378":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4410:7996":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5579:8259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:8880:3205":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:48561:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:13858:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:4048:7866":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:46739:4710":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:22930:4350":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:8362:8451":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:53503:8659":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:7255:9207":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12065:54939":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:14958:6205":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:661:5956":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:3658:6176":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:8738:3281":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13306:6934":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7786:5595":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:11506:3646":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:6668:8417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:50407:4999":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:11015:9148":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:8203:3844":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"9:41:5318":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:6111:8325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:2330:5232":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:48094:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:51124:4804":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:7761:5662":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:32400:59964":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"16:5753:5494":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12632:6722":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:50048:4646":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13356:6950":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:14575:4346":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"21:56:221":{"crate_id":21,"path":["form_urlencoded","Target"],"kind":"trait"},"6:4392:7989":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:47800:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:12124:4394":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:2171:4377":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:8380:4513":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:5584:3380":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:10331:5870":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:13733:7061":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4179:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:7756:4690":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:12431:6684":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:48265:3117":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:4922:7175":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4509:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:4287:7937":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:3041:5759":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:5034:4931":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:3370:4377":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:2200:6154":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:45876:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:5538:8233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:6893:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5416:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:3278:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:6861:3354":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:16011:2991":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"12:353:7454":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:49630:4112":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:8193:6178":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"16:6136:5624":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:5788:6152":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:8448:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:2183:4379":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:13488:6982":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"12:2392:7457":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:161:40476":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:15331:4366":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:3435:3168":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:9799:9110":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:14130:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:48811:4029":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:4218:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11199:6462":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:1674:4432":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:2188:4380":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:10211:9120":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:10864:6444":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:46581:4689":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11572:6509":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"27:0:3231":{"crate_id":27,"path":["tinyvec_macros"],"kind":"module"},"1:6685:3348":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:3894:5215":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:8344:3364":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:11150:4109":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:7303:5660":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:13079:4090":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"12:0:2963":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:47884:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:3758:4832":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"12:787:4431":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13041:6853":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:10311:3121":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:1441:4438":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:10241:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"16:4614:7165":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:53192:4820":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:7858:4729":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:10081:5849":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:2866:3112":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:11328:6738":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:6768:5795":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:14550:4353":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:6976:8445":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:3103:4350":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:11658:3196":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:3933:7803":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12917:6750":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:46782:4172":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:4670:4156":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"5:8313:5038":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6554:5641":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:10095:5924":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:15053:4481":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:13564:7004":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:3492:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:7823:5596":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:6911:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:11283:4955":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:10253:5833":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:45945:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:50023:4644":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:13590:7010":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"12:2280:4440":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:6662:8415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:5815:5497":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:510:9103":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:1482:4376":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:13782:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:46973:8568":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:5213:8095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"26:452:6050":{"crate_id":26,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"6:5226:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:53533:8661":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:6202:8383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:49269:4962":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:10801:9136":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:3172:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:4516:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:57678:8670":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:9961:9113":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:3519:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"24:324:5981":{"crate_id":24,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"17:9404:6396":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:47758:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:51901:8604":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11458:6486":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:15130:4467":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:51821:8602":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11482:6487":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"12:928:4430":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:374:4256":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:539:7559":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:5833:4093":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5237:8104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:5785:3345":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10149:9111":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:3525:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:3396:4380":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10656:6411":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:49865:4634":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:24215:8481":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4321:7953":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:22993:4778":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13520:6993":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:3264:5764":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:46427:5103":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:1704:7737":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"18:611:5953":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:6424:5638":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:47495:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:2553:5236":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:3743:5913":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:5285:8129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:49300:4965":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:3939:7155":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:5039:4932":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13609:7015":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:50182:4990":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"10:0:2961":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:49726:4110":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"9:157:5285":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:12946:6770":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:37651:3804":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:3380:3155":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4110:7897":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:14000:7133":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:1311:5931":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:22536:3804":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:11268:3136":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"6:1669:7712":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:8410:5214":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:46612:4692":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:10866:4547":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:12242:3270":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"12:2072:4380":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:4732:57067":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:50228:4484":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:51358:8595":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:4304:7157":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:4515:5203":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"17:9896:62210":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:745:62216":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:24533:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:11100:5892":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:3178:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:53050:4816":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:9839:5870":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:4748:4171":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"18:897:5951":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:2843:5754":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"12:843:4428":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"12:1682:5413":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:46802:4704":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4454:8015":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:14570:8701":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"26:1122:6063":{"crate_id":26,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"17:13582:7008":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:4350:7158":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:2362:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:12221:6632":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:612:7604":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:6964:3571":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:12247:3272":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:2283:4757":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:6577:5642":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:10701:9013":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11045:47669":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:24106:4908":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:6152:5584":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:5257:8117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:8929:47662":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:545:7562":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:8908:3271":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:52372:4799":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4315:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4379:7984":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:3175:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:56390:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13842:7100":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"24:316:127":{"crate_id":24,"path":["unicode_bidi","level","Error"],"kind":"enum"},"17:299:9102":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:6807:5647":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:47562:3571":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:6013:8290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:5165:3827":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:46792:4714":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:5146:8052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:15072:8708":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:2397:9204":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:10252:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:13788:7080":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:11070:4194":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:4425:8000":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:49566:4117":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:51869:8603":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:2921:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:22564:60360":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:12262:6639":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:9718:4562":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:4198:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4464:8021":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:50421:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:8298:3365":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:12040:6602":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:3759:3197":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:1446:4428":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:28054:4752":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:1944:1584":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:9849:62203":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:681:6466":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:4752:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:9733:4563":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:10071:5930":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:4471:4190":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:46998:4195":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"23:140:2528":{"crate_id":23,"path":["idna","domain_to_unicode"],"kind":"function"},"2:46503:5039":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:1764:7759":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:10874:4180":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10317:5855":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:1486:4441":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"9:1020:5335":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:3104:3217":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13942:7123":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:14239:4190":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"9:809:3194":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:3044:60891":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:12480:6691":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:11318:4115":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13054:6860":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:571:7582":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:49438:4101":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:10827:5917":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:10303:3116":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:3064:5816":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:6682:5598":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:13272:6931":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:696:4488":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:7024:5802":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:3746:3178":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"23:176:3236":{"crate_id":23,"path":["idna","uts46","Idna"],"kind":"struct"},"2:47716:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:7932:54943":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:50206:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:50190:4992":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:11409:4611":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:53480:8658":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:6672:3264":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:783:6302":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:7928:2291":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:12158:4398":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:9034:47664":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:2926:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:11143:1949":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:5375:8184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:46720:4708":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"26:965:6060":{"crate_id":26,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"5:3772:4024":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:12772:4980":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:46751:4711":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12073:6612":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:14601:4525":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:4373:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12275:6640":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:11137:4100":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:51234:4817":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:14242:4253":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:7677:4455":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:4078:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:3287:5765":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:16015:2993":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"18:858:5948":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:7119:5515":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:10565:4350":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:1642:4440":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:12171:4399":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"24:404:5113":{"crate_id":24,"path":["unicode_bidi","Direction"],"kind":"enum"},"1:13568:9205":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:1075:4372":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:1537:7626":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:51595:4806":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"9:603:45511":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:3423:3165":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:10858:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:2866:5755":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:8146:60839":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11822:6568":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:6999:5648":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:8363:4703":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:24250:5027":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:10635:6409":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:4378:3844":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:12195:6629":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6226:8393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:13799:7084":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:2888:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:10224:9121":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:49770:4106":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:4397:4554":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:50194:4993":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:12061:8695":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:47596:3572":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:4081:7881":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"12:2045:4376":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:5376:3140":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13497:6985":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4362:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13933:7121":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:46420:5102":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:49352:4968":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:3039:60890":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:14804:9013":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"12:777:3844":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:607:9104":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:13422:4574":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:69:4255":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"18:695:5958":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:51925:8605":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6691:5645":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:4416:7997":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:4032:4478":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:8115:3844":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7406:5588":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11678:6526":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:5185:3325":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"24:297:5983":{"crate_id":24,"path":["unicode_bidi","level","Level"],"kind":"struct"},"6:6853:8427":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:5111:3825":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:37627:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:6238:5587":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"22:30:1579":{"crate_id":22,"path":["percent_encoding","percent_encode"],"kind":"function"},"1:11479:3353":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:9649:9107":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:10540:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:3800:7154":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"15:248:5422":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:49289:4964":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"21:95:1599":{"crate_id":21,"path":["form_urlencoded","EncodingOverride"],"kind":"typedef"},"22:70:3105":{"crate_id":22,"path":["percent_encoding","PercentEncode"],"kind":"struct"},"17:10448:5843":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:5981:4616":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:5927:5501":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:12525:2337":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11665:6525":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:2292:4758":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10353:5901":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:9943:62208":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:46353:5106":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:3166:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:3118:5770":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:3338:5505":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:3195:5761":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:2916:415":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"2:51546:4821":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:6199:4577":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:13986:7130":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5444:8212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:9343:4355":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:53408:8652":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:49684:4114":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"0:0:1677":{"crate_id":0,"path":["url"],"kind":"module"},"1:4607:4195":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:48052:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:9769:62212":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:4061:7871":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:46702:4706":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:4965:3824":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"26:712:6056":{"crate_id":26,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"2:5156:4938":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12783:6741":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:4740:4862":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6464:5597":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:11086:4167":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:3581:3171":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:4098:7891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:9627:54950":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:12187:4400":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:5960:5503":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:7279:5804":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:49745:4096":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:46024:3175":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:3401:3160":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:3169:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:22934:4356":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:1157:11959":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:7453:5585":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"14:231:1593":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:16004:2985":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"13:0:2957":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:3275:3795":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"26:806:6146":{"crate_id":26,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"1:11668:3197":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:45968:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:8289:4513":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:50362:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:3287:3797":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13924:7117":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"26:538:6051":{"crate_id":26,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"2:2957:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11779:6552":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:10957:4476":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:11615:2308":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:10543:6448":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:49420:4104":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4160:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:7615:4451":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:10799:4361":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:3775:3181":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:1530:4437":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"25:375:62244":{"crate_id":25,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"16:5407:5472":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10938:9142":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:24093:4907":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:5605:4733":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11981:6594":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:46413:4105":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6644:5644":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:2733:5508":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:24013:8458":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:10468:5868":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:46641:4695":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"2:48010:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:3431:3167":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:24147:39832":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:10592:4511":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"22:26:2445":{"crate_id":22,"path":["percent_encoding","CONTROLS"],"kind":"constant"},"9:686:5266":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:1544:7629":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:12203:4401":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:46659:8564":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:9381:2646":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:1428:4024":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:9861:6196":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:3218:5762":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:48820:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:5653:2301":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:8197:3844":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:5741:3348":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:22940:4358":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:48516:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:820:6196":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"17:12659:6724":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:5719:3346":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:1694:7731":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:4699:6157":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:11411:4116":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:7420:5606":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:22549:60360":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:49880:4637":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11337:5859":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:3740:3176":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:15970:57573":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12442:6686":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:2572:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:53129:4800":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:1576:7645":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:49736:4098":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:46761:4712":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:7379:3844":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:8925:4592":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"16:6126:5629":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:5208:3828":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:16008:2988":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"12:2032:3197":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:45991:3172":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:15092:4406":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:12168:6416":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13540:6999":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:6110:5623":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:5395:8192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:6863:3355":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:11428:3139":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"12:880:4376":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:12028:6600":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"25:436:9074":{"crate_id":25,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"16:7894:5621":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:51099:4812":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:24169:39824":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:3200:4165":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:48832:3194":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:15353:3141":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:9005:47663":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:11726:6539":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:22583:60761":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:1606:7664":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:1215:5230":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:16016:2994":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:9261:3573":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4532:8045":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:12076:59081":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:48498:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:48842:8585":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:6087:5582":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"7:85:45339":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"12:1103:4438":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:513:7546":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"26:602:6052":{"crate_id":26,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"6:1558:7634":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:10117:5926":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:5346:5583":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:8107:4194":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:3297:3799":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:5201:8091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4485:8028":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:1663:4431":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:24052:8460":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:1607:4024":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:5373:3141":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11519:6502":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12771:6738":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:3516:2342":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13377:6954":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6413:5418":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11750:6541":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:53428:8654":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4340:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:47007:8571":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:8180:3260":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:5858:4607":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"6:4116:7900":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"14:189:9008":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4346:7964":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:4300:4197":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:12982:6801":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:9886:9111":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:11439:4959":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:7620:5158":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:5295:46087":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12408:6683":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:767:6313":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:2194:4275":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:1680:7720":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:5544:8234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:10705:5239":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:2062:4156":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:2968:5757":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:6928:8436":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:157:40475":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:6240:8402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:9245:5837":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:8902:47661":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:5290:8130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:521:7551":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:16020:2998":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:3896:7775":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:0:2966":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:7205:5655":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:10826:4347":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"4:0:2958":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"13:120:45982":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:6366:5419":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12568:6704":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:15754:6206":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12685:6726":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:52246:4807":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:6790:3358":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13810:7085":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"22:0:1577":{"crate_id":22,"path":["percent_encoding"],"kind":"module"},"2:49911:4641":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:8176:5126":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:51316:4793":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:4890:7174":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:52132:4819":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:1939:4376":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:12208:6631":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:3648:3173":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"9:722:5269":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:5183:8078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"12:2253:4438":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:3342:3154":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:51339:4797":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:14103:6202":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:6265:8408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:2594:9014":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"6:5436:8210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:8690:3268":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:4417:7160":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"14:244:7406":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:7392:5590":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:6940:8438":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:12846:4097":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"25:392:6038":{"crate_id":25,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"15:230:5421":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:7257:6152":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4005:7848":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:3392:5771":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"18:730:62214":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:12552:6703":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:1488:4430":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"26:103:6046":{"crate_id":26,"path":["tinyvec","array","Array"],"kind":"trait"},"6:6905:8430":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13884:7106":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:49260:4961":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:6357:5636":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:15412:3142":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:1653:4430":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:24601:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:14565:8699":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:13054:3426":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:10200:9119":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:5402:8193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:3358:3153":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:2456:6207":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:15391:3140":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:3951:4376":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:9259:3575":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:16025:3003":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:4308:7949":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:32348:59967":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"16:5472:5478":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:2816:5773":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:52006:4827":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:9467:9016":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:9594:6192":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:10677:4442":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:10912:9137":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:7928:4749":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:11425:4958":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4296:7942":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:7975:6178":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"5:6475:4375":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:3279:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:51253:8594":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:1091:6152":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:5408:5097":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:1518:4435":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:527:7554":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"12:1162:5399":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4277:7930":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:22804:4866":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:10882:4182":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:24737:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:12182:6628":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:16028:3006":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:32696:4280":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11434:6472":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:5672:5487":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:2159:3844":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:47622:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:5775:3347":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12142:6621":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:24222:5064":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:10301:3117":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:11118:47670":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11794:6558":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:14236:4188":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:48522:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:1912:41782":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"23:27:9749":{"crate_id":23,"path":["idna","punycode","Decode"],"kind":"struct"},"17:13898:7108":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:3277:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11499:6492":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:46299:4869":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:3325:4530":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"25:382:6025":{"crate_id":25,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"5:4643:6157":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:24035:4912":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:51445:4826":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:7212:4375":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12537:6699":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:5561:5483":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"}},"external_crates":{"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"form_urlencoded","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"unicode_bidi","html_root_url":null},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"matches","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"22":{"name":"percent_encoding","html_root_url":null},"23":{"name":"idna","html_root_url":null},"25":{"name":"unicode_normalization","html_root_url":null},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"tinyvec","html_root_url":null},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":17}