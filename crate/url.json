{"root":"0:0:1901","crate_version":"2.5.0","includes_private":false,"index":{"a:2:32026:3385-0:730:1845":{"id":"a:2:32026:3385-0:730:1845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:3385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:497:1813":{"id":"0:497:1813","crate_id":0,"name":"Host","span":{"filename":"src/host.rs","begin":[42,0],"end":[60,1]},"visibility":"public","docs":"The host name of an URL.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:499:2012","0:502:2009","0:505:2010"],"impls":["0:64","0:67","a:2:41605:3870-0:497:1813","a:2:3058:246-0:497:1813","a:2:31969:237-0:497:1813","a:2:41604:3871-0:497:1813","a:2:32026:3385-0:497:1813","b:2:2563-0:497:1813","b:2:3671-0:497:1813","b:2:2835-0:497:1813","b:2:2839-0:497:1813","b:2:2850-0:497:1813","b:2:2560-0:497:1813","b:2:2845-0:497:1813","b:5:725-0:497:1813","b:5:5869-0:497:1813","0:511","0:73","0:517","0:523","0:76","0:520","0:514","0:508"]}}},"a:2:41604:3871-0:741:2281":{"id":"a:2:41604:3871-0:741:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:3871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2835-0:497:1813":{"id":"b:2:2835-0:497:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2838:1984"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:619:2900":{"id":"0:619:2900","crate_id":0,"name":"UnencodedAtSign","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:553":{"id":"0:553","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,13],"end":[111,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13169:2999":{"id":"2:13169:2999","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3645"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:437:465":{"id":"0:437:465","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[2694,4],"end":[2696,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:682:3172":{"id":"0:682:3172","crate_id":0,"name":"AfterScheme","span":{"filename":"src/slicing.rs","begin":[106,4],"end":[106,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2845-0:527:1816":{"id":"b:2:2845-0:527:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:510:458":{"id":"0:510:458","crate_id":0,"name":"clone","span":{"filename":"src/host.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13105:2005":{"id":"2:13105:2005","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:513:726":{"id":"0:513:726","crate_id":0,"name":"fmt","span":{"filename":"src/host.rs","begin":[41,16],"end":[41,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:542:793":{"id":"0:542:793","crate_id":0,"name":"hash","span":{"filename":"src/origin.rs","begin":[52,24],"end":[52,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:444:335":{"id":"0:444:335","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[2721,4],"end":[2723,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13079:3012":{"id":"2:13079:3012","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41482:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13160:36031":{"id":"2:13160:36031","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:416:2520":{"id":"0:416:2520","crate_id":0,"name":"to_file_path","span":{"filename":"src/lib.rs","begin":[2597,4],"end":[2610,5]},"visibility":"public","docs":"Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.\n\n**Note:** This does not actually check the URL’s `scheme`,\nand may give nonsensical results for other schemes.\nIt is the user’s responsibility to check the URL’s scheme before calling this.\n\n```\n# use url::Url;\n# let url = Url::parse(\"file:///etc/passwd\").unwrap();\nlet path = url.to_file_path();\n```\n\nReturns `Err` if the host is neither empty nor `\"localhost\"` (except on Windows, where\n`file:` URLs may have a non-local host),\nor if `Path::new_opt()` returns `None`.\n(That is, if the percent-decoded path contains a NUL byte or,\nfor a Windows path, is not UTF-8.)","links":{},"attrs":["#[inline]","#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]","#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5210:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:541":{"id":"0:541","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,24],"end":[52,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:542:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:528:2822":{"id":"0:528:2822","crate_id":0,"name":"Opaque","span":{"filename":"src/origin.rs","begin":[55,4],"end":[55,24]},"visibility":"default","docs":"A globally unique identifier","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:530:1767"]},"discriminant":null}}},"b:2:2835-0:679:1822":{"id":"b:2:2835-0:679:1822","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:1984"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13140:30113":{"id":"2:13140:30113","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:357:1943":{"id":"0:357:1943","crate_id":0,"name":"scheme","span":{"filename":"src/lib.rs","begin":[831,4],"end":[833,5]},"visibility":"public","docs":"Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert_eq!(url.scheme(), \"file\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:580:2872":{"id":"0:580:2872","crate_id":0,"name":"RelativeUrlWithCannotBeABaseBase","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13101:34115":{"id":"2:13101:34115","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43655:4325","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:443":{"id":"0:443","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2719,0],"end":[2724,1]},"visibility":"default","docs":"Return the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2803:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:444:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2848:138":{"id":"2:2848:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:702:3182":{"id":"0:702:3182","crate_id":0,"name":"AfterPath","span":{"filename":"src/slicing.rs","begin":[116,4],"end":[116,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41605:3870-0:679:1822":{"id":"a:2:41605:3870-0:679:1822","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:615:2896":{"id":"0:615:2896","crate_id":0,"name":"PercentDecode","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:45-0:679:1822":{"id":"0:45-0:679:1822","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[168,0],"end":[168,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::slicing::Position","name":"Position","id":"0:679:1822","glob":false}}},"2:13164:36033":{"id":"2:13164:36033","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:497:1813":{"id":"a:2:3058:246-0:497:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:589":{"id":"0:589","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13199:10720":{"id":"2:13199:10720","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4856:10720"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43671:4338","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:595:726":{"id":"0:595:726","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:565:1817":{"id":"b:2:2850-0:565:1817","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13095:8617":{"id":"2:13095:8617","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12067:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43339:4333","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:628":{"id":"0:628","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:363:2092":{"id":"0:363:2092","crate_id":0,"name":"password","span":{"filename":"src/lib.rs","begin":[1015,4],"end":[1027,5]},"visibility":"public","docs":"Return the password for this URL, if any, as a percent-encoded ASCII string.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms:secret123@example.com\")?;\nassert_eq!(url.password(), Some(\"secret123\"));\n\nlet url = Url::parse(\"ftp://:secret123@example.com\")?;\nassert_eq!(url.password(), Some(\"secret123\"));\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.password(), None);\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.password(), None);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:366:797":{"id":"0:366:797","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[1126,4],"end":[1133,5]},"visibility":"public","docs":"Return the parsed representation of the host for this URL.\nNon-ASCII domain labels are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\n\nCannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\ndon’t have a host.\n\nSee also the `host_str` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/index.html\")?;\nassert!(url.host().is_some());\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.host().is_some());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(url.host().is_none());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(url.host().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:741:2281":{"id":"b:2:2850-0:741:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:565:1817":{"id":"b:5:725-0:565:1817","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3407","5:728:2248","5:729:4128"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31969:237-0:730:1845":{"id":"a:2:31969:237-0:730:1845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:504:1767":{"id":"0:504:1767","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[52,9],"end":[52,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::net::Ipv4Addr","id":"2:41242:2707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2845-0:730:1845":{"id":"b:2:2845-0:730:1845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:710:3186":{"id":"0:710:3186","crate_id":0,"name":"AfterFragment","span":{"filename":"src/slicing.rs","begin":[120,4],"end":[120,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:414:2484":{"id":"0:414:2484","crate_id":0,"name":"from_directory_path","span":{"filename":"src/lib.rs","begin":[2480,4],"end":[2486,5]},"visibility":"public","docs":"Convert a directory name as `std::path::Path` into an URL in the `file` scheme.\n\nThis returns `Err` if the given path is not absolute or,\non Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n\nCompared to `from_file_path`, this ensure that URL’s the path has a trailing slash\nso that the entire path is considered when using this URL as a base URL.\n\nFor example:\n\n* `\"index.html\"` parsed with `Url::from_directory_path(Path::new(\"/var/www\"))`\n  as the base URL is `file:///var/www/index.html`\n* `\"index.html\"` parsed with `Url::from_file_path(Path::new(\"/var/www\"))`\n  as the base URL is `file:///var/index.html`, which might not be what was intended.\n\nNote that `std::path` does not consider trailing slashes significant\nand usually does not include them (e.g. in `Path::parent()`).","links":{},"attrs":["#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]","#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2803:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5322:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:698:3180":{"id":"0:698:3180","crate_id":0,"name":"AfterPort","span":{"filename":"src/slicing.rs","begin":[114,4],"end":[114,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:730:1845":{"id":"0:730:1845","crate_id":0,"name":"ParseOptions","span":{"filename":"src/lib.rs","begin":[209,0],"end":[213,1]},"visibility":"public","docs":"Full configuration for the URL parser.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:332","a:2:41605:3870-0:730:1845","a:2:3058:246-0:730:1845","a:2:31969:237-0:730:1845","a:2:41604:3871-0:730:1845","a:2:32026:3385-0:730:1845","b:2:2563-0:730:1845","b:2:3671-0:730:1845","b:2:2835-0:730:1845","b:2:2839-0:730:1845","b:2:2850-0:730:1845","b:2:2560-0:730:1845","b:2:2845-0:730:1845","b:5:725-0:730:1845","0:737","0:735"]}}},"0:745":{"id":"0:745","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3008,9],"end":[3008,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:747:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13070:36020":{"id":"2:13070:36020","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:36734":{"id":"5:5603:36734","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:555:667":{"id":"0:555:667","crate_id":0,"name":"eq","span":{"filename":"src/origin.rs","begin":[111,13],"end":[111,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:2369":{"id":"0:70:2369","crate_id":0,"name":"parse_opaque","span":{"filename":"src/host.rs","begin":[125,4],"end":[162,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:670:1820":{"id":"a:2:31969:237-0:670:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:347:1942":{"id":"0:347:1942","crate_id":0,"name":"make_relative","span":{"filename":"src/lib.rs","begin":[444,4],"end":[533,5]},"visibility":"public","docs":"Creates a relative URL if possible, with this URL as the base URL.\n\nThis is the inverse of [`join`].\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet base = Url::parse(\"https://example.net/a/b.html\")?;\nlet url = Url::parse(\"https://example.net/a/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = Url::parse(\"https://example.net/a/b/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = Url::parse(\"https://example.net/a/d/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"../d/c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b.html?c=d\")?;\nlet url = Url::parse(\"https://example.net/a/b.html?e=f\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"?e=f\"));\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf this URL can't be a base for the given URL, `None` is returned.\nThis is for example the case if the scheme, host or port are not the same.\n\n[`join`]: #method.join","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["url",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1791":{"id":"0:3-20:0:1791","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[143,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"form_urlencoded","name":"form_urlencoded","id":"20:0:1791","glob":false}}},"0:412:2470":{"id":"0:412:2470","crate_id":0,"name":"from_file_path","span":{"filename":"src/lib.rs","begin":[2443,4],"end":[2459,5]},"visibility":"public","docs":"Convert a file name as `std::path::Path` into an URL in the `file` scheme.\n\nThis returns `Err` if the given path is not absolute or,\non Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n\n# Examples\n\nOn Unix-like platforms:\n\n```\n# if cfg!(unix) {\nuse url::Url;\n\n# fn run() -> Result<(), ()> {\nlet url = Url::from_file_path(\"/tmp/foo.txt\")?;\nassert_eq!(url.as_str(), \"file:///tmp/foo.txt\");\n\nlet url = Url::from_file_path(\"../foo.txt\");\nassert!(url.is_err());\n\nlet url = Url::from_file_path(\"https://google.com/\");\nassert!(url.is_err());\n# Ok(())\n# }\n# run().unwrap();\n# }\n```","links":{},"attrs":["#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]","#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2803:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5322:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13193:29369":{"id":"2:13193:29369","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:586":{"id":"0:586","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2563-0:527:1816":{"id":"b:2:2563-0:527:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:28072"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:565:1817":{"id":"0:565:1817","crate_id":0,"name":"ParseError","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"public","docs":"Errors that can occur during parsing.\n\nThis may be extended in the future so exhaustive matching is\ndiscouraged with an unused variant.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:566:2360","0:568:2863","0:570:2865","0:572:2776","0:574:2727","0:576:2366","0:578:2870","0:580:2872","0:582:2358","0:584:2875"],"impls":["a:2:41605:3870-0:565:1817","a:2:3058:246-0:565:1817","a:2:31969:237-0:565:1817","a:2:41604:3871-0:565:1817","a:2:32026:3385-0:565:1817","b:2:2563-0:565:1817","b:2:3671-0:565:1817","b:2:2835-0:565:1817","b:2:2839-0:565:1817","b:2:2850-0:565:1817","b:2:2560-0:565:1817","b:2:2845-0:565:1817","b:5:725-0:565:1817","b:5:5869-0:565:1817","0:594","0:563","0:134","0:587","0:586","0:589","0:593","0:135","0:591"]}}},"a:2:31969:237-0:497:1813":{"id":"a:2:31969:237-0:497:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2662,0],"end":[2678,1]},"visibility":"default","docs":"Debug the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:432:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13166:2910":{"id":"2:13166:2910","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3645"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12783:4319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:497:1813":{"id":"b:2:2563-0:497:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2565:28072"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13085:30076":{"id":"2:13085:30076","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:332":{"id":"0:332","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[215,0],"end":[267,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:334:1847","0:335:1848","0:336:1873","0:337:1875"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2560-0:527:1816":{"id":"b:2:2560-0:527:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:1804"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:136:755":{"id":"0:136:755","crate_id":0,"name":"from","span":{"filename":"src/parser.rs","begin":[91,4],"end":[93,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_",{"resolved_path":{"name":"::idna::Errors","id":"22:170:2877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[170,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2803:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:75:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13155:36030":{"id":"2:13155:36030","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12757:3645","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::match_indices":"2:13152:36029"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43531:4344","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:4320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:511":{"id":"0:511","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,16],"end":[41,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:513:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:670:1820":{"id":"0:670:1820","crate_id":0,"name":"PathSegmentsMut","span":{"filename":"src/path_segments.rs","begin":[37,0],"end":[42,1]},"visibility":"public","docs":"Exposes methods to manipulate the path of an URL that is not cannot-be-base.\n\nThe path always starts with a `/` slash, and is made of slash-separated segments.\nThere is always at least one segment (which may be the empty string).\n\nExamples:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"mailto:me@example.com\")?;\nassert!(url.path_segments_mut().is_err());\n\nlet mut url = Url::parse(\"http://example.net/foo/index.html\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .pop().push(\"img\").push(\"2/100%.png\");\nassert_eq!(url.as_str(), \"http://example.net/foo/img/2%2F100%25.png\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:261","a:2:41605:3870-0:670:1820","a:2:3058:246-0:670:1820","a:2:31969:237-0:670:1820","a:2:41604:3871-0:670:1820","a:2:32026:3385-0:670:1820","b:2:2563-0:670:1820","b:2:3671-0:670:1820","b:2:2835-0:670:1820","b:2:2839-0:670:1820","b:2:2850-0:670:1820","b:2:2560-0:670:1820","b:2:2845-0:670:1820","0:258","0:676"]}}},"0:475:640":{"id":"0:475:640","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[3039,4],"end":[3043,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:36733":{"id":"5:5600:36733","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:717:1826":{"id":"b:2:2845-0:717:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:435:667":{"id":"0:435:667","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2686,4],"end":[2688,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:514":{"id":"0:514","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,23],"end":[41,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13092:30104":{"id":"2:13092:30104","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13091:30103"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:591":{"id":"0:591","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:592:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:425:138":{"id":"0:425:138","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[2639,4],"end":[2639,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13066":{"id":"2:13066","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13067:887","2:13068:1951","2:13069:36019","2:13070:36020","2:13072:36021","2:13075:2217","2:13076:36022","2:13077:334","2:13078:30077","2:13079:3012","2:13081:10453","2:13083:30075","2:13085:30076","2:13087:36023","2:13088:36024","2:13089:1950","2:13090:30100","2:13091:30103","2:13092:30104","2:13094:1909","2:13095:8617","2:13096:2577","2:13097:33756","2:13098:33759","2:13099:10609","2:13100:36025","2:13101:34115","2:13102:2770","2:13105:2005","2:13108:2363","2:13111:2365","2:13115:1947","2:13119:1956","2:13122:30106","2:13125:2758","2:13128:36026","2:13131:36027","2:13134:30109","2:13137:30111","2:13140:30113","2:13143:30114","2:13146:1997","2:13149:36028","2:13152:36029","2:13155:36030","2:13158:3248","2:13160:36031","2:13162:36032","2:13164:36033","2:13165:36034","2:13166:2910","2:13169:2999","2:13172:2196","2:13175:30115","2:13178:36035","2:13181:36036","2:13184:36037","2:13187:1875","2:13189:29364","2:13190:31260","2:13191:29367","2:13192:29368","2:13193:29369","2:13194:31263","2:13195:31264","2:13196:31265","2:13197:36038","2:13199:10720","2:13200:36039"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:715":{"id":"0:715","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[103,22],"end":[103,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:716:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31969:237-0:565:1817":{"id":"a:2:31969:237-0:565:1817","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31969:237-0:741:2281":{"id":"a:2:31969:237-0:741:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2835-0:670:1820":{"id":"b:2:2835-0:670:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2838:1984"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:609:2890":{"id":"0:609:2890","crate_id":0,"name":"FileWithHostAndWindowsDrive","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2850-0:717:1826":{"id":"b:2:2850-0:717:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3058:246-0:527:1816":{"id":"a:2:3058:246-0:527:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13149:36028":{"id":"2:13149:36028","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12757:3645","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::matches":"2:13146:1997"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43585:4346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:4320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:565:1817":{"id":"b:2:2560-0:565:1817","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:1804"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:441:793":{"id":"0:441:793","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[2710,4],"end":[2715,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"H"},"bounds":[{"trait_bound":{"trait":{"name":"hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13108:2363":{"id":"2:13108:2363","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:4320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:497:1813":{"id":"b:2:2845-0:497:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:739:458":{"id":"0:739:458","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[207,15],"end":[207,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:593":{"id":"0:593","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:367:2116":{"id":"0:367:2116","crate_id":0,"name":"domain","span":{"filename":"src/lib.rs","begin":[1158,4],"end":[1163,5]},"visibility":"public","docs":"If this URL has a host and it is a domain name (not an IP address), return it.\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/\")?;\nassert_eq!(url.domain(), None);\n\nlet url = Url::parse(\"mailto:rms@example.net\")?;\nassert_eq!(url.domain(), None);\n\nlet url = Url::parse(\"https://example.com/\")?;\nassert_eq!(url.domain(), Some(\"example.com\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:670:1820":{"id":"b:2:3671-0:670:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:379:2215":{"id":"0:379:2215","crate_id":0,"name":"query_pairs","span":{"filename":"src/lib.rs","begin":[1419,4],"end":[1421,5]},"visibility":"public","docs":"Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return an iterator of (key, value) pairs.\n\n# Examples\n\n```rust\nuse std::borrow::Cow;\n\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/products?page=2&sort=desc\")?;\nlet mut pairs = url.query_pairs();\n\nassert_eq!(pairs.count(), 2);\n\nassert_eq!(pairs.next(), Some((Cow::Borrowed(\"page\"), Cow::Borrowed(\"2\"))));\nassert_eq!(pairs.next(), Some((Cow::Borrowed(\"sort\"), Cow::Borrowed(\"desc\"))));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"form_urlencoded::Parse","id":"20:91:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:670:1820":{"id":"b:2:2845-0:670:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:472:2594":{"id":"0:472:2594","crate_id":0,"name":"Finished","span":{"filename":"src/lib.rs","begin":[3035,4],"end":[3035,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"0:704:3183":{"id":"0:704:3183","crate_id":0,"name":"BeforeQuery","span":{"filename":"src/slicing.rs","begin":[117,4],"end":[117,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:5615:2932":{"id":"5:5615:2932","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13193:29369"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[90,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"22:170:2877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:598:1818":{"id":"b:5:725-0:598:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3407","5:728:2248","5:729:4128"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13119:1956":{"id":"2:13119:1956","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12757:3645","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::split_whitespace":"2:13097:33756","str::rsplit":"2:13125:2758"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43363:2195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41604:3871-0:717:1826":{"id":"a:2:41604:3871-0:717:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:3871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:396:2309":{"id":"0:396:2309","crate_id":0,"name":"path_segments_mut","span":{"filename":"src/lib.rs","begin":[1705,4],"end":[1711,5]},"visibility":"public","docs":"Return an object with methods to manipulate this URL’s path segments.\n\nReturn `Err(())` if this URL is cannot-be-a-base.","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359:2056":{"id":"0:359:2056","crate_id":0,"name":"has_authority","span":{"filename":"src/lib.rs","begin":[884,4],"end":[887,5]},"visibility":"public","docs":"Return whether the URL has an 'authority',\nwhich can contain a username, password, host, and port number.\n\nURLs that do *not* are either path-only like `unix:/run/foo.socket`\nor cannot-be-a-base like `data:text/plain,Stuff`.\n\nSee also the `authority` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.has_authority());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.has_authority());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(!url.has_authority());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2849:1634":{"id":"2:2849:1634","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:627:458":{"id":"0:627:458","crate_id":0,"name":"clone","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:626":{"id":"0:626","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:627:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:679:1822":{"id":"0:679:1822","crate_id":0,"name":"Position","span":{"filename":"src/slicing.rs","begin":[104,0],"end":[121,1]},"visibility":"public","docs":"Indicates a position within a URL based on its components.\n\nA range of positions can be used for slicing `Url`:\n\n```rust\n# use url::{Url, Position};\n# fn something(some_url: Url) {\nlet serialization: &str = &some_url[..];\nlet serialization_without_fragment: &str = &some_url[..Position::AfterQuery];\nlet authority: &str = &some_url[Position::BeforeUsername..Position::AfterPort];\nlet data_url_payload: &str = &some_url[Position::BeforePath..Position::AfterQuery];\nlet scheme_relative: &str = &some_url[Position::BeforeUsername..];\n# }\n```\n\nIn a pseudo-grammar (where `[`…`]?` makes a sub-sequence optional),\nURL components and delimiters that separate them are:\n\n```notrust\nurl =\n    scheme \":\"\n    [ \"//\" [ username [ \":\" password ]? \"@\" ]? host [ \":\" port ]? ]?\n    path [ \"?\" query ]? [ \"#\" fragment ]?\n```\n\nWhen a given component is not present,\nits \"before\" and \"after\" position are the same\n(so that `&some_url[BeforeFoo..AfterFoo]` is the empty string)\nand component ordering is preserved\n(so that a missing query \"is between\" a path and a fragment).\n\nThe end of a component and the start of the next are either the same or separate\nby a delimiter.\n(Note that the initial `/` of a path is considered part of the path here, not a delimiter.)\nFor example, `&url[..BeforeFragment]` would include a `#` delimiter (if present in `url`),\nso `&url[..AfterQuery]` might be desired instead.\n\n`BeforeScheme` and `AfterFragment` are always the start and end of the entire URL,\nso `&url[BeforeScheme..X]` is the same as `&url[..X]`\nand `&url[X..AfterFragment]` is the same as `&url[X..]`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:680:3171","0:682:3172","0:684:3173","0:686:3174","0:688:3175","0:690:3176","0:692:3177","0:694:3178","0:696:3179","0:698:3180","0:700:3181","0:702:3182","0:704:3183","0:706:3184","0:708:3185","0:710:3186"],"impls":["a:2:41605:3870-0:679:1822","a:2:3058:246-0:679:1822","a:2:31969:237-0:679:1822","a:2:41604:3871-0:679:1822","a:2:32026:3385-0:679:1822","b:2:2563-0:679:1822","b:2:3671-0:679:1822","b:2:2835-0:679:1822","b:2:2839-0:679:1822","b:2:2850-0:679:1822","b:2:2560-0:679:1822","b:2:2845-0:679:1822","b:5:725-0:679:1822","0:712","0:713","0:715"]}}},"0:408:2416":{"id":"0:408:2416","crate_id":0,"name":"set_username","span":{"filename":"src/lib.rs","begin":[2201,4],"end":[2250,5]},"visibility":"public","docs":"Change this URL’s username.\n\nIf this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n# Examples\n\nCannot setup username from mailto(cannot-be-base)\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rmz@example.com\")?;\nlet result = url.set_username(\"user1\");\nassert_eq!(url.as_str(), \"mailto:rmz@example.com\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nSetup username to user1\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"ftp://:secre1@example.com/\")?;\nlet result = url.set_username(\"user1\");\nassert!(result.is_ok());\nassert_eq!(url.username(), \"user1\");\nassert_eq!(url.as_str(), \"ftp://user1:secre1@example.com/\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["username",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:630:726":{"id":"0:630:726","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523":{"id":"0:523","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,44],"end":[41,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:525:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:617:2898":{"id":"0:617:2898","crate_id":0,"name":"TabOrNewlineIgnored","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41605:3870-0:670:1820":{"id":"a:2:41605:3870-0:670:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:283:835":{"id":"0:283:835","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[21,4],"end":[23,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"resolved_path":{"name":"RangeFrom","id":"2:39152:212","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13097:33756":{"id":"2:13097:33756","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13098:33759"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43637:4328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13190:31260":{"id":"2:13190:31260","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39453:16067","Self::is_ascii":"2:13189:29364"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39453:16067","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:369:2134":{"id":"0:369:2134","crate_id":0,"name":"port_or_known_default","span":{"filename":"src/lib.rs","begin":[1222,4],"end":[1224,5]},"visibility":"public","docs":"Return the port number for this URL, or the default port number if it is known.\n\nThis method only knows the default port number\nof the `http`, `https`, `ws`, `wss` and `ftp` schemes.\n\nFor URLs in these schemes, this method always returns `Some(_)`.\nFor other schemes, it is the same as `Url::port()`.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"foo://example.com\")?;\nassert_eq!(url.port_or_known_default(), None);\n\nlet url = Url::parse(\"foo://example.com:1456\")?;\nassert_eq!(url.port_or_known_default(), Some(1456));\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.port_or_known_default(), Some(443));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:690:3176":{"id":"0:690:3176","crate_id":0,"name":"AfterPassword","span":{"filename":"src/slicing.rs","begin":[110,4],"end":[110,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:371:2155":{"id":"0:371:2155","crate_id":0,"name":"socket_addrs","span":{"filename":"src/lib.rs","begin":[1253,4],"end":[1279,5]},"visibility":"public","docs":"Resolve a URL’s host and port number to `SocketAddr`.\n\nIf the URL has the default port number of a scheme that is unknown to this library,\n`default_port_number` provides an opportunity to provide the actual port number.\nIn non-example code this should be implemented either simply as `|| None`,\nor by matching on the URL’s `.scheme()`.\n\nIf the host is a domain, it is resolved using the standard library’s DNS support.\n\n# Examples\n\n```no_run\nlet url = url::Url::parse(\"https://example.net/\").unwrap();\nlet addrs = url.socket_addrs(|| None).unwrap();\nstd::net::TcpStream::connect(&*addrs)\n# ;\n```\n\n```\n/// With application-specific known default port numbers\nfn socket_addrs(url: url::Url) -> std::io::Result<Vec<std::net::SocketAddr>> {\n    url.socket_addrs(|| match url.scheme() {\n        \"socks5\" | \"socks5h\" => Some(1080),\n        _ => None,\n    })\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["default_port_number",{"impl_trait":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3298:141","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3012:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7056:263","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddr","id":"2:41420:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl Fn() -> Option<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3298:141","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:392:1902":{"id":"0:392:1902","crate_id":0,"name":"query_pairs_mut","span":{"filename":"src/lib.rs","begin":[1610,4],"end":[1628,5]},"visibility":"public","docs":"Manipulate this URL’s query string, viewed as a sequence of name/value pairs\nin `application/x-www-form-urlencoded` syntax.\n\nThe return value has a method-chaining API:\n\n```rust\n# use url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net?lang=fr#nav\")?;\nassert_eq!(url.query(), Some(\"lang=fr\"));\n\nurl.query_pairs_mut().append_pair(\"foo\", \"bar\");\nassert_eq!(url.query(), Some(\"lang=fr&foo=bar\"));\nassert_eq!(url.as_str(), \"https://example.net/?lang=fr&foo=bar#nav\");\n\nurl.query_pairs_mut()\n    .clear()\n    .append_pair(\"foo\", \"bar & baz\")\n    .append_pair(\"saisons\", \"\\u{00C9}t\\u{00E9}+hiver\");\nassert_eq!(url.query(), Some(\"foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver\"));\nassert_eq!(url.as_str(),\n           \"https://example.net/?foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver#nav\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nNote: `url.query_pairs_mut().clear();` is equivalent to `url.set_query(Some(\"\"))`,\nnot `url.set_query(None)`.\n\nThe state of `Url` is unspecified if this return value is leaked without being dropped.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"form_urlencoded::Serializer","id":"20:44:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:402:2357":{"id":"0:402:2357","crate_id":0,"name":"set_host","span":{"filename":"src/lib.rs","begin":[1922,4],"end":[1984,5]},"visibility":"public","docs":"Change this URL’s host.\n\nRemoving the host (calling this with `None`)\nwill also remove any username, password, and port number.\n\n# Examples\n\nChange host:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_host(Some(\"rust-lang.org\"));\nassert!(result.is_ok());\nassert_eq!(url.as_str(), \"https://rust-lang.org/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nRemove host:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_host(None);\nassert!(result.is_ok());\nassert_eq!(url.as_str(), \"foo:/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot remove host for 'special' schemes (e.g. `http`):\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_host(None);\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"https://example.net/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change or remove host for cannot-be-a-base URLs:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\n\nlet result = url.set_host(Some(\"rust-lang.org\"));\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\n\nlet result = url.set_host(None);\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf this URL is cannot-be-a-base or there is an error parsing the given `host`,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:741:2281":{"id":"b:2:3671-0:741:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13172:2196":{"id":"2:13172:2196","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3645"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:576:2366":{"id":"0:576:2366","crate_id":0,"name":"InvalidDomainCharacter","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:556":{"id":"0:556","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,24],"end":[111,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:557:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:439:1151":{"id":"0:439:1151","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[2702,4],"end":[2704,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5596:36732":{"id":"5:5596:36732","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:3388","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:3388","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399:2331":{"id":"0:399:2331","crate_id":0,"name":"set_port","span":{"filename":"src/lib.rs","begin":[1789,4],"end":[1799,5]},"visibility":"public","docs":"Change this URL’s port number.\n\nNote that default port numbers are not reflected in the serialization.\n\nIf this URL is cannot-be-a-base, does not have a host, or has the `file` scheme;\ndo nothing and return `Err`.\n\n# Examples\n\n```\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"ssh://example.net:2048/\")?;\n\nurl.set_port(Some(4096)).map_err(|_| \"cannot be base\")?;\nassert_eq!(url.as_str(), \"ssh://example.net:4096/\");\n\nurl.set_port(None).map_err(|_| \"cannot be base\")?;\nassert_eq!(url.as_str(), \"ssh://example.net/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nKnown default port numbers are not reflected:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://example.org/\")?;\n\nurl.set_port(Some(443)).map_err(|_| \"cannot be base\")?;\nassert!(url.port().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot set port for cannot-be-a-base URLs:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\n\nlet result = url.set_port(Some(80));\nassert!(result.is_err());\n\nlet result = url.set_port(None);\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["port",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:611:2892":{"id":"0:611:2892","crate_id":0,"name":"NonUrlCodePoint","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13076:36022":{"id":"2:13076:36022","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:679:1822":{"id":"b:5:725-0:679:1822","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3407","5:728:2248","5:729:4128"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2850-0:730:1845":{"id":"b:2:2850-0:730:1845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:559":{"id":"0:559","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,30],"end":[111,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:560:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3671-0:548:1815":{"id":"b:2:3671-0:548:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2835-0:598:1818":{"id":"b:2:2835-0:598:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:1984"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2850-0:679:1822":{"id":"b:2:2850-0:679:1822","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3038,0],"end":[3044,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3294:2595","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:475:640"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3671-0:565:1817":{"id":"b:2:3671-0:565:1817","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2560-0:730:1845":{"id":"b:2:2560-0:730:1845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2562:1804"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:288:199":{"id":"0:288:199","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[34,4],"end":[34,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"0:554":{"id":"0:554","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,13],"end":[111,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:555:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:548:1815":{"id":"0:548:1815","crate_id":0,"name":"OpaqueOrigin","span":{"filename":"src/origin.rs","begin":[112,0],"end":[112,31]},"visibility":"public","docs":"Opaque identifier for URLs that have file or other schemes","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:41605:3870-0:548:1815","a:2:3058:246-0:548:1815","a:2:31969:237-0:548:1815","a:2:41604:3871-0:548:1815","a:2:32026:3385-0:548:1815","b:2:2563-0:548:1815","b:2:3671-0:548:1815","b:2:2835-0:548:1815","b:2:2839-0:548:1815","b:2:2850-0:548:1815","b:2:2560-0:548:1815","b:2:2845-0:548:1815","b:5:725-0:548:1815","0:553","0:561","0:551","0:559","0:556","0:554"]}}},"a:2:41605:3870-0:717:1826":{"id":"a:2:41605:3870-0:717:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13075:2217":{"id":"2:13075:2217","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12305:2590"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:545:458":{"id":"0:545:458","crate_id":0,"name":"clone","span":{"filename":"src/origin.rs","begin":[52,30],"end":[52,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:546":{"id":"0:546","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,37],"end":[52,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:547:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:37-0:497:1813":{"id":"0:37-0:497:1813","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[164,0],"end":[164,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::host::Host","name":"Host","id":"0:497:1813","glob":false}}},"a:2:32026:3385-0:497:1813":{"id":"a:2:32026:3385-0:497:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32026:3385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:3385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2850-0:497:1813":{"id":"b:2:2850-0:497:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2845-0:548:1815":{"id":"b:2:2845-0:548:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41605:3870-0:527:1816":{"id":"a:2:41605:3870-0:527:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13102:2770":{"id":"2:13102:2770","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:527:1816":{"id":"0:527:1816","crate_id":0,"name":"Origin","span":{"filename":"src/origin.rs","begin":[53,0],"end":[59,1]},"visibility":"public","docs":"The origin of an URL\n\nTwo URLs with the same origin are considered\nto originate from the same entity and can therefore trust\neach other.\n\nThe origin is determined based on the scheme as follows:\n\n- If the scheme is \"blob\" the origin is the origin of the\n  URL contained in the path component. If parsing fails,\n  it is an opaque origin.\n- If the scheme is \"ftp\", \"http\", \"https\", \"ws\", or \"wss\",\n  then the origin is a tuple of the scheme, host, and port.\n- If the scheme is anything else, the origin is opaque, meaning\n  the URL does not have the same origin as any other URL.\n\nFor more information see <https://url.spec.whatwg.org/#origin>","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:528:2822","0:531:2807"],"impls":["0:101","a:2:41605:3870-0:527:1816","a:2:3058:246-0:527:1816","a:2:31969:237-0:527:1816","a:2:41604:3871-0:527:1816","a:2:32026:3385-0:527:1816","b:2:2563-0:527:1816","b:2:3671-0:527:1816","b:2:2835-0:527:1816","b:2:2839-0:527:1816","b:2:2850-0:527:1816","b:2:2560-0:527:1816","b:2:2845-0:527:1816","b:5:725-0:527:1816","0:537","0:536","0:539","0:544","0:541","0:546"]}}},"2:13083:30075":{"id":"2:13083:30075","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:717:1826":{"id":"0:717:1826","crate_id":0,"name":"Url","span":{"filename":"src/lib.rs","begin":[182,0],"end":[204,1]},"visibility":"public","docs":"A parsed URL record.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:338","a:2:41605:3870-0:717:1826","a:2:3058:246-0:717:1826","a:2:31969:237-0:717:1826","a:2:41604:3871-0:717:1826","a:2:32026:3385-0:717:1826","b:2:2563-0:717:1826","b:2:3671-0:717:1826","b:2:2835-0:717:1826","b:2:2839-0:717:1826","b:2:2850-0:717:1826","b:2:2560-0:717:1826","b:2:2845-0:717:1826","b:5:725-0:717:1826","b:5:5869-0:717:1826","0:443","0:438","0:420","0:427","0:287","0:440","0:423","0:431","0:281","0:436","0:429","0:728","0:284","0:278","0:433","0:434"]}}},"0:605:2886":{"id":"0:605:2886","crate_id":0,"name":"ExpectedDoubleSlash","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:5613:4434":{"id":"5:5613:4434","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:335:1848":{"id":"0:335:1848","crate_id":0,"name":"encoding_override","span":{"filename":"src/lib.rs","begin":[224,4],"end":[227,5]},"visibility":"public","docs":"Override the character encoding of query strings.\nThis is a legacy concept only relevant for HTML.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new",{"resolved_path":{"name":"EncodingOverride","id":"20:89:1823","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:285:199":{"id":"0:285:199","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[27,4],"end":[27,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"2:13099:10609":{"id":"2:13099:10609","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43617:4341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:544":{"id":"0:544","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,30],"end":[52,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:545:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41605:3870-0:741:2281":{"id":"a:2:41605:3870-0:741:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:394:2300":{"id":"0:394:2300","crate_id":0,"name":"set_path","span":{"filename":"src/lib.rs","begin":[1676,4],"end":[1699,5]},"visibility":"public","docs":"Change this URL’s path.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com\")?;\nurl.set_path(\"api/comments\");\nassert_eq!(url.as_str(), \"https://example.com/api/comments\");\nassert_eq!(url.path(), \"/api/comments\");\n\nlet mut url = Url::parse(\"https://example.com/api\")?;\nurl.set_path(\"data/report.csv\");\nassert_eq!(url.as_str(), \"https://example.com/data/report.csv\");\nassert_eq!(url.path(), \"/data/report.csv\");\n\n// `set_path` percent-encodes the given string if it's not already percent-encoded.\nlet mut url = Url::parse(\"https://example.com\")?;\nurl.set_path(\"api/some comments\");\nassert_eq!(url.as_str(), \"https://example.com/api/some%20comments\");\nassert_eq!(url.path(), \"/api/some%20comments\");\n\n// `set_path` will not double percent-encode the string if it's already percent-encoded.\nlet mut url = Url::parse(\"https://example.com\")?;\nurl.set_path(\"api/some%20comments\");\nassert_eq!(url.as_str(), \"https://example.com/api/some%20comments\");\nassert_eq!(url.path(), \"/api/some%20comments\");\n\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:623:667":{"id":"0:623:667","crate_id":0,"name":"eq","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1901":{"id":"0:0:1901","crate_id":0,"name":"url","span":{"filename":"src/lib.rs","begin":[9,0],"end":[3044,1]},"visibility":"public","docs":"\nrust-url is an implementation of the [URL Standard](http://url.spec.whatwg.org/)\nfor the [Rust](http://rust-lang.org/) programming language.\n\n\n# URL parsing and data structures\n\nFirst, URL parsing may fail for various reasons and therefore returns a `Result`.\n\n```\nuse url::{Url, ParseError};\n\nassert!(Url::parse(\"http://[:::1]\") == Err(ParseError::InvalidIpv6Address))\n```\n\nLet’s parse a valid URL and look at its components.\n\n```\nuse url::{Url, Host, Position};\n# use url::ParseError;\n# fn run() -> Result<(), ParseError> {\nlet issue_list_url = Url::parse(\n    \"https://github.com/rust-lang/rust/issues?labels=E-easy&state=open\"\n)?;\n\n\nassert!(issue_list_url.scheme() == \"https\");\nassert!(issue_list_url.username() == \"\");\nassert!(issue_list_url.password() == None);\nassert!(issue_list_url.host_str() == Some(\"github.com\"));\nassert!(issue_list_url.host() == Some(Host::Domain(\"github.com\")));\nassert!(issue_list_url.port() == None);\nassert!(issue_list_url.path() == \"/rust-lang/rust/issues\");\nassert!(issue_list_url.path_segments().map(|c| c.collect::<Vec<_>>()) ==\n        Some(vec![\"rust-lang\", \"rust\", \"issues\"]));\nassert!(issue_list_url.query() == Some(\"labels=E-easy&state=open\"));\nassert!(&issue_list_url[Position::BeforePath..] == \"/rust-lang/rust/issues?labels=E-easy&state=open\");\nassert!(issue_list_url.fragment() == None);\nassert!(!issue_list_url.cannot_be_a_base());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nSome URLs are said to be *cannot-be-a-base*:\nthey don’t have a username, password, host, or port,\nand their \"path\" is an arbitrary string rather than slash-separated segments:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet data_url = Url::parse(\"data:text/plain,Hello?World#\")?;\n\nassert!(data_url.cannot_be_a_base());\nassert!(data_url.scheme() == \"data\");\nassert!(data_url.path() == \"text/plain,Hello\");\nassert!(data_url.path_segments().is_none());\nassert!(data_url.query() == Some(\"World\"));\nassert!(data_url.fragment() == Some(\"\"));\n# Ok(())\n# }\n# run().unwrap();\n```\n\n## Serde\n\nEnable the `serde` feature to include `Deserialize` and `Serialize` implementations for `url::Url`.\n\n# Base URL\n\nMany contexts allow URL *references* that can be relative to a *base URL*:\n\n```html\n<link rel=\"stylesheet\" href=\"../main.css\">\n```\n\nSince parsed URLs are absolute, giving a base is required for parsing relative URLs:\n\n```\nuse url::{Url, ParseError};\n\nassert!(Url::parse(\"../main.css\") == Err(ParseError::RelativeUrlWithoutBase))\n```\n\nUse the `join` method on an `Url` to use it as a base URL:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet this_document = Url::parse(\"http://servo.github.io/rust-url/url/index.html\")?;\nlet css_url = this_document.join(\"../main.css\")?;\nassert_eq!(css_url.as_str(), \"http://servo.github.io/rust-url/main.css\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Feature: `serde`\n\nIf you enable the `serde` feature, [`Url`](struct.Url.html) will implement\n[`serde::Serialize`](https://docs.rs/serde/1/serde/trait.Serialize.html) and\n[`serde::Deserialize`](https://docs.rs/serde/1/serde/trait.Deserialize.html).\nSee [serde documentation](https://serde.rs) for more information.\n\n```toml\nurl = { version = \"2\", features = [\"serde\"] }\n```\n\n# Feature: `debugger_visualizer`\n\nIf you enable the `debugger_visualizer` feature, the `url` crate will include\na [natvis file](https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects)\nfor [Visual Studio](https://www.visualstudio.com/) that allows you to view\n[`Url`](struct.Url.html) objects in the debugger.\n\nThis feature requires Rust 1.71 or later.\n\n```toml\nurl = { version = \"2\", features = [\"debugger_visualizer\"] }\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/url/2.5.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1791","0:37-0:497:1813","0:39-0:548:1815","0:40-0:527:1816","0:42-0:565:1817","0:43-0:598:1818","0:44-0:670:1820","0:45-0:679:1822","0:46-20:89:1823","0:717:1826","0:730:1845","0:741:2281"],"is_stripped":false}}},"0:539":{"id":"0:539","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,20],"end":[52,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:470:2592":{"id":"0:470:2592","crate_id":0,"name":"as_mut_string","span":{"filename":"src/lib.rs","begin":[3025,4],"end":[3027,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:527:1816":{"id":"b:2:2835-0:527:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:1984"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:551":{"id":"0:551","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,9],"end":[111,11]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41604:3871-0:679:1822":{"id":"a:2:41604:3871-0:679:1822","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:3871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:405:2387":{"id":"0:405:2387","crate_id":0,"name":"set_ip_host","span":{"filename":"src/lib.rs","begin":[2067,4],"end":[2078,5]},"visibility":"public","docs":"Change this URL’s host to the given IP address.\n\nIf this URL is cannot-be-a-base, do nothing and return `Err`.\n\nCompared to `Url::set_host`, this skips the host parser.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"http://example.com\")?;\nurl.set_ip_host(\"127.0.0.1\".parse().unwrap());\nassert_eq!(url.host_str(), Some(\"127.0.0.1\"));\nassert_eq!(url.as_str(), \"http://127.0.0.1/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL's from mailto(cannot-be-base) to ip:\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.com\")?;\nlet result = url.set_ip_host(\"127.0.0.1\".parse().unwrap());\n\nassert_eq!(url.as_str(), \"mailto:rms@example.com\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["address",{"resolved_path":{"name":"IpAddr","id":"2:41220:171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:566:2360":{"id":"0:566:2360","crate_id":0,"name":"EmptyHost","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41604:3871-0:598:1818":{"id":"a:2:41604:3871-0:598:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:3871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:66:2248":{"id":"0:66:2248","crate_id":0,"name":"to_owned","span":{"filename":"src/host.rs","begin":[64,4],"end":[70,5]},"visibility":"public","docs":"Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:3104":{"id":"0:264:3104","crate_id":0,"name":"pop_if_empty","span":{"filename":"src/path_segments.rs","begin":[125,4],"end":[133,5]},"visibility":"public","docs":"Remove the last segment of this URL’s path if it is empty,\nexcept if these was only one segment to begin with.\n\nIn other words, remove one path trailing slash, if any,\nunless it is also the initial slash (so this does nothing if `url.path() == \"/\")`.\n\nReturns `&mut Self` so that method calls can be chained.\n\nExample:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .push(\"pulls\");\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url//pulls\");\n\nlet mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .pop_if_empty().push(\"pulls\");\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url/pulls\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:502:2009":{"id":"0:502:2009","crate_id":0,"name":"Ipv4","span":{"filename":"src/host.rs","begin":[52,4],"end":[52,18]},"visibility":"default","docs":"An IPv4 address.\n`Url::host_str` returns the serialization of this address,\nas four decimal integers separated by `.` dots.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:504:1767"]},"discriminant":null}}},"0:340:1897":{"id":"0:340:1897","crate_id":0,"name":"parse_with_params","span":{"filename":"src/lib.rs","begin":[322,4],"end":[336,5]},"visibility":"public","docs":"Parse an absolute URL from a string and add params to its query string.\n\nExisting params are not removed.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse_with_params(\"https://example.net?dont=clobberme\",\n                                 &[(\"lang\", \"rust\"), (\"browser\", \"servo\")])?;\nassert_eq!(\"https://example.net/?dont=clobberme&lang=rust&browser=servo\", url.as_str());\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an absolute URL from the given string,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8101:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:8101:166","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2803:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2803:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5869-0:717:1826":{"id":"b:5:5869-0:717:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/path_segments.rs","begin":[72,0],"end":[246,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:263:2933","0:264:3104","0:265:2775","0:266:1960","0:267:2402"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:680:3171":{"id":"0:680:3171","crate_id":0,"name":"BeforeScheme","span":{"filename":"src/slicing.rs","begin":[105,4],"end":[105,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13131:36027":{"id":"2:13131:36027","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12757:3645","str::split":"2:13119:1956","prim@char":"1:12067:454","str::split_terminator":"2:13128:36026"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43431:4350","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:4320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:598:1818":{"id":"a:2:31969:237-0:598:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32026:3385-0:598:1818":{"id":"a:2:32026:3385-0:598:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:3385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2563-0:679:1822":{"id":"b:2:2563-0:679:1822","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:28072"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2560-0:598:1818":{"id":"b:2:2560-0:598:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:1804"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2839-0:565:1817":{"id":"b:2:2839-0:565:1817","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32026:3385-0:548:1815":{"id":"a:2:32026:3385-0:548:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:3385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:390:2257":{"id":"0:390:2257","crate_id":0,"name":"set_query","span":{"filename":"src/lib.rs","begin":[1546,4],"end":[1576,5]},"visibility":"public","docs":"Change this URL’s query string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com/products\")?;\nassert_eq!(url.as_str(), \"https://example.com/products\");\n\nurl.set_query(Some(\"page=2\"));\nassert_eq!(url.as_str(), \"https://example.com/products?page=2\");\nassert_eq!(url.query(), Some(\"page=2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["query",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:420":{"id":"0:420","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2629,0],"end":[2636,1]},"visibility":"default","docs":"Parse a string as an URL, without a base URL or encoding override.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12717:2528","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:421:137","0:422:2529"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:105:2831":{"id":"0:105:2831","crate_id":0,"name":"ascii_serialization","span":{"filename":"src/origin.rs","begin":[75,4],"end":[86,5]},"visibility":"public","docs":"<https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:522:1151":{"id":"0:522:1151","crate_id":0,"name":"partial_cmp","span":{"filename":"src/host.rs","begin":[41,32],"end":[41,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:741:2281":{"id":"b:2:2563-0:741:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2565:28072"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13067:887":{"id":"2:13067:887","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12067:454"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:607:2888":{"id":"0:607:2888","crate_id":0,"name":"ExpectedFileDoubleSlash","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41604:3871-0:730:1845":{"id":"a:2:41604:3871-0:730:1845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:3871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:737":{"id":"0:737","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[207,15],"end":[207,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:739:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13077:334":{"id":"2:13077:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13078:30077","`u8`":"1:12084:1656"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597:4508":{"id":"5:5597:4508","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:582:2358":{"id":"0:582:2358","crate_id":0,"name":"SetHostOnCannotBeABaseUrl","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:426:1632":{"id":"0:426:1632","crate_id":0,"name":"try_from","span":{"filename":"src/lib.rs","begin":[2641,4],"end":[2643,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:2819:256","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13089:1950":{"id":"2:13089:1950","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13091:30103","str::split_at_mut":"2:13090:30100"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:525:793":{"id":"0:525:793","crate_id":0,"name":"hash","span":{"filename":"src/host.rs","begin":[41,44],"end":[41,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:717:1826":{"id":"b:2:2560-0:717:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:1804"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:708:3185":{"id":"0:708:3185","crate_id":0,"name":"BeforeFragment","span":{"filename":"src/slicing.rs","begin":[119,4],"end":[119,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:5611:36735":{"id":"5:5611:36735","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:726":{"id":"0:139:726","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[140,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[269,0],"end":[2626,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:339:1875","0:340:1897","0:346:1927","0:347:1942","0:349:1119","0:351:336","0:352:1983","0:356:1814","0:357:1943","0:358:2013","0:359:2056","0:360:2073","0:361:1906","0:362:2087","0:363:2092","0:364:2096","0:365:2008","0:366:797","0:367:2116","0:368:1840","0:369:2134","0:371:2155","0:375:1156","0:376:1819","0:378:1963","0:379:2215","0:380:1965","0:385:2244","0:390:2257","0:392:1902","0:394:2300","0:396:2309","0:399:2331","0:402:2357","0:405:2387","0:406:2399","0:408:2416","0:410:2449","0:412:2470","0:414:2484","0:416:2520"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2845-0:679:1822":{"id":"b:2:2845-0:679:1822","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5614:29366":{"id":"5:5614:29366","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13192:29368"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:432:726":{"id":"0:432:726","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2664,4],"end":[2677,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:706:3184":{"id":"0:706:3184","crate_id":0,"name":"AfterQuery","span":{"filename":"src/slicing.rs","begin":[118,4],"end":[118,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:358:2013":{"id":"0:358:2013","crate_id":0,"name":"is_special","span":{"filename":"src/lib.rs","begin":[851,4],"end":[854,5]},"visibility":"public","docs":"Return whether the URL is special (has a special scheme)\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nassert!(Url::parse(\"http:///tmp/foo\")?.is_special());\nassert!(Url::parse(\"file:///tmp/foo\")?.is_special());\nassert!(!Url::parse(\"moz:///tmp/foo\")?.is_special());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13189:29364":{"id":"2:13189:29364","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:427":{"id":"0:427","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2647,0],"end":[2652,1]},"visibility":"default","docs":"Display the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:428:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3058:246-0:717:1826":{"id":"a:2:3058:246-0:717:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41604:3871-0:497:1813":{"id":"a:2:41604:3871-0:497:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41604:3871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:3871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:694:3178":{"id":"0:694:3178","crate_id":0,"name":"AfterHost","span":{"filename":"src/slicing.rs","begin":[112,4],"end":[112,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:572:2776":{"id":"0:572:2776","crate_id":0,"name":"InvalidIpv4Address","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2835-0:741:2281":{"id":"b:2:2835-0:741:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2838:1984"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2841:755":{"id":"2:2841:755","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:548:1815":{"id":"b:2:2563-0:548:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:28072"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:279:199":{"id":"0:279:199","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[13,4],"end":[13,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"0:584:2875":{"id":"0:584:2875","crate_id":0,"name":"Overflow","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:32026:3385-0:741:2281":{"id":"a:2:32026:3385-0:741:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:3385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:729:4128":{"id":"5:729:4128","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:712":{"id":"0:712","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[103,9],"end":[103,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:557:793":{"id":"0:557:793","crate_id":0,"name":"hash","span":{"filename":"src/origin.rs","begin":[111,24],"end":[111,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[75,0],"end":[75,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","type_id","cause","source","provide"],"trait":{"name":"Error","id":"2:2898:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2563-0:717:1826":{"id":"b:2:2563-0:717:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:28072"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:741:2281":{"id":"0:741:2281","crate_id":0,"name":"UrlQuery","span":{"filename":"src/lib.rs","begin":[3009,0],"end":[3012,1]},"visibility":"public","docs":"Implementation detail of `Url::query_pairs_mut`. Typically not used directly.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:41605:3870-0:741:2281","a:2:3058:246-0:741:2281","a:2:31969:237-0:741:2281","a:2:41604:3871-0:741:2281","a:2:32026:3385-0:741:2281","b:2:2563-0:741:2281","b:2:3671-0:741:2281","b:2:2835-0:741:2281","b:2:2839-0:741:2281","b:2:2850-0:741:2281","b:2:2560-0:741:2281","b:2:2845-0:741:2281","0:473","0:745","0:468"]}}},"0:42-0:565:1817":{"id":"0:42-0:565:1817","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[166,24],"end":[166,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::parser::ParseError","name":"ParseError","id":"0:565:1817","glob":false}}},"b:2:2839-0:679:1822":{"id":"b:2:2839-0:679:1822","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:714:458":{"id":"0:714:458","crate_id":0,"name":"clone","span":{"filename":"src/slicing.rs","begin":[103,15],"end":[103,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286:835":{"id":"0:286:835","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[28,4],"end":[30,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"resolved_path":{"name":"RangeTo","id":"2:39170:215","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:507:1767":{"id":"0:507:1767","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[59,9],"end":[59,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::net::Ipv6Addr","id":"2:41258:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:5:725-0:548:1815":{"id":"b:5:725-0:548:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3407","5:728:2248","5:729:4128"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:560:458":{"id":"0:560:458","crate_id":0,"name":"clone","span":{"filename":"src/origin.rs","begin":[111,30],"end":[111,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:621":{"id":"0:621","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:692:3177":{"id":"0:692:3177","crate_id":0,"name":"BeforeHost","span":{"filename":"src/slicing.rs","begin":[111,4],"end":[111,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13162:36032":{"id":"2:13162:36032","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:565:1817":{"id":"b:2:2563-0:565:1817","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:28072"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2562:1804":{"id":"2:2562:1804","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:548:1815":{"id":"b:2:2850-0:548:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41604:3871-0:565:1817":{"id":"a:2:41604:3871-0:565:1817","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:3871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2839-0:598:1818":{"id":"b:2:2839-0:598:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:282:199":{"id":"0:282:199","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[20,4],"end":[20,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"0:334:1847":{"id":"0:334:1847","crate_id":0,"name":"base_url","span":{"filename":"src/lib.rs","begin":[217,4],"end":[220,5]},"visibility":"public","docs":"Change the base URL","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13125:2758":{"id":"2:13125:2758","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12757:3645","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::split":"2:13119:1956"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43381:4347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:4320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:423":{"id":"0:423","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2638,0],"end":[2644,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:425:138","0:426:1632"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:527:1816":{"id":"b:5:725-0:527:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3407","5:728:2248","5:729:4128"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2839-0:670:1820":{"id":"b:2:2839-0:670:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2560-0:670:1820":{"id":"b:2:2560-0:670:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2562:1804"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:747:726":{"id":"0:747:726","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[3008,9],"end":[3008,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336:1873":{"id":"0:336:1873","crate_id":0,"name":"syntax_violation_callback","span":{"filename":"src/lib.rs","begin":[251,4],"end":[254,5]},"visibility":"public","docs":"Call the provided function or closure for a non-fatal `SyntaxViolation`\nwhen it occurs during parsing. Note that since the provided function is\n`Fn`, the caller might need to utilize _interior mutability_, such as with\na `RefCell`, to collect the violations.\n\n## Example\n```\nuse std::cell::RefCell;\nuse url::{Url, SyntaxViolation};\n# use url::ParseError;\n# fn run() -> Result<(), url::ParseError> {\nlet violations = RefCell::new(Vec::new());\nlet url = Url::options()\n    .syntax_violation_callback(Some(&|v| violations.borrow_mut().push(v)))\n    .parse(\"https:////example.com\")?;\nassert_eq!(url.as_str(), \"https://example.com/\");\nassert_eq!(violations.into_inner(),\n           vec!(SyntaxViolation::ExpectedDoubleSlash));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Fn","id":"2:3298:141","args":{"parenthesized":{"inputs":[{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":null}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,9],"end":[52,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:538:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13152:36029":{"id":"2:13152:36029","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12757:3645","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::rmatch_indices":"2:13155:36030"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43513:4343","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:535:1769":{"id":"0:535:1769","crate_id":0,"name":"2","span":{"filename":"src/origin.rs","begin":[58,32],"end":[58,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u16"}}},"0:267:2402":{"id":"0:267:2402","crate_id":0,"name":"extend","span":{"filename":"src/path_segments.rs","begin":[215,4],"end":[245,5]},"visibility":"public","docs":"Append each segment from the given iterator at the end of this URL’s path.\n\nEach segment is percent-encoded like in `Url::parse` or `Url::join`,\nexcept that `%` and `/` characters are also encoded (to `%25` and `%2F`).\nThis is unlike `Url::parse` where `%` is left as-is in case some of the input\nis already percent-encoded, and `/` denotes a path segment separator.)\n\nNote that, in addition to slashes between new segments,\nthis always adds a slash between the existing path and the new segments\n*except* if the existing path is `\"/\"`.\nIf the previous last segment was empty (if the path had a trailing slash)\nthe path after `.extend()` will contain two consecutive slashes.\nIf that is undesired, call `.pop_if_empty()` first.\n\nTo obtain a behavior similar to `Url::join`, call `.pop()` unconditionally first.\n\nReturns `&mut Self` so that method calls can be chained.\n\nExample:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/\")?;\nlet org = \"servo\";\nlet repo = \"rust-url\";\nlet issue_number = \"188\";\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .extend(&[org, repo, \"issues\", issue_number]);\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url/issues/188\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nIn order to make sure that parsing the serialization of an URL gives the same URL,\na segment is ignored if it is `\".\"` or `\"..\"`:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/servo\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .extend(&[\"..\", \"rust-url\", \".\", \"pulls\"]);\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url/pulls\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["segments",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8101:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:8101:166","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2803:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:667":{"id":"0:79:667","crate_id":0,"name":"eq","span":{"filename":"src/host.rs","begin":[188,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:499:2012":{"id":"0:499:2012","crate_id":0,"name":"Domain","span":{"filename":"src/host.rs","begin":[47,4],"end":[47,13]},"visibility":"default","docs":"A DNS domain name, as '.' dot-separated labels.\nNon-ASCII labels are encoded in punycode per IDNA if this is the host of\na special URL, or percent encoded for non-special URLs. Hosts for\nnon-special URLs are also called opaque hosts.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:501:1767"]},"discriminant":null}}},"b:2:2835-0:565:1817":{"id":"b:2:2835-0:565:1817","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:1984"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31969:237-0:527:1816":{"id":"a:2:31969:237-0:527:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:592:458":{"id":"0:592:458","crate_id":0,"name":"clone","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13111:2365":{"id":"2:13111:2365","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41482:191","prim@char":"1:12067:454","self::pattern":"2:12757:3645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[139,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:139:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:613:2894":{"id":"0:613:2894","crate_id":0,"name":"NullInFragment","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:501:1767":{"id":"0:501:1767","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[47,11],"end":[47,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"S"}}},"0:624":{"id":"0:624","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3058:246-0:679:1822":{"id":"a:2:3058:246-0:679:1822","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,37],"end":[111,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:562:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[73,0],"end":[168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:68:1875","0:70:2369"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:727:3407":{"id":"5:727:3407","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:75:726":{"id":"0:75:726","crate_id":0,"name":"fmt","span":{"filename":"src/host.rs","begin":[171,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:713":{"id":"0:713","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[103,15],"end":[103,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:714:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:574:2727":{"id":"0:574:2727","crate_id":0,"name":"InvalidIpv6Address","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:716:726":{"id":"0:716:726","crate_id":0,"name":"fmt","span":{"filename":"src/slicing.rs","begin":[103,22],"end":[103,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:438":{"id":"0:438","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2700,0],"end":[2705,1]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"name":"PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:439:1151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:421:137":{"id":"0:421:137","crate_id":0,"name":"Err","span":{"filename":"src/lib.rs","begin":[2630,4],"end":[2630,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:3058:246-0:741:2281":{"id":"a:2:3058:246-0:741:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:428:726":{"id":"0:428:726","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2649,4],"end":[2651,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:730:1845":{"id":"b:2:2839-0:730:1845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2839-0:717:1826":{"id":"b:2:2839-0:717:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:360:2073":{"id":"0:360:2073","crate_id":0,"name":"authority","span":{"filename":"src/lib.rs","begin":[921,4],"end":[928,5]},"visibility":"public","docs":"Return the authority of this URL as an ASCII string.\n\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\nIPv6 addresses are given between `[` and `]` brackets.\nPorts are omitted if they match the well known port of a special URL.\n\nUsername and password are percent-encoded.\n\nSee also the `has_authority` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert_eq!(url.authority(), \"\");\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert_eq!(url.authority(), \"\");\nlet url = Url::parse(\"https://user:password@example.com/tmp/foo\")?;\nassert_eq!(url.authority(), \"user:password@example.com\");\nlet url = Url::parse(\"irc://àlex.рф.example.com:6667/foo\")?;\nassert_eq!(url.authority(), \"%C3%A0lex.%D1%80%D1%84.example.com:6667\");\nlet url = Url::parse(\"http://àlex.рф.example.com:80/foo\")?;\nassert_eq!(url.authority(), \"xn--lex-8ka.xn--p1ai.example.com\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356:1814":{"id":"0:356:1814","crate_id":0,"name":"origin","span":{"filename":"src/lib.rs","begin":[811,4],"end":[813,5]},"visibility":"public","docs":"Return the origin of this URL (<https://url.spec.whatwg.org/#origin>)\n\nNote: this returns an opaque origin for `file:` URLs, which causes\n`url.origin() != url.origin()`.\n\n# Examples\n\nURL with `ftp` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://example.com/foo\")?;\nassert_eq!(url.origin(),\n           Origin::Tuple(\"ftp\".into(),\n                         Host::Domain(\"example.com\".into()),\n                         21));\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with `blob` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"blob:https://example.com/foo\")?;\nassert_eq!(url.origin(),\n           Origin::Tuple(\"https\".into(),\n                         Host::Domain(\"example.com\".into()),\n                         443));\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with `file` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert!(!url.origin().is_tuple());\n\nlet other_url = Url::parse(\"file:///tmp/foo\")?;\nassert!(url.origin() != other_url.origin());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with other scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"foo:bar\")?;\nassert!(!url.origin().is_tuple());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:730:1845":{"id":"a:2:3058:246-0:730:1845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:563":{"id":"0:563","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:564:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[26,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:39099:3132","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeTo","id":"2:39170:215","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:285:199","0:286:835"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:410:2449":{"id":"0:410:2449","crate_id":0,"name":"set_scheme","span":{"filename":"src/lib.rs","begin":[2363,4],"end":[2412,5]},"visibility":"public","docs":"Change this URL’s scheme.\n\nDo nothing and return `Err` under the following circumstances:\n\n* If the new scheme is not in `[a-zA-Z][a-zA-Z0-9+.-]+`\n* If this URL is cannot-be-a-base and the new scheme is one of\n  `http`, `https`, `ws`, `wss` or `ftp`\n* If either the old or new scheme is `http`, `https`, `ws`,\n  `wss` or `ftp` and the other is not one of these\n* If the new scheme is `file` and this URL includes credentials\n  or has a non-null port\n* If this URL's scheme is `file` and its host is empty or null\n\nSee also [the URL specification's section on legal scheme state\noverrides](https://url.spec.whatwg.org/#scheme-state).\n\n# Examples\n\nChange the URL’s scheme from `https` to `http`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_scheme(\"http\");\nassert_eq!(url.as_str(), \"http://example.net/\");\nassert!(result.is_ok());\n# Ok(())\n# }\n# run().unwrap();\n```\nChange the URL’s scheme from `foo` to `bar`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_scheme(\"bar\");\nassert_eq!(url.as_str(), \"bar://example.net\");\nassert!(result.is_ok());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL’s scheme from `https` to `foõ`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_scheme(\"foõ\");\nassert_eq!(url.as_str(), \"https://example.net/\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL’s scheme from `mailto` (cannot-be-a-base) to `https`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\nlet result = url.set_scheme(\"https\");\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\nCannot change the URL’s scheme from `foo` to `https`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_scheme(\"https\");\nassert_eq!(url.as_str(), \"foo://example.net\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\nCannot change the URL’s scheme from `http` to `foo`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"http://example.net\")?;\nlet result = url.set_scheme(\"foo\");\nassert_eq!(url.as_str(), \"http://example.net/\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy::result_unit_err, clippy::suspicious_operation_groupings)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["scheme",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5595":{"id":"5:5595","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5596:36732","5:5597:4508","5:5600:36733","5:5603:36734","5:5611:36735","5:5612:1983","5:5613:4434","5:5614:29366","5:5615:2932"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31969:237-0:548:1815":{"id":"a:2:31969:237-0:548:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:46-20:89:1823":{"id":"0:46-20:89:1823","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[169,0],"end":[169,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"form_urlencoded::EncodingOverride","name":"EncodingOverride","id":"20:89:1823","glob":false}}},"b:2:2839-0:741:2281":{"id":"b:2:2839-0:741:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:730:1845":{"id":"b:5:725-0:730:1845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:727:3407","5:728:2248","5:729:4128"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:588:667":{"id":"0:588:667","crate_id":0,"name":"eq","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:686:3174":{"id":"0:686:3174","crate_id":0,"name":"AfterUsername","span":{"filename":"src/slicing.rs","begin":[108,4],"end":[108,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13200:36039":{"id":"2:13200:36039","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4853:36039"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43680:4339","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13096:2577":{"id":"2:13096:2577","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43349:4332","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:679:1822":{"id":"b:2:2560-0:679:1822","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:1804"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:678:726":{"id":"0:678:726","crate_id":0,"name":"fmt","span":{"filename":"src/path_segments.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:688:3175":{"id":"0:688:3175","crate_id":0,"name":"BeforePassword","span":{"filename":"src/slicing.rs","begin":[109,4],"end":[109,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:337:1875":{"id":"0:337:1875","crate_id":0,"name":"parse","span":{"filename":"src/lib.rs","begin":[257,4],"end":[266,5]},"visibility":"public","docs":"Parse an URL string with the configuration so far.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13158:3248":{"id":"2:13158:3248","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:1960":{"id":"0:266:1960","crate_id":0,"name":"push","span":{"filename":"src/path_segments.rs","begin":[158,4],"end":[160,5]},"visibility":"public","docs":"Append the given segment at the end of this URL’s path.\n\nSee the documentation for `.extend()`.\n\nReturns `&mut Self` so that method calls can be chained.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["segment",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5869-0:497:1813":{"id":"b:5:5869-0:497:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:508":{"id":"0:508","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:510:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:547:726":{"id":"0:547:726","crate_id":0,"name":"fmt","span":{"filename":"src/origin.rs","begin":[52,37],"end":[52,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13181:36036":{"id":"2:13181:36036","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3645"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:364:2096":{"id":"0:364:2096","crate_id":0,"name":"has_host","span":{"filename":"src/lib.rs","begin":[1050,4],"end":[1052,5]},"visibility":"public","docs":"Equivalent to `url.host().is_some()`.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.has_host());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.has_host());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(!url.has_host());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:562:726":{"id":"0:562:726","crate_id":0,"name":"fmt","span":{"filename":"src/origin.rs","begin":[111,37],"end":[111,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378:1963":{"id":"0:378:1963","crate_id":0,"name":"query","span":{"filename":"src/lib.rs","begin":[1380,4],"end":[1392,5]},"visibility":"public","docs":"Return this URL’s query string, if any, as a percent-encoded ASCII string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\nfn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/products?page=2\")?;\nlet query = url.query();\nassert_eq!(query, Some(\"page=2\"));\n\nlet url = Url::parse(\"https://example.com/products\")?;\nlet query = url.query();\nassert!(query.is_none());\n\nlet url = Url::parse(\"https://example.com/?country=español\")?;\nlet query = url.query();\nassert_eq!(query, Some(\"country=espa%C3%B1ol\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:598:1818":{"id":"b:2:2563-0:598:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:28072"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:534:1768":{"id":"0:534:1768","crate_id":0,"name":"1","span":{"filename":"src/origin.rs","begin":[58,18],"end":[58,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"crate::host::Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"2:13195:31264":{"id":"2:13195:31264","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:37982"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:570:2865":{"id":"0:570:2865","crate_id":0,"name":"InvalidPort","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13068:1951":{"id":"2:13068:1951","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2853:138":{"id":"2:2853:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31897:3502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[61,0],"end":[108,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:102:2801","0:104:2829","0:105:2831","0:106:2836"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:684:3173":{"id":"0:684:3173","crate_id":0,"name":"BeforeUsername","span":{"filename":"src/slicing.rs","begin":[107,4],"end":[107,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13184:36037":{"id":"2:13184:36037","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3645"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:4320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13098:33759":{"id":"2:13098:33759","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13097:33756"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43646:4326","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13115:1947":{"id":"2:13115:1947","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41482:191","prim@char":"1:12067:454","self::pattern":"2:12757:3645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:4320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:565:1817":{"id":"a:2:3058:246-0:565:1817","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13078:30077":{"id":"2:13078:30077","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12084:1656"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:531:2807":{"id":"0:531:2807","crate_id":0,"name":"Tuple","span":{"filename":"src/origin.rs","begin":[58,4],"end":[58,36]},"visibility":"default","docs":"Consists of the URL's scheme, host and port","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:533:1767","0:534:1768","0:535:1769"]},"discriminant":null}}},"b:2:2560-0:548:1815":{"id":"b:2:2560-0:548:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:1804"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13090:30100":{"id":"2:13090:30100","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13089:1950","str::split_at_mut_checked":"2:13092:30104"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:548:1815":{"id":"b:2:2839-0:548:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13178:36035":{"id":"2:13178:36035","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3645"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:4320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260:640":{"id":"0:260:640","crate_id":0,"name":"drop","span":{"filename":"src/path_segments.rs","begin":[66,4],"end":[69,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287":{"id":"0:287","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[33,0],"end":[38,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:39099:3132","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:39130:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:288:199","0:289:835"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13134:30109":{"id":"2:13134:30109","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3645","str::rsplitn":"2:13137:30111"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43467:4349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:568:2863":{"id":"0:568:2863","crate_id":0,"name":"IdnaError","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:2565:28072":{"id":"2:2565:28072","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2801":{"id":"0:102:2801","crate_id":0,"name":"new_opaque","span":{"filename":"src/origin.rs","begin":[63,4],"end":[66,5]},"visibility":"public","docs":"Creates a new opaque origin that is only equal to itself.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:376:1819":{"id":"0:376:1819","crate_id":0,"name":"path_segments","span":{"filename":"src/lib.rs","begin":[1351,4],"end":[1354,5]},"visibility":"public","docs":"Unless this URL is cannot-be-a-base,\nreturn an iterator of '/' slash-separated path segments,\neach as a percent-encoded ASCII string.\n\nReturn `None` for cannot-be-a-base URLs.\n\nWhen `Some` is returned, the iterator always contains at least one string\n(which may be empty).\n\n# Examples\n\n```\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet url = Url::parse(\"https://example.com/foo/bar\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"foo\"));\nassert_eq!(path_segments.next(), Some(\"bar\"));\nassert_eq!(path_segments.next(), None);\n\nlet url = Url::parse(\"https://example.com\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"\"));\nassert_eq!(path_segments.next(), None);\n\nlet url = Url::parse(\"data:text/plain,HelloWorld\")?;\nassert!(url.path_segments().is_none());\n\nlet url = Url::parse(\"https://example.com/countries/việt nam\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"countries\"));\nassert_eq!(path_segments.next(), Some(\"vi%E1%BB%87t%20nam\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"str::Split","id":"2:43363:2195","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:527:1816":{"id":"b:2:2850-0:527:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2560-0:741:2281":{"id":"b:2:2560-0:741:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2562:1804"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:519:465":{"id":"0:519:465","crate_id":0,"name":"cmp","span":{"filename":"src/host.rs","begin":[41,27],"end":[41,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:741:2281":{"id":"b:2:2845-0:741:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13081:10453":{"id":"2:13081:10453","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41482:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:3385-0:527:1816":{"id":"a:2:32026:3385-0:527:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:3385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2839-0:527:1816":{"id":"b:2:2839-0:527:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:385:2244":{"id":"0:385:2244","crate_id":0,"name":"set_fragment","span":{"filename":"src/lib.rs","begin":[1492,4],"end":[1507,5]},"visibility":"public","docs":"Change this URL’s fragment identifier.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com/data.csv\")?;\nassert_eq!(url.as_str(), \"https://example.com/data.csv\");\nurl.set_fragment(Some(\"cell=4,1-6,2\"));\nassert_eq!(url.as_str(), \"https://example.com/data.csv#cell=4,1-6,2\");\nassert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n\nurl.set_fragment(None);\nassert_eq!(url.as_str(), \"https://example.com/data.csv\");\nassert!(url.fragment().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fragment",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:3385-0:565:1817":{"id":"a:2:32026:3385-0:565:1817","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:3385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:380:1965":{"id":"0:380:1965","crate_id":0,"name":"fragment","span":{"filename":"src/lib.rs","begin":[1455,4],"end":[1460,5]},"visibility":"public","docs":"Return this URL’s fragment identifier, if any.\n\nA fragment is the part of the URL after the `#` symbol.\nThe fragment is optional and, if present, contains a fragment identifier\nthat identifies a secondary resource, such as a section heading\nof a document.\n\nIn HTML, the fragment identifier is usually the id attribute of a an element\nthat is scrolled to on load. Browsers typically will not send the fragment portion\nof a URL to the server.\n\n**Note:** the parser did *not* percent-encode this component,\nbut the input may have been percent-encoded already.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/data.csv#row=4\")?;\n\nassert_eq!(url.fragment(), Some(\"row=4\"));\n\nlet url = Url::parse(\"https://example.com/data.csv#cell=4,1-6,2\")?;\n\nassert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:679:1822":{"id":"b:2:3671-0:679:1822","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3671-0:497:1813":{"id":"b:2:3671-0:497:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:263:2933":{"id":"0:263:2933","crate_id":0,"name":"clear","span":{"filename":"src/path_segments.rs","begin":[92,4],"end":[95,5]},"visibility":"public","docs":"Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.\n\nReturns `&mut Self` so that method calls can be chained.\n\nExample:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .clear().push(\"logout\");\nassert_eq!(url.as_str(), \"https://github.com/logout\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:497:1813":{"id":"b:2:2560-0:497:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2562:1804"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31969:237-0:679:1822":{"id":"a:2:31969:237-0:679:1822","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:352:1983":{"id":"0:352:1983","crate_id":0,"name":"into_string","span":{"filename":"src/lib.rs","begin":[605,4],"end":[607,5]},"visibility":"public","docs":"Return the serialization of this URL.\n\nThis consumes the `Url` and takes ownership of the `String` stored in it.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url_str = \"https://example.net/\";\nlet url = Url::parse(url_str)?;\nassert_eq!(String::from(url), url_str);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"2.3.0\", note = \"use Into<String>\")]"],"deprecation":{"since":"2.3.0","note":"use Into<String>"},"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:735":{"id":"0:735","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[207,9],"end":[207,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5869-0:565:1817":{"id":"b:5:5869-0:565:1817","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:40-0:527:1816":{"id":"0:40-0:527:1816","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,38],"end":[165,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::origin::Origin","name":"Origin","id":"0:527:1816","glob":false}}},"a:2:3058:246-0:548:1815":{"id":"a:2:3058:246-0:548:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5612:1983":{"id":"5:5612:1983","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:3388","`String`":"5:7633:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:3388","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13122:30106":{"id":"2:13122:30106","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12573:4327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:3870-0:565:1817":{"id":"a:2:41605:3870-0:565:1817","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3671-0:730:1845":{"id":"b:2:3671-0:730:1845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:603:2884":{"id":"0:603:2884","crate_id":0,"name":"EmbeddedCredentials","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:406:2399":{"id":"0:406:2399","crate_id":0,"name":"set_password","span":{"filename":"src/lib.rs","begin":[2107,4],"end":[2163,5]},"visibility":"public","docs":"Change this URL’s password.\n\nIf this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rmz@example.com\")?;\nlet result = url.set_password(Some(\"secret_password\"));\nassert!(result.is_err());\n\nlet mut url = Url::parse(\"ftp://user1:secret1@example.com\")?;\nlet result = url.set_password(Some(\"secret_password\"));\nassert_eq!(url.password(), Some(\"secret_password\"));\n\nlet mut url = Url::parse(\"ftp://user2:@example.com\")?;\nlet result = url.set_password(Some(\"secret2\"));\nassert!(result.is_ok());\nassert_eq!(url.password(), Some(\"secret2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["password",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5869-0:598:1818":{"id":"b:5:5869-0:598:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3058:246-0:670:1820":{"id":"a:2:3058:246-0:670:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:536":{"id":"0:536","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,9],"end":[52,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:468":{"id":"0:468","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3024,0],"end":[3036,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Target","id":"20:50:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:470:2592","0:471:2534","0:472:2594"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13196:31265":{"id":"2:13196:31265","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:37982"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:670:1820":{"id":"b:2:2563-0:670:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2565:28072"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:429":{"id":"0:429","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2655,0],"end":[2659,1]},"visibility":"default","docs":"String conversion.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:430:755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13197:36038":{"id":"2:13197:36038","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4855:36038"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43662:4337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:339:1875":{"id":"0:339:1875","crate_id":0,"name":"parse","span":{"filename":"src/lib.rs","begin":[292,4],"end":[294,5]},"visibility":"public","docs":"Parse an absolute URL from a string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.net\")?;\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an absolute URL from the given string,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:538:667":{"id":"0:538:667","crate_id":0,"name":"eq","span":{"filename":"src/origin.rs","begin":[52,9],"end":[52,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2829":{"id":"0:104:2829","crate_id":0,"name":"is_tuple","span":{"filename":"src/origin.rs","begin":[70,4],"end":[72,5]},"visibility":"public","docs":"Return whether this origin is a (scheme, host, port) tuple\n(as opposed to an opaque origin).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-0:670:1820":{"id":"0:44-0:670:1820","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[167,0],"end":[167,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::path_segments::PathSegmentsMut","name":"PathSegmentsMut","id":"0:670:1820","glob":false}}},"2:13069:36019":{"id":"2:13069:36019","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:728":{"id":"0:728","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[181,9],"end":[181,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:729:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:434":{"id":"0:434","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2684,0],"end":[2689,1]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:435:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:629":{"id":"0:629","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:630:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[62,0],"end":[71,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"items":["0:66:2248"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3671-0:717:1826":{"id":"b:2:3671-0:717:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:505:2010":{"id":"0:505:2010","crate_id":0,"name":"Ipv6","span":{"filename":"src/host.rs","begin":[59,4],"end":[59,18]},"visibility":"default","docs":"An IPv6 address.\n`Url::host_str` returns the serialization of that address between `[` and `]` brackets,\nin the format per [RFC 5952 *A Recommendation\nfor IPv6 Address Text Representation*](https://tools.ietf.org/html/rfc5952):\nlowercase hexadecimal with maximal `::` compression.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:507:1767"]},"discriminant":null}}},"0:599:2880":{"id":"0:599:2880","crate_id":0,"name":"Backslash","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:433":{"id":"0:433","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2681,0],"end":[2681,18]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:622":{"id":"0:622","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:623:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3673:1647":{"id":"2:3673:1647","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39267:8386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:730:1845":{"id":"b:2:2563-0:730:1845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2565:28072"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13192:29368":{"id":"2:13192:29368","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:436":{"id":"0:436","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2692,0],"end":[2697,1]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:437:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:598:1818":{"id":"0:598:1818","crate_id":0,"name":"SyntaxViolation","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"public","docs":"Non-fatal syntax violations that can occur during parsing.\n\nThis may be extended in the future so exhaustive matching is\ndiscouraged with an unused variant.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:599:2880","0:601:2882","0:603:2884","0:605:2886","0:607:2888","0:609:2890","0:611:2892","0:613:2894","0:615:2896","0:617:2898","0:619:2900"],"impls":["0:596","a:2:41605:3870-0:598:1818","a:2:3058:246-0:598:1818","a:2:31969:237-0:598:1818","a:2:41604:3871-0:598:1818","a:2:32026:3385-0:598:1818","b:2:2563-0:598:1818","b:2:3671-0:598:1818","b:2:2835-0:598:1818","b:2:2839-0:598:1818","b:2:2850-0:598:1818","b:2:2560-0:598:1818","b:2:2845-0:598:1818","b:5:725-0:598:1818","b:5:5869-0:598:1818","0:138","0:624","0:621","0:629","0:622","0:626","0:628"]}}},"0:440":{"id":"0:440","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2708,0],"end":[2716,1]},"visibility":"default","docs":"URLs hash like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:441:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:729:458":{"id":"0:729:458","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[181,9],"end":[181,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:601:2882":{"id":"0:601:2882","crate_id":0,"name":"C0SpaceIgnored","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:520":{"id":"0:520","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,32],"end":[41,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"name":"PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:522:1151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13088:36024":{"id":"2:13088:36024","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12073:1552","crate::ops::IndexMut":"2:3333:3466","str::slice_unchecked":"2:13087:36023"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1875":{"id":"0:68:1875","crate_id":0,"name":"parse","span":{"filename":"src/host.rs","begin":[77,4],"end":[122,5]},"visibility":"public","docs":"Parse a host: either an IPv6 address in [] square brackets, or a domain.\n\n<https://url.spec.whatwg.org/#host-parsing>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:3870-0:730:1845":{"id":"a:2:41605:3870-0:730:1845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2839-0:497:1813":{"id":"b:2:2839-0:497:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:728:2248":{"id":"5:728:2248","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:670:1820":{"id":"b:2:2850-0:670:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:676":{"id":"0:676","crate_id":0,"name":null,"span":{"filename":"src/path_segments.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:678:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31969:237-0:717:1826":{"id":"a:2:31969:237-0:717:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3671-0:527:1816":{"id":"b:2:3671-0:527:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41605:3870-0:548:1815":{"id":"a:2:41605:3870-0:548:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41605:3870-0:598:1818":{"id":"a:2:41605:3870-0:598:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13165:36034":{"id":"2:13165:36034","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[12,0],"end":[17,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:39099:3132","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeFull","id":"2:39115:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:279:199","0:280:835"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258":{"id":"0:258","crate_id":0,"name":null,"span":{"filename":"src/path_segments.rs","begin":[65,0],"end":[70,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3294:2595","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:260:640"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13128:36026":{"id":"2:13128:36026","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12757:3645","str::split":"2:13119:1956","prim@char":"1:12067:454","`DoubleEndedIterator`":"2:8139:131","str::rsplit_terminator":"2:13131:36027"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43413:4351","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:430:755":{"id":"0:430:755","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[2656,4],"end":[2658,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:598:1818":{"id":"a:2:3058:246-0:598:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:471:2534":{"id":"0:471:2534","crate_id":0,"name":"finish","span":{"filename":"src/lib.rs","begin":[3029,4],"end":[3033,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:835":{"id":"0:280:835","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_",{"resolved_path":{"name":"RangeFull","id":"2:39115:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:3385-0:670:1820":{"id":"a:2:32026:3385-0:670:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:3385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:43-0:598:1818":{"id":"0:43-0:598:1818","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[166,36],"end":[166,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::parser::SyntaxViolation","name":"SyntaxViolation","id":"0:598:1818","glob":false}}},"a:2:32026:3385-0:679:1822":{"id":"a:2:32026:3385-0:679:1822","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:3385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13100:36025":{"id":"2:13100:36025","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43627:4342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13187:1875":{"id":"2:13187:1875","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12718:137","`FromStr`":"2:12717:2528"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12717:2528","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12717:2528","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:598:1818":{"id":"b:2:2845-0:598:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:587":{"id":"0:587","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:588:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:368:1840":{"id":"0:368:1840","crate_id":0,"name":"port","span":{"filename":"src/lib.rs","begin":[1190,4],"end":[1192,5]},"visibility":"public","docs":"Return the port number for this URL, if any.\n\nNote that default port numbers are never reflected by the serialization,\nuse the `port_or_known_default()` method if you want a default port number returned.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.port(), None);\n\nlet url = Url::parse(\"https://example.com:443/\")?;\nassert_eq!(url.port(), None);\n\nlet url = Url::parse(\"ssh://example.com:22\")?;\nassert_eq!(url.port(), Some(22));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13094:1909":{"id":"2:13094:1909","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12067:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43333:2908","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13146:1997":{"id":"2:13146:1997","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12757:3645","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::rmatches":"2:13149:36028"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43567:4345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:598:1818":{"id":"b:2:2850-0:598:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2835-0:548:1815":{"id":"b:2:2835-0:548:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:1984"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:289:835":{"id":"0:289:835","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"resolved_path":{"name":"Range","id":"2:39130:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13137:30111":{"id":"2:13137:30111","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12067:454","str::splitn":"2:13134:30109","self::pattern":"2:12757:3645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43485:4348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:4320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:346:1927":{"id":"0:346:1927","crate_id":0,"name":"join","span":{"filename":"src/lib.rs","begin":[399,4],"end":[401,5]},"visibility":"public","docs":"Parse a string as an URL, with this URL as the base URL.\n\nThe inverse of this is [`make_relative`].\n\nNote: a trailing slash is significant.\nWithout it, the last path component is considered to be a “file” name\nto be removed to get at the “directory” that is used as the base:\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet base = Url::parse(\"https://example.net/a/b.html\")?;\nlet url = base.join(\"c.png\")?;\nassert_eq!(url.as_str(), \"https://example.net/a/c.png\");  // Not /a/b.html/c.png\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = base.join(\"c.png\")?;\nassert_eq!(url.as_str(), \"https://example.net/a/b/c.png\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an URL from the given string\nwith this URL as the base URL, a [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html\n[`make_relative`]: #method.make_relative","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:598:1818":{"id":"b:2:3671-0:598:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:349:1119":{"id":"0:349:1119","crate_id":0,"name":"options","span":{"filename":"src/lib.rs","begin":[554,4],"end":[560,5]},"visibility":"public","docs":"Return a default `ParseOptions` that can fully configure the URL parser.\n\n# Examples\n\nGet default `ParseOptions`, then change base url\n\n```rust\nuse url::Url;\n# use url::ParseError;\n# fn run() -> Result<(), ParseError> {\nlet options = Url::options();\nlet api = Url::parse(\"https://api.example.com\")?;\nlet base_url = options.base_url(Some(&api));\nlet version_url = base_url.parse(\"version.json\")?;\nassert_eq!(version_url.as_str(), \"https://api.example.com/version.json\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13175:30115":{"id":"2:13175:30115","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3645"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:4320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:594":{"id":"0:594","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:595:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2845-0:565:1817":{"id":"b:2:2845-0:565:1817","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2838:1984":{"id":"2:2838:1984","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2812:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:717:1826":{"id":"b:2:2835-0:717:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:1984"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13072:36021":{"id":"2:13072:36021","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13070:36020"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2854:1632":{"id":"2:2854:1632","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39-0:548:1815":{"id":"0:39-0:548:1815","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,24],"end":[165,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::origin::OpaqueOrigin","name":"OpaqueOrigin","id":"0:548:1815","glob":false}}},"a:2:41604:3871-0:548:1815":{"id":"a:2:41604:3871-0:548:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:3871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41605:3870-0:497:1813":{"id":"a:2:41605:3870-0:497:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41605:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:517":{"id":"0:517","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,27],"end":[41,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:519:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:533:1767":{"id":"0:533:1767","crate_id":0,"name":"0","span":{"filename":"src/origin.rs","begin":[58,10],"end":[58,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:106:2836":{"id":"0:106:2836","crate_id":0,"name":"unicode_serialization","span":{"filename":"src/origin.rs","begin":[89,4],"end":[107,5]},"visibility":"public","docs":"<https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13191:29367":{"id":"2:13191:29367","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:596":{"id":"0:596","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:597:2858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:696:3179":{"id":"0:696:3179","crate_id":0,"name":"BeforePort","span":{"filename":"src/slicing.rs","begin":[113,4],"end":[113,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41604:3871-0:670:1820":{"id":"a:2:41604:3871-0:670:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:3871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:422:2529":{"id":"0:422:2529","crate_id":0,"name":"from_str","span":{"filename":"src/lib.rs","begin":[2633,4],"end":[2635,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:497:1813":{"id":"b:5:725-0:497:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:727:3407","5:728:2248","5:729:4128"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:365:2008":{"id":"0:365:2008","crate_id":0,"name":"host_str","span":{"filename":"src/lib.rs","begin":[1087,4],"end":[1093,5]},"visibility":"public","docs":"Return the string representation of the host (domain or IP address) for this URL, if any.\n\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\nIPv6 addresses are given between `[` and `]` brackets.\n\nCannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\ndon’t have a host.\n\nSee also the `host` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/index.html\")?;\nassert_eq!(url.host_str(), Some(\"127.0.0.1\"));\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.host_str(), Some(\"example.com\"));\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert_eq!(url.host_str(), None);\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert_eq!(url.host_str(), None);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13143:30114":{"id":"2:13143:30114","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:4320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:564:726":{"id":"0:564:726","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:362:2087":{"id":"0:362:2087","crate_id":0,"name":"username","span":{"filename":"src/lib.rs","begin":[982,4],"end":[989,5]},"visibility":"public","docs":"Return the username for this URL (typically the empty string)\nas a percent-encoded ASCII string.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.username(), \"rms\");\n\nlet url = Url::parse(\"ftp://:secret123@example.com\")?;\nassert_eq!(url.username(), \"\");\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.username(), \"\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[184,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1813","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:79:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2835-0:730:1845":{"id":"b:2:2835-0:730:1845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2838:1984"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5871:1609":{"id":"5:5871:1609","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:597:2858":{"id":"0:597:2858","crate_id":0,"name":"description","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:3385-0:717:1826":{"id":"a:2:32026:3385-0:717:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:3385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:265:2775":{"id":"0:265:2775","crate_id":0,"name":"pop","span":{"filename":"src/path_segments.rs","begin":[140,4],"end":[151,5]},"visibility":"public","docs":"Remove the last segment of this URL’s path.\n\nIf the path only has one segment, make it empty such that `url.path() == \"/\"`.\n\nReturns `&mut Self` so that method calls can be chained.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:700:3181":{"id":"0:700:3181","crate_id":0,"name":"BeforePath","span":{"filename":"src/slicing.rs","begin":[115,4],"end":[115,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[19,0],"end":[24,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:39099:3132","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeFrom","id":"2:39152:212","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:282:199","0:283:835"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13194:31263":{"id":"2:13194:31263","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:37982"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:361:1906":{"id":"0:361:1906","crate_id":0,"name":"cannot_be_a_base","span":{"filename":"src/lib.rs","begin":[956,4],"end":[958,5]},"visibility":"public","docs":"Return whether this URL is a cannot-be-a-base URL,\nmeaning that parsing a relative URL string with this URL as the base will return an error.\n\nThis is the case if the scheme and `:` delimiter are not followed by a `/` slash,\nas is typically the case of `data:` and `mailto:` URLs.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(!url.cannot_be_a_base());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.cannot_be_a_base());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(url.cannot_be_a_base());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:578:2870":{"id":"0:578:2870","crate_id":0,"name":"RelativeUrlWithoutBase","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:375:1156":{"id":"0:375:1156","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[1304,4],"end":[1311,5]},"visibility":"public","docs":"Return the path for this URL, as a percent-encoded ASCII string.\nFor cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'.\nFor other URLs, this starts with a '/' slash\nand continues with slash-separated path segments.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/api/versions?page=2\")?;\nassert_eq!(url.path(), \"/api/versions\");\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.path(), \"/\");\n\nlet url = Url::parse(\"https://example.com/countries/việt nam\")?;\nassert_eq!(url.path(), \"/countries/vi%E1%BB%87t%20nam\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:351:336":{"id":"0:351:336","crate_id":0,"name":"as_str","span":{"filename":"src/lib.rs","begin":[581,4],"end":[583,5]},"visibility":"public","docs":"Return the serialization of this URL.\n\nThis is fast since that serialization is already stored in the `Url` struct.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url_str = \"https://example.net/\";\nlet url = Url::parse(url_str)?;\nassert_eq!(url.as_str(), url_str);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41604:3871-0:527:1816":{"id":"a:2:41604:3871-0:527:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:3871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13091:30103":{"id":"2:13091:30103","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13092:30104"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:530:1767":{"id":"0:530:1767","crate_id":0,"name":"0","span":{"filename":"src/origin.rs","begin":[55,11],"end":[55,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:5:725-0:717:1826":{"id":"b:5:725-0:717:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3407","5:728:2248","5:729:4128"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13087:36023":{"id":"2:13087:36023","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12073:1552","str::slice_mut_unchecked":"2:13088:36024","crate::ops::Index":"2:39099:3132"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"5:3270:7078":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:5122:7545":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:7813:6873":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:2554:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:42959:8594":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"11:700:4081":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:6278:9635":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"11:2536:7081":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:13855:5883":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"15:306:10608":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:44395:8652":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"18:726:5427":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:5102:7543":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:41538:3492":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:6611:5172":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:6714:7958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"11:2352:9712":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"11:1883:3492":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:12459:8601":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:39280:5347":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:5483:7697":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:7546:8153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"11:1025:9711":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:8294:8206":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5653:7765":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"11:687:4255":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:11408:9335":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:15760:6389":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11419:5574":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:44129:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:8328:8213":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:7749:10792":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:30836:4043":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:5014:7516":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:5802:23376":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:4070:3580":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:39103:3467":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:8310:2195":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:31960:8378":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:33425:3451":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:523:7203":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:12573:4327":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:43309:4340":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:5164:9777":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:5081:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:4824:7413":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:4048:3577":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:14341:5971":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:8031:4424":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:9000:10854":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:42104:3525":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:4940:6605":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:7554:3593":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:6263:6692":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:6763:7972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:43238:8273":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:45458:8673":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:5636:7761":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:5367:23375":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:5497:9348":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"18:718:5424":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:538:7212":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13387:5777":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"0:730:1845":{"crate_id":0,"path":["url","ParseOptions"],"kind":"struct"},"17:9737:23426":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:22:741":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:6620:6723":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:41594:3868":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:7131:5270":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:15426:6281":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:7635:5535":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:8425:8067":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:8104:9061":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:6433:6701":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12443:5667":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:1724:5172":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:22726:8294":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:40084:3613":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"23:632:5382":{"crate_id":23,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"2:43655:4325":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:15814:6399":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12572:5574":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:42026:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:3778:5189":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:3333:3466":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:8396:3432":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6047:9628":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:10667:9818":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:11674:5590":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:669:9321":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"11:2304:6810":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:3925:6586":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:12863:5698":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:41605:3870":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"11:364:5164":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:39977:8522":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12949:5647":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:14066:5915":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:7429:8087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:15102:6200":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"13:109:36983":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:7481:4081":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:13024:23453":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:2979:5259":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11227:9561":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:1062:5172":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:14284:5964":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:261:9529":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:12543:9616":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:10399:4332":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13877:5890":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"23:696:9495":{"crate_id":23,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"2:3301:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"23:319:10792":{"crate_id":23,"path":["unicode_bidi","private","Sealed"],"kind":"trait"},"2:2038:8251":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:0:3266":{"crate_id":17,"path":["object"],"kind":"module"},"17:11026:23461":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:11605:5583":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:31946:9752":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:5320:7618":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"24:276:27712":{"crate_id":24,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"2:22693:8291":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:867:7074":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:6562:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:12399:5661":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"23:470:9488":{"crate_id":23,"path":["unicode_bidi","utf16","InitialInfoExt"],"kind":"struct"},"16:6895:6778":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:6560:6557":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:22742:33588":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"25:728:5144":{"crate_id":25,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"6:6746:7964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:8370:1809":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:46300:8761":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"11:2383:3492":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:3778:6582":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:6471:7834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:39893:33580":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:16212:6501":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:4283:9736":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:8568:3490":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:45665:8692":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11405:9568":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11557:9574":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"23:620:16172":{"crate_id":23,"path":["unicode_bidi","Direction"],"kind":"enum"},"17:11647:5588":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:45274:8656":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:1517:7254":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:8497:2562":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:951:9710":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:5407:1117":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:44111:8642":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:14402:5981":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:588:10719":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:497:7183":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:5401:5172":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13399:5780":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:3252:3474":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:1908:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:13738:5862":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:2303:22489":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:4424:6589":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11715:5593":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:8421:9350":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:6821:7990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:6592:8258":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:1526:7259":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:9088:1822":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6456:23381":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:9318:4599":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:7570:3596":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:16032:5750":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:1585:5205":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:2195:5186":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:43858:8621":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:7604:6571":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:2708:6545":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:16249:6507":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:2421:10779":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11915:23546":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"18:651:5391":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"11:787:7075":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:15720:6378":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:8012:8184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:10974:8823":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:513:9531":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:14038:5910":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:45627:8690":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"0:717:1826":{"crate_id":0,"path":["url","Url"],"kind":"struct"},"2:22295:10792":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"22:155:4285":{"crate_id":22,"path":["idna","uts46","Idna"],"kind":"struct"},"6:6729:7960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:7773:8805":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12408:5662":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:7412:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:6900:8016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:1478:4255":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12929:5702":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:1824:9771":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:6774:5172":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:6738:7963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:4262:10628":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:7940:5483":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:3791:4424":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:10202:3412":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:33111:3450":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:9852:34525":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:3119:3444":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:40028:3598":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12557:5558":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:45968:8721":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:4241:10627":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:1054:9711":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:6940:6784":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:8226:23390":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:46466:8769":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:1516:7074":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:22639:8282":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:10200:3413":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:15616:6350":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:5415:6613":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:8889:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:4833:726":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13946:5896":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:10828:37003":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"13:226:7067":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11324:9563":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:939:9708":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4942:7482":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:2101:9725":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"11:1142:9715":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:3812:3434":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:42209:3413":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:4308:3492":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:4922:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:21951:10792":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:3815:3433":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6504:6709":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"11:1087:36981":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:6657:7935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:1575:9724":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:13573:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:41751:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5031:7524":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:12478:5670":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:15168:6215":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11642:28517":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:4448:8254":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:7241:10629":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:21436:34543":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:22102:10792":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:5376:7635":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:12086:1654":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:11392:9567":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:12070:1167":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11865:9595":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:45906:8719":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:6466:6705":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:15383:6271":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:11313:5571":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13553:5815":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"9:178:22432":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:9984:23447":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:7014:23384":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:39115:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:1566:22446":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:918:9704":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"22:0:2596":{"crate_id":22,"path":["idna"],"kind":"module"},"6:7306:8034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:46018:8723":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:5314:7617":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:32056:2807":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:9857:34167":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:8139:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:2838:6551":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"25:386:5160":{"crate_id":25,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"17:13814:5879":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:8900:8823":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:45353:8663":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12695:9621":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"11:102:7068":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13594:5826":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:5133:9777":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"25:1034:27729":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"17:11730:5595":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:6178:4390":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:43617:4341":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11634:5587":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:4721:8082":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:8926:8825":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:10839:10792":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:45779:8698":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:6788:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:1574:3492":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:6768:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:41546:4255":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:4570:9324":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:37751:3458":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:10849:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:5867:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"24:198:10589":{"crate_id":24,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"16:6948:6564":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"9:392:22366":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:8029:8194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"23:599:37034":{"crate_id":23,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"23:8:27673":{"crate_id":23,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"2:3516:3473":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11367:5558":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:0:3261":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"11:1676:5168":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"10:44:7089":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"9:330:7126":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:6565:5189":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:8623:3491":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:41460:3430":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:11513:3434":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:42741:3489":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:9665:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:11788:9585":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:7537:8150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:15249:6232":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5466:7691":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:3489:3469":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:21424:34543":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:12808:5695":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"23:520:9497":{"crate_id":23,"path":["unicode_bidi","utf16","Utf16IndexLenIter"],"kind":"struct"},"6:564:7225":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:7364:4492":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:45796:8699":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:8265:8199":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:4880:3587":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:5643:7764":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:46527:8774":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:5200:7562":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:4417:9738":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:2423:4081":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:14260:5961":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:12305:2590":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:7633:36991":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:5581:7731":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:45289:8657":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:22189:10946":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:12783:4319":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:3249:35673":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:4771:6599":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:10459:4430":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:2782:3503":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:2493:1806":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:7835:10726":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4811:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13375:5776":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:673:3492":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:2307:8230":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:45306:8660":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:7598:3594":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:8259:8198":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:7583:33575":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:14463:5996":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10092:23449":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:1063:9712":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:9141:8833":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:4211:10625":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:45487:8675":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:43191:8272":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:10210:3418":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:4330:4485":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11877:5601":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:14111:5920":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:5329:7621":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:7052:9666":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10044:23448":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:3660:4255":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:3810:6583":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:12066:1049":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:14489:5998":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:623:37015":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:3100:4030":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:8566:16112":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:45502:8676":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:7561:8160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:403:9530":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:7750:8804":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:8650:3494":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:21451:34539":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:1887:9774":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:1653:7351":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:9164:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:5756:9626":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"23:306:27658":{"crate_id":23,"path":["unicode_bidi","TextSource"],"kind":"trait"},"17:14189:5947":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:2668:5241":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:10696:8808":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"6:6478:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:15313:6249":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:30809:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:22309:10951":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:15944:5746":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"11:1603:9718":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:1309:6810":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:3871:5205":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:8950:4081":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11341:9565":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:1098:9532":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:2203:9535":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:3597:9541":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:7530:16116":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:16165:6490":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:7403:5183":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:4651:3591":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:5037:6608":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:13187:5732":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12647:9617":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:6811:7987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:1707:7375":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"21:34:1802":{"crate_id":21,"path":["percent_encoding","percent_encode"],"kind":"function"},"16:6079:6514":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:7793:4371":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:922:9705":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:40163:8528":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:1581:5189":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:22454:10941":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:3842:6584":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:40304:8547":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13015:5665":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:21956:10866":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"11:1107:9714":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11115:9558":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"14:165:22452":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:13581:5825":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:2175:23504":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:1535:7265":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:7910:23389":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:6524:7860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:40693:3530":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:11161:9742":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:22670:8287":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:15769:6393":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:11051:9553":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:15342:6257":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"25:470:5148":{"crate_id":25,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"1:12039:10727":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:6726:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:3109:3446":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:217:4494":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:33170:3448":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:12300:23570":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:39991:16064":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:6622:3534":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"23:496:9492":{"crate_id":23,"path":["unicode_bidi","utf16","ParagraphBidiInfo"],"kind":"struct"},"17:11214:9560":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"11:1896:5205":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:6548:3538":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5283:7604":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:41671:4255":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:16093:6472":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"11:434:10617":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:16138:6481":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:11419:8862":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6441:7824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"24:312:5357":{"crate_id":24,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"6:6880:8002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:2652:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:5046:3859":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:9670:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:40191:8533":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12213:9606":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:7330:8051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"11:351:10613":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:13701:4491":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:10417:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"18:521:27631":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:832:9716":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:10954:23459":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:811:5205":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:11583:9580":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:893:5189":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:43779:8615":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:44347:9761":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:40010:8527":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:41302:8569":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"23:655:9488":{"crate_id":23,"path":["unicode_bidi","InitialInfoExt"],"kind":"struct"},"2:7424:4088":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:12067:454":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4979:7498":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:6331:5265":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:43970:4352":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:16105:6474":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:45259:8653":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:2690:4413":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:41420:1809":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:8282:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:32632:3442":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:43413:4351":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:2819:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:1596:7077":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11799:9586":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8234:4436":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:11661:5589":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:42065:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:39908:8518":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:4018:2554":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:1862:9773":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12318:5647":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13437:5784":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:40272:8544":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:15822:6402":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:2936:22517":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:15126:6202":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:10998:32220":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:2636:6542":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:5182:867":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:43283:8275":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:12080:807":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:10573:37008":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:1510:7251":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:7467:8099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:43793:8618":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:5995:6647":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:5503:1552":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"16:2374:6530":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:4132:10813":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:3499:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:21468:34551":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:7389:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:5846:6626":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:2887:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:6160:22488":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:13424:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:8545:3489":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"22:161:4284":{"crate_id":22,"path":["idna","uts46","Config"],"kind":"struct"},"5:7656:9322":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:598:37013":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:22804:8306":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:8175:9698":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:22718:8293":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:11802:9746":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:859:4081":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:6802:6762":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"13:0:3256":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:7979:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:1671:7358":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:8288:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:1494:4081":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:32026:3385":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:6965:5214":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:14298:5965":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:3614:6581":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:2898:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:491:7180":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:14025:5908":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:42481:6900":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:13272:5760":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:10646:5241":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:12127:5639":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:39260:3470":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:4837:7423":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:640:9767":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:2576:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:40121:8273":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"11:2469:5205":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:7486:32024":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:2456:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:22762:33590":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:22704:33611":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:5937:5189":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:7570:6569":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:7549:6862":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:2033:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"18:563:5401":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:8557:3496":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:6491:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:531:5396":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:12034:32022":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13363:5773":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:10686:8839":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:12090:1711":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:8297:4412":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:8329:3431":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:15456:6287":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:507:5391":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:1663:7357":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13606:5829":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:2104:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:5336:7622":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:15092:6199":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:7509:9688":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12584:9548":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:15214:6226":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:7366:8067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:0:3265":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:11256:5564":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:5244:7582":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:1821:4390":{"crate_id":2,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"16:860:9625":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:22407:10792":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:828:5174":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:15799:6398":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"9:502:7148":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:6721:7959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:14752:6041":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:8973:8827":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:22321:34247":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:6787:8263":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:2815:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:40295:8546":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11764:5600":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:21669:10792":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:16121:6479":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"23:511:9495":{"crate_id":23,"path":["unicode_bidi","utf16","Paragraph"],"kind":"struct"},"16:7379:36999":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:4206:4390":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:13424:5783":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:33052:3405":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:43936:16014":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:533:5254":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"20:44:2280":{"crate_id":20,"path":["form_urlencoded","Serializer"],"kind":"struct"},"2:30272:4514":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12289:5642":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:4268:4390":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:4802:6600":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:8093:6923":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:4238:4390":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:1686:7367":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:11841:9593":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:12516:9613":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:8188:9701":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:11063:9554":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:12530:9615":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:22362:10952":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:2592:6540":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13972:5608":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:4916:7472":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:11059:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:553:7220":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:40114:4440":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:43947:8624":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:44372:8651":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:3567:33550":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:43112:9755":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:15:2336":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:12076:9599":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:8073:6922":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:43662:4337":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:15333:6256":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:21680:8278":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:5502:7705":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:11656:8866":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:9755:23424":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:14994:6177":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:42442:8579":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:3272:4431":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:40054:3597":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:1885:4599":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:9179:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:3312:4432":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:15624:6351":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:15678:6372":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:7967:8810":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:42944:8593":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:4718:3563":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12189:9604":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:43467:4349":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:7731:5209":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:8247:8196":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:15176:6218":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:12081:808":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:10524:9544":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:8155:6932":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:5598:7738":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:10786:9346":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:11621:5585":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:4864:7446":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12900:5701":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:46475:8770":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:4856:6602":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:46358:8763":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:39170:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:4745:4070":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:9174:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:15655:6359":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:7446:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"11:2151:9712":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:14788:6072":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:43349:4332":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:10350:5545":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:1887:4081":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:6813:6763":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:44356:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:1590:7076":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:7348:8058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6689:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:32446:3443":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:39099:3132":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:7539:6568":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:9060:9799":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:2447:10789":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:7098:6804":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:5835:3527":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:645:10722":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:8956:8826":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"14:7:9315":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:8334:3427":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:12969:5704":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:42202:3412":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:40344:8550":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:44103:8640":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:5457:7685":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:880:7075":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:8271:8200":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:43885:8622":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:7516:8136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"20:0:1791":{"crate_id":20,"path":["form_urlencoded"],"kind":"module"},"2:43680:4339":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:9067:28309":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:42216:3420":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:5445:7676":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:22835:10810":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:15289:6242":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:1580:7296":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:6792:5234":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:6532:7865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12494:5671":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:10563:5238":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:40023:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:7633:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:15190:6221":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:40285:8545":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"23:705:9509":{"crate_id":23,"path":["unicode_bidi","Utf8IndexLenIter"],"kind":"struct"},"1:7646:9337":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:11490:5284":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:2478:6535":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:1072:9320":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:45885:8718":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:15281:6241":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"21:36:1803":{"crate_id":21,"path":["percent_encoding","utf8_percent_encode"],"kind":"function"},"6:532:7209":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:2756:8234":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:5617:7752":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:4573:3590":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:7528:3495":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:7876:3519":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:5347:6612":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"20:99:3512":{"crate_id":20,"path":["form_urlencoded","ByteSerialize"],"kind":"struct"},"23:449:138":{"crate_id":23,"path":["unicode_bidi","level","Error"],"kind":"enum"},"1:8447:3584":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:15608:6347":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:4830:6601":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:3283:35672":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:4012:3575":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:14311:5966":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:43322:4336":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:8583:2561":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:4076:3579":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:3519:4400":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:924:5179":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:13611:8277":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:13509:5798":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"14:40:5747":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:5112:7544":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10905:9550":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:6692:3540":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"11:1917:7078":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:5862:3528":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:16069:6467":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:12342:5654":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:4062:3581":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12683:9620":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"0:741:2281":{"crate_id":0,"path":["url","UrlQuery"],"kind":"struct"},"17:14091:5917":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:7816:4436":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:12150:5640":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:39865:4338":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:12107:5574":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:21414:4043":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:7088:9334":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:43293:9760":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:11825:9591":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:12079:810":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:2419:8250":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:6588:6713":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:41258:2708":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:45856:8717":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:10881:5281":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:14847:6124":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:43810:8619":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:8317:8212":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"11:1903:7076":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:6021:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:31935:9751":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:43646:4326":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:40094:3612":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:12328:5649":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:557:9764":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:39210:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:1891:5189":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:754:5432":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:12065:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:11567:9575":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:11084:4327":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:11006:8642":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"5:2112:9726":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:5039:7528":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:15197:6223":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:7888:6885":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:9671:23427":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:5052:7532":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:689:5418":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:14177:5945":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:6976:6786":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:10877:9549":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:4903:3582":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:16259:5777":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"24:266:5350":{"crate_id":24,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"17:11166:5560":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:46642:8798":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"11:837:9705":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:5322:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:4719:8080":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:12043:9597":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:7995:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"23:432:5361":{"crate_id":23,"path":["unicode_bidi","level","Level"],"kind":"struct"},"2:39921:8519":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:44383:4490":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:8267:4410":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"10:0:3260":{"crate_id":10,"path":["adler"],"kind":"module"},"2:3051:4025":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:7686:5272":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:2029:8248":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:13485:5796":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:41868:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:6083:8257":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:40:4493":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:1463:3492":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:16269:5782":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:4531:6592":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:437:5490":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:39152:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:7381:8239":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:15151:6210":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:5191:7557":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:11773:5681":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11016:9551":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"18:573:5391":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:5445:4323":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4992:7503":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:45545:8686":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:7602:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:10778:9330":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:4565:9323":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"18:613:37014":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:10739:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:2557:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:39958:4337":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:3426:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:7799:6561":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7741:6573":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:43764:8609":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5665:7772":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:2525:8231":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:6648:6725":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:4393:9344":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:2730:4423":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"9:482:22364":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:8192:3386":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:5546:7718":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:40039:33575":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:2498:22441":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:10149:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"11:1066:22445":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:941:3492":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:7945:9786":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:9938:23446":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:9049:9797":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:5390:7643":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:3231:29090":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:14325:5969":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4897:7459":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:4491:4067":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:9781:23442":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6927:6782":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"23:611:9502":{"crate_id":23,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"2:1747:1807":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:39950:4338":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12371:5702":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:22271:10948":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"16:6665:23382":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:2902:22516":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:7857:6881":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:5650:7988":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:5006:6607":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:3283:3462":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:1555:9704":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:14356:5975":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:2548:6538":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:2287:35757":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:465:7167":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:6447:7825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"11:774:7074":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:875:9709":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:6342:36997":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:46210:8759":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:3270:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:5914:6636":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:4148:4255":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"22:170:2877":{"crate_id":22,"path":["idna","uts46","Errors"],"kind":"struct"},"1:4717:8078":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:8001:4548":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:4467:4390":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:11879:4329":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:5160:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11042:9552":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:10204:3420":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:39019:3478":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:14855:6127":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:6781:8264":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:13797:5876":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:8480:3863":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:3396:5205":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:6417:7808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:10108:9809":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:5700:6558":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4965:7490":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:8136:6929":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:46056:8725":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10982:23460":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:14436:5994":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:2418:6532":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:22376:16125":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:3576:4401":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:10457:4260":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:1485:7241":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:256:9528":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"11:710:9703":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:12519:8605":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13999:5905":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:559:7223":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:10174:9355":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:5742:6615":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2646:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:2437:10784":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:41554:4081":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"20:89:1823":{"crate_id":20,"path":["form_urlencoded","EncodingOverride"],"kind":"type_alias"},"6:6698:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:25686:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:41615:4257":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:15701:6373":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:41386:33592":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:12085:1653":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:12757:3645":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:4924:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:46133:8758":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:6074:16410":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:40735:8561":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:7393:5189":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:8060:16114":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:2403:4255":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:6353:6694":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:21482:34545":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:4352:6588":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:1547:7274":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:1207:9533":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:844:10738":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:15266:6239":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:5306:7613":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"3:0:481":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:5423:7660":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"11:1923:7079":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:40172:8530":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:16151:6487":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:3475:6580":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:5927:6637":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:1915:4510":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:5797:4390":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:3029:5435":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"23:681:9492":{"crate_id":23,"path":["unicode_bidi","ParagraphBidiInfo"],"kind":"struct"},"2:3504:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:8101:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7528:6859":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6543:6712":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:4073:5189":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:3014:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"18:113:10600":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:299:7069":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:6053:5265":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:10357:9795":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:4882:6603":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:6621:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12792:5504":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:4307:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:8304:4332":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:13986:5904":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:44091:8637":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:867:9528":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:1828:5205":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:7168:8830":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:4644:4068":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:40727:8559":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"11:2369:9721":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:1153:10622":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:2508:6536":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:290:37076":{"crate_id":24,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"6:5260:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:10720:37002":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:30460:33566":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:7061:6801":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:10248:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:1490:7243":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:2224:4487":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:2394:6531":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:16050:5760":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:7618:6865":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:945:9709":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:856:9708":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"11:2562:7085":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:43922:8623":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:0:892":{"crate_id":6,"path":["libc"],"kind":"module"},"17:16235:6506":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:3012:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"16:7321:3867":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:5344:7623":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:15356:6264":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:44275:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:5296:7609":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:5352:7624":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:8633:3492":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:1325:9712":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:914:9703":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:39965:16063":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:40679:8556":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:12073:1552":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:10155:5538":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4787:7386":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"23:0:4277":{"crate_id":23,"path":["unicode_bidi"],"kind":"module"},"2:10206:3421":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:5557:7724":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:45997:8722":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4891:7456":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:21500:10792":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:44272:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:3093:4028":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:7373:4081":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:9015:10856":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13455:5792":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:5075:6609":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:21502:10864":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:14599:6019":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:22104:10862":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:12078:700":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"25:636:10588":{"crate_id":25,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"1:4551:3589":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"11:1910:7077":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:5769:6619":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:659:9523":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:11024:8834":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:8197:8195":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"25:669:9314":{"crate_id":25,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"2:7594:10624":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:10629:5240":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:414:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:14212:5956":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:570:7228":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:44164:16217":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:8064:16113":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:9348:2914":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:40242:8541":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:1607:7079":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:4560:6593":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6398:6554":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:41408:3436":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:22811:8308":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13473:5793":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:11317:9745":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:15521:6331":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"18:735:27629":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12089:5637":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:4988:10847":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:13412:5782":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11574:7080":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:6967:5269":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:6413:10953":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"25:948:27728":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"9:53:22383":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:37806:3459":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:4885:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:5463:9778":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11269:23478":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:5061:4390":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:5513:9349":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:2462:793":{"crate_id":1,"path":["std","hash"],"kind":"module"},"1:9232:9806":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"2:45583:8688":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"11:742:9704":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6480:6556":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:12772:4321":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:40141:9753":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:15992:6453":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:5290:7606":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"23:482:9490":{"crate_id":23,"path":["unicode_bidi","utf16","BidiInfo"],"kind":"struct"},"1:4124:10811":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"25:752:5154":{"crate_id":25,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"23:197:27678":{"crate_id":23,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"1:9491:5276":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"4:0:3257":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:31971:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:7085:6802":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:3053:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:3439:4437":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:1496:7246":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:22421:10942":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:45566:8687":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:9997:3410":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:4502:6591":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:5212:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"15:288:10604":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:11394:8860":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:14372:5976":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"19:0:1147":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:10218:5541":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:8118:6926":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:6066:6657":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"22:70:10594":{"crate_id":22,"path":["idna","uts46","Mapper"],"kind":"struct"},"17:15324:6253":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:45321:8661":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:39190:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:5582:9346":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:22533:8280":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:10168:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:14271:5962":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:10170:5539":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:45406:8670":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:14414:5983":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:10212:3419":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:16187:6496":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"5:3028:8227":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12597:5676":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:22233:10947":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:45598:8689":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:9254:29466":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:22586:8281":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:41712:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14079:5916":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:15301:6248":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:8323:3432":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:4233:10626":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:8985:10855":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:43201:9757":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:8388:9794":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:40181:8531":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:5892:4390":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:5436:7670":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:4922:16057":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:46446:8767":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:43212:8596":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:473:7172":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:5211:3524":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:7646:16108":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:44087:8636":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:2438:6533":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:15463:6289":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:10720:8809":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:40150:4411":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:11189:5562":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:14386:5978":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:4437:5195":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:5897:6631":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:2087:4424":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:16223:6503":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:5528:7707":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:46455:8768":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:6519:7859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:3329:6579":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:43264:8274":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:3510:3471":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:22824:8309":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"18:96:10597":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:7957:8809":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:33288:3449":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:1169:35681":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:11303:9744":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:6412:23380":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"24:0:4278":{"crate_id":24,"path":["unicode_normalization"],"kind":"module"},"24:228:27698":{"crate_id":24,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"18:0:3267":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:6432:10954":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:12535:8606":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:10864:5279":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:7355:6840":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:3917:3435":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:503:5186":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:14933:6170":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:8300:8207":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:14449:5995":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:7437:4081":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:3104:3404":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:30266:4513":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:2472:16126":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:5064:7541":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"11:1051:9712":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:42497:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:4909:7468":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:3025:3407":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8109:2159":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:10730:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:5969:8255":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:11574:3435":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:15039:6186":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:2015:16135":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:2273:4399":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4971:7493":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:40334:8549":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:32058:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:14147:5926":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:12087:1655":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:46429:8766":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"9:238:3489":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:928:10738":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:2808:6550":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:5415:7655":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:46603:8783":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:7529:16115":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:0:1544":{"crate_id":1,"path":["std"],"kind":"module"},"5:868:5177":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:11553:3433":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:8259:2544":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:3193:3454":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"14:187:22459":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:42469:34127":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:2610:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:4976:6606":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:5266:7593":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:8934:3492":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:5781:6559":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13774:5871":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:15206:6224":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:1602:7078":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:10137:23425":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:12018:9097":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:8306:8208":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:4824:3585":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13959:5899":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:4986:9543":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:5083:7542":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:44293:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:14723:6021":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:8341:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:2585:4420":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:7306:37000":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:11275:4349":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:40251:8542":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:12273:16174":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"18:481:5389":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:2768:6548":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10068:23431":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:33598:3452":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:6782:23383":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:6629:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7111:6807":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:4120:3576":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:6228:5251":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:12050:29460":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13325:5767":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:10452:4259":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:40201:8534":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:45923:8720":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:4707:3579":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:5710:5203":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"15:327:22474":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:8110:3387":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:13211:5746":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:8382:10824":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"11:2554:36980":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:45420:8671":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:10419:5547":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:14968:6171":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:12074:1637":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:5219:7570":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:1585:7298":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:10208:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:2205:8222":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:43431:4350":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:7473:4081":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"11:2231:7080":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:43743:16013":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:3234:31873":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:2601:465":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"17:12201:9605":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13568:5821":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:7359:8063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:150:5160":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:2654:4421":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:21573:8278":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:31897:3502":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:3473:9540":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:6606:6721":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:11835:9747":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"16:872:9529":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:13397:35019":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:578:7233":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"24:259:37077":{"crate_id":24,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"1:12071:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:2124:6810":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:1189:10623":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:43333:2908":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:9197:8834":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:15023:6183":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:3196:6521":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:10801:28486":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:43485:4348":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:6542:7872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"7:0:1701":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:11289:4348":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:8351:8219":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:4782:10849":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:3136:3464":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:1621:7328":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:45374:8668":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:15734:6380":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:46408:8765":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:15273:6240":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:7453:8241":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:15010:6178":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"14:0:3263":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:7950:8808":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:5630:7758":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"21:0:1800":{"crate_id":21,"path":["percent_encoding"],"kind":"module"},"17:15376:6270":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:15058:6187":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:40066:3599":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:15390:6272":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:12089:861":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:10505:4371":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:13844:5882":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:5020:7519":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:11537:9573":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6706:7954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:6409:7806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:11123:9741":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:3647:3492":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:21980:8279":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:11354:9566":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:2854:6552":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13146:5723":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:5385:5538":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:12763:2914":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:11041:2195":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:586:7237":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:11234:9743":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4870:7447":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:10150:1805":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"23:542:27672":{"crate_id":23,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"1:4313:9343":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:11853:5287":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:10087:9773":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:8317:4341":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:2812:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:4500:5195":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:32818:3445":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:12724:23450":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:43957:8628":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:4561:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:15582:6338":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:4913:6604":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6442:6702":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13308:5765":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:45680:8693":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:16079:6468":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:41829:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:9486:9786":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:43988:4353":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"11:430:10616":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3544:3476":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11547:5482":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"12:0:3262":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:12068:1672":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:21561:10863":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:5828:3526":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:21553:10792":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:13116:5719":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:6955:5213":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:5588:7733":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:39984:8523":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:2470:16125":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:2809:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:2803:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:3237:3492":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:45516:8677":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:3353:4429":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:8097:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:15778:6395":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:581:4043":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:23286:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:41679:4081":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:3314:4433":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:5565:7726":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:30355:33584":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:46565:8781":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:43513:4343":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:12464:23571":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:41604:3871":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:7656:23387":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:2435:10783":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:12768:23429":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:31953:4068":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:12422:5663":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:10251:5542":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:15078:6195":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:43637:4328":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"11:800:5189":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:21453:34547":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"21:81:2896":{"crate_id":21,"path":["percent_encoding","PercentDecode"],"kind":"struct"},"2:33771:3453":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:6756:7971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:5140:4439":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"22:133:37018":{"crate_id":22,"path":["idna","uts46","Mapping"],"kind":"enum"},"2:3529:35290":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:9886:23444":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:14977:6175":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:4634:5227":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:2323:22515":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"11:1582:9717":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:356:9762":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:3270:4430":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:43181:9756":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6634:6562":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:44326:9340":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:15635:6356":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:11347:8856":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:14246:5959":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10317:5544":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:6670:7939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:4249:10823":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13766:5869":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:39942:4339":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:3501:4398":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:14912:6165":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:14503:6001":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:9121:28235":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:6625:3535":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:5714:5265":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:10710:9547":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7648:9696":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:2939:3571":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:2878:6553":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:6664:7936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:1628:7332":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11493:9569":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:10915:37005":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:14575:5665":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:8377:8814":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6758:6750":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:1699:7371":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:44095:8638":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:22777:33583":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12278:9611":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:45391:8669":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12454:5668":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:42712:8587":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:15596:6344":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:8913:8824":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:45648:8691":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:2728:6546":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:5721:8803":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:4103:5172":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:7125:5222":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6427:9664":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:11353:9819":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:32027:4031":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:4800:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:12084:1656":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:39882:8515":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:13344:5772":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:7821:10725":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:2234:9538":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:491:5390":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:2806:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:39453:16067":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:9982:8571":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"16:6120:23379":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:3032:35682":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:9036:3529":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:7413:8240":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:6609:7914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:43251:9758":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:42506:3409":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:5536:7712":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:6932:5203":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:10759:5574":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:637:9765":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"14:31:9315":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"9:0:3259":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:7423:35674":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:836:3492":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:362:9763":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:45811:8700":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:3058:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:15445:6286":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:11089:9556":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:10400:5277":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:5277:7601":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:6532:6711":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:2263:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6872:6777":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15569:6332":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:1945:1205":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"11:1160:9320":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:909:9716":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:40469:4412":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"22:120:124":{"crate_id":22,"path":["idna","punycode","Decoder"],"kind":"struct"},"16:4614:6595":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:2338:6522":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"20:91:2216":{"crate_id":20,"path":["form_urlencoded","Parse"],"kind":"struct"},"17:12659:9618":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:16176:6495":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:6881:10858":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:45729:8696":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:7575:8169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:10612:9545":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:12778:4320":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:7497:6858":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5477:7696":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:6915:8027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:5472:7694":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:6026:6653":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:1534:9716":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:10992:3492":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:6962:6565":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:6300:9650":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:7856:9330":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:3750:1810":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:3014:22518":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"24:319:9479":{"crate_id":24,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"2:21555:10860":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12225:9607":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:15646:6357":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11242:9562":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:1968:3567":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:7485:8110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7144:23385":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:41529:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:2788:6549":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12030:9596":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:46512:8773":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:38440:3461":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:21678:10861":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:6636:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5181:7550":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:15418:6279":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:3141:3465":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:14545:6005":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:8255:4409":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:14587:6012":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13252:5750":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:542:6512":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:680:5415":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:3669:5440":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:4110:3578":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12621:5677":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"5:7646:8245":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:10409:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"9:447:22365":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5225:7573":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:15473:6294":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:30287:3409":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:43163:8270":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:7622:5201":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:7686:9697":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:7452:8094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:4689:5228":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:1525:7075":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:538:5399":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:12887:5699":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:8253:8197":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"14:220:7020":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5489:7699":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:10661:5246":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:1692:7368":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:40233:8540":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:42704:4262":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13723:5858":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4876:7449":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:2572:6539":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:14560:6009":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:8202:6575":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:39931:8520":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"24:301:5354":{"crate_id":24,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"15:394:22480":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:13538:5809":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11497:9570":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:5174:3574":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:485:7178":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:11196:4347":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:4826:3586":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:8404:8815":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:40320:5412":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:3899:6585":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"20:50:248":{"crate_id":20,"path":["form_urlencoded","Target"],"kind":"trait"},"2:40702:8558":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:31970:3384":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:7984:8181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12353:5658":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:10193:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:5831:6624":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:6749:6749":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:46329:8762":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"23:457:9484":{"crate_id":23,"path":["unicode_bidi","utf16","InitialInfo"],"kind":"struct"},"1:2265:9775":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:41274:3428":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:0:537":{"crate_id":2,"path":["core"],"kind":"module"},"2:44334:8648":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:6692:4081":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:4698:4069":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:5817:6621":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:41480:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:11630:8865":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:6379:7781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6317:9653":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:3669:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13674:5833":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:5515:7706":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:4959:7488":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:9100:9804":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:328:7072":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:7473:6661":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:4985:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:15222:6228":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:44083:8635":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:13646:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:40686:8557":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7755:6563":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:1340:9711":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:10818:8825":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:30298:33596":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:12077:698":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:5134:7546":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:44099:8639":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:3806:9725":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"7:78:22358":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:39130:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:30234:4512":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:5528:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:39055:3475":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:3586:4404":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:11425:8863":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4932:7476":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13173:5731":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:4468:6590":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"9:357:22380":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:7584:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:45697:8694":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:3351:4428":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:8006:4547":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:5400:5539":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:10439:5548":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:15931:5732":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:5677:7777":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:6244:5264":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:13449:9748":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:11293:23479":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:11016:4255":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12508:5674":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:3244:7077":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:294:3388":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:7715:5205":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:13375:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:11380:8859":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12851:5697":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11075:5558":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:1975:713":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:11702:5592":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:42720:4261":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:5400:7649":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:6505:7858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:15957:6423":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:44107:8641":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:1559:7282":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:1639:7340":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11524:9572":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:3264:9539":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"25:449:5144":{"crate_id":25,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"25:879:27727":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"21:74:3403":{"crate_id":21,"path":["percent_encoding","PercentEncode"],"kind":"struct"},"17:15400:6275":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:8301:6941":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:3063:4026":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:2037:9534":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:8248:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:39267:8386":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:5686:6555":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:11812:9589":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11853:9594":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:6069:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:15410:6278":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:5370:7634":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:5671:7774":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:7705:5274":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:14986:6176":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:12088:1652":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:10875:5280":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:14529:6003":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12993:23452":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:14051:5912":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:4821:9542":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:849:4255":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:11285:7145":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:43172:8271":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:7580:6864":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:45441:8672":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:481:5253":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:10185:5540":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:40717:5236":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:7841:10767":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"10:36:7088":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:5707:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:41946:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"11:2140:9711":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:41790:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4952:7485":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:8006:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:6678:3539":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"11:883:9710":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"18:608:9522":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:8015:9788":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"25:0:4279":{"crate_id":25,"path":["tinyvec"],"kind":"module"},"2:43381:4347":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:12485:23572":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:7559:6863":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:725:10792":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"22:127:9510":{"crate_id":22,"path":["idna","uts46","StringTableSlice"],"kind":"struct"},"5:1354:9320":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"21:50:1801":{"crate_id":21,"path":["percent_encoding","percent_decode"],"kind":"function"},"2:4349:16040":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"9:424:22367":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:33229:3447":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"0:0:1901":{"crate_id":0,"path":["url"],"kind":"module"},"17:11755:5599":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:11595:5582":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:1007:6810":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:9095:9803":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:4295:9737":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:3294:2595":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:12362:5659":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:5046:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:3581:3477":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:41688:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:597:5535":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:1040:6810":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:13292:5761":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:15748:6387":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:12289:9328":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:39871:8514":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:3237:31874":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:4743:6598":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:6053:3524":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"14:160:9315":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:9169:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:10465:4428":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:4465:9345":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:1809:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:10265:28654":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:46501:8772":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"11:396:5166":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:14516:6002":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:14235:5957":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:1593:7303":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:37696:3457":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:40263:8543":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10622:37009":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:43363:2195":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"21:28:2709":{"crate_id":21,"path":["percent_encoding","CONTROLS"],"kind":"constant"},"18:698:5419":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:10018:23428":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:46486:8771":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12264:9610":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:3558:1805":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:41242:2707":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:13089:5713":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:10671:37004":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:9108:8830":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:10997:5555":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10769:37007":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:545:7215":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:8604:34524":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:5624:7755":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:10767:32222":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:8023:4422":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:43567:4345":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:45712:8695":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:13832:5880":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:3912:4081":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:5477:9347":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:12251:9609":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:42729:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:11102:9557":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:7590:6570":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:6379:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:8639:3493":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"23:527:9499":{"crate_id":23,"path":["unicode_bidi","utf16","Utf16CharIndexIter"],"kind":"struct"},"16:5863:23377":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:6597:7909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15434:6282":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:6335:9661":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12388:5660":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:1723:7380":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:765:27630":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:3396:4417":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:7769:6871":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:13046:5709":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:2268:5223":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:4997:10848":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:7006:9665":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:5361:7628":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:3469:4390":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:621:3568":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:39230:3468":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:6385:6697":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:5102:33943":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:11649:8866":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:7100:5219":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:41985:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:42523:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:30010:10796":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:37861:3460":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:12991:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:40708:4437":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:46387:8764":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:15116:6201":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:10887:37001":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:2542:7082":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:4641:6596":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:10198:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:3131:3463":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:15368:6267":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:9237:3869":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"14:202:1817":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:4587:6594":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:43627:4342":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"18:635:5414":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:3304:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:9916:23445":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:31969:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:12496:8604":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6991:36990":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"26:0:4280":{"crate_id":26,"path":["tinyvec_macros"],"kind":"module"},"2:40210:8536":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:44285:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12433:5665":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:45338:8662":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"15:0:3264":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:2458:6534":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:7339:8057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7397:36998":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:9215:8835":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:1565:7284":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:9807:23432":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:5250:7584":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:3298:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:35820:3456":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:5449:4324":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:12092:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:12056:5635":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:589:5402":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:41606:3852":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:2998:6576":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"25:966:5159":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"18:80:10596":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:12072:1520":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"25:534:9475":{"crate_id":25,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"2:41623:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:10987:8824":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:6512:3531":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:7768:9782":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:2612:6541":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:12082:809":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:11743:5596":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:10818:9548":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:479:7175":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:42452:3409":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:1544:9703":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:8560:4256":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11153:9548":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:6874:8001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:2030:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:10709:8846":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:279:5172":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:2781:10792":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:41907:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:41663:3492":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:10661:9546":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:44075:8633":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:7132:6809":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5722:6560":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:5107:6610":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:6775:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:22654:8283":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:706:4321":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:6439:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:670:9527":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"23:667:9490":{"crate_id":23,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"2:43273:9759":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:903:5205":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:42759:8592":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:41220:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"25:43:27725":{"crate_id":25,"path":["tinyvec","array","Array"],"kind":"trait"},"7:31:22351":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:10691:8841":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:9858:23443":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:14012:5907":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:5210:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:42751:8591":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:14131:5921":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:7461:8098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:40219:8537":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:2528:6537":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:3026:35686":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:22323:16125":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"16:2355:6524":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:8099:9060":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:10106:9810":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:726:10797":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:5236:7579":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:9054:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:11041:8851":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:41442:3429":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:1939:3566":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:6494:6708":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:12831:16007":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:14876:6135":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:5653:10850":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:11898:5603":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"11:2548:7083":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:9479:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"23:534:9500":{"crate_id":23,"path":["unicode_bidi","utf16","Utf16CharIter"],"kind":"struct"},"17:13235:5747":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:13591:5251":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:16198:6497":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:22449:10943":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:4822:3583":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:4:1130":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"20:28:3505":{"crate_id":20,"path":["form_urlencoded","ParseIntoOwned"],"kind":"struct"},"2:46580:8782":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:33944:3455":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:45473:8674":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7823:23388":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:11089:8852":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:46550:8780":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:12717:2528":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:8243:4438":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:3740:5172":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:14868:6134":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:8942:9796":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:515:5394":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"8:0:3258":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:3278:7076":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:31939:2544":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:11443:5579":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:6849:6776":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:7056:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5146:7547":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:40479:8553":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:43531:4344":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:643:5391":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:6460:7826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:43671:4338":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:6098:23378":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:2234:8224":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:2660:6543":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"11:2443:5189":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"14:214:7018":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12238:9608":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8883:9795":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:10758:32218":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:21992:34549":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12824:23451":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11128:5528":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13753:5867":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11688:5591":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:3304:7079":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:11142:5574":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:6508:3530":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"22:29:10591":{"crate_id":22,"path":["idna","punycode","Decode"],"kind":"struct"},"16:2684:6544":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:10462:4432":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:44153:8645":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:13922:5895":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:1578:4081":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:4718:6597":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:8216:6934":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"23:642:9484":{"crate_id":23,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"25:1122:5347":{"crate_id":25,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"1:4785:3589":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:8287:4411":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:7539:10737":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:2569:3495":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:10749:4409":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:41563:3867":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:12091:1264":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:1503:7249":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:13064:5712":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:45758:8697":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"23:424:5358":{"crate_id":23,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"1:11330:5282":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:7445:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:43339:4333":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:5382:7638":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:6276:9781":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:40493:8554":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:7428:23386":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:11510:9571":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:6435:7821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:7695:6869":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:2326:9711":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:46035:8724":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:5307:6611":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:46255:8760":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:13899:5891":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:5002:7510":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:21470:34553":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:43585:4346":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"21:17:2841":{"crate_id":21,"path":["percent_encoding","AsciiSet"],"kind":"struct"},"16:6574:6574":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12707:9622":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:3036:35683":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:517:7200":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:6678:7941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:12671:9619":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:12083:805":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:10284:5543":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:6152:5260":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:11467:5581":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:2748:6547":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:123:5162":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:42223:3421":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:1680:7364":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13785:5874":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:42963:8595":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:7610:3595":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10534:37006":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:2615:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:13526:5806":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:14475:5997":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:15138:6205":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:4062:6587":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:12175:9600":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:11223:9336":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:1826:9772":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:5907:3537":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:42544:3411":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:5960:6644":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:5390:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:6231:6687":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:44079:8634":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6650:7934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13497:5797":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:7727:6572":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:7314:8039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:15836:6405":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"}},"external_crates":{"26":{"name":"tinyvec_macros","html_root_url":null},"23":{"name":"unicode_bidi","html_root_url":null},"20":{"name":"form_urlencoded","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"tinyvec","html_root_url":null},"22":{"name":"idna","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"unicode_normalization","html_root_url":null},"21":{"name":"percent_encoding","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}