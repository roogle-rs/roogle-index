{"root":"0:0:1745","crate_version":"2.4.0","includes_private":false,"index":{"b:2:2247-0:571:1660":{"id":"b:2:2247-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:1648"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:606:2729":{"id":"0:606:2729","crate_id":0,"name":"Backslash","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:8253:3702-0:531:1659":{"id":"a:2:8253:3702-0:531:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8253:3702-0:740:1688":{"id":"a:2:8253:3702-0:740:1688","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2250-0:605:1661":{"id":"b:2:2250-0:605:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:14038"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:677-0:740:1688":{"id":"b:5:677-0:740:1688","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:679:3254","5:680:2096","5:681:3947"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2683:220-0:680:1663":{"id":"a:2:2683:220-0:680:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:476:587":{"id":"0:476:587","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[3020,4],"end":[3024,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:504:1855":{"id":"0:504:1855","crate_id":0,"name":"Ipv4","span":{"filename":"src/host.rs","begin":[52,4],"end":[52,18]},"visibility":"default","docs":"An IPv4 address.\n`Url::host_str` returns the serialization of this address,\nas four decimal integers separated by `.` dots.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:506:1611"]},"discriminant":null}}},"a:2:8252:3703-0:605:1661":{"id":"a:2:8252:3703-0:605:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12030:14040":{"id":"2:12030:14040","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8252:3703-0:553:1658":{"id":"a:2:8252:3703-0:553:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:580:2576":{"id":"0:580:2576","crate_id":0,"name":"InvalidIpv6Address","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:499:1656":{"id":"0:499:1656","crate_id":0,"name":"Host","span":{"filename":"src/host.rs","begin":[42,0],"end":[60,1]},"visibility":"public","docs":"The host name of an URL.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:501:1858","0:504:1855","0:507:1856"],"impls":["0:64","0:67","a:2:8252:3703-0:499:1656","a:2:8253:3702-0:499:1656","a:2:2683:220-0:499:1656","a:2:2740:3232-0:499:1656","a:2:2700:228-0:499:1656","b:2:2247-0:499:1656","b:2:3319-0:499:1656","b:2:2552-0:499:1656","b:2:2250-0:499:1656","b:2:2541-0:499:1656","b:2:2547-0:499:1656","b:2:2537-0:499:1656","b:5:5686-0:499:1656","b:5:677-0:499:1656","0:76","0:518","0:513","0:521","0:527","0:510","0:516","0:524","0:73"]}}},"b:5:677-0:605:1661":{"id":"b:5:677-0:605:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:3254","5:680:2096","5:681:3947"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2550:128":{"id":"2:2550:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:2247-0:727:1669":{"id":"b:2:2247-0:727:1669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:1648"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:523:429":{"id":"0:523:429","crate_id":0,"name":"cmp","span":{"filename":"src/host.rs","begin":[41,27],"end":[41,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30798:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[19,0],"end":[24,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:2980:2982","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeFrom","id":"2:39178:199","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:283:186","0:284:772"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:105:2680":{"id":"0:105:2680","crate_id":0,"name":"ascii_serialization","span":{"filename":"src/origin.rs","begin":[75,4],"end":[86,5]},"visibility":"public","docs":"<https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:553:1658":{"id":"a:2:2700:228-0:553:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2740:3232-0:751:2129":{"id":"a:2:2740:3232-0:751:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12104:35223":{"id":"2:12104:35223","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:8898":{"id":"2:12135:8898","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1634":{"id":"0:3-20:0:1634","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"form_urlencoded","name":"form_urlencoded","id":"20:0:1634","glob":false}}},"0:287:772":{"id":"0:287:772","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[28,4],"end":[30,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"resolved_path":{"name":"RangeTo","id":"2:39198:202","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:499:1656":{"id":"b:2:2250-0:499:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2252:14038"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:532:2671":{"id":"0:532:2671","crate_id":0,"name":"Opaque","span":{"filename":"src/origin.rs","begin":[55,4],"end":[55,24]},"visibility":"default","docs":"A globally unique identifier","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:534:1611"]},"discriminant":null}}},"0:541":{"id":"0:541","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,9],"end":[52,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:542:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12037:27366":{"id":"2:12037:27366","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12036:1795"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:563:731":{"id":"0:563:731","crate_id":0,"name":"hash","span":{"filename":"src/origin.rs","begin":[111,24],"end":[111,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:9373:145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:571:1660":{"id":"b:2:2250-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:14038"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:631":{"id":"0:631","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2694:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:472:2383":{"id":"0:472:2383","crate_id":0,"name":"finish","span":{"filename":"src/lib.rs","begin":[3010,4],"end":[3014,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:634":{"id":"0:634","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:635:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:339":{"id":"0:339","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,0],"end":[2607,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:340:1719","0:341:1740","0:347:1772","0:348:1787","0:350:1008","0:352:316","0:353:1828","0:357:1657","0:358:1788","0:359:1859","0:360:1902","0:361:1919","0:362:1750","0:363:1933","0:364:1938","0:365:1942","0:366:1854","0:367:1636","0:368:1962","0:369:1683","0:370:1980","0:372:2001","0:376:1044","0:377:1662","0:379:1808","0:380:2062","0:381:1810","0:386:2092","0:391:2105","0:393:1746","0:395:2148","0:397:2157","0:400:2179","0:403:2205","0:406:2235","0:407:2247","0:409:2264","0:411:2297","0:413:2318","0:415:2332","0:417:2369"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12049:1851":{"id":"2:12049:1851","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:3490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40-0:531:1659":{"id":"0:40-0:531:1659","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[153,38],"end":[153,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::origin::Origin","name":"Origin","id":"0:531:1659","glob":false}}},"0:413:2318":{"id":"0:413:2318","crate_id":0,"name":"from_file_path","span":{"filename":"src/lib.rs","begin":[2424,4],"end":[2440,5]},"visibility":"public","docs":"Convert a file name as `std::path::Path` into an URL in the `file` scheme.\n\nThis returns `Err` if the given path is not absolute or,\non Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n\n# Examples\n\nOn Unix-like platforms:\n\n```\n# if cfg!(unix) {\nuse url::Url;\n\n# fn run() -> Result<(), ()> {\nlet url = Url::from_file_path(\"/tmp/foo.txt\")?;\nassert_eq!(url.as_str(), \"file:///tmp/foo.txt\");\n\nlet url = Url::from_file_path(\"../foo.txt\");\nassert!(url.is_err());\n\nlet url = Url::from_file_path(\"https://google.com/\");\nassert!(url.is_err());\n# Ok(())\n# }\n# run().unwrap();\n# }\n```","links":{},"attrs":["#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]","#[allow(clippy :: result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5202:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:444":{"id":"0:444","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2700,0],"end":[2705,1]},"visibility":"default","docs":"Return the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:445:315"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12035:35214":{"id":"2:12035:35214","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11923:1402","crate::ops::IndexMut":"2:2984:3307","str::slice_unchecked":"2:12034:35213"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:428":{"id":"0:428","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2628,0],"end":[2633,1]},"visibility":"default","docs":"Display the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:429:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2700:228-0:740:1688":{"id":"a:2:2700:228-0:740:1688","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:618:2741":{"id":"0:618:2741","crate_id":0,"name":"NonUrlCodePoint","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:608:2731":{"id":"0:608:2731","crate_id":0,"name":"C0SpaceIgnored","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:599:422":{"id":"0:599:422","crate_id":0,"name":"clone","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12090:1843":{"id":"2:12090:1843","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11715:3490","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::matches":"2:12090:1843"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43526:4161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337:1717":{"id":"0:337:1717","crate_id":0,"name":"syntax_violation_callback","span":{"filename":"src/lib.rs","begin":[238,4],"end":[241,5]},"visibility":"public","docs":"Call the provided function or closure for a non-fatal `SyntaxViolation`\nwhen it occurs during parsing. Note that since the provided function is\n`Fn`, the caller might need to utilize _interior mutability_, such as with\na `RefCell`, to collect the violations.\n\n## Example\n```\nuse std::cell::RefCell;\nuse url::{Url, SyntaxViolation};\n# use url::ParseError;\n# fn run() -> Result<(), url::ParseError> {\nlet violations = RefCell::new(Vec::new());\nlet url = Url::options()\n    .syntax_violation_callback(Some(&|v| violations.borrow_mut().push(v)))\n    .parse(\"https:////example.com\")?;\nassert_eq!(url.as_str(), \"https://example.com/\");\nassert_eq!(violations.into_inner(),\n           vec!(SyntaxViolation::ExpectedDoubleSlash));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new",{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Fn","id":"2:2925:1693","args":{"parenthesized":{"inputs":[{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":null}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:531:1659":{"id":"b:2:2250-0:531:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:14038"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:628":{"id":"0:628","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2693:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:604:2707":{"id":"0:604:2707","crate_id":0,"name":"description","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:638:670":{"id":"0:638:670","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:3232-0:531:1659":{"id":"a:2:2740:3232-0:531:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2555:128":{"id":"2:2555:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31982:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:441":{"id":"0:441","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2689,0],"end":[2697,1]},"visibility":"default","docs":"URLs hash like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:9365:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:442:731"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12038:1753":{"id":"2:12038:1753","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43292:2757","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:515:670":{"id":"0:515:670","crate_id":0,"name":"fmt","span":{"filename":"src/host.rs","begin":[41,16],"end":[41,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12040:2426":{"id":"2:12040:2426","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43308:4148","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:531:1659":{"id":"0:531:1659","crate_id":0,"name":"Origin","span":{"filename":"src/origin.rs","begin":[53,0],"end":[59,1]},"visibility":"public","docs":"The origin of an URL\n\nTwo URLs with the same origin are considered\nto originate from the same entity and can therefore trust\neach other.\n\nThe origin is determined based on the scheme as follows:\n\n- If the scheme is \"blob\" the origin is the origin of the\n  URL contained in the path component. If parsing fails,\n  it is an opaque origin.\n- If the scheme is \"ftp\", \"http\", \"https\", \"ws\", or \"wss\",\n  then the origin is a tuple of the scheme, host, and port.\n- If the scheme is anything else, the origin is opaque, meaning\n  the URL does not have the same origin as any other URL.\n\nFor more information see <https://url.spec.whatwg.org/#origin>","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:532:2671","0:535:2656"],"impls":["0:101","a:2:8252:3703-0:531:1659","a:2:8253:3702-0:531:1659","a:2:2683:220-0:531:1659","a:2:2740:3232-0:531:1659","a:2:2700:228-0:531:1659","b:2:2247-0:531:1659","b:2:3319-0:531:1659","b:2:2552-0:531:1659","b:2:2250-0:531:1659","b:2:2541-0:531:1659","b:2:2547-0:531:1659","b:2:2537-0:531:1659","b:5:677-0:531:1659","0:546","0:551","0:549","0:540","0:541","0:544","0:543"]}}},"0:549":{"id":"0:549","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,30],"end":[52,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:550:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2541-0:499:1656":{"id":"b:2:2541-0:499:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:503:1611":{"id":"0:503:1611","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[47,11],"end":[47,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"S"}}},"a:2:2740:3232-0:499:1656":{"id":"a:2:2740:3232-0:499:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2740:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2683:220-0:727:1669":{"id":"a:2:2683:220-0:727:1669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5425:35880":{"id":"5:5425:35880","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:3235","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:4302","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:3235","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:4302","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:727:1669":{"id":"0:727:1669","crate_id":0,"name":"Url","span":{"filename":"src/lib.rs","begin":[170,0],"end":[192,1]},"visibility":"public","docs":"A parsed URL record.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:339","a:2:8252:3703-0:727:1669","a:2:8253:3702-0:727:1669","a:2:2683:220-0:727:1669","a:2:2740:3232-0:727:1669","a:2:2700:228-0:727:1669","b:2:2247-0:727:1669","b:2:3319-0:727:1669","b:2:2552-0:727:1669","b:2:2250-0:727:1669","b:2:2541-0:727:1669","b:2:2547-0:727:1669","b:2:2537-0:727:1669","b:5:5686-0:727:1669","b:5:677-0:727:1669","0:279","0:424","0:282","0:285","0:439","0:437","0:428","0:738","0:434","0:435","0:441","0:432","0:444","0:421","0:288","0:430"]}}},"b:2:2552-0:571:1660":{"id":"b:2:2552-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:745":{"id":"0:745","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,9],"end":[195,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/path_segments.rs","begin":[65,0],"end":[70,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:2921:2444","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:261:587"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:360:1902":{"id":"0:360:1902","crate_id":0,"name":"has_authority","span":{"filename":"src/lib.rs","begin":[871,4],"end":[874,5]},"visibility":"public","docs":"Return whether the URL has an 'authority',\nwhich can contain a username, password, host, and port number.\n\nURLs that do *not* are either path-only like `unix:/run/foo.socket`\nor cannot-be-a-base like `data:text/plain,Stuff`.\n\nSee also the `authority` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.has_authority());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.has_authority());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(!url.has_authority());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:724:422":{"id":"0:724:422","crate_id":0,"name":"clone","span":{"filename":"src/slicing.rs","begin":[103,15],"end":[103,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:499:1656":{"id":"a:2:2683:220-0:499:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2552-0:727:1669":{"id":"b:2:2552-0:727:1669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:534:1611":{"id":"0:534:1611","crate_id":0,"name":"0","span":{"filename":"src/origin.rs","begin":[55,11],"end":[55,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:369:1683":{"id":"0:369:1683","crate_id":0,"name":"port","span":{"filename":"src/lib.rs","begin":[1177,4],"end":[1179,5]},"visibility":"public","docs":"Return the port number for this URL, if any.\n\nNote that default port numbers are never reflected by the serialization,\nuse the `port_or_known_default()` method if you want a default port number returned.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.port(), None);\n\nlet url = Url::parse(\"https://example.com:443/\")?;\nassert_eq!(url.port(), None);\n\nlet url = Url::parse(\"ssh://example.com:22\")?;\nassert_eq!(url.port(), Some(22));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:702:3027":{"id":"0:702:3027","crate_id":0,"name":"BeforeHost","span":{"filename":"src/slicing.rs","begin":[111,4],"end":[111,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:8252:3703-0:740:1688":{"id":"a:2:8252:3703-0:740:1688","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12072:35216":{"id":"2:12072:35216","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11715:3490","str::split":"2:12063:1801","prim@char":"1:11917:418","`DoubleEndedIterator`":"2:7243:121","str::rsplit_terminator":"2:12075:35217"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43372:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:35225":{"id":"2:12108:35225","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:8899":{"id":"2:12136:8899","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:431:696":{"id":"0:431:696","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[2637,4],"end":[2639,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:35227":{"id":"2:12122:35227","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:3490"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:4138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:612":{"id":"0:79:612","crate_id":0,"name":"eq","span":{"filename":"src/host.rs","begin":[188,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:605:1661":{"id":"b:2:2547-0:605:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2700:228-0:605:1661":{"id":"a:2:2700:228-0:605:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3319-0:751:2129":{"id":"b:2:3319-0:751:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2740:3232-0:605:1661":{"id":"a:2:2740:3232-0:605:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5686-0:499:1656":{"id":"b:5:5686-0:499:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5684:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:5688:1460"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:421":{"id":"0:421","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2610,0],"end":[2617,1]},"visibility":"default","docs":"Parse a string as an URL, without a base URL or encoding override.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:11675:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:422:127","0:423:2378"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12102:3097":{"id":"2:12102:3097","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[170,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:75:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:576:2714":{"id":"0:576:2714","crate_id":0,"name":"InvalidPort","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2740:3232-0:727:1669":{"id":"a:2:2740:3232-0:727:1669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:286:186":{"id":"0:286:186","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[27,4],"end":[27,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"0:106:2685":{"id":"0:106:2685","crate_id":0,"name":"unicode_serialization","span":{"filename":"src/origin.rs","begin":[89,4],"end":[107,5]},"visibility":"public","docs":"<https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:598":{"id":"0:598","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:599:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:136:696":{"id":"0:136:696","crate_id":0,"name":"from","span":{"filename":"src/parser.rs","begin":[91,4],"end":[93,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_",{"resolved_path":{"name":"::idna::Errors","id":"22:170:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45-0:689:1665":{"id":"0:45-0:689:1665","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::slicing::Position","name":"Position","id":"0:689:1665","glob":false}}},"b:2:3319-0:680:1663":{"id":"b:2:3319-0:680:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2247-0:499:1656":{"id":"b:2:2247-0:499:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2249:1648"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:518":{"id":"0:518","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,23],"end":[41,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5686-0:571:1660":{"id":"b:5:5686-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5684:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5688:1460"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2547-0:751:2129":{"id":"b:2:2547-0:751:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:506:1611":{"id":"0:506:1611","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[52,9],"end":[52,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Ipv4Addr","id":"2:41185:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"5:5426:4319":{"id":"5:5426:4319","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:571:1660":{"id":"a:2:2683:220-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:550:422":{"id":"0:550:422","crate_id":0,"name":"clone","span":{"filename":"src/origin.rs","begin":[52,30],"end":[52,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:8900":{"id":"2:12137:8900","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:635:422":{"id":"0:635:422","crate_id":0,"name":"clone","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8252:3703-0:531:1659":{"id":"a:2:8252:3703-0:531:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:572:2208":{"id":"0:572:2208","crate_id":0,"name":"EmptyHost","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:379:1808":{"id":"0:379:1808","crate_id":0,"name":"query","span":{"filename":"src/lib.rs","begin":[1367,4],"end":[1379,5]},"visibility":"public","docs":"Return this URL‚Äôs query string, if any, as a percent-encoded ASCII string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\nfn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/products?page=2\")?;\nlet query = url.query();\nassert_eq!(query, Some(\"page=2\"));\n\nlet url = Url::parse(\"https://example.com/products\")?;\nlet query = url.query();\nassert!(query.is_none());\n\nlet url = Url::parse(\"https://example.com/?country=espa√±ol\")?;\nlet query = url.query();\nassert_eq!(query, Some(\"country=espa%C3%B1ol\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-0:680:1663":{"id":"0:44-0:680:1663","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[155,0],"end":[155,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::path_segments::PathSegmentsMut","name":"PathSegmentsMut","id":"0:680:1663","glob":false}}},"0:571:1660":{"id":"0:571:1660","crate_id":0,"name":"ParseError","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"public","docs":"Errors that can occur during parsing.\n\nThis may be extended in the future so exhaustive matching is\ndiscouraged with an unused variant.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:572:2208","0:574:2712","0:576:2714","0:578:2625","0:580:2576","0:582:2214","0:584:2719","0:586:2721","0:588:2206","0:590:2724"],"impls":["a:2:8252:3703-0:571:1660","a:2:8253:3702-0:571:1660","a:2:2683:220-0:571:1660","a:2:2740:3232-0:571:1660","a:2:2700:228-0:571:1660","b:2:2609-0:571:1660","b:2:2247-0:571:1660","b:2:3319-0:571:1660","b:2:2552-0:571:1660","b:2:2250-0:571:1660","b:2:2541-0:571:1660","b:2:2547-0:571:1660","b:2:2537-0:571:1660","b:5:5686-0:571:1660","b:5:677-0:571:1660","0:601","0:600","0:595","0:592","0:569","0:596","0:134","0:593","0:135","0:598"]}}},"0:616:2739":{"id":"0:616:2739","crate_id":0,"name":"FileWithHostAndWindowsDrive","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:377:1662":{"id":"0:377:1662","crate_id":0,"name":"path_segments","span":{"filename":"src/lib.rs","begin":[1338,4],"end":[1341,5]},"visibility":"public","docs":"Unless this URL is cannot-be-a-base,\nreturn an iterator of '/' slash-separated path segments,\neach as a percent-encoded ASCII string.\n\nReturn `None` for cannot-be-a-base URLs.\n\nWhen `Some` is returned, the iterator always contains at least one string\n(which may be empty).\n\n# Examples\n\n```\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet url = Url::parse(\"https://example.com/foo/bar\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"foo\"));\nassert_eq!(path_segments.next(), Some(\"bar\"));\nassert_eq!(path_segments.next(), None);\n\nlet url = Url::parse(\"https://example.com\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"\"));\nassert_eq!(path_segments.next(), None);\n\nlet url = Url::parse(\"data:text/plain,HelloWorld\")?;\nassert!(url.path_segments().is_none());\n\nlet url = Url::parse(\"https://example.com/countries/vi·ªát nam\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"countries\"));\nassert_eq!(path_segments.next(), Some(\"vi%E1%BB%87t%20nam\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"str::Split","id":"2:43322:2042","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:424":{"id":"0:424","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2619,0],"end":[2625,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:426:128","0:427:1482"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:368:1962":{"id":"0:368:1962","crate_id":0,"name":"domain","span":{"filename":"src/lib.rs","begin":[1145,4],"end":[1150,5]},"visibility":"public","docs":"If this URL has a host and it is a domain name (not an IP address), return it.\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/\")?;\nassert_eq!(url.domain(), None);\n\nlet url = Url::parse(\"mailto:rms@example.net\")?;\nassert_eq!(url.domain(), None);\n\nlet url = Url::parse(\"https://example.com/\")?;\nassert_eq!(url.domain(), Some(\"example.com\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:407:2247":{"id":"0:407:2247","crate_id":0,"name":"set_password","span":{"filename":"src/lib.rs","begin":[2088,4],"end":[2144,5]},"visibility":"public","docs":"Change this URL‚Äôs password.\n\nIf this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rmz@example.com\")?;\nlet result = url.set_password(Some(\"secret_password\"));\nassert!(result.is_err());\n\nlet mut url = Url::parse(\"ftp://user1:secret1@example.com\")?;\nlet result = url.set_password(Some(\"secret_password\"));\nassert_eq!(url.password(), Some(\"secret_password\"));\n\nlet mut url = Url::parse(\"ftp://user2:@example.com\")?;\nlet result = url.set_password(Some(\"secret2\"));\nassert!(result.is_ok());\nassert_eq!(url.password(), Some(\"secret2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["password",{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336:1691":{"id":"0:336:1691","crate_id":0,"name":"encoding_override","span":{"filename":"src/lib.rs","begin":[211,4],"end":[214,5]},"visibility":"public","docs":"Override the character encoding of query strings.\nThis is a legacy concept only relevant for HTML.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new",{"resolved_path":{"name":"EncodingOverride","id":"20:89:1666","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:593":{"id":"0:593","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:594:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2247-0:740:1688":{"id":"b:2:2247-0:740:1688","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2249:1648"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:677-0:689:1665":{"id":"b:5:677-0:689:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:3254","5:680:2096","5:681:3947"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[90,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"22:170:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2683:220-0:605:1661":{"id":"a:2:2683:220-0:605:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12022:2064":{"id":"2:12022:2064","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11282:2439"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:547:731":{"id":"0:547:731","crate_id":0,"name":"hash","span":{"filename":"src/origin.rs","begin":[52,24],"end":[52,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:9373:145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12125:35228":{"id":"2:12125:35228","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:3490"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:680:1663":{"id":"b:2:2537-0:680:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2540:1829"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70:2217":{"id":"0:70:2217","crate_id":0,"name":"parse_opaque","span":{"filename":"src/host.rs","begin":[125,4],"end":[162,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:510":{"id":"0:510","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:512:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12119:27381":{"id":"2:12119:27381","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:3490"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:4138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:535:2656":{"id":"0:535:2656","crate_id":0,"name":"Tuple","span":{"filename":"src/origin.rs","begin":[58,4],"end":[58,36]},"visibility":"default","docs":"Consists of the URL's scheme, host and port","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:537:1611","0:538:1612","0:539:1613"]},"discriminant":null}}},"0:437":{"id":"0:437","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2673,0],"end":[2678,1]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"2:2347:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:438:429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:358:1788":{"id":"0:358:1788","crate_id":0,"name":"scheme","span":{"filename":"src/lib.rs","begin":[818,4],"end":[820,5]},"visibility":"public","docs":"Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert_eq!(url.scheme(), \"file\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:32727":{"id":"2:12041:32727","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12042:32746"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43596:4146","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:568:670":{"id":"0:568:670","crate_id":0,"name":"fmt","span":{"filename":"src/origin.rs","begin":[111,37],"end":[111,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372:2001":{"id":"0:372:2001","crate_id":0,"name":"socket_addrs","span":{"filename":"src/lib.rs","begin":[1240,4],"end":[1266,5]},"visibility":"public","docs":"Resolve a URL‚Äôs host and port number to `SocketAddr`.\n\nIf the URL has the default port number of a scheme that is unknown to this library,\n`default_port_number` provides an opportunity to provide the actual port number.\nIn non-example code this should be implemented either simply as `|| None`,\nor by matching on the URL‚Äôs `.scheme()`.\n\nIf the host is a domain, it is resolved using the standard library‚Äôs DNS support.\n\n# Examples\n\n```no_run\nlet url = url::Url::parse(\"https://example.net/\").unwrap();\nlet addrs = url.socket_addrs(|| None).unwrap();\nstd::net::TcpStream::connect(&*addrs)\n# ;\n```\n\n```\n/// With application-specific known default port numbers\nfn socket_addrs(url: url::Url) -> std::io::Result<Vec<std::net::SocketAddr>> {\n    url.socket_addrs(|| match url.scheme() {\n        \"socks5\" | \"socks5h\" => Some(1080),\n        _ => None,\n    })\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["default_port_number",{"impl_trait":[{"trait_bound":{"trait":{"name":"Fn","id":"2:2925:1693","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2890:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6717:244","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddr","id":"2:41304:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl Fn() -> Option<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:2925:1693","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:2619":{"id":"2:12046:2619","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:3490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340:1719":{"id":"0:340:1719","crate_id":0,"name":"parse","span":{"filename":"src/lib.rs","begin":[279,4],"end":[281,5]},"visibility":"public","docs":"Parse an absolute URL from a string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.net\")?;\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an absolute URL from the given string,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:363:1933":{"id":"0:363:1933","crate_id":0,"name":"username","span":{"filename":"src/lib.rs","begin":[969,4],"end":[976,5]},"visibility":"public","docs":"Return the username for this URL (typically the empty string)\nas a percent-encoded ASCII string.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.username(), \"rms\");\n\nlet url = Url::parse(\"ftp://:secret123@example.com\")?;\nassert_eq!(url.username(), \"\");\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.username(), \"\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:751:2129":{"id":"b:2:2552-0:751:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5440:35883":{"id":"5:5440:35883","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12133:8896":{"id":"2:12133:8896","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12019:35211":{"id":"2:12019:35211","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12017:35210"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:614:2737":{"id":"0:614:2737","crate_id":0,"name":"ExpectedFileDoubleSlash","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:524":{"id":"0:524","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,32],"end":[41,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"2:2353:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","gt","ge","le"],"trait":{"name":"PartialOrd","id":"2:2353:189","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:526:1039"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:376:1044":{"id":"0:376:1044","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[1291,4],"end":[1298,5]},"visibility":"public","docs":"Return the path for this URL, as a percent-encoded ASCII string.\nFor cannot-be-a-base URLs, this is an arbitrary string that doesn‚Äôt start with '/'.\nFor other URLs, this starts with a '/' slash\nand continues with slash-separated path segments.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/api/versions?page=2\")?;\nassert_eq!(url.path(), \"/api/versions\");\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.path(), \"/\");\n\nlet url = Url::parse(\"https://example.com/countries/vi·ªát nam\")?;\nassert_eq!(url.path(), \"/countries/vi%E1%BB%87t%20nam\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:727:1669":{"id":"a:2:2700:228-0:727:1669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:556":{"id":"0:556","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,9],"end":[111,11]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2694:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2552-0:680:1663":{"id":"b:2:2552-0:680:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3319-0:553:1658":{"id":"b:2:3319-0:553:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:386:2092":{"id":"0:386:2092","crate_id":0,"name":"set_fragment","span":{"filename":"src/lib.rs","begin":[1479,4],"end":[1494,5]},"visibility":"public","docs":"Change this URL‚Äôs fragment identifier.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com/data.csv\")?;\nassert_eq!(url.as_str(), \"https://example.com/data.csv\");\nurl.set_fragment(Some(\"cell=4,1-6,2\"));\nassert_eq!(url.as_str(), \"https://example.com/data.csv#cell=4,1-6,2\");\nassert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n\nurl.set_fragment(None);\nassert_eq!(url.as_str(), \"https://example.com/data.csv\");\nassert!(url.fragment().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fragment",{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:3702-0:727:1669":{"id":"a:2:8253:3702-0:727:1669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2740:3232-0:553:1658":{"id":"a:2:2740:3232-0:553:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:381:1810":{"id":"0:381:1810","crate_id":0,"name":"fragment","span":{"filename":"src/lib.rs","begin":[1442,4],"end":[1447,5]},"visibility":"public","docs":"Return this URL‚Äôs fragment identifier, if any.\n\nA fragment is the part of the URL after the `#` symbol.\nThe fragment is optional and, if present, contains a fragment identifier\nthat identifies a secondary resource, such as a section heading\nof a document.\n\nIn HTML, the fragment identifier is usually the id attribute of a an element\nthat is scrolled to on load. Browsers typically will not send the fragment portion\nof a URL to the server.\n\n**Note:** the parser did *not* percent-encode this component,\nbut the input may have been percent-encoded already.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/data.csv#row=4\")?;\n\nassert_eq!(url.fragment(), Some(\"row=4\"));\n\nlet url = Url::parse(\"https://example.com/data.csv#cell=4,1-6,2\")?;\n\nassert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:626:2749":{"id":"0:626:2749","crate_id":0,"name":"UnencodedAtSign","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:681:3947":{"id":"5:681:3947","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12128:35229":{"id":"2:12128:35229","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:3490"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:4138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:624:2747":{"id":"0:624:2747","crate_id":0,"name":"TabOrNewlineIgnored","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:559":{"id":"0:559","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,13],"end":[111,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2693:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3319-0:531:1659":{"id":"b:2:3319-0:531:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2541-0:571:1660":{"id":"b:2:2541-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3319-0:727:1669":{"id":"b:2:3319-0:727:1669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2250-0:751:2129":{"id":"b:2:2250-0:751:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2252:14038"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:43-0:605:1661":{"id":"0:43-0:605:1661","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[154,36],"end":[154,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::parser::SyntaxViolation","name":"SyntaxViolation","id":"0:605:1661","glob":false}}},"b:2:2547-0:680:1663":{"id":"b:2:2547-0:680:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12042:32746":{"id":"2:12042:32746","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12041:32727"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43605:4144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:546":{"id":"0:546","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,24],"end":[52,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:9365:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:547:731"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:365:1942":{"id":"0:365:1942","crate_id":0,"name":"has_host","span":{"filename":"src/lib.rs","begin":[1037,4],"end":[1039,5]},"visibility":"public","docs":"Equivalent to `url.host().is_some()`.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.has_host());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.has_host());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(!url.has_host());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:367:1636":{"id":"0:367:1636","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[1113,4],"end":[1120,5]},"visibility":"public","docs":"Return the parsed representation of the host for this URL.\nNon-ASCII domain labels are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\n\nCannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\ndon‚Äôt have a host.\n\nSee also the `host_str` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/index.html\")?;\nassert!(url.host().is_some());\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.host().is_some());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(url.host().is_none());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(url.host().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:393:1746":{"id":"0:393:1746","crate_id":0,"name":"query_pairs_mut","span":{"filename":"src/lib.rs","begin":[1595,4],"end":[1613,5]},"visibility":"public","docs":"Manipulate this URL‚Äôs query string, viewed as a sequence of name/value pairs\nin `application/x-www-form-urlencoded` syntax.\n\nThe return value has a method-chaining API:\n\n```rust\n# use url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net?lang=fr#nav\")?;\nassert_eq!(url.query(), Some(\"lang=fr\"));\n\nurl.query_pairs_mut().append_pair(\"foo\", \"bar\");\nassert_eq!(url.query(), Some(\"lang=fr&foo=bar\"));\nassert_eq!(url.as_str(), \"https://example.net/?lang=fr&foo=bar#nav\");\n\nurl.query_pairs_mut()\n    .clear()\n    .append_pair(\"foo\", \"bar & baz\")\n    .append_pair(\"saisons\", \"\\u{00C9}t\\u{00E9}+hiver\");\nassert_eq!(url.query(), Some(\"foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver\"));\nassert_eq!(url.as_str(),\n           \"https://example.net/?foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver#nav\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nNote: `url.query_pairs_mut().clear();` is equivalent to `url.set_query(Some(\"\"))`,\nnot `url.set_query(None)`.\n\nThe state of `Url` is unspecified if this return value is leaked without being dropped.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"form_urlencoded::Serializer","id":"20:44:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:427:1482":{"id":"0:427:1482","crate_id":0,"name":"try_from","span":{"filename":"src/lib.rs","begin":[2622,4],"end":[2624,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:2521:237","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12045:32762":{"id":"2:12045:32762","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43614:4143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:35219":{"id":"2:12087:35219","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:4138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:588:2206":{"id":"0:588:2206","crate_id":0,"name":"SetHostOnCannotBeABaseUrl","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:543":{"id":"0:543","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,20],"end":[52,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2694:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2541-0:727:1669":{"id":"b:2:2541-0:727:1669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:738":{"id":"0:738","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[169,9],"end":[169,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:739:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:584:2719":{"id":"0:584:2719","crate_id":0,"name":"RelativeUrlWithoutBase","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:8253:3702-0:605:1661":{"id":"a:2:8253:3702-0:605:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12036:1795":{"id":"2:12036:1795","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12037:27366"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:571:1660":{"id":"b:2:2547-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:570:670":{"id":"0:570:670","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:544":{"id":"0:544","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,20],"end":[52,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:612:2735":{"id":"0:612:2735","crate_id":0,"name":"ExpectedDoubleSlash","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:370:1980":{"id":"0:370:1980","crate_id":0,"name":"port_or_known_default","span":{"filename":"src/lib.rs","begin":[1209,4],"end":[1211,5]},"visibility":"public","docs":"Return the port number for this URL, or the default port number if it is known.\n\nThis method only knows the default port number\nof the `http`, `https`, `ws`, `wss` and `ftp` schemes.\n\nFor URLs in these schemes, this method always returns `Some(_)`.\nFor other schemes, it is the same as `Url::port()`.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"foo://example.com\")?;\nassert_eq!(url.port_or_known_default(), None);\n\nlet url = Url::parse(\"foo://example.com:1456\")?;\nassert_eq!(url.port_or_known_default(), Some(1456));\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.port_or_known_default(), Some(443));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:347:1772":{"id":"0:347:1772","crate_id":0,"name":"join","span":{"filename":"src/lib.rs","begin":[386,4],"end":[388,5]},"visibility":"public","docs":"Parse a string as an URL, with this URL as the base URL.\n\nThe inverse of this is [`make_relative`].\n\nNote: a trailing slash is significant.\nWithout it, the last path component is considered to be a ‚Äúfile‚Äù name\nto be removed to get at the ‚Äúdirectory‚Äù that is used as the base:\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet base = Url::parse(\"https://example.net/a/b.html\")?;\nlet url = base.join(\"c.png\")?;\nassert_eq!(url.as_str(), \"https://example.net/a/c.png\");  // Not /a/b.html/c.png\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = base.join(\"c.png\")?;\nassert_eq!(url.as_str(), \"https://example.net/a/b/c.png\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an URL from the given string\nwith this URL as the base URL, a [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html\n[`make_relative`]: #method.make_relative","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:689:1665":{"id":"a:2:2683:220-0:689:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:539:1613":{"id":"0:539:1613","crate_id":0,"name":"2","span":{"filename":"src/origin.rs","begin":[58,32],"end":[58,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u16"}}},"0:411:2297":{"id":"0:411:2297","crate_id":0,"name":"set_scheme","span":{"filename":"src/lib.rs","begin":[2344,4],"end":[2393,5]},"visibility":"public","docs":"Change this URL‚Äôs scheme.\n\nDo nothing and return `Err` under the following circumstances:\n\n* If the new scheme is not in `[a-zA-Z][a-zA-Z0-9+.-]+`\n* If this URL is cannot-be-a-base and the new scheme is one of\n  `http`, `https`, `ws`, `wss` or `ftp`\n* If either the old or new scheme is `http`, `https`, `ws`,\n  `wss` or `ftp` and the other is not one of these\n* If the new scheme is `file` and this URL includes credentials\n  or has a non-null port\n* If this URL's scheme is `file` and its host is empty or null\n\nSee also [the URL specification's section on legal scheme state\noverrides](https://url.spec.whatwg.org/#scheme-state).\n\n# Examples\n\nChange the URL‚Äôs scheme from `https` to `http`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_scheme(\"http\");\nassert_eq!(url.as_str(), \"http://example.net/\");\nassert!(result.is_ok());\n# Ok(())\n# }\n# run().unwrap();\n```\nChange the URL‚Äôs scheme from `foo` to `bar`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_scheme(\"bar\");\nassert_eq!(url.as_str(), \"bar://example.net\");\nassert!(result.is_ok());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL‚Äôs scheme from `https` to `fo√µ`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_scheme(\"fo√µ\");\nassert_eq!(url.as_str(), \"https://example.net/\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL‚Äôs scheme from `mailto` (cannot-be-a-base) to `https`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\nlet result = url.set_scheme(\"https\");\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\nCannot change the URL‚Äôs scheme from `foo` to `https`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_scheme(\"https\");\nassert_eq!(url.as_str(), \"foo://example.net\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\nCannot change the URL‚Äôs scheme from `http` to `foo`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"http://example.net\")?;\nlet result = url.set_scheme(\"foo\");\nassert_eq!(url.as_str(), \"http://example.net/\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy :: result_unit_err, clippy :: suspicious_operation_groupings)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["scheme",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2551:1483":{"id":"2:2551:1483","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:537:1611":{"id":"0:537:1611","crate_id":0,"name":"0","span":{"filename":"src/origin.rs","begin":[58,10],"end":[58,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:689:1665":{"id":"0:689:1665","crate_id":0,"name":"Position","span":{"filename":"src/slicing.rs","begin":[104,0],"end":[121,1]},"visibility":"public","docs":"Indicates a position within a URL based on its components.\n\nA range of positions can be used for slicing `Url`:\n\n```rust\n# use url::{Url, Position};\n# fn something(some_url: Url) {\nlet serialization: &str = &some_url[..];\nlet serialization_without_fragment: &str = &some_url[..Position::AfterQuery];\nlet authority: &str = &some_url[Position::BeforeUsername..Position::AfterPort];\nlet data_url_payload: &str = &some_url[Position::BeforePath..Position::AfterQuery];\nlet scheme_relative: &str = &some_url[Position::BeforeUsername..];\n# }\n```\n\nIn a pseudo-grammar (where `[`‚Ä¶`]?` makes a sub-sequence optional),\nURL components and delimiters that separate them are:\n\n```notrust\nurl =\n    scheme \":\"\n    [ \"//\" [ username [ \":\" password ]? \"@\" ]? host [ \":\" port ]? ]?\n    path [ \"?\" query ]? [ \"#\" fragment ]?\n```\n\nWhen a given component is not present,\nits \"before\" and \"after\" position are the same\n(so that `&some_url[BeforeFoo..AfterFoo]` is the empty string)\nand component ordering is preserved\n(so that a missing query \"is between\" a path and a fragment).\n\nThe end of a component and the start of the next are either the same or separate\nby a delimiter.\n(Not that the initial `/` of a path is considered part of the path here, not a delimiter.)\nFor example, `&url[..BeforeFragment]` would include a `#` delimiter (if present in `url`),\nso `&url[..AfterQuery]` might be desired instead.\n\n`BeforeScheme` and `AfterFragment` are always the start and end of the entire URL,\nso `&url[BeforeScheme..X]` is the same as `&url[..X]`\nand `&url[X..AfterFragment]` is the same as `&url[X..]`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:690:3021","0:692:3022","0:694:3023","0:696:3024","0:698:3025","0:700:3026","0:702:3027","0:704:3028","0:706:3029","0:708:3030","0:710:3031","0:712:3032","0:714:3033","0:716:3034","0:718:3035","0:720:3036"],"impls":["a:2:8252:3703-0:689:1665","a:2:8253:3702-0:689:1665","a:2:2683:220-0:689:1665","a:2:2740:3232-0:689:1665","a:2:2700:228-0:689:1665","b:2:2247-0:689:1665","b:2:3319-0:689:1665","b:2:2552-0:689:1665","b:2:2250-0:689:1665","b:2:2541-0:689:1665","b:2:2547-0:689:1665","b:2:2537-0:689:1665","b:5:677-0:689:1665","0:723","0:722","0:725"]}}},"5:5444:2782":{"id":"5:5444:2782","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12137:8900"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:551":{"id":"0:551","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,37],"end":[52,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:552:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2700:228-0:531:1659":{"id":"a:2:2700:228-0:531:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:361:1919":{"id":"0:361:1919","crate_id":0,"name":"authority","span":{"filename":"src/lib.rs","begin":[908,4],"end":[915,5]},"visibility":"public","docs":"Return the authority of this URL as an ASCII string.\n\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\nIPv6 addresses are given between `[` and `]` brackets.\nPorts are omitted if they match the well known port of a special URL.\n\nUsername and password are percent-encoded.\n\nSee also the `has_authority` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert_eq!(url.authority(), \"\");\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert_eq!(url.authority(), \"\");\nlet url = Url::parse(\"https://user:password@example.com/tmp/foo\")?;\nassert_eq!(url.authority(), \"user:password@example.com\");\nlet url = Url::parse(\"irc://√†lex.—Ä—Ñ.example.com:6667/foo\")?;\nassert_eq!(url.authority(), \"%C3%A0lex.%D1%80%D1%84.example.com:6667\");\nlet url = Url::parse(\"http://√†lex.—Ä—Ñ.example.com:80/foo\")?;\nassert_eq!(url.authority(), \"xn--lex-8ka.xn--p1ai.example.com\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:740:1688":{"id":"0:740:1688","crate_id":0,"name":"ParseOptions","span":{"filename":"src/lib.rs","begin":[196,0],"end":[200,1]},"visibility":"public","docs":"Full configuration for the URL parser.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:333","a:2:8252:3703-0:740:1688","a:2:8253:3702-0:740:1688","a:2:2683:220-0:740:1688","a:2:2740:3232-0:740:1688","a:2:2700:228-0:740:1688","b:2:2247-0:740:1688","b:2:3319-0:740:1688","b:2:2552-0:740:1688","b:2:2250-0:740:1688","b:2:2541-0:740:1688","b:2:2547-0:740:1688","b:2:2537-0:740:1688","b:5:677-0:740:1688","0:747","0:745"]}}},"b:2:2250-0:553:1658":{"id":"b:2:2250-0:553:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:14038"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12113:2849":{"id":"2:12113:2849","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:3490"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:605:1661":{"id":"b:2:2541-0:605:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:566:422":{"id":"0:566:422","crate_id":0,"name":"clone","span":{"filename":"src/origin.rs","begin":[111,30],"end":[111,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:553:1658":{"id":"b:2:2547-0:553:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:280:186":{"id":"0:280:186","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[13,4],"end":[13,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"0:562":{"id":"0:562","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,24],"end":[111,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:9365:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:563:731"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:285":{"id":"0:285","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[26,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:2980:2982","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeTo","id":"2:39198:202","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:286:186","0:287:772"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2250-0:689:1665":{"id":"b:2:2250-0:689:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:14038"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2609-0:571:1660":{"id":"b:2:2609-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3373:8776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2611:4132"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"0:474":{"id":"0:474","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3019,0],"end":[3025,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:2921:2444","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:476:587"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2552-0:553:1658":{"id":"b:2:2552-0:553:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12069:2607":{"id":"2:12069:2607","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11715:3490","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::split":"2:12063:1801"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43340:4163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:4138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:3702-0:553:1658":{"id":"a:2:8253:3702-0:553:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2541-0:553:1658":{"id":"b:2:2541-0:553:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[33,0],"end":[38,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:2980:2982","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:39154:198","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:186","0:290:772"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2247-0:689:1665":{"id":"b:2:2247-0:689:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:1648"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:586:2721":{"id":"0:586:2721","crate_id":0,"name":"RelativeUrlWithCannotBeABaseBase","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12110:2760":{"id":"2:12110:2760","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:3490"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11740:4137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:357:1657":{"id":"0:357:1657","crate_id":0,"name":"origin","span":{"filename":"src/lib.rs","begin":[798,4],"end":[800,5]},"visibility":"public","docs":"Return the origin of this URL (<https://url.spec.whatwg.org/#origin>)\n\nNote: this returns an opaque origin for `file:` URLs, which causes\n`url.origin() != url.origin()`.\n\n# Examples\n\nURL with `ftp` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://example.com/foo\")?;\nassert_eq!(url.origin(),\n           Origin::Tuple(\"ftp\".into(),\n                         Host::Domain(\"example.com\".into()),\n                         21));\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with `blob` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"blob:https://example.com/foo\")?;\nassert_eq!(url.origin(),\n           Origin::Tuple(\"https\".into(),\n                         Host::Domain(\"example.com\".into()),\n                         443));\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with `file` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert!(!url.origin().is_tuple());\n\nlet other_url = Url::parse(\"file:///tmp/foo\")?;\nassert!(url.origin() != other_url.origin());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with other scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"foo:bar\")?;\nassert!(!url.origin().is_tuple());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:740:1688":{"id":"b:2:2250-0:740:1688","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2252:14038"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2552-0:605:1661":{"id":"b:2:2552-0:605:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:526:1039":{"id":"0:526:1039","crate_id":0,"name":"partial_cmp","span":{"filename":"src/host.rs","begin":[41,32],"end":[41,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30798:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:751:2129":{"id":"b:2:2537-0:751:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2540:1829"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:442:731":{"id":"0:442:731","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[2691,4],"end":[2696,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"H"},"bounds":[{"trait_bound":{"trait":{"name":"hash::Hasher","id":"2:9373:145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:740:1688":{"id":"b:2:3319-0:740:1688","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:403:2205":{"id":"0:403:2205","crate_id":0,"name":"set_host","span":{"filename":"src/lib.rs","begin":[1903,4],"end":[1965,5]},"visibility":"public","docs":"Change this URL‚Äôs host.\n\nRemoving the host (calling this with `None`)\nwill also remove any username, password, and port number.\n\n# Examples\n\nChange host:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_host(Some(\"rust-lang.org\"));\nassert!(result.is_ok());\nassert_eq!(url.as_str(), \"https://rust-lang.org/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nRemove host:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_host(None);\nassert!(result.is_ok());\nassert_eq!(url.as_str(), \"foo:/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot remove host for 'special' schemes (e.g. `http`):\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_host(None);\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"https://example.net/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change or remove host for cannot-be-a-base URLs:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\n\nlet result = url.set_host(Some(\"rust-lang.org\"));\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\n\nlet result = url.set_host(None);\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf this URL is cannot-be-a-base or there is an error parsing the given `host`,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:747":{"id":"0:747","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,15],"end":[195,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:749:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5424":{"id":"5:5424","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5425:35880","5:5426:4319","5:5429:35881","5:5432:35882","5:5440:35883","5:5441:1828","5:5442:4245","5:5443:8897","5:5444:2782"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12106:35224":{"id":"2:12106:35224","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:708:3030":{"id":"0:708:3030","crate_id":0,"name":"AfterPort","span":{"filename":"src/slicing.rs","begin":[114,4],"end":[114,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:751:2129":{"id":"0:751:2129","crate_id":0,"name":"UrlQuery","span":{"filename":"src/lib.rs","begin":[2990,0],"end":[2993,1]},"visibility":"public","docs":"Implementation detail of `Url::query_pairs_mut`. Typically not used directly.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:8252:3703-0:751:2129","a:2:8253:3702-0:751:2129","a:2:2683:220-0:751:2129","a:2:2740:3232-0:751:2129","a:2:2700:228-0:751:2129","b:2:2247-0:751:2129","b:2:3319-0:751:2129","b:2:2552-0:751:2129","b:2:2250-0:751:2129","b:2:2541-0:751:2129","b:2:2547-0:751:2129","b:2:2537-0:751:2129","0:469","0:755","0:474"]}}},"2:2543:696":{"id":"2:2543:696","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:509:1611":{"id":"0:509:1611","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[59,9],"end":[59,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Ipv6Addr","id":"2:41202:2557","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:12078:27377":{"id":"2:12078:27377","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:3490","str::rsplitn":"2:12081:27379"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43426:4165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:605:1661":{"id":"b:2:3319-0:605:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:261:587":{"id":"0:261:587","crate_id":0,"name":"drop","span":{"filename":"src/path_segments.rs","begin":[66,4],"end":[69,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:499:1656":{"id":"b:2:2552-0:499:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5686-0:605:1661":{"id":"b:5:5686-0:605:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5684:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5688:1460"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:553:1658":{"id":"0:553:1658","crate_id":0,"name":"OpaqueOrigin","span":{"filename":"src/origin.rs","begin":[112,0],"end":[112,31]},"visibility":"public","docs":"Opaque identifier for URLs that have file or other schemes","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8252:3703-0:553:1658","a:2:8253:3702-0:553:1658","a:2:2683:220-0:553:1658","a:2:2740:3232-0:553:1658","a:2:2700:228-0:553:1658","b:2:2247-0:553:1658","b:2:3319-0:553:1658","b:2:2552-0:553:1658","b:2:2250-0:553:1658","b:2:2541-0:553:1658","b:2:2547-0:553:1658","b:2:2537-0:553:1658","b:5:677-0:553:1658","0:559","0:560","0:562","0:556","0:567","0:557","0:565"]}}},"0:630:612":{"id":"0:630:612","crate_id":0,"name":"eq","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:499:1656":{"id":"b:2:2547-0:499:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:39-0:553:1658":{"id":"0:39-0:553:1658","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[153,24],"end":[153,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::origin::OpaqueOrigin","name":"OpaqueOrigin","id":"0:553:1658","glob":false}}},"0:696:3024":{"id":"0:696:3024","crate_id":0,"name":"AfterUsername","span":{"filename":"src/slicing.rs","begin":[108,4],"end":[108,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:266:2624":{"id":"0:266:2624","crate_id":0,"name":"pop","span":{"filename":"src/path_segments.rs","begin":[140,4],"end":[151,5]},"visibility":"public","docs":"Remove the last segment of this URL‚Äôs path.\n\nIf the path only has one segment, make it empty such that `url.path() == \"/\"`.\n\nReturns `&mut Self` so that method calls can be chained.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290:772":{"id":"0:290:772","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"resolved_path":{"name":"Range","id":"2:39154:198","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8252:3703-0:571:1660":{"id":"a:2:8252:3703-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:706:3029":{"id":"0:706:3029","crate_id":0,"name":"BeforePort","span":{"filename":"src/slicing.rs","begin":[113,4],"end":[113,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:595":{"id":"0:595","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2694:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2683:220-0:531:1659":{"id":"a:2:2683:220-0:531:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:720:3036":{"id":"0:720:3036","crate_id":0,"name":"AfterFragment","span":{"filename":"src/slicing.rs","begin":[120,4],"end":[120,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:513":{"id":"0:513","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,16],"end":[41,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:515:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2740:3232-0:689:1665":{"id":"a:2:2740:3232-0:689:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12013":{"id":"2:12013","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12014:815","2:12015:1796","2:12016:35209","2:12017:35210","2:12019:35211","2:12022:2064","2:12023:35212","2:12024:314","2:12025:27343","2:12026:2862","2:12028:14039","2:12030:14040","2:12032:14041","2:12034:35213","2:12035:35214","2:12036:1795","2:12037:27366","2:12038:1753","2:12039:7858","2:12040:2426","2:12041:32727","2:12042:32746","2:12043:8947","2:12044:35215","2:12045:32762","2:12046:2619","2:12049:1851","2:12052:2211","2:12055:2213","2:12059:1792","2:12063:1801","2:12066:27374","2:12069:2607","2:12072:35216","2:12075:35217","2:12078:27377","2:12081:27379","2:12084:35218","2:12087:35219","2:12090:1843","2:12093:35220","2:12096:35221","2:12099:35222","2:12102:3097","2:12104:35223","2:12106:35224","2:12108:35225","2:12109:35226","2:12110:2760","2:12113:2849","2:12116:2043","2:12119:27381","2:12122:35227","2:12125:35228","2:12128:35229","2:12131:1719","2:12133:8896","2:12134:27247","2:12135:8898","2:12136:8899","2:12137:8900","2:12138:35230","2:12140:8543","2:12141:35231"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2247-0:531:1659":{"id":"b:2:2247-0:531:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:1648"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:592":{"id":"0:592","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2693:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8253:3702-0:680:1663":{"id":"a:2:8253:3702-0:680:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:679:3254":{"id":"5:679:3254","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:578:2625":{"id":"0:578:2625","crate_id":0,"name":"InvalidIpv4Address","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:723":{"id":"0:723","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[103,15],"end":[103,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:724:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:516":{"id":"0:516","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,23],"end":[41,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2694:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:409:2264":{"id":"0:409:2264","crate_id":0,"name":"set_username","span":{"filename":"src/lib.rs","begin":[2182,4],"end":[2231,5]},"visibility":"public","docs":"Change this URL‚Äôs username.\n\nIf this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n# Examples\n\nCannot setup username from mailto(cannot-be-base)\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rmz@example.com\")?;\nlet result = url.set_username(\"user1\");\nassert_eq!(url.as_str(), \"mailto:rmz@example.com\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nSetup username to user1\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"ftp://:secre1@example.com/\")?;\nlet result = url.set_username(\"user1\");\nassert!(result.is_ok());\nassert_eq!(url.username(), \"user1\");\nassert_eq!(url.as_str(), \"ftp://user1:secre1@example.com/\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["username",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8252:3703-0:751:2129":{"id":"a:2:8252:3703-0:751:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12138:35230":{"id":"2:12138:35230","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:35230"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43621:4153","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:439":{"id":"0:439","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2681,0],"end":[2686,1]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","gt","ge","le"],"trait":{"name":"PartialOrd","id":"2:2353:189","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:440:1039"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[75,0],"end":[75,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","source","cause","provide","description"],"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12014:815":{"id":"2:12014:815","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:3702-0:499:1656":{"id":"a:2:8253:3702-0:499:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8253:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2552-0:531:1659":{"id":"b:2:2552-0:531:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12028:14039":{"id":"2:12028:14039","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41355:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:338:1719":{"id":"0:338:1719","crate_id":0,"name":"parse","span":{"filename":"src/lib.rs","begin":[244,4],"end":[253,5]},"visibility":"public","docs":"Parse an URL string with the configuration so far.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2252:14038":{"id":"2:2252:14038","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:527":{"id":"0:527","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,44],"end":[41,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"2:9365:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:9365:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:529:731"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:557":{"id":"0:557","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,9],"end":[111,11]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2537-0:740:1688":{"id":"b:2:2537-0:740:1688","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2540:1829"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12015:1796":{"id":"2:12015:1796","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46-20:89:1666":{"id":"0:46-20:89:1666","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[157,0],"end":[157,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"form_urlencoded::EncodingOverride","name":"EncodingOverride","id":"20:89:1666","glob":false}}},"2:12043:8947":{"id":"2:12043:8947","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43576:4157","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:432":{"id":"0:432","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2643,0],"end":[2659,1]},"visibility":"default","docs":"Debug the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:433:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8253:3702-0:751:2129":{"id":"a:2:8253:3702-0:751:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2537-0:571:1660":{"id":"b:2:2537-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1829"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2250-0:680:1663":{"id":"b:2:2250-0:680:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2252:14038"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:716:3034":{"id":"0:716:3034","crate_id":0,"name":"AfterQuery","span":{"filename":"src/slicing.rs","begin":[118,4],"end":[118,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:726:670":{"id":"0:726:670","crate_id":0,"name":"fmt","span":{"filename":"src/slicing.rs","begin":[103,22],"end":[103,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:433:670":{"id":"0:433:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2645,4],"end":[2658,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12059:1792":{"id":"2:12059:1792","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41355:179","prim@char":"1:11917:418","self::pattern":"2:11715:3490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:4138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:552:670":{"id":"0:552:670","crate_id":0,"name":"fmt","span":{"filename":"src/origin.rs","begin":[52,37],"end":[52,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:435":{"id":"0:435","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2665,0],"end":[2670,1]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:436:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[139,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:139:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:268:2250":{"id":"0:268:2250","crate_id":0,"name":"extend","span":{"filename":"src/path_segments.rs","begin":[215,4],"end":[245,5]},"visibility":"public","docs":"Append each segment from the given iterator at the end of this URL‚Äôs path.\n\nEach segment is percent-encoded like in `Url::parse` or `Url::join`,\nexcept that `%` and `/` characters are also encoded (to `%25` and `%2F`).\nThis is unlike `Url::parse` where `%` is left as-is in case some of the input\nis already percent-encoded, and `/` denotes a path segment separator.)\n\nNote that, in addition to slashes between new segments,\nthis always adds a slash between the existing path and the new segments\n*except* if the existing path is `\"/\"`.\nIf the previous last segment was empty (if the path had a trailing slash)\nthe path after `.extend()` will contain two consecutive slashes.\nIf that is undesired, call `.pop_if_empty()` first.\n\nTo obtain a behavior similar to `Url::join`, call `.pop()` unconditionally first.\n\nReturns `&mut Self` so that method calls can be chained.\n\nExample:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/\")?;\nlet org = \"servo\";\nlet repo = \"rust-url\";\nlet issue_number = \"188\";\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .extend(&[org, repo, \"issues\", issue_number]);\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url/issues/188\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nIn order to make sure that parsing the serialization of an URL gives the same URL,\na segment is ignored if it is `\".\"` or `\"..\"`:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/servo\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .extend(&[\"..\", \"rust-url\", \".\", \"pulls\"]);\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url/pulls\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["segments",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7205:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7205:152","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:281:772":{"id":"0:281:772","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_",{"resolved_path":{"name":"RangeFull","id":"2:39138:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:677-0:531:1659":{"id":"b:5:677-0:531:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:3254","5:680:2096","5:681:3947"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:712:3032":{"id":"0:712:3032","crate_id":0,"name":"AfterPath","span":{"filename":"src/slicing.rs","begin":[116,4],"end":[116,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:341:1740":{"id":"0:341:1740","crate_id":0,"name":"parse_with_params","span":{"filename":"src/lib.rs","begin":[309,4],"end":[323,5]},"visibility":"public","docs":"Parse an absolute URL from a string and add params to its query string.\n\nExisting params are not removed.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse_with_params(\"https://example.net?dont=clobberme\",\n                                 &[(\"lang\", \"rust\"), (\"browser\", \"servo\")])?;\nassert_eq!(\"https://example.net/?dont=clobberme&lang=rust&browser=servo\", url.as_str());\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an absolute URL from the given string,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7205:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7205:152","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:391:2105":{"id":"0:391:2105","crate_id":0,"name":"set_query","span":{"filename":"src/lib.rs","begin":[1533,4],"end":[1561,5]},"visibility":"public","docs":"Change this URL‚Äôs query string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com/products\")?;\nassert_eq!(url.as_str(), \"https://example.com/products\");\n\nurl.set_query(Some(\"page=2\"));\nassert_eq!(url.as_str(), \"https://example.com/products?page=2\");\nassert_eq!(url.query(), Some(\"page=2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["query",{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12066:27374":{"id":"2:12066:27374","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:3490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11538:4145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:521":{"id":"0:521","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,27],"end":[41,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"2:2347:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"2:2347:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:523:429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12081:27379":{"id":"2:12081:27379","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11917:418","str::splitn":"2:12078:27377","self::pattern":"2:11715:3490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43444:4164","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:4138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[73,0],"end":[168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:68:1719","0:70:2217"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:362:1750":{"id":"0:362:1750","crate_id":0,"name":"cannot_be_a_base","span":{"filename":"src/lib.rs","begin":[943,4],"end":[945,5]},"visibility":"public","docs":"Return whether this URL is a cannot-be-a-base URL,\nmeaning that parsing a relative URL string with this URL as the base will return an error.\n\nThis is the case if the scheme and `:` delimiter are not followed by a `/` slash,\nas is typically the case of `data:` and `mailto:` URLs.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(!url.cannot_be_a_base());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.cannot_be_a_base());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(url.cannot_be_a_base());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:2043":{"id":"2:12116:2043","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:3490"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:622:2745":{"id":"0:622:2745","crate_id":0,"name":"PercentDecode","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12134:27247":{"id":"2:12134:27247","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39511:27256","Self::is_ascii":"2:12133:8896"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39511:27256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12052:2211":{"id":"2:12052:2211","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:3490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:4138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2540:1829":{"id":"2:2540:1829","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2514:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:8897":{"id":"5:5443:8897","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12136:8899"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400:2179":{"id":"0:400:2179","crate_id":0,"name":"set_port","span":{"filename":"src/lib.rs","begin":[1770,4],"end":[1780,5]},"visibility":"public","docs":"Change this URL‚Äôs port number.\n\nNote that default port numbers are not reflected in the serialization.\n\nIf this URL is cannot-be-a-base, does not have a host, or has the `file` scheme;\ndo nothing and return `Err`.\n\n# Examples\n\n```\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"ssh://example.net:2048/\")?;\n\nurl.set_port(Some(4096)).map_err(|_| \"cannot be base\")?;\nassert_eq!(url.as_str(), \"ssh://example.net:4096/\");\n\nurl.set_port(None).map_err(|_| \"cannot be base\")?;\nassert_eq!(url.as_str(), \"ssh://example.net/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nKnown default port numbers are not reflected:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://example.org/\")?;\n\nurl.set_port(Some(443)).map_err(|_| \"cannot be base\")?;\nassert!(url.port().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot set port for cannot-be-a-base URLs:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\n\nlet result = url.set_port(Some(80));\nassert!(result.is_err());\n\nlet result = url.set_port(None);\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["port",{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:714:3033":{"id":"0:714:3033","crate_id":0,"name":"BeforeQuery","span":{"filename":"src/slicing.rs","begin":[117,4],"end":[117,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:66:2096":{"id":"0:66:2096","crate_id":0,"name":"to_owned","span":{"filename":"src/host.rs","begin":[64,4],"end":[70,5]},"visibility":"public","docs":"Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[12,0],"end":[17,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:2980:2982","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeFull","id":"2:39138:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:186","0:281:772"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:397:2157":{"id":"0:397:2157","crate_id":0,"name":"path_segments_mut","span":{"filename":"src/lib.rs","begin":[1686,4],"end":[1692,5]},"visibility":"public","docs":"Return an object with methods to manipulate this URL‚Äôs path segments.\n\nReturn `Err(())` if this URL is cannot-be-a-base.","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:512:422":{"id":"0:512:422","crate_id":0,"name":"clone","span":{"filename":"src/host.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:755":{"id":"0:755","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2989,9],"end":[2989,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:757:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:686":{"id":"0:686","crate_id":0,"name":null,"span":{"filename":"src/path_segments.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:688:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:289:186":{"id":"0:289:186","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[34,4],"end":[34,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"5:5442:4245":{"id":"5:5442:4245","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:727:1669":{"id":"b:2:2537-0:727:1669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1829"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:364:1938":{"id":"0:364:1938","crate_id":0,"name":"password","span":{"filename":"src/lib.rs","begin":[1002,4],"end":[1014,5]},"visibility":"public","docs":"Return the password for this URL, if any, as a percent-encoded ASCII string.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms:secret123@example.com\")?;\nassert_eq!(url.password(), Some(\"secret123\"));\n\nlet url = Url::parse(\"ftp://:secret123@example.com\")?;\nassert_eq!(url.password(), Some(\"secret123\"));\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.password(), None);\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.password(), None);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:677-0:571:1660":{"id":"b:5:677-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:3254","5:680:2096","5:681:3947"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12025:27343":{"id":"2:12025:27343","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11934:1504"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:429:670":{"id":"0:429:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2630,4],"end":[2632,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5441:1828":{"id":"5:5441:1828","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:3235","`String`":"5:7280:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:3235","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:4302","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:670":{"id":"0:75:670","crate_id":0,"name":"fmt","span":{"filename":"src/host.rs","begin":[171,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2678":{"id":"0:104:2678","crate_id":0,"name":"is_tuple","span":{"filename":"src/origin.rs","begin":[70,4],"end":[72,5]},"visibility":"public","docs":"Return whether this origin is a (scheme, host, port) tuple\n(as opposed to an opaque origin).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:352:316":{"id":"0:352:316","crate_id":0,"name":"as_str","span":{"filename":"src/lib.rs","begin":[568,4],"end":[570,5]},"visibility":"public","docs":"Return the serialization of this URL.\n\nThis is fast since that serialization is already stored in the `Url` struct.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url_str = \"https://example.net/\";\nlet url = Url::parse(url_str)?;\nassert_eq!(url.as_str(), url_str);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:565":{"id":"0:565","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,30],"end":[111,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:566:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:380:2062":{"id":"0:380:2062","crate_id":0,"name":"query_pairs","span":{"filename":"src/lib.rs","begin":[1406,4],"end":[1408,5]},"visibility":"public","docs":"Parse the URL‚Äôs query string, if any, as `application/x-www-form-urlencoded`\nand return an iterator of (key, value) pairs.\n\n# Examples\n\n```rust\nuse std::borrow::Cow;\n\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/products?page=2&sort=desc\")?;\nlet mut pairs = url.query_pairs();\n\nassert_eq!(pairs.count(), 2);\n\nassert_eq!(pairs.next(), Some((Cow::Borrowed(\"page\"), Cow::Borrowed(\"2\"))));\nassert_eq!(pairs.next(), Some((Cow::Borrowed(\"sort\"), Cow::Borrowed(\"desc\"))));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"form_urlencoded::Parse","id":"20:91:2063","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:3232-0:571:1660":{"id":"a:2:2740:3232-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:569":{"id":"0:569","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:570:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:262":{"id":"0:262","crate_id":0,"name":null,"span":{"filename":"src/path_segments.rs","begin":[72,0],"end":[246,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:264:2783","0:265:2954","0:266:2624","0:267:1805","0:268:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2740:3232-0:740:1688":{"id":"a:2:2740:3232-0:740:1688","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12016:35209":{"id":"2:12016:35209","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:605:1661":{"id":"b:2:2537-0:605:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1829"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:605:1661":{"id":"0:605:1661","crate_id":0,"name":"SyntaxViolation","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"public","docs":"Non-fatal syntax violations that can occur during parsing.\n\nThis may be extended in the future so exhaustive matching is\ndiscouraged with an unused variant.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:606:2729","0:608:2731","0:610:2733","0:612:2735","0:614:2737","0:616:2739","0:618:2741","0:620:2743","0:622:2745","0:624:2747","0:626:2749"],"impls":["0:603","a:2:8252:3703-0:605:1661","a:2:8253:3702-0:605:1661","a:2:2683:220-0:605:1661","a:2:2740:3232-0:605:1661","a:2:2700:228-0:605:1661","b:2:2247-0:605:1661","b:2:3319-0:605:1661","b:2:2552-0:605:1661","b:2:2250-0:605:1661","b:2:2541-0:605:1661","b:2:2547-0:605:1661","b:2:2537-0:605:1661","b:5:5686-0:605:1661","b:5:677-0:605:1661","0:629","0:636","0:634","0:631","0:628","0:138","0:637","0:632"]}}},"0:445:315":{"id":"0:445:315","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[2702,4],"end":[2704,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:574:2712":{"id":"0:574:2712","crate_id":0,"name":"IdnaError","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12075:35217":{"id":"2:12075:35217","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11715:3490","str::split":"2:12063:1801","prim@char":"1:11917:418","str::split_terminator":"2:12072:35216"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43390:4166","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:4138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3321:1496":{"id":"2:3321:1496","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39303:7627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:689:1665":{"id":"b:2:2552-0:689:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2249:1648":{"id":"2:2249:1648","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[61,0],"end":[108,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:102:2650","0:104:2678","0:105:2680","0:106:2685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2247-0:751:2129":{"id":"b:2:2247-0:751:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2249:1648"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:680:2096":{"id":"5:680:2096","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:567":{"id":"0:567","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,37],"end":[111,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:568:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:37-0:499:1656":{"id":"0:37-0:499:1656","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::host::Host","name":"Host","id":"0:499:1656","glob":false}}},"b:2:2247-0:605:1661":{"id":"b:2:2247-0:605:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:1648"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:582:2214":{"id":"0:582:2214","crate_id":0,"name":"InvalidDomainCharacter","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:267:1805":{"id":"0:267:1805","crate_id":0,"name":"push","span":{"filename":"src/path_segments.rs","begin":[158,4],"end":[160,5]},"visibility":"public","docs":"Append the given segment at the end of this URL‚Äôs path.\n\nSee the documentation for `.extend()`.\n\nReturns `&mut Self` so that method calls can be chained.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["segment",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2611:4132":{"id":"2:2611:4132","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3385:8780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:542:612":{"id":"0:542:612","crate_id":0,"name":"eq","span":{"filename":"src/origin.rs","begin":[52,9],"end":[52,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:560":{"id":"0:560","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,13],"end":[111,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:561:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3319-0:689:1665":{"id":"b:2:3319-0:689:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12055:2213":{"id":"2:12055:2213","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41355:179","prim@char":"1:11917:418","self::pattern":"2:11715:3490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:501:1858":{"id":"0:501:1858","crate_id":0,"name":"Domain","span":{"filename":"src/host.rs","begin":[47,4],"end":[47,13]},"visibility":"default","docs":"A DNS domain name, as '.' dot-separated labels.\nNon-ASCII labels are encoded in punycode per IDNA if this is the host of\na special URL, or percent encoded for non-special URLs. Hosts for\nnon-special URLs are also called opaque hosts.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:503:1611"]},"discriminant":null}}},"0:348:1787":{"id":"0:348:1787","crate_id":0,"name":"make_relative","span":{"filename":"src/lib.rs","begin":[431,4],"end":[520,5]},"visibility":"public","docs":"Creates a relative URL if possible, with this URL as the base URL.\n\nThis is the inverse of [`join`].\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet base = Url::parse(\"https://example.net/a/b.html\")?;\nlet url = Url::parse(\"https://example.net/a/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = Url::parse(\"https://example.net/a/b/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = Url::parse(\"https://example.net/a/d/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"../d/c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b.html?c=d\")?;\nlet url = Url::parse(\"https://example.net/a/b.html?e=f\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"?e=f\"));\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf this URL can't be a base for the given URL, `None` is returned.\nThis is for example the case if the scheme, host or port are not the same.\n\n[`join`]: #method.join","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["url",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:2783":{"id":"0:264:2783","crate_id":0,"name":"clear","span":{"filename":"src/path_segments.rs","begin":[92,4],"end":[95,5]},"visibility":"public","docs":"Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.\n\nReturns `&mut Self` so that method calls can be chained.\n\nExample:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .clear().push(\"logout\");\nassert_eq!(url.as_str(), \"https://github.com/logout\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:507:1856":{"id":"0:507:1856","crate_id":0,"name":"Ipv6","span":{"filename":"src/host.rs","begin":[59,4],"end":[59,18]},"visibility":"default","docs":"An IPv6 address.\n`Url::host_str` returns the serialization of that address between `[` and `]` brackets,\nin the format per [RFC 5952 *A Recommendation\nfor IPv6 Address Text Representation*](https://tools.ietf.org/html/rfc5952):\nlowercase hexadecimal with maximal `::` compression.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:509:1611"]},"discriminant":null}}},"0:426:128":{"id":"0:426:128","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[2620,4],"end":[2620,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:2700:228-0:571:1660":{"id":"a:2:2700:228-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2547-0:740:1688":{"id":"b:2:2547-0:740:1688","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:284:772":{"id":"0:284:772","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[21,4],"end":[23,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"resolved_path":{"name":"RangeFrom","id":"2:39178:199","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:422:127":{"id":"0:422:127","crate_id":0,"name":"Err","span":{"filename":"src/lib.rs","begin":[2611,4],"end":[2611,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2552-0:740:1688":{"id":"b:2:2552-0:740:1688","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:680:1663":{"id":"0:680:1663","crate_id":0,"name":"PathSegmentsMut","span":{"filename":"src/path_segments.rs","begin":[37,0],"end":[42,1]},"visibility":"public","docs":"Exposes methods to manipulate the path of an URL that is not cannot-be-base.\n\nThe path always starts with a `/` slash, and is made of slash-separated segments.\nThere is always at least one segment (which may be the empty string).\n\nExamples:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"mailto:me@example.com\")?;\nassert!(url.path_segments_mut().is_err());\n\nlet mut url = Url::parse(\"http://example.net/foo/index.html\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .pop().push(\"img\").push(\"2/100%.png\");\nassert_eq!(url.as_str(), \"http://example.net/foo/img/2%2F100%25.png\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:262","a:2:8252:3703-0:680:1663","a:2:8253:3702-0:680:1663","a:2:2683:220-0:680:1663","a:2:2740:3232-0:680:1663","a:2:2700:228-0:680:1663","b:2:2247-0:680:1663","b:2:3319-0:680:1663","b:2:2552-0:680:1663","b:2:2250-0:680:1663","b:2:2541-0:680:1663","b:2:2547-0:680:1663","b:2:2537-0:680:1663","0:259","0:686"]}}},"0:620:2743":{"id":"0:620:2743","crate_id":0,"name":"NullInFragment","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:704:3028":{"id":"0:704:3028","crate_id":0,"name":"AfterHost","span":{"filename":"src/slicing.rs","begin":[112,4],"end":[112,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2683:220-0:751:2129":{"id":"a:2:2683:220-0:751:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12024:314":{"id":"2:12024:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12025:27343","`u8`":"1:11934:1504"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:636":{"id":"0:636","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2700:228-0:680:1663":{"id":"a:2:2700:228-0:680:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[202,0],"end":[254,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:335:1690","0:336:1691","0:337:1717","0:338:1719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:283:186":{"id":"0:283:186","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[20,4],"end":[20,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"b:2:2547-0:727:1669":{"id":"b:2:2547-0:727:1669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:353:1828":{"id":"0:353:1828","crate_id":0,"name":"into_string","span":{"filename":"src/lib.rs","begin":[592,4],"end":[594,5]},"visibility":"public","docs":"Return the serialization of this URL.\n\nThis consumes the `Url` and takes ownership of the `String` stored in it.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url_str = \"https://example.net/\";\nlet url = Url::parse(url_str)?;\nassert_eq!(String::from(url), url_str);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"2.3.0\", note = \"use Into<String>\")]"],"deprecation":{"since":"2.3.0","note":"use Into<String>"},"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:740:1688":{"id":"b:2:2541-0:740:1688","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:366:1854":{"id":"0:366:1854","crate_id":0,"name":"host_str","span":{"filename":"src/lib.rs","begin":[1074,4],"end":[1080,5]},"visibility":"public","docs":"Return the string representation of the host (domain or IP address) for this URL, if any.\n\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\nIPv6 addresses are given between `[` and `]` brackets.\n\nCannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\ndon‚Äôt have a host.\n\nSee also the `host` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/index.html\")?;\nassert_eq!(url.host_str(), Some(\"127.0.0.1\"));\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.host_str(), Some(\"example.com\"));\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert_eq!(url.host_str(), None);\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert_eq!(url.host_str(), None);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:531:1659":{"id":"b:2:2541-0:531:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:725":{"id":"0:725","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[103,22],"end":[103,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:726:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:42-0:571:1660":{"id":"0:42-0:571:1660","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[154,24],"end":[154,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::parser::ParseError","name":"ParseError","id":"0:571:1660","glob":false}}},"2:12140:8543":{"id":"2:12140:8543","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:8543"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43630:4154","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:7858":{"id":"2:12039:7858","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43298:4149","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:590:2724":{"id":"0:590:2724","crate_id":0,"name":"Overflow","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:561:612":{"id":"0:561:612","crate_id":0,"name":"eq","span":{"filename":"src/origin.rs","begin":[111,13],"end":[111,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:690:3021":{"id":"0:690:3021","crate_id":0,"name":"BeforeScheme","span":{"filename":"src/slicing.rs","begin":[105,4],"end":[105,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2683:220-0:740:1688":{"id":"a:2:2683:220-0:740:1688","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:3319-0:571:1660":{"id":"b:2:3319-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:688:670":{"id":"0:688:670","crate_id":0,"name":"fmt","span":{"filename":"src/path_segments.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:722":{"id":"0:722","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[103,9],"end":[103,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:540":{"id":"0:540","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,9],"end":[52,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2693:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:417:2369":{"id":"0:417:2369","crate_id":0,"name":"to_file_path","span":{"filename":"src/lib.rs","begin":[2578,4],"end":[2591,5]},"visibility":"public","docs":"Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.\n\n**Note:** This does not actually check the URL‚Äôs `scheme`,\nand may give nonsensical results for other schemes.\nIt is the user‚Äôs responsibility to check the URL‚Äôs scheme before calling this.\n\n```\n# use url::Url;\n# let url = Url::parse(\"file:///etc/passwd\").unwrap();\nlet path = url.to_file_path();\n```\n\nReturns `Err` if the host is neither empty nor `\"localhost\"` (except on Windows, where\n`file:` URLs may have a non-local host),\nor if `Path::new_opt()` returns `None`.\n(That is, if the percent-decoded path contains a NUL byte or,\nfor a Windows path, is not UTF-8.)","links":{},"attrs":["#[inline]","#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]","#[allow(clippy :: result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5090:191","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:632":{"id":"0:632","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:610:2733":{"id":"0:610:2733","crate_id":0,"name":"EmbeddedCredentials","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:5:5686-0:727:1669":{"id":"b:5:5686-0:727:1669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5684:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5688:1460"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12017:35210":{"id":"2:12017:35210","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:553:1658":{"id":"b:2:2247-0:553:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:1648"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12131:1719":{"id":"2:12131:1719","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11676:127","`FromStr`":"2:11675:2377"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11675:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11675:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:434":{"id":"0:434","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2662,0],"end":[2662,18]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8253:3702-0:571:1660":{"id":"a:2:8253:3702-0:571:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:629":{"id":"0:629","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:630:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[62,0],"end":[71,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"items":["0:66:2096"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:395:2148":{"id":"0:395:2148","crate_id":0,"name":"set_path","span":{"filename":"src/lib.rs","begin":[1661,4],"end":[1680,5]},"visibility":"public","docs":"Change this URL‚Äôs path.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com\")?;\nurl.set_path(\"api/comments\");\nassert_eq!(url.as_str(), \"https://example.com/api/comments\");\nassert_eq!(url.path(), \"/api/comments\");\n\nlet mut url = Url::parse(\"https://example.com/api\")?;\nurl.set_path(\"data/report.csv\");\nassert_eq!(url.as_str(), \"https://example.com/data/report.csv\");\nassert_eq!(url.path(), \"/data/report.csv\");\n\n// `set_path` percent-encodes the given string if it's not already percent-encoded.\nlet mut url = Url::parse(\"https://example.com\")?;\nurl.set_path(\"api/some comments\");\nassert_eq!(url.as_str(), \"https://example.com/api/some%20comments\");\nassert_eq!(url.path(), \"/api/some%20comments\");\n\n// `set_path` will not double percent-encode the string if it's already percent-encoded.\nlet mut url = Url::parse(\"https://example.com\")?;\nurl.set_path(\"api/some%20comments\");\nassert_eq!(url.as_str(), \"https://example.com/api/some%20comments\");\nassert_eq!(url.path(), \"/api/some%20comments\");\n\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359:1859":{"id":"0:359:1859","crate_id":0,"name":"is_special","span":{"filename":"src/lib.rs","begin":[838,4],"end":[841,5]},"visibility":"public","docs":"Return whether the URL is special (has a special scheme)\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nassert!(Url::parse(\"http:///tmp/foo\")?.is_special());\nassert!(Url::parse(\"file:///tmp/foo\")?.is_special());\nassert!(!Url::parse(\"moz:///tmp/foo\")?.is_special());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:35218":{"id":"2:12084:35218","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:710:3031":{"id":"0:710:3031","crate_id":0,"name":"BeforePath","span":{"filename":"src/slicing.rs","begin":[115,4],"end":[115,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:529:731":{"id":"0:529:731","crate_id":0,"name":"hash","span":{"filename":"src/host.rs","begin":[41,44],"end":[41,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:9373:145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:689:1665":{"id":"a:2:2700:228-0:689:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12032:14041":{"id":"2:12032:14041","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:692:3022":{"id":"0:692:3022","crate_id":0,"name":"AfterScheme","span":{"filename":"src/slicing.rs","begin":[106,4],"end":[106,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2537-0:531:1659":{"id":"b:2:2537-0:531:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1829"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2541-0:689:1665":{"id":"b:2:2541-0:689:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2547-0:531:1659":{"id":"b:2:2547-0:531:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:406:2235":{"id":"0:406:2235","crate_id":0,"name":"set_ip_host","span":{"filename":"src/lib.rs","begin":[2048,4],"end":[2059,5]},"visibility":"public","docs":"Change this URL‚Äôs host to the given IP address.\n\nIf this URL is cannot-be-a-base, do nothing and return `Err`.\n\nCompared to `Url::set_host`, this skips the host parser.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"http://example.com\")?;\nurl.set_ip_host(\"127.0.0.1\".parse().unwrap());\nassert_eq!(url.host_str(), Some(\"127.0.0.1\"));\nassert_eq!(url.as_str(), \"http://127.0.0.1/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL's from mailto(cannot-be-base) to ip:\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.com\")?;\nlet result = url.set_ip_host(\"127.0.0.1\".parse().unwrap());\n\nassert_eq!(url.as_str(), \"mailto:rms@example.com\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["address",{"resolved_path":{"name":"IpAddr","id":"2:41162:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1719":{"id":"0:68:1719","crate_id":0,"name":"parse","span":{"filename":"src/host.rs","begin":[77,4],"end":[122,5]},"visibility":"public","docs":"Parse a host: either an IPv6 address in [] square brackets, or a domain.\n\n<https://url.spec.whatwg.org/#host-parsing>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:35212":{"id":"2:12023:35212","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:3232-0:680:1663":{"id":"a:2:2740:3232-0:680:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:677-0:727:1669":{"id":"b:5:677-0:727:1669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:3254","5:680:2096","5:681:3947"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12096:35221":{"id":"2:12096:35221","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11715:3490","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::rmatch_indices":"2:12099:35222"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43472:4159","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:637":{"id":"0:637","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:638:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12034:35213":{"id":"2:12034:35213","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11923:1402","str::slice_mut_unchecked":"2:12035:35214","crate::ops::Index":"2:2980:2982"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:499:1656":{"id":"a:2:2700:228-0:499:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:0:1745":{"id":"0:0:1745","crate_id":0,"name":"url","span":{"filename":"src/lib.rs","begin":[9,0],"end":[3025,1]},"visibility":"public","docs":"\nrust-url is an implementation of the [URL Standard](http://url.spec.whatwg.org/)\nfor the [Rust](http://rust-lang.org/) programming language.\n\n\n# URL parsing and data structures\n\nFirst, URL parsing may fail for various reasons and therefore returns a `Result`.\n\n```\nuse url::{Url, ParseError};\n\nassert!(Url::parse(\"http://[:::1]\") == Err(ParseError::InvalidIpv6Address))\n```\n\nLet‚Äôs parse a valid URL and look at its components.\n\n```\nuse url::{Url, Host, Position};\n# use url::ParseError;\n# fn run() -> Result<(), ParseError> {\nlet issue_list_url = Url::parse(\n    \"https://github.com/rust-lang/rust/issues?labels=E-easy&state=open\"\n)?;\n\n\nassert!(issue_list_url.scheme() == \"https\");\nassert!(issue_list_url.username() == \"\");\nassert!(issue_list_url.password() == None);\nassert!(issue_list_url.host_str() == Some(\"github.com\"));\nassert!(issue_list_url.host() == Some(Host::Domain(\"github.com\")));\nassert!(issue_list_url.port() == None);\nassert!(issue_list_url.path() == \"/rust-lang/rust/issues\");\nassert!(issue_list_url.path_segments().map(|c| c.collect::<Vec<_>>()) ==\n        Some(vec![\"rust-lang\", \"rust\", \"issues\"]));\nassert!(issue_list_url.query() == Some(\"labels=E-easy&state=open\"));\nassert!(&issue_list_url[Position::BeforePath..] == \"/rust-lang/rust/issues?labels=E-easy&state=open\");\nassert!(issue_list_url.fragment() == None);\nassert!(!issue_list_url.cannot_be_a_base());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nSome URLs are said to be *cannot-be-a-base*:\nthey don‚Äôt have a username, password, host, or port,\nand their \"path\" is an arbitrary string rather than slash-separated segments:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet data_url = Url::parse(\"data:text/plain,Hello?World#\")?;\n\nassert!(data_url.cannot_be_a_base());\nassert!(data_url.scheme() == \"data\");\nassert!(data_url.path() == \"text/plain,Hello\");\nassert!(data_url.path_segments().is_none());\nassert!(data_url.query() == Some(\"World\"));\nassert!(data_url.fragment() == Some(\"\"));\n# Ok(())\n# }\n# run().unwrap();\n```\n\n## Serde\n\nEnable the `serde` feature to include `Deserialize` and `Serialize` implementations for `url::Url`.\n\n# Base URL\n\nMany contexts allow URL *references* that can be relative to a *base URL*:\n\n```html\n<link rel=\"stylesheet\" href=\"../main.css\">\n```\n\nSince parsed URLs are absolute, giving a base is required for parsing relative URLs:\n\n```\nuse url::{Url, ParseError};\n\nassert!(Url::parse(\"../main.css\") == Err(ParseError::RelativeUrlWithoutBase))\n```\n\nUse the `join` method on an `Url` to use it as a base URL:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet this_document = Url::parse(\"http://servo.github.io/rust-url/url/index.html\")?;\nlet css_url = this_document.join(\"../main.css\")?;\nassert_eq!(css_url.as_str(), \"http://servo.github.io/rust-url/main.css\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Feature: `serde`\n\nIf you enable the `serde` feature, [`Url`](struct.Url.html) will implement\n[`serde::Serialize`](https://docs.rs/serde/1/serde/trait.Serialize.html) and\n[`serde::Deserialize`](https://docs.rs/serde/1/serde/trait.Deserialize.html).\nSee [serde documentation](https://serde.rs) for more information.\n\n```toml\nurl = { version = \"2\", features = [\"serde\"] }\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/url/2.4.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1634","0:37-0:499:1656","0:39-0:553:1658","0:40-0:531:1659","0:42-0:571:1660","0:43-0:605:1661","0:44-0:680:1663","0:45-0:689:1665","0:46-20:89:1666","0:727:1669","0:740:1688","0:751:2129"],"is_stripped":false}}},"2:12026:2862":{"id":"2:12026:2862","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41355:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:670":{"id":"0:139:670","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[140,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:538:1612":{"id":"0:538:1612","crate_id":0,"name":"1","span":{"filename":"src/origin.rs","begin":[58,18],"end":[58,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"5:5432:35882":{"id":"5:5432:35882","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:694:3023":{"id":"0:694:3023","crate_id":0,"name":"BeforeUsername","span":{"filename":"src/slicing.rs","begin":[107,4],"end":[107,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:5688:1460":{"id":"5:5688:1460","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:700:3026":{"id":"0:700:3026","crate_id":0,"name":"AfterPassword","span":{"filename":"src/slicing.rs","begin":[110,4],"end":[110,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2683:220-0:553:1658":{"id":"a:2:2683:220-0:553:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8252:3703-0:689:1665":{"id":"a:2:8252:3703-0:689:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2537-0:689:1665":{"id":"b:2:2537-0:689:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1829"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:698:3025":{"id":"0:698:3025","crate_id":0,"name":"BeforePassword","span":{"filename":"src/slicing.rs","begin":[109,4],"end":[109,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:430":{"id":"0:430","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2636,0],"end":[2640,1]},"visibility":"default","docs":"String conversion.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:431:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:438:429":{"id":"0:438:429","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[2675,4],"end":[2677,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"cmp::Ordering","id":"2:30798:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:600":{"id":"0:600","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:335:1690":{"id":"0:335:1690","crate_id":0,"name":"base_url","span":{"filename":"src/lib.rs","begin":[204,4],"end":[207,5]},"visibility":"public","docs":"Change the base URL","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new",{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:680:1663":{"id":"b:2:2541-0:680:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12109:35226":{"id":"2:12109:35226","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:415:2332":{"id":"0:415:2332","crate_id":0,"name":"from_directory_path","span":{"filename":"src/lib.rs","begin":[2461,4],"end":[2467,5]},"visibility":"public","docs":"Convert a directory name as `std::path::Path` into an URL in the `file` scheme.\n\nThis returns `Err` if the given path is not absolute or,\non Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n\nCompared to `from_file_path`, this ensure that URL‚Äôs the path has a trailing slash\nso that the entire path is considered when using this URL as a base URL.\n\nFor example:\n\n* `\"index.html\"` parsed with `Url::from_directory_path(Path::new(\"/var/www\"))`\n  as the base URL is `file:///var/www/index.html`\n* `\"index.html\"` parsed with `Url::from_file_path(Path::new(\"/var/www\"))`\n  as the base URL is `file:///var/index.html`, which might not be what was intended.\n\nNote that `std::path` does not consider trailing slashes significant\nand usually does not include them (e.g. in `Path::parent()`).","links":{},"attrs":["#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]","#[allow(clippy :: result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5202:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:594:612":{"id":"0:594:612","crate_id":0,"name":"eq","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:35222":{"id":"2:12099:35222","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11715:3490","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::match_indices":"2:12096:35221"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43490:4160","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:4138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2650":{"id":"0:102:2650","crate_id":0,"name":"new_opaque","span":{"filename":"src/origin.rs","begin":[63,4],"end":[66,5]},"visibility":"public","docs":"Creates a new opaque origin that is only equal to itself.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Origin","id":"0:531:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:751:2129":{"id":"b:2:2541-0:751:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2247-0:680:1663":{"id":"b:2:2247-0:680:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2249:1648"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3005,0],"end":[3017,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Target","id":"20:50:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:471:2441","0:472:2383","0:473:2443"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12063:1801":{"id":"2:12063:1801","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11715:3490","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::split_whitespace":"2:12041:32727","str::rsplit":"2:12069:2607"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43322:2042","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:440:1039":{"id":"0:440:1039","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[2683,4],"end":[2685,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"2:30798:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:350:1008":{"id":"0:350:1008","crate_id":0,"name":"options","span":{"filename":"src/lib.rs","begin":[541,4],"end":[547,5]},"visibility":"public","docs":"Return a default `ParseOptions` that can fully configure the URL parser.\n\n# Examples\n\nGet default `ParseOptions`, then change base url\n\n```rust\nuse url::Url;\n# use url::ParseError;\n# fn run() -> Result<(), ParseError> {\nlet options = Url::options();\nlet api = Url::parse(\"https://api.example.com\")?;\nlet base_url = options.base_url(Some(&api));\nlet version_url = base_url.parse(\"version.json\")?;\nassert_eq!(version_url.as_str(), \"https://api.example.com/version.json\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:751:2129":{"id":"a:2:2700:228-0:751:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:751:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:473:2443":{"id":"0:473:2443","crate_id":0,"name":"Finished","span":{"filename":"src/lib.rs","begin":[3016,4],"end":[3016,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"0:471:2441":{"id":"0:471:2441","crate_id":0,"name":"as_mut_string","span":{"filename":"src/lib.rs","begin":[3006,4],"end":[3008,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:35220":{"id":"2:12093:35220","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11715:3490","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::matches":"2:12090:1843"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43544:4162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:4138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:3702-0:689:1665":{"id":"a:2:8253:3702-0:689:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2547-0:689:1665":{"id":"b:2:2547-0:689:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:689:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:596":{"id":"0:596","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:436:612":{"id":"0:436:612","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2667,4],"end":[2669,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:603":{"id":"0:603","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:605:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:604:2707"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:739:422":{"id":"0:739:422","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[169,9],"end":[169,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:499:1656":{"id":"b:2:3319-0:499:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2250-0:727:1669":{"id":"b:2:2250-0:727:1669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:14038"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[184,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:79:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:757:670":{"id":"0:757:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2989,9],"end":[2989,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12044:35215":{"id":"2:12044:35215","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43586:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:677-0:499:1656":{"id":"b:5:677-0:499:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:679:3254","5:680:2096","5:681:3947"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:423:2378":{"id":"0:423:2378","crate_id":0,"name":"from_str","span":{"filename":"src/lib.rs","begin":[2614,4],"end":[2616,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2556:1482":{"id":"2:2556:1482","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:677-0:553:1658":{"id":"b:5:677-0:553:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:3254","5:680:2096","5:681:3947"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2537-0:553:1658":{"id":"b:2:2537-0:553:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:553:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1829"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:718:3035":{"id":"0:718:3035","crate_id":0,"name":"BeforeFragment","span":{"filename":"src/slicing.rs","begin":[119,4],"end":[119,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:8252:3703-0:727:1669":{"id":"a:2:8252:3703-0:727:1669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:727:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:601":{"id":"0:601","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:571:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:602:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5429:35881":{"id":"5:5429:35881","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:2954":{"id":"0:265:2954","crate_id":0,"name":"pop_if_empty","span":{"filename":"src/path_segments.rs","begin":[125,4],"end":[133,5]},"visibility":"public","docs":"Remove the last segment of this URL‚Äôs path if it is empty,\nexcept if these was only one segment to begin with.\n\nIn other words, remove one path trailing slash, if any,\nunless it is also the initial slash (so this does nothing if `url.path() == \"/\")`.\n\nReturns `&mut Self` so that method calls can be chained.\n\nExample:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .push(\"pulls\");\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url//pulls\");\n\nlet mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .pop_if_empty().push(\"pulls\");\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url/pulls\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:35231":{"id":"2:12141:35231","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:35231"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43639:4155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:602:670":{"id":"0:602:670","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8252:3703-0:680:1663":{"id":"a:2:8252:3703-0:680:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:680:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:8252:3703-0:499:1656":{"id":"a:2:8252:3703-0:499:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8252:3703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2537-0:499:1656":{"id":"b:2:2537-0:499:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:499:1656","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2540:1829"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:749:422":{"id":"0:749:422","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[195,15],"end":[195,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseOptions","id":"0:740:1688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:9149:30765":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:1080:8404":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:12236:5345":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:2928:2770":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:2690:3231":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:9110:8047":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:12553:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:6854:6085":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:43822:7862":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:10206:8751":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:5630:14384":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:5073:7047":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:30003:8604":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:6662:6052":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:11941:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:2830:5856":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:2787:3294":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:4886:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:638:8546":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13698:5761":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:22534:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:10681:5071":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:6156:14493":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:4010:14478":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:9380:22368":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:595:6537":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4753:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:5838:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:5408:8607":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:4969:5913":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7596:22298":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:4728:5905":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:530:4704":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:7591:3338":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:5693:5928":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"11:1103:14463":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:7543:5877":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6431:6014":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:6201:14408":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:40367:7789":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:6600:4658":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:40283:7779":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:23047:7552":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:39123:3308":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4823:6920":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:43308:4148":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"25:636:15556":{"crate_id":25,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"2:20589:34498":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:4567:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"11:1611:4623":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:3668:4627":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:474:6466":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12178:5319":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4684:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:4706:3433":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:5976:5821":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:5876:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:6849:7412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:9796:4992":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:7042:6110":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:40315:7784":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:2448:5840":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:3158:27180":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:9340:14320":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12496:5393":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:20587:34494":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:5986:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:1499:6543":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"9:388:21290":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12126:5314":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:8420:22351":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"18:624:36787":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:8129:14455":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13024:5573":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:4379:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:10855:6444":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:13812:5795":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"24:198:15557":{"crate_id":24,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"1:8514:3335":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:1589:6379":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4962:6997":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:9322:36783":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:41248:7812":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4809:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:10743:14381":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:44312:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:8047:6226":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:11924:5288":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:8947:8528":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:6670:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13169:5604":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:8979:36785":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:7697:5869":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:8678:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:7600:8013":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:506:6482":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:10864:8429":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:2350:8586":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:8936:14505":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:40636:7799":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:43230:8749":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"25:43:26271":{"crate_id":25,"path":["tinyvec","array","Array"],"kind":"trait"},"11:760:4660":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:1648:6640":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:46381:7946":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:45609:7906":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:3348:4248":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12331:5362":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:4412:6768":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11502:5190":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:6520:6026":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:4510:5899":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:13625:5740":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:1048:36765":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:9057:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"11:844:8910":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:9154:3256":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:6868:6087":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:45711:7910":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:13292:5634":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:8490:22353":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:6865:4721":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:12282:5355":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:8683:4960":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:2502:5842":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:11928:644":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:3385:8780":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:5862:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:47640:7995":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:10238:8607":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11520:5191":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:43621:4153":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:10731:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:11888:8551":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:8651:4958":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:4436:3890":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:7180:8560":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:5954:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6564:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:3948:3428":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:9365:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:62:15924":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:6007:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:2376:8596":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:13791:5789":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8348:3695":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:4480:5898":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:403:15580":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:4702:5904":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:13865:5804":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:5557:5861":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12483:5392":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:7266:3233":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:8359:2763":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11083:8046":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"11:2180:6383":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:3805:3280":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:40009:4153":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:9188:36776":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:3719:4235":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:3378:4205":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:844:3334":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:7249:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:47491:7990":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:9917:4994":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:6561:3381":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:11920:1053":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:1910:17324":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:40297:7782":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12902:5525":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:7827:8020":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:10275:8753":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:11252:15665":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:2933:14311":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:6442:6015":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:8180:22301":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4916:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10428:14373":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:2289:429":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"6:4722:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:5462:8429":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:8439:3332":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:10705:5074":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:7269:4656":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:9566:14318":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:2773:3289":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:699:4852":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:582:3871":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"0:740:1688":{"crate_id":0,"path":["url","ParseOptions"],"kind":"struct"},"6:1505:6546":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:911:4660":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:47179:7986":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:5032:5915":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"11:1838:6377":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:40358:7788":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:4793:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11410:5171":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:21126:7514":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:9298:14479":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:562:6519":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:2804:3298":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:2524:5843":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"23:327:14265":{"crate_id":23,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"6:5919:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:45424:7899":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:4872:5910":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:9413:4077":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:9534:14328":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10092:14363":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:4031:4627":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:11487:7846":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:7706:8581":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:4199:8426":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"11:1845:6378":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:2220:36267":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:547:6511":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:44256:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:3209:6377":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:41185:2556":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:6644:14494":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:5966:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:5990:7498":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:47537:7991":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:2767:3286":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:568:6522":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:39076:3317":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"11:793:8903":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:3152:31813":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13744:5775":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:5014:7019":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12293:5357":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:11915:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:9145:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:43188:8738":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:7029:6107":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:2984:3307":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:46025:7925":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:6575:3382":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:40214:4222":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:6943:22295":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:3934:3424":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:690:4851":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:39929:7756":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:7961:14498":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"11:2168:6381":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:40274:7778":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:10741:4220":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:30234:4326":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:2364:8590":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"26:0:4097":{"crate_id":26,"path":["tinyvec_macros"],"kind":"module"},"16:8109:6235":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:11497:8074":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:43490:4160":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:42133:3266":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:42876:7836":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4427:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"9:352:21304":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:8883:8952":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:40016:8815":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:531:4829":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:44248:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:9946:4998":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:40265:7776":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:9213:4408":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:4505:6812":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:875:4634":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:541:6508":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7103:8041":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:9964:3334":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:7635:33684":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:11921:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:10257:14364":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:0:3114":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:273:3235":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:9038:36782":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:42112:3256":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:3168:3334":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"25:386:4614":{"crate_id":25,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"17:11832:5272":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:4018:14106":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7411:5967":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:1844:4408":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:3734:8914":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:10712:22466":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:2931:21431":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:42457:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:10589:5060":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:13249:5626":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:40061:7768":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:3233:4244":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12046:5303":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:535:5819":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:45378:7897":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:9822:14339":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:47289:7987":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7244:36775":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:6066:7224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13121:5597":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"20:44:2128":{"crate_id":20,"path":["form_urlencoded","Serializer"],"kind":"struct"},"2:20546:3871":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:7585:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:6390:6011":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13376:5658":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:8573:22356":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:3214:35195":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:7537:4724":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4625:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12098:5310":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:1520:8913":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"11:2174:6382":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:7335:36773":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:8111:4249":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:21342:8620":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:47367:7988":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:10261:4164":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:20814:8627":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:41790:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:2779:3288":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:3180:35194":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:4937:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"11:1818:3334":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:3703:3278":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2757:3290":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:1048:6113":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:5920:5959":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"14:165:21374":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:5804:7098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12835:5470":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:7635:6172":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:22402:7550":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:8846:33705":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6725:7336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:13469:5683":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:922:8904":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:8858:4965":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:6164:5996":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:11923:1402":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:55:6216":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:3181:33837":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6400:6012":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"14:0:3112":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:8183:4157":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:4001:4644":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"14:31:8399":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:3162:3313":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:2426:5839":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:6076:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12449:5379":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:7545:7445":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:6795:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:6014:7209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:9162:3263":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:40155:3458":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:41540:3334":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"24:228:26244":{"crate_id":24,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"21:36:1647":{"crate_id":21,"path":["percent_encoding","utf8_percent_encode"],"kind":"function"},"17:13443:5677":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:2720:5851":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"11:97:6369":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:5811:5943":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10569:5055":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:8256:6244":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:4186:3887":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"18:614:36788":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:482:6471":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:6588:3908":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"11:644:4073":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:41339:3275":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"25:669:8398":{"crate_id":25,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"2:41950:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:21124:8623":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:4783:3429":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:8072:6229":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:40326:7785":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:5377:8431":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:46123:7927":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13461:5681":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:11933:742":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4340:6723":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"19:0:1035":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:8753:4962":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:7030:7479":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12770:5419":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:9488:14324":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:10626:5064":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:8765:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:11120:8045":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:39981:7761":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"22:70:15561":{"crate_id":22,"path":["idna","uts46","Mapper"],"kind":"struct"},"2:39178:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12536:5396":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:6389:3901":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:40407:7792":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:45332:7895":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:20752:8625":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"2:7214:3234":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"7:79:21282":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:47827:8006":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:953:8909":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:7528:7440":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:13082:5588":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13488:5688":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"22:133:36790":{"crate_id":22,"path":["idna","uts46","Mapping"],"kind":"enum"},"6:5057:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13857:5801":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:8293:7304":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:20932:8600":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:3700:3279":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:8954:26562":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:11544:5195":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:0:3106":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:8997:8041":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:6336:6004":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:39941:32801":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:5655:5865":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:660:14295":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:13689:5759":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:8255:14117":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:10303:14367":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:4400:6759":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13612:5734":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:8508:3334":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:8788:4963":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:11490:26960":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:8598:22357":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"18:719:4857":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:3270:4239":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:10452:14375":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:40685:7804":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:2366:8591":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:8176:2042":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:11935:1501":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:11266:8070":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:8120:4220":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:21797:7520":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:7243:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:2694:5850":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:488:6474":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:8718:4961":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:10104:5002":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:46493:7948":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:8142:14458":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:8521:22354":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:2642:5848":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:587:6532":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13411:5669":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:6935:4722":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:10026:14354":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"24:266:4785":{"crate_id":24,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"17:10068:14361":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:119:15978":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:43340:4163":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:12419:5374":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:42417:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"11:1852:6379":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:7757:6176":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:7572:36771":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"9:421:21291":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"13:0:3105":{"crate_id":13,"path":["std_detect"],"kind":"module"},"14:202:1660":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:1602:6603":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:40658:4248":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:1470:6376":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:6919:36770":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11391:5170":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:4932:5912":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6021:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:6027:7213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:10095:8746":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:43372:4167":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:7598:8832":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:12360:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13777:5782":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:13066:5585":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:41162:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:5835:7111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:44069:7881":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:7022:3901":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:39971:7760":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12158:5318":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10857:22360":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13219:5620":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:30428:32779":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:7519:6167":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:9218:4985":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:45356:7896":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:10721:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:40335:7786":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13499:5689":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:10676:8051":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:41489:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"18:564:4834":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:42119:3257":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4367:6746":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:4758:670":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:13015:5569":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:6597:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8237:1653":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:8548:22355":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11821:5269":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:6137:8706":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:40348:7787":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:42654:3331":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:42664:7832":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:8841:33686":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:30194:4324":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:10142:22439":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:4605:8809":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:5792:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"18:766:26205":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:1637:6632":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:21014:7514":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"11:285:6370":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:3300:5886":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:7966:14499":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:9772:4990":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:11064:7883":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:5774:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"9:234:3331":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:42672:7833":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:1027:21368":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:8823:4964":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9933:4996":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:7377:4665":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:2742:5852":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11339:5159":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:779:4629":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:44341:4300":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:39324:14482":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:11615:5219":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:355:8540":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:21:683":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:5043:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:1947:14307":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:3898:3422":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:45486:7901":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"25:449:4598":{"crate_id":25,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"0:727:1669":{"crate_id":0,"path":["url","Url"],"kind":"struct"},"16:6717:6065":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:1439:3901":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"18:507:4824":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"25:1034:26275":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"17:12576:5401":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:2748:3862":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"11:365:4621":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:42642:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:4702:3430":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11628:5223":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:44329:7892":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:2925:1693":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:7598:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"18:736:26204":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:43426:4165":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:11969:5293":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:7488:5105":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:10270:14365":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4878:1005":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:47660:7997":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:7837:8021":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:1701:6668":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:9110:1649":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:9108:36781":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:3231:4243":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:10445:4241":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:4597:7315":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"5:3799:4660":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:5948:4205":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:247:14301":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13678:5758":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:1680:6658":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:5044:14490":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:2959:7467":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:1517:14464":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:47686:7999":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:3782:5890":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:8252:3703":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"7:0:1548":{"crate_id":7,"path":["unwind"],"kind":"module"},"23:369:14277":{"crate_id":23,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"16:7509:5875":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:13332:5644":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:3749:5889":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:4119:14118":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:5594:5866":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:42625:7828":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:44057:7878":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:5007:7016":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:42435:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"11:1831:4660":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:4907:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"18:707:4139":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"23:231:4796":{"crate_id":23,"path":["unicode_bidi","level","Level"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:4703:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:2764:5853":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:6767:6079":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:7201:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:41497:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:9127:8894":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:2832:3300":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:41830:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:21098:8616":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:12634:5410":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:42380:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:4531:3438":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:5616:5922":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:9628:14331":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12318:5360":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:3647:3901":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:1034:14305":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8777:8034":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:11538:4145":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:875:6375":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:10289:8752":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:6840:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:1924:3417":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:11930:744":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:46154:7928":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:2957:36161":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:3030:5882":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:7574:7452":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:13842:5800":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:11922:1372":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:12085:5308":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:7699:8016":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:8195:3276":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11641:5224":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13453:5680":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11785:5260":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:3078:3310":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:22501:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:40165:3457":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:43639:4155":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:7271:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"25:948:26274":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"2:22270:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:4045:4296":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12592:5403":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:41556:3901":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:8821:8955":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:42617:4079":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:6786:4673":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11422:5174":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:2956:3254":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:11715:3490":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:43544:4162":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:39296:3312":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:43298:4149":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4739:6881":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4694:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:6270:4644":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:2967:36164":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8249:14122":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:11902:5281":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"12:0:3111":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:10657:14144":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:47631:7994":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:42408:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:5847:5950":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:3640:4872":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:5024:7024":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11319:5158":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:936:8907":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"11:2186:36764":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:2298:21405":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"11:1858:6380":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:9545:4953":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:7673:8549":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"20:99:3354":{"crate_id":20,"path":["form_urlencoded","ByteSerialize"],"kind":"struct"},"17:3142:14312":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:2786:5854":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:7557:7447":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"23:348:14272":{"crate_id":23,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"17:10080:14362":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"11:657:3901":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:9612:4691":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:947:8908":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11282:5145":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:10056:4145":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:9595:4690":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:7062:35192":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4373:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"23:315:36794":{"crate_id":23,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"5:5277:4141":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:39914:4154":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:43614:4143":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:8867:8953":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:41413:3334":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"14:215:6319":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:420:4917":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4314:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:7510:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:7168:3337":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"0:751:2129":{"crate_id":0,"path":["url","UrlQuery"],"kind":"struct"},"1:11044:8035":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13194:5612":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:2921:2444":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:6647:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:892:3334":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:635:8545":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:2821:3297":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:5886:5953":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:22237:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:43109:7507":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:2850:3304":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:12333:34764":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:43728:7850":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:21569:8600":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:10015:14353":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"23:257:26220":{"crate_id":23,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"5:7113:3901":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:10478:14377":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:2842:3302":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:11101:8063":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:12194:5324":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:4596:5902":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:96:15564":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:46647:7951":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"25:752:4608":{"crate_id":25,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"16:7478:5874":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:0:3115":{"crate_id":17,"path":["object"],"kind":"module"},"17:13419:5672":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"25:534:14256":{"crate_id":25,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"6:5899:7145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:3175:6378":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"18:521:26206":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:6804:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:574:4824":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8498:3333":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:22435:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:5993:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:10691:22465":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:7317:36772":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:10052:14359":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:2033:6113":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:9839:14341":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:599:36789":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"24:276:26258":{"crate_id":24,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"11:399:15579":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:12113:5313":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:8170:4148":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:43934:4168":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:13159:5603":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:39317:2393":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:21347:8630":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:21728:7518":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:5736:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"13:110:36766":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:1594:6380":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:3327:4660":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:43472:4159":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:9721:14337":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:7867:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"25:1122:4782":{"crate_id":25,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"6:494:6477":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:1512:6549":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:526:6499":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10377:5041":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"11:798:8906":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:1543:4205":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:12006:5297":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11993:5294":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:636:4847":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11136:5111":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:20770:8621":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"9:0:3108":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:2799:3293":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"9:445:21289":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:11720:2763":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:9627:4696":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:9158:3266":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"22:120:114":{"crate_id":22,"path":["idna","punycode","Decoder"],"kind":"struct"},"21:81:2745":{"crate_id":21,"path":["percent_encoding","PercentDecode"],"kind":"struct"},"11:311:6373":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:6035:7215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:7556:4726":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:8667:4959":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"22:170:2726":{"crate_id":22,"path":["idna","uts46","Errors"],"kind":"struct"},"17:1919:22397":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:1535:6559":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:8090:6232":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:11932:746":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:41429:3901":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:6761:4670":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4455:6786":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"25:0:4096":{"crate_id":25,"path":["tinyvec"],"kind":"module"},"2:40629:7798":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:3266:14313":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:2160:8846":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:4677:3421":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:32109:3863":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:11282:2439":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4715:6871":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:2215:4674":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:2046:8914":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:4010:14104":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:7213:3442":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:10402:14368":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"11:736:6376":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:6980:3361":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13763:5780":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:4861:6938":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:45587:7905":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:6155:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:2838:3301":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:43526:4161":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13324:5643":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:21441:7516":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12433:5376":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:7726:14481":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:11918:1520":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:1732:8857":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:8389:22350":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4474:6794":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:9312:14319":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:43175:7510":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:30798:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:7875:14497":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:6617:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:1519:6551":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:9265:14318":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11484:5182":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4555:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:41327:3274":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:11272:8071":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:21976:7546":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:4523:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:13659:5752":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11721:5231":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:21675:7517":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:2212:8583":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:44354:7893":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:4534:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:42352:7820":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"13:226:6368":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:44053:7877":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"22:155:4102":{"crate_id":22,"path":["idna","uts46","Idna"],"kind":"struct"},"6:653:16334":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:43886:7864":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:554:6514":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:7462:7435":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13651:5749":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:4193:4205":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:4148:14121":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11879:5278":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:46411:7947":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:11735:4138":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:10751:30761":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"14:40:5145":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:10133:8754":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:8813:3334":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:40432:7795":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:7850:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:10039:14357":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"21:34:1646":{"crate_id":21,"path":["percent_encoding","percent_encode"],"kind":"function"},"16:2337:5830":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:22336:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:5709:3368":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:695:8905":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:10681:8053":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:8759:8609":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:6135:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:1568:6582":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"11:1012:8912":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:2762:3287":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:11653:5227":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:21988:8605":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:43210:8750":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:10386:4729":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:43743:7856":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:7516:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12224:5343":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:4704:3432":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2795:3291":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"18:538:4832":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:4587:3426":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:1666:1091":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:1561:3334":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:6629:4669":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"1:8456:2410":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:5386:4958":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:44129:15705":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:12894:5522":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:8673:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12550:5399":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4799:6911":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13516:5696":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:9120:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:44041:7874":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:41404:1744":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"11:119:4617":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:7694:8015":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:10840:5093":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:5281:4142":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:46076:7926":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:6307:5860":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:4662:14143":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:11937:1503":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"18:481:4822":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:11740:4137":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:5393:8432":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:40677:7802":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:10354:5040":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8104:4247":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:8163:4223":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:7669:5878":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:10451:4239":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"21:50:1645":{"crate_id":21,"path":["percent_encoding","percent_decode"],"kind":"function"},"2:47037:7985":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:10343:8609":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4832:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6236:14419":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"25:728:4598":{"crate_id":25,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"1:7722:8413":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:8153:4222":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:386:14302":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:45627:7907":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:47750:8003":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:44291:8423":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:30264:32796":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:930:8906":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"21:17:2690":{"crate_id":21,"path":["percent_encoding","AsciiSet"],"kind":"struct"},"20:89:1666":{"crate_id":20,"path":["form_urlencoded","EncodingOverride"],"kind":"typedef"},"17:13667:5753":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10885:5095":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"23:249:128":{"crate_id":23,"path":["unicode_bidi","level","Error"],"kind":"enum"},"1:11942:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:11109:5110":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:39511:27256":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:11197:8611":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:6316:4627":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:2572:5845":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:8025:6225":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"11:836:8909":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:4601:7319":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:10555:5050":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:44049:7876":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:2910:3306":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:2469:3345":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:11529:8078":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:2138:7462":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:13041:5575":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:2167:7464":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:7624:8014":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:4904:5911":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:6170:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"11:1501:21369":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:7608:7459":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10000:5081":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:6904:6089":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:41268:32780":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:40245:7773":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:40185:7510":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13053:5580":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:8632:22335":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:49633:8633":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:9011:26973":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:10721:5075":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:1787:14306":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:5013:14490":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11224:8067":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:9670:14335":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:1062:8911":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:31982:3344":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:3272:4240":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:2826:3299":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:7196:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:10971:4732":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:1299:8404":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:1568:4644":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11060:5068":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10735:5078":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:2687:7474":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:43118:8745":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"11:2201:3337":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:6780:8613":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:40643:3372":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12372:5367":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:7121:3901":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7767:22299":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11459:5180":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4747:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:10798:22359":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:5848:7120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:4760:3434":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13426:5673":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"11:630:3334":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:9734:14338":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:4258:8407":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:21093:8600":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:5527:4658":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12259:5354":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:2357:5836":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:1746:7487":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:40042:8816":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:2546:5844":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:47671:7998":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:6243:36774":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:1115:36156":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:4769:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:5754:4644":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:7688:8550":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:4389:3889":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:44096:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:4540:5900":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11090:5107":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:5367:21403":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:2594:5846":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:30250:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:6793:6080":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:43774:7860":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:43100:7506":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4586:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:13135:5601":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:4113:8800":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:41421:4073":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:11372:5165":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:42392:6203":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:4263:8408":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:2791:3292":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:5233:4627":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:7883:4233":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11355:5163":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:1583:6378":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:8289:8433":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:4780:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10936:5099":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:4785:32923":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:2705:3857":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:42126:3265":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:917:8903":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:41471:3700":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:5343:8606":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:5741:22289":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:10699:8058":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:9696:4978":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:4637:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:2219:4214":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4991:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:40108:7769":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"24:313:4792":{"crate_id":24,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"21:74:3250":{"crate_id":21,"path":["percent_encoding","PercentEncode"],"kind":"struct"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:21571:8618":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:5742:3370":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:11522:8078":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:47712:8001":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:3872:5892":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:1978:14310":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:45646:7908":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10527:22464":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:8835:8037":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:11941:1131":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:40075:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:22600:7551":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:42633:4078":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"11:986:8911":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"15:219:21390":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:41353:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:3063:4868":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:9068:36780":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"11:2049:8911":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:1895:3416":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:7820:8019":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:13233:5623":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"11:1826:4644":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:47651:7996":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:626:8405":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:11940:1558":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:41710:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:590:4835":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:2481:4231":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:6488:6016":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:9959:4999":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:532:6502":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:2962:3316":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:12059:5305":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:20851:8628":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:1461:6375":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5766:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:6535:4616":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:11268:8411":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:618:3418":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:43921:7869":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:8416:3331":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:4818:5908":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:7488:6165":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:47613:7993":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5881:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"11:2130:21363":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:4037:5894":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:3815:5891":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:1708:6671":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:45857:7919":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"11:2060:8912":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:44061:7879":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:1544:6565":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:2740:3232":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:5531:7495":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:3233:3319":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6132:5991":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:1669:4627":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:3196:3318":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:4006:3423":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:40035:7764":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:7043:15590":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:5418:5920":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:2855:3305":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:5586:4711":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:1008:4627":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:727:4860":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:41548:4073":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:10851:8413":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4649:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"9:502:6447":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:6124:4717":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:644:4824":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:5000:5914":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10491:14378":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6061:21404":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12307:5359":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:7092:7480":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:1716:6675":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:7551:7446":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:1500:8905":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"23:0:4094":{"crate_id":23,"path":["unicode_bidi"],"kind":"module"},"2:45757:7916":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4462:6789":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:9577:4980":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:2879:5858":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11573:5204":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:20606:34499":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:320:14260":{"crate_id":24,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"1:3083:4250":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"20:50:230":{"crate_id":20,"path":["form_urlencoded","Target"],"kind":"trait"},"1:7810:4910":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:2620:4234":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:4943:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:10167:8437":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:6108:4701":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:975:14304":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:10283:5036":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:7164:8834":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:1768:609":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:4954:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:1822:3901":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"14:187:21381":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"10:44:6389":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:5062:3366":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:5797:5942":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11931:745":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:8271:8026":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:4786:6906":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4605:6845":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:9557:4985":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:8256:22334":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"8:0:3107":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:4388:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:9091:8046":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:41202:2557":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:9617:14330":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"11:667:8904":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:7498:6166":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:9228:36777":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12403:5373":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:9410:8599":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10635:5065":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:8195:22336":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4394:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:3225:5885":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"10:36:6388":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:6254:5998":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:40306:7783":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4663:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:40028:7763":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:585:8542":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:8283:22347":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:1672:6657":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:20739:8624":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:11220:5129":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:6022:22291":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:9748:4985":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:4615:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:39957:7759":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:21926:32795":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:25857:7553":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6129:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:43586:4158":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:11254:8418":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11934:1504":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:9973:5000":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:43954:4169":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:1662:6651":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:40080:3443":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12563:5400":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:44238:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:11174:4734":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:13803:5791":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:6508:3377":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:12311:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7293:6143":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:43138:8744":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:8132:4221":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:7013:4302":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:5402:4959":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:4517:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12388:5369":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12522:5395":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:5335:1402":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"17:9409:22369":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:39037:3320":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:45312:7894":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:8953:4968":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:7437:6161":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:10774:8747":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:10334:4985":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:41219:3273":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:22303:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"11:332:4619":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4972:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:21813:7524":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:9138:14316":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13367:5655":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:2458:7471":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:5071:5916":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"20:91:2063":{"crate_id":20,"path":["form_urlencoded","Parse"],"kind":"struct"},"16:5104:5917":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:20879:8622":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:10505:14379":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13145:5602":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:4135:14120":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:8254:3701":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:3315:4228":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:10807:8748":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:13356:5651":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13399:5666":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:2668:5849":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:4468:6791":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:4233:3334":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:6724:15588":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:43049:14484":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"24:302:4789":{"crate_id":24,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"17:8931:4967":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:10029:15592":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:1783:8563":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:40227:7770":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"24:291:36812":{"crate_id":24,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"2:44065:7880":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:4279:8427":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:46177:7929":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:7360:4660":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"18:113:15567":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:749:4644":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"22:127:14282":{"crate_id":22,"path":["idna","uts46","StringTableSlice"],"kind":"struct"},"1:5357:8430":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:3446:5887":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:3580:3334":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:6619:4668":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:2348:7489":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:4:1018":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:4853:6933":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:1254:6113":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:21889:32805":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:7205:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:21955:7543":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:39993:4155":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:5724:5933":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:4948:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:5858:3366":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:3513:4644":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:44073:7882":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10598:5100":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:1821:8573":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"22:29:8871":{"crate_id":22,"path":["idna","punycode","Decode"],"kind":"struct"},"2:43900:14050":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:41304:1653":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:1135:15587":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:22567:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:2468:8600":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:39154:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:14:2184":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:43605:4144":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:9062:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"18:80:15563":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:9150:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:10960:4731":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:46257:7930":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8189:3277":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:8829:3901":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:45787:7917":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:7077:22296":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:1820:7493":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:926:8905":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:7499:8420":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:3585:5888":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:6032:4713":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:6717:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:46001:7924":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12019:5009":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:7971:2006":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10923:5097":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:9178:14317":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5889:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10823:4931":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:2032:4235":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:41438:3699":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:3191:4241":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:41870:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"15:180:15571":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:10448:4243":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:46335:7945":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11234:5130":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:9523:14327":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:9641:14332":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:2128:4641":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:9469:14322":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:20992:8600":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12358:5364":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:45508:7902":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11770:5256":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:4073:4073":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:2905:5859":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:9424:4975":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:39264:3309":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13385:5659":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:4877:14142":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:6710:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:204:4304":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:30826:3871":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:6351:22292":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:500:6479":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:4362:4650":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"20:0:1634":{"crate_id":20,"path":["form_urlencoded"],"kind":"module"},"2:21962:7545":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"9:52:21307":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:7227:32792":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8805:8036":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:3201:6379":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:5963:5963":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:11883:32416":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:4437:3436":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:10977:4733":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"0:0:1745":{"crate_id":0,"path":["url"],"kind":"module"},"17:10897:5096":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:5525:8608":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:7645:4185":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:1695:6667":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:5589:7497":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:42872:7835":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"9:174:21355":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13240:5625":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:3155:27179":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12980:5568":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:11191:8064":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:7529:5876":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:4380:4679":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:9403:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:7563:7448":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"23:93:26226":{"crate_id":23,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"2:2743:2656":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:5346:5919":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:2931:2081":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:12622:5068":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:9826:14340":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:5383:4205":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:41565:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:4847:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:573:6524":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:7285:32418":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:4445:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6867:7415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:9072:8045":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:20559:34381":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:13344:5650":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:4445:5897":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:6392:3372":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:6624:7304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:3934:4205":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:3488:4218":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:11422:3280":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:9986:5001":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"23:336:15663":{"crate_id":23,"path":["unicode_bidi","Direction"],"kind":"enum"},"16:6696:22294":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:6743:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2783:3252":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:9529:4687":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:8977:1665":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:11471:5181":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:12516:4701":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:4495:6805":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:8360:22349":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:7837:6188":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:9275:36784":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:888:6376":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:4845:5909":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:867:3901":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:13821:5797":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"25:966:4613":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:0:820":{"crate_id":6,"path":["libc"],"kind":"module"},"1:9415:4728":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:9876:4909":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13316:5642":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:1270:8912":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:11891:5280":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:5787:3379":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:8922:3371":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:9853:14342":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:9988:4073":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:4392:4205":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:11813:5267":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:4624:5903":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:3235:6380":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:7815:8599":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:676:8548":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:11478:8073":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:10660:5068":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:11675:2377":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:6043:7218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:4163:4205":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:7683:5879":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:11938:1500":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:43911:7865":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:11929:747":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:21864:7530":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7626:14454":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6293:6001":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:10545:5048":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:45903:7920":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:9156:3265":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6474:5880":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:1489:8904":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13211:5617":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:3406:4213":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:21453:34385":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:4941:4205":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:2240:7470":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:562:5105":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:6920:4247":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:6572:7276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:45933:7921":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"14:221:6321":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:39920:7755":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:2816:3296":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:13639:5746":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:2558:4691":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:5944:14386":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:4425:4650":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:47429:7989":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"23:383:14279":{"crate_id":23,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"16:4568:5901":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:805:8907":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:6218:14411":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"10:0:3109":{"crate_id":10,"path":["adler"],"kind":"module"},"11:2194:6385":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:1572:4660":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:6606:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:8854:8038":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:12033:5302":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:43280:4152":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13265:5630":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:3996:3425":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11800:5265":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:4459:3437":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:43266:4156":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:8791:8035":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:43596:4146":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11532:5194":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:46681:7952":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:11069:22362":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11299:5148":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:8170:6237":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:6935:14423":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:2846:3303":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10316:5038":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10649:5066":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"21:0:1644":{"crate_id":21,"path":["percent_encoding"],"kind":"module"},"16:2470:5841":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4488:6802":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:41910:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:46617:7950":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:5522:7225":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:40122:3444":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:21000:8619":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7588:14453":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10440:14374":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11717:4739":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:8525:3336":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:10491:4185":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:44077:7883":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4549:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:39138:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:2963:36162":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:2980:2982":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:10670:5070":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:7504:7436":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5050:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:32018:14481":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:10247:4165":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:8253:3702":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:20919:8629":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:39331:3888":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:4482:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:8366:2411":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:11258:5144":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:44299:7889":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6575:22293":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10416:14372":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:2737:3859":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:11946:5289":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:2404:5838":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11011:5102":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"24:0:4095":{"crate_id":24,"path":["unicode_normalization"],"kind":"module"},"6:5978:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:6544:5868":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13033:5574":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:3193:4242":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:11337:4736":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:6396:3373":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:1755:7490":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:2855:4710":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9596:4982":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:1285:8911":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:4789:5907":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:7042:4644":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:6432:3380":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:41990:3367":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:9350:36778":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:4290:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:45456:7900":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:43322:2042":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:7711:6174":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:11786:14043":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:12298:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:11239:8068":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:40383:4845":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:9906:7814":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:35:4303":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:7366:22297":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:6361:6008":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:4127:14119":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:1071:8912":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13506:5691":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"14:7:8399":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:1574:6584":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:6981:14424":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6671:6053":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:3593:4073":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:8214:2393":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:11866:8200":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:5874:15898":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:41590:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:6505:3376":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:9907:4993":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:21910:32786":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12138:5315":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:11427:7842":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:42857:7834":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:20889:8846":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:501:4641":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:40446:7796":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"23:8:26221":{"crate_id":23,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"1:5716:3369":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"22:0:2445":{"crate_id":22,"path":["idna"],"kind":"module"},"17:10967:5100":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:21849:32789":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:47697:8000":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13101:5589":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:7016:6105":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:857:4073":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:12505:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:1630:6628":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:39242:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:0:3110":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:45664:7909":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:39220:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:7280:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:9816:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4728:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:45526:7903":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:5779:5938":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:3373:8776":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:11936:1502":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:10894:8036":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:6771:8825":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:7449:14446":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:4303:6695":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12607:5407":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:9314:731":{"crate_id":2,"path":["core","hash"],"kind":"module"},"6:4419:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:2391:1650":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:8156:5881":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:21117:8600":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:3424:4215":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:21872:7531":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:1099:15586":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:3168:3315":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:9032:8044":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:12923:5533":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:6460:5863":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:4871:6944":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:13181:5607":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:10168:4163":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:3141:3311":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:4542:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"24:259:36811":{"crate_id":24,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:40205:8835":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:8443:22352":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:4841:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12072:5306":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:7294:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"25:470:4602":{"crate_id":25,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"16:5708:5931":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13433:5674":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:2580:4224":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:8200:3272":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:7256:3441":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6558:6028":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:3047:21433":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:6833:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:11899:29143":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:9866:14343":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:242:14300":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:8909:4148":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:11032:8034":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:10079:8419":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4817:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:2378:5837":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"23:223:4793":{"crate_id":23,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"1:11401:3278":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:7168:8833":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:7539:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:45557:7904":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:5593:4712":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:3904:2403":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:9443:14321":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:5079:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12959:5563":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:6468:4627":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:6893:8417":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11556:5196":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:40092:32792":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4599:7317":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:4928:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:43149:7837":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:22468:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"15:198:15575":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:10465:14376":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:4665:3436":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:3962:3426":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"14:160:8399":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:20994:8617":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:13309:5641":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:43706:14049":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4894:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:6990:6104":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:44117:7886":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:5471:4205":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:6719:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:681:4848":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6876:5870":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:40667:4685":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:5817:7099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:45955:7922":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10516:5043":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:5828:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"20:28:3347":{"crate_id":20,"path":["form_urlencoded","ParseIntoOwned"],"kind":"struct"},"2:47765:8004":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:8315:3431":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"11:968:6113":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:10013:2042":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:47735:8002":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11446:5178":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:1068:14462":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:2967:21432":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:9373:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:10686:8019":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:8310:22348":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:3998:14477":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:8899:8954":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:11037:22361":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:4351:8428":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:5643:5926":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:7259:3699":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"18:671:14299":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:41630:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11861:5277":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12646:5417":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:13257:5628":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5067:7045":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:9152:3257":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:2616:5847":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:42362:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:9512:14326":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:5684:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:2691:3856":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:6376:5862":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:20780:8846":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:12510:5394":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:43390:4166":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:7084:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"11:1538:14465":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:123:15979":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:9164:3264":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:9806:8600":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:579:6527":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:4144:7494":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:9453:22370":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:11924:1486":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:7294:7484":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:11729:4139":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:4926:3691":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:6687:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:7557:6168":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:6355:14494":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:8941:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:39338:4782":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:6179:14393":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:11360:3279":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10989:5048":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:480:4703":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:819:4632":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:9408:4076":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"18:652:4824":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"15:0:3113":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:44045:7875":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:10255:29311":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:5571:5864":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:3956:3427":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:1479:8903":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:10010:8573":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:7076:3901":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:20948:8615":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:4811:798":{"crate_id":2,"path":["core","iter"],"kind":"module"},"11:1121:8404":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:20778:8970":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"5:1773:4660":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:7522:7439":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:46571:7949":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4763:6892":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:2319:5828":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:487:14303":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"21:28:2558":{"crate_id":21,"path":["percent_encoding","CONTROLS"],"kind":"constant"},"17:12799:5439":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:30228:4325":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:1594:6598":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:3481:4216":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:1526:6554":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:4409:3412":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"22:161:4101":{"crate_id":22,"path":["idna","uts46","Config"],"kind":"struct"},"2:41670:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:40236:7772":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"9:325:6425":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:4845:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"18:0:3116":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:12461:5381":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:12345:5363":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:1577:6377":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:7803:6184":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:3899:5893":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:6728:6066":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:11056:30759":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:43576:4157":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:43630:4154":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:0:1394":{"crate_id":1,"path":["std"],"kind":"module"},"1:7891:4235":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:6677:8838":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10711:8020":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:2808:5855":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:11939:792":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:11434:5175":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:643:8547":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:5677:22288":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:2162:8847":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:959:8910":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:3472:32088":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:10876:26998":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"23:356:14273":{"crate_id":23,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"16:6327:6003":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:2544:4232":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:8984:14510":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:1689:6664":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:1931:655":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:5305:5918":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:1846:8579":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:6211:4711":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:7859:22300":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:6704:7329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:7321:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:1732:6680":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:22369:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:45809:7918":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:7065:6112":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:3463:1649":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:12608:4301":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:43220:7512":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:9098:14315":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:9895:14348":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:2752:3251":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:11844:5274":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:901:4644":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:154:4614":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:43444:4164":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"18:609:14294":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:4327:6713":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:11464:7845":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:32022:7619":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:7619:8533":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:1556:6574":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12915:5532":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:9028:14314":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:5998:22290":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:40001:4154":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:20574:34381":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:41291:3281":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:1408:3334":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13879:5807":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:45402:7898":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:515:4827":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:46831:7953":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:9653:14333":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:7052:4638":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:8076:4251":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:7743:5867":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:9498:4978":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:4868:14141":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:2811:3295":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:8244:8025":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10761:22358":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:40418:4223":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:43201:7511":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"7:32:21275":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:7594:4074":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5798:7097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:11193:5121":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:1589:6596":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6819:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:4757:5906":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:1636:4321":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:4097:15589":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:4327:5895":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:20604:34496":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:11917:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:4325:4678":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"9:481:21288":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:12385:8821":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:40397:7791":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:9067:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13721:5774":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"18:755:4865":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:43849:7863":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:41480:3684":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"11:723:6375":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:554:8530":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:5933:4711":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:7467:6162":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6890:5871":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13564:5733":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:9683:14336":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:7243:3440":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:817:8908":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7599:8600":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:1494:6541":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:9478:14323":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4983:7009":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11163:5117":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:6588:7288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:11503:7847":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13477:5684":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:43292:2757":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:43128:7509":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:8989:14511":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:10580:5059":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:21781:7519":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:41750:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:47788:8005":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:40652:7800":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:8263:3277":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10615:5063":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:39303:7627":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:7277:7424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"18:491:4823":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:1423:4073":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:2862:5857":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9148:36779":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:43757:7859":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:1466:1651":{"crate_id":2,"path":["core","mem"],"kind":"module"},"5:7305:8406":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11585:5207":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:6321:14422":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:4335:3888":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:4400:5896":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:21837:7528":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:39198:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11600:5213":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:1785:8564":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:361:8541":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:11916:940":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:47575:7992":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6774:7373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:9886:14345":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:45979:7923":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:30322:32776":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:6506:6024":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:3638:1654":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:10125:5004":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:1565:3901":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:9109:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"16:6819:6081":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:9160:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:11927:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:1915:4297":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4435:6777":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"25:879:26273":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"5:258:4627":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:40255:7775":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"}},"external_crates":{"26":{"name":"tinyvec_macros","html_root_url":null},"23":{"name":"unicode_bidi","html_root_url":null},"20":{"name":"form_urlencoded","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"tinyvec","html_root_url":null},"22":{"name":"idna","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"unicode_normalization","html_root_url":null},"21":{"name":"percent_encoding","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}