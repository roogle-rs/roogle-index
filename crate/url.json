{"root":"0:0:2056","crate_version":"2.5.0","includes_private":false,"index":{"0:421:135":{"id":"0:421:135","crate_id":0,"name":"Err","span":{"filename":"src/lib.rs","begin":[2630,4],"end":[2630,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:5598:36484":{"id":"5:5598:36484","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:3547","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:3547","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597":{"id":"5:5597","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5598:36484","5:5599:4666","5:5602:36485","5:5605:36486","5:5613:36487","5:5614:2138","5:5615:4592","5:5616:29856","5:5617:3091"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13150:28694":{"id":"2:13150:28694","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13149:2105","str::split_at_mut_checked":"2:13152:28698"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3145:4191-0:565:1972":{"id":"a:2:3145:4191-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3145:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:260:650":{"id":"0:260:650","crate_id":0,"name":"drop","span":{"filename":"src/path_segments.rs","begin":[66,4],"end":[69,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:716:779":{"id":"0:716:779","crate_id":0,"name":"fmt","span":{"filename":"src/slicing.rs","begin":[103,22],"end":[103,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:367:2271":{"id":"0:367:2271","crate_id":0,"name":"domain","span":{"filename":"src/lib.rs","begin":[1158,4],"end":[1163,5]},"visibility":"public","docs":"If this URL has a host and it is a domain name (not an IP address), return it.\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/\")?;\nassert_eq!(url.domain(), None);\n\nlet url = Url::parse(\"mailto:rms@example.net\")?;\nassert_eq!(url.domain(), None);\n\nlet url = Url::parse(\"https://example.com/\")?;\nassert_eq!(url.domain(), Some(\"example.com\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:553":{"id":"0:553","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,13],"end":[111,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31989:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:402:2512":{"id":"0:402:2512","crate_id":0,"name":"set_host","span":{"filename":"src/lib.rs","begin":[1922,4],"end":[1984,5]},"visibility":"public","docs":"Change this URL’s host.\n\nRemoving the host (calling this with `None`)\nwill also remove any username, password, and port number.\n\n# Examples\n\nChange host:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_host(Some(\"rust-lang.org\"));\nassert!(result.is_ok());\nassert_eq!(url.as_str(), \"https://rust-lang.org/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nRemove host:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_host(None);\nassert!(result.is_ok());\nassert_eq!(url.as_str(), \"foo:/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot remove host for 'special' schemes (e.g. `http`):\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_host(None);\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"https://example.net/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change or remove host for cannot-be-a-base URLs:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\n\nlet result = url.set_host(Some(\"rust-lang.org\"));\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\n\nlet result = url.set_host(None);\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf this URL is cannot-be-a-base or there is an error parsing the given `host`,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:444:335":{"id":"0:444:335","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[2721,4],"end":[2723,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13224:35785":{"id":"2:13224:35785","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:501:1922":{"id":"0:501:1922","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[47,11],"end":[47,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"S"}}},"2:2905:136":{"id":"2:2905:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31915:3660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2897-0:527:1971":{"id":"b:2:2897-0:527:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2900:136","2:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2615-0:527:1971":{"id":"b:2:2615-0:527:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2617:28218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13126":{"id":"2:13126","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13127:973","2:13128:2106","2:13129:35771","2:13130:35772","2:13132:35773","2:13135:2372","2:13136:35774","2:13137:334","2:13138:28671","2:13139:3171","2:13141:10604","2:13143:28669","2:13145:28670","2:13147:35775","2:13148:35776","2:13149:2105","2:13150:28694","2:13151:28697","2:13152:28698","2:13154:2064","2:13155:8717","2:13156:2732","2:13157:34239","2:13158:34241","2:13159:10749","2:13160:35777","2:13161:34242","2:13162:2929","2:13165:2160","2:13168:2518","2:13171:2520","2:13175:2102","2:13179:2111","2:13182:28700","2:13185:2917","2:13188:35778","2:13191:35779","2:13194:28703","2:13197:28705","2:13200:28707","2:13203:28708","2:13206:2152","2:13209:35780","2:13212:35781","2:13215:35782","2:13218:3407","2:13220:35783","2:13222:35784","2:13224:35785","2:13225:35786","2:13226:3069","2:13229:3158","2:13232:2351","2:13235:28709","2:13238:35787","2:13241:35788","2:13244:35789","2:13247:2030","2:13249:28601","2:13250:28602","2:13251:28604","2:13252:28605","2:13253:28606","2:13254:28608","2:13255:28609","2:13256:28610","2:13257:35790","2:13259:10860","2:13260:35791"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:362:2242":{"id":"0:362:2242","crate_id":0,"name":"username","span":{"filename":"src/lib.rs","begin":[982,4],"end":[989,5]},"visibility":"public","docs":"Return the username for this URL (typically the empty string)\nas a percent-encoded ASCII string.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.username(), \"rms\");\n\nlet url = Url::parse(\"ftp://:secret123@example.com\")?;\nassert_eq!(url.username(), \"\");\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.username(), \"\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:2115":{"id":"0:266:2115","crate_id":0,"name":"push","span":{"filename":"src/path_segments.rs","begin":[158,4],"end":[160,5]},"visibility":"public","docs":"Append the given segment at the end of this URL’s path.\n\nSee the documentation for `.extend()`.\n\nReturns `&mut Self` so that method calls can be chained.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["segment",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13238:35787":{"id":"2:13238:35787","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12817:3809"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12838:4478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13250:28602":{"id":"2:13250:28602","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39472:16204","Self::is_ascii":"2:13249:28601"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39472:16204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:541":{"id":"0:541","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,24],"end":[52,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10468:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:542:849"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2902-0:741:2436":{"id":"b:2:2902-0:741:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2905:136","2:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:337:2030":{"id":"0:337:2030","crate_id":0,"name":"parse","span":{"filename":"src/lib.rs","begin":[257,4],"end":[266,5]},"visibility":"public","docs":"Parse an URL string with the configuration so far.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:545:462":{"id":"0:545:462","crate_id":0,"name":"clone","span":{"filename":"src/origin.rs","begin":[52,30],"end":[52,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:507:1922":{"id":"0:507:1922","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[59,9],"end":[59,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::net::Ipv6Addr","id":"2:41286:2867","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2897-0:717:1981":{"id":"b:2:2897-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2900:136","2:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41603:4033-0:527:1971":{"id":"a:2:41603:4033-0:527:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41603:4033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:522:1251":{"id":"0:522:1251","crate_id":0,"name":"partial_cmp","span":{"filename":"src/host.rs","begin":[41,32],"end":[41,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30827:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2891-0:730:2000":{"id":"b:2:2891-0:730:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:530:1922":{"id":"0:530:1922","crate_id":0,"name":"0","span":{"filename":"src/origin.rs","begin":[55,11],"end":[55,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:630:779":{"id":"0:630:779","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3720-0:565:1972":{"id":"b:2:3720-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3145:4191-0:717:1981":{"id":"a:2:3145:4191-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3145:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2902-0:679:1977":{"id":"b:2:2902-0:679:1977","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2905:136","2:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:443":{"id":"0:443","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2719,0],"end":[2724,1]},"visibility":"default","docs":"Return the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2855:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:444:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3720-0:730:2000":{"id":"b:2:3720-0:730:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13155:8717":{"id":"2:13155:8717","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12295:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43346:4491","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2988":{"id":"0:104:2988","crate_id":0,"name":"is_tuple","span":{"filename":"src/origin.rs","begin":[70,4],"end":[72,5]},"visibility":"public","docs":"Return whether this origin is a (scheme, host, port) tuple\n(as opposed to an opaque origin).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41602:4034-0:598:1973":{"id":"a:2:41602:4034-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41602:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41602:4034-0:565:1972":{"id":"a:2:41602:4034-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41602:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2902-0:670:1975":{"id":"b:2:2902-0:670:1975","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2905:136","2:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:692:3336":{"id":"0:692:3336","crate_id":0,"name":"BeforeHost","span":{"filename":"src/slicing.rs","begin":[111,4],"end":[111,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13232:2351":{"id":"2:13232:2351","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12817:3809"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13244:35789":{"id":"2:13244:35789","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12817:3809"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12838:4478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5847-0:598:1973":{"id":"b:5:5847-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5845:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5849:1729"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3110:246-0:565:1972":{"id":"a:2:3110:246-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:589":{"id":"0:589","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2667:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:557:849":{"id":"0:557:849","crate_id":0,"name":"hash","span":{"filename":"src/origin.rs","begin":[111,24],"end":[111,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10476:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356:1969":{"id":"0:356:1969","crate_id":0,"name":"origin","span":{"filename":"src/lib.rs","begin":[811,4],"end":[813,5]},"visibility":"public","docs":"Return the origin of this URL (<https://url.spec.whatwg.org/#origin>)\n\nNote: this returns an opaque origin for `file:` URLs, which causes\n`url.origin() != url.origin()`.\n\n# Examples\n\nURL with `ftp` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://example.com/foo\")?;\nassert_eq!(url.origin(),\n           Origin::Tuple(\"ftp\".into(),\n                         Host::Domain(\"example.com\".into()),\n                         21));\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with `blob` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"blob:https://example.com/foo\")?;\nassert_eq!(url.origin(),\n           Origin::Tuple(\"https\".into(),\n                         Host::Domain(\"example.com\".into()),\n                         443));\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with `file` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert!(!url.origin().is_tuple());\n\nlet other_url = Url::parse(\"file:///tmp/foo\")?;\nassert!(url.origin() != other_url.origin());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with other scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"foo:bar\")?;\nassert!(!url.origin().is_tuple());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:607:3047":{"id":"0:607:3047","crate_id":0,"name":"ExpectedFileDoubleSlash","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:717:1981":{"id":"0:717:1981","crate_id":0,"name":"Url","span":{"filename":"src/lib.rs","begin":[182,0],"end":[204,1]},"visibility":"public","docs":"A parsed URL record.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:338","a:2:41603:4033-0:717:1981","a:2:3110:246-0:717:1981","a:2:32044:3544-0:717:1981","a:2:31987:236-0:717:1981","a:2:41602:4034-0:717:1981","a:2:3145:4191-0:717:1981","b:2:2891-0:717:1981","b:2:2612-0:717:1981","b:2:2887-0:717:1981","b:2:2902-0:717:1981","b:2:2897-0:717:1981","b:2:3720-0:717:1981","b:2:2615-0:717:1981","b:5:725-0:717:1981","b:5:5847-0:717:1981","0:436","0:728","0:287","0:423","0:438","0:429","0:431","0:433","0:420","0:443","0:278","0:284","0:427","0:281","0:440","0:434"]}}},"0:628":{"id":"0:628","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13168:2518":{"id":"2:13168:2518","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12817:3809"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12838:4478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13194:28703":{"id":"2:13194:28703","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12817:3809","str::rsplitn":"2:13197:28705"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43474:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2056":{"id":"0:0:2056","crate_id":0,"name":"url","span":{"filename":"src/lib.rs","begin":[9,0],"end":[3044,1]},"visibility":"public","docs":"\nrust-url is an implementation of the [URL Standard](http://url.spec.whatwg.org/)\nfor the [Rust](http://rust-lang.org/) programming language.\n\n\n# URL parsing and data structures\n\nFirst, URL parsing may fail for various reasons and therefore returns a `Result`.\n\n```\nuse url::{Url, ParseError};\n\nassert!(Url::parse(\"http://[:::1]\") == Err(ParseError::InvalidIpv6Address))\n```\n\nLet’s parse a valid URL and look at its components.\n\n```\nuse url::{Url, Host, Position};\n# use url::ParseError;\n# fn run() -> Result<(), ParseError> {\nlet issue_list_url = Url::parse(\n    \"https://github.com/rust-lang/rust/issues?labels=E-easy&state=open\"\n)?;\n\n\nassert!(issue_list_url.scheme() == \"https\");\nassert!(issue_list_url.username() == \"\");\nassert!(issue_list_url.password() == None);\nassert!(issue_list_url.host_str() == Some(\"github.com\"));\nassert!(issue_list_url.host() == Some(Host::Domain(\"github.com\")));\nassert!(issue_list_url.port() == None);\nassert!(issue_list_url.path() == \"/rust-lang/rust/issues\");\nassert!(issue_list_url.path_segments().map(|c| c.collect::<Vec<_>>()) ==\n        Some(vec![\"rust-lang\", \"rust\", \"issues\"]));\nassert!(issue_list_url.query() == Some(\"labels=E-easy&state=open\"));\nassert!(&issue_list_url[Position::BeforePath..] == \"/rust-lang/rust/issues?labels=E-easy&state=open\");\nassert!(issue_list_url.fragment() == None);\nassert!(!issue_list_url.cannot_be_a_base());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nSome URLs are said to be *cannot-be-a-base*:\nthey don’t have a username, password, host, or port,\nand their \"path\" is an arbitrary string rather than slash-separated segments:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet data_url = Url::parse(\"data:text/plain,Hello?World#\")?;\n\nassert!(data_url.cannot_be_a_base());\nassert!(data_url.scheme() == \"data\");\nassert!(data_url.path() == \"text/plain,Hello\");\nassert!(data_url.path_segments().is_none());\nassert!(data_url.query() == Some(\"World\"));\nassert!(data_url.fragment() == Some(\"\"));\n# Ok(())\n# }\n# run().unwrap();\n```\n\n## Serde\n\nEnable the `serde` feature to include `Deserialize` and `Serialize` implementations for `url::Url`.\n\n# Base URL\n\nMany contexts allow URL *references* that can be relative to a *base URL*:\n\n```html\n<link rel=\"stylesheet\" href=\"../main.css\">\n```\n\nSince parsed URLs are absolute, giving a base is required for parsing relative URLs:\n\n```\nuse url::{Url, ParseError};\n\nassert!(Url::parse(\"../main.css\") == Err(ParseError::RelativeUrlWithoutBase))\n```\n\nUse the `join` method on an `Url` to use it as a base URL:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet this_document = Url::parse(\"http://servo.github.io/rust-url/url/index.html\")?;\nlet css_url = this_document.join(\"../main.css\")?;\nassert_eq!(css_url.as_str(), \"http://servo.github.io/rust-url/main.css\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Feature: `serde`\n\nIf you enable the `serde` feature, [`Url`](struct.Url.html) will implement\n[`serde::Serialize`](https://docs.rs/serde/1/serde/trait.Serialize.html) and\n[`serde::Deserialize`](https://docs.rs/serde/1/serde/trait.Deserialize.html).\nSee [serde documentation](https://serde.rs) for more information.\n\n```toml\nurl = { version = \"2\", features = [\"serde\"] }\n```\n\n# Feature: `debugger_visualizer`\n\nIf you enable the `debugger_visualizer` feature, the `url` crate will include\na [natvis file](https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects)\nfor [Visual Studio](https://www.visualstudio.com/) that allows you to view\n[`Url`](struct.Url.html) objects in the debugger.\n\nThis feature requires Rust 1.71 or later.\n\n```toml\nurl = { version = \"2\", features = [\"debugger_visualizer\"] }\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/url/2.5.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1946","0:37-0:497:1968","0:39-0:548:1970","0:40-0:527:1971","0:42-0:565:1972","0:43-0:598:1973","0:44-0:670:1975","0:45-0:679:1977","0:46-20:89:1978","0:717:1981","0:730:2000","0:741:2436"],"is_stripped":false}}},"2:13212:35781":{"id":"2:13212:35781","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12817:3809","`DoubleEndedIterator`":"2:8204:129","prim@char":"1:12295:458","str::rmatch_indices":"2:13215:35782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43520:4501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41603:4033-0:548:1970":{"id":"a:2:41603:4033-0:548:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41603:4033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41602:4034-0:679:1977":{"id":"a:2:41602:4034-0:679:1977","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41602:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:285:198":{"id":"0:285:198","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[27,4],"end":[27,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"a:2:32044:3544-0:497:1968":{"id":"a:2:32044:3544-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32044:3544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32044:3544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:527:1971":{"id":"0:527:1971","crate_id":0,"name":"Origin","span":{"filename":"src/origin.rs","begin":[53,0],"end":[59,1]},"visibility":"public","docs":"The origin of an URL\n\nTwo URLs with the same origin are considered\nto originate from the same entity and can therefore trust\neach other.\n\nThe origin is determined based on the scheme as follows:\n\n- If the scheme is \"blob\" the origin is the origin of the\n  URL contained in the path component. If parsing fails,\n  it is an opaque origin.\n- If the scheme is \"ftp\", \"http\", \"https\", \"ws\", or \"wss\",\n  then the origin is a tuple of the scheme, host, and port.\n- If the scheme is anything else, the origin is opaque, meaning\n  the URL does not have the same origin as any other URL.\n\nFor more information see <https://url.spec.whatwg.org/#origin>","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:528:2981","0:531:2966"],"impls":["0:101","a:2:41603:4033-0:527:1971","a:2:3110:246-0:527:1971","a:2:32044:3544-0:527:1971","a:2:31987:236-0:527:1971","a:2:41602:4034-0:527:1971","a:2:3145:4191-0:527:1971","b:2:2891-0:527:1971","b:2:2612-0:527:1971","b:2:2887-0:527:1971","b:2:2902-0:527:1971","b:2:2897-0:527:1971","b:2:3720-0:527:1971","b:2:2615-0:527:1971","b:5:725-0:527:1971","0:541","0:546","0:537","0:539","0:536","0:544"]}}},"b:2:2891-0:548:1970":{"id":"b:2:2891-0:548:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:347:2097":{"id":"0:347:2097","crate_id":0,"name":"make_relative","span":{"filename":"src/lib.rs","begin":[444,4],"end":[533,5]},"visibility":"public","docs":"Creates a relative URL if possible, with this URL as the base URL.\n\nThis is the inverse of [`join`].\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet base = Url::parse(\"https://example.net/a/b.html\")?;\nlet url = Url::parse(\"https://example.net/a/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = Url::parse(\"https://example.net/a/b/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = Url::parse(\"https://example.net/a/d/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"../d/c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b.html?c=d\")?;\nlet url = Url::parse(\"https://example.net/a/b.html?e=f\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"?e=f\"));\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf this URL can't be a base for the given URL, `None` is returned.\nThis is for example the case if the scheme, host or port are not the same.\n\n[`join`]: #method.join","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["url",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13139:3171":{"id":"2:13139:3171","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41510:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:698:3339":{"id":"0:698:3339","crate_id":0,"name":"AfterPort","span":{"filename":"src/slicing.rs","begin":[114,4],"end":[114,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:690:3335":{"id":"0:690:3335","crate_id":0,"name":"AfterPassword","span":{"filename":"src/slicing.rs","begin":[110,4],"end":[110,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:727:3566":{"id":"5:727:3566","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:13149:2105":{"id":"2:13149:2105","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13151:28697","str::split_at_mut":"2:13150:28694"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2995":{"id":"0:106:2995","crate_id":0,"name":"unicode_serialization","span":{"filename":"src/origin.rs","begin":[89,4],"end":[107,5]},"visibility":"public","docs":"<https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:565:1972":{"id":"0:565:1972","crate_id":0,"name":"ParseError","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"public","docs":"Errors that can occur during parsing.\n\nThis may be extended in the future so exhaustive matching is\ndiscouraged with an unused variant.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:566:2515","0:568:3022","0:570:3024","0:572:2935","0:574:2886","0:576:2521","0:578:3029","0:580:3031","0:582:2513","0:584:3034"],"impls":["a:2:41603:4033-0:565:1972","a:2:3110:246-0:565:1972","a:2:32044:3544-0:565:1972","a:2:31987:236-0:565:1972","a:2:41602:4034-0:565:1972","a:2:3145:4191-0:565:1972","b:2:2891-0:565:1972","b:2:2612-0:565:1972","b:2:2887-0:565:1972","b:2:2902-0:565:1972","b:2:2897-0:565:1972","b:2:3720-0:565:1972","b:2:2615-0:565:1972","b:5:725-0:565:1972","b:5:5847-0:565:1972","0:594","0:563","0:591","0:134","0:589","0:586","0:587","0:593","0:135"]}}},"b:2:2891-0:679:1977":{"id":"b:2:2891-0:679:1977","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3145:4191-0:548:1970":{"id":"a:2:3145:4191-0:548:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3145:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2902-0:717:1981":{"id":"b:2:2902-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2905:136","2:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:745":{"id":"0:745","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3008,9],"end":[3008,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:747:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:66:2403":{"id":"0:66:2403","crate_id":0,"name":"to_owned","span":{"filename":"src/host.rs","begin":[64,4],"end":[70,5]},"visibility":"public","docs":"Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:694:3337":{"id":"0:694:3337","crate_id":0,"name":"AfterHost","span":{"filename":"src/slicing.rs","begin":[112,4],"end":[112,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2615-0:730:2000":{"id":"b:2:2615-0:730:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2617:28218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13257:35790":{"id":"2:13257:35790","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4903:35790"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43669:4495","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2612-0:670:1975":{"id":"b:2:2612-0:670:1975","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2614:1959"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:586":{"id":"0:586","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31989:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:730:2000":{"id":"0:730:2000","crate_id":0,"name":"ParseOptions","span":{"filename":"src/lib.rs","begin":[209,0],"end":[213,1]},"visibility":"public","docs":"Full configuration for the URL parser.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:332","a:2:41603:4033-0:730:2000","a:2:3110:246-0:730:2000","a:2:32044:3544-0:730:2000","a:2:31987:236-0:730:2000","a:2:41602:4034-0:730:2000","a:2:3145:4191-0:730:2000","b:2:2891-0:730:2000","b:2:2612-0:730:2000","b:2:2887-0:730:2000","b:2:2902-0:730:2000","b:2:2897-0:730:2000","b:2:3720-0:730:2000","b:2:2615-0:730:2000","b:5:725-0:730:2000","0:735","0:737"]}}},"0:578:3029":{"id":"0:578:3029","crate_id":0,"name":"RelativeUrlWithoutBase","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:32044:3544-0:598:1973":{"id":"a:2:32044:3544-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32044:3544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:714:462":{"id":"0:714:462","crate_id":0,"name":"clone","span":{"filename":"src/slicing.rs","begin":[103,15],"end":[103,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2890:2139":{"id":"2:2890:2139","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2864:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2891-0:497:1968":{"id":"b:2:2891-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:528:2981":{"id":"0:528:2981","crate_id":0,"name":"Opaque","span":{"filename":"src/origin.rs","begin":[55,4],"end":[55,24]},"visibility":"default","docs":"A globally unique identifier","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:530:1922"]},"discriminant":null}}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2662,0],"end":[2678,1]},"visibility":"default","docs":"Debug the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:432:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:396:2464":{"id":"0:396:2464","crate_id":0,"name":"path_segments_mut","span":{"filename":"src/lib.rs","begin":[1705,4],"end":[1711,5]},"visibility":"public","docs":"Return an object with methods to manipulate this URL’s path segments.\n\nReturn `Err(())` if this URL is cannot-be-a-base.","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41603:4033-0:598:1973":{"id":"a:2:41603:4033-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41603:4033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41602:4034-0:670:1975":{"id":"a:2:41602:4034-0:670:1975","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41602:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:568:3022":{"id":"0:568:3022","crate_id":0,"name":"IdnaError","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:332":{"id":"0:332","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[215,0],"end":[267,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:334:2002","0:335:2003","0:336:2028","0:337:2030"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31987:236-0:527:1971":{"id":"a:2:31987:236-0:527:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:562:779":{"id":"0:562:779","crate_id":0,"name":"fmt","span":{"filename":"src/origin.rs","begin":[111,37],"end":[111,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39-0:548:1970":{"id":"0:39-0:548:1970","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,24],"end":[165,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::origin::OpaqueOrigin","name":"OpaqueOrigin","id":"0:548:1970","glob":false}}},"2:13171:2520":{"id":"2:13171:2520","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41510:190","prim@char":"1:12295:458","self::pattern":"2:12817:3809"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:505:2165":{"id":"0:505:2165","crate_id":0,"name":"Ipv6","span":{"filename":"src/host.rs","begin":[59,4],"end":[59,18]},"visibility":"default","docs":"An IPv6 address.\n`Url::host_str` returns the serialization of that address between `[` and `]` brackets,\nin the format per [RFC 5952 *A Recommendation\nfor IPv6 Address Text Representation*](https://tools.ietf.org/html/rfc5952):\nlowercase hexadecimal with maximal `::` compression.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:507:1922"]},"discriminant":null}}},"2:2614:1959":{"id":"2:2614:1959","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[170,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2855:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:75:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:686:3333":{"id":"0:686:3333","crate_id":0,"name":"AfterUsername","span":{"filename":"src/slicing.rs","begin":[108,4],"end":[108,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:511":{"id":"0:511","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,16],"end":[41,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:513:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2615-0:565:1972":{"id":"b:2:2615-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2617:28218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2612-0:679:1977":{"id":"b:2:2612-0:679:1977","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2614:1959"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:37-0:497:1968":{"id":"0:37-0:497:1968","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[164,0],"end":[164,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::host::Host","name":"Host","id":"0:497:1968","glob":false}}},"0:592:462":{"id":"0:592:462","crate_id":0,"name":"clone","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:623:677":{"id":"0:623:677","crate_id":0,"name":"eq","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43-0:598:1973":{"id":"0:43-0:598:1973","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[166,36],"end":[166,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::parser::SyntaxViolation","name":"SyntaxViolation","id":"0:598:1973","glob":false}}},"2:13135:2372":{"id":"2:13135:2372","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12365:2745"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:730:2000":{"id":"b:2:2902-0:730:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2905:136","2:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:514":{"id":"0:514","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,23],"end":[41,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"2:2667:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2667:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:375:1256":{"id":"0:375:1256","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[1304,4],"end":[1311,5]},"visibility":"public","docs":"Return the path for this URL, as a percent-encoded ASCII string.\nFor cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'.\nFor other URLs, this starts with a '/' slash\nand continues with slash-separated path segments.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/api/versions?page=2\")?;\nassert_eq!(url.path(), \"/api/versions\");\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.path(), \"/\");\n\nlet url = Url::parse(\"https://example.com/countries/việt nam\")?;\nassert_eq!(url.path(), \"/countries/vi%E1%BB%87t%20nam\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2887-0:730:2000":{"id":"b:2:2887-0:730:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2890:2139"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13200:28707":{"id":"2:13200:28707","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2612-0:717:1981":{"id":"b:2:2612-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2614:1959"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:361:2061":{"id":"0:361:2061","crate_id":0,"name":"cannot_be_a_base","span":{"filename":"src/lib.rs","begin":[956,4],"end":[958,5]},"visibility":"public","docs":"Return whether this URL is a cannot-be-a-base URL,\nmeaning that parsing a relative URL string with this URL as the base will return an error.\n\nThis is the case if the scheme and `:` delimiter are not followed by a `/` slash,\nas is typically the case of `data:` and `mailto:` URLs.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(!url.cannot_be_a_base());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.cannot_be_a_base());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(url.cannot_be_a_base());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41602:4034-0:527:1971":{"id":"a:2:41602:4034-0:527:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41602:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13136:35774":{"id":"2:13136:35774","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:591":{"id":"0:591","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:592:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3720-0:598:1973":{"id":"b:2:3720-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:706:3343":{"id":"0:706:3343","crate_id":0,"name":"AfterQuery","span":{"filename":"src/slicing.rs","begin":[118,4],"end":[118,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:715":{"id":"0:715","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[103,22],"end":[103,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:716:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3145:4191-0:730:2000":{"id":"a:2:3145:4191-0:730:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3145:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2897-0:548:1970":{"id":"b:2:2897-0:548:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2900:136","2:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2615-0:598:1973":{"id":"b:2:2615-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2617:28218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5847-0:717:1981":{"id":"b:5:5847-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5845:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5849:1729"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2897-0:565:1972":{"id":"b:2:2897-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2900:136","2:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5847-0:497:1968":{"id":"b:5:5847-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5845:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:5849:1729"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:598:1973":{"id":"b:5:725-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3566","5:728:2403","5:729:4291"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:499:2167":{"id":"0:499:2167","crate_id":0,"name":"Domain","span":{"filename":"src/host.rs","begin":[47,4],"end":[47,13]},"visibility":"default","docs":"A DNS domain name, as '.' dot-separated labels.\nNon-ASCII labels are encoded in punycode per IDNA if this is the host of\na special URL, or percent encoded for non-special URLs. Hosts for\nnon-special URLs are also called opaque hosts.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:501:1922"]},"discriminant":null}}},"2:13235:28709":{"id":"2:13235:28709","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12817:3809"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12838:4478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:435:677":{"id":"0:435:677","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2686,4],"end":[2688,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13165:2160":{"id":"2:13165:2160","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12817:3809"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32044:3544-0:670:1975":{"id":"a:2:32044:3544-0:670:1975","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32044:3544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:678:779":{"id":"0:678:779","crate_id":0,"name":"fmt","span":{"filename":"src/path_segments.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:471:2689":{"id":"0:471:2689","crate_id":0,"name":"finish","span":{"filename":"src/lib.rs","begin":[3029,4],"end":[3033,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:593":{"id":"0:593","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2891-0:670:1975":{"id":"b:2:2891-0:670:1975","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:280:916":{"id":"0:280:916","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_",{"resolved_path":{"name":"RangeFull","id":"2:39134:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:470:2747":{"id":"0:470:2747","crate_id":0,"name":"as_mut_string","span":{"filename":"src/lib.rs","begin":[3025,4],"end":[3027,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:598:1973":{"id":"b:2:2902-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2905:136","2:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[90,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"22:170:3036","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:729:462":{"id":"0:729:462","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[181,9],"end":[181,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:916":{"id":"0:283:916","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[21,4],"end":[23,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"resolved_path":{"name":"RangeFrom","id":"2:39171:211","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13128:2106":{"id":"2:13128:2106","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2617:28218":{"id":"2:2617:28218","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:363:2247":{"id":"0:363:2247","crate_id":0,"name":"password","span":{"filename":"src/lib.rs","begin":[1015,4],"end":[1027,5]},"visibility":"public","docs":"Return the password for this URL, if any, as a percent-encoded ASCII string.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms:secret123@example.com\")?;\nassert_eq!(url.password(), Some(\"secret123\"));\n\nlet url = Url::parse(\"ftp://:secret123@example.com\")?;\nassert_eq!(url.password(), Some(\"secret123\"));\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.password(), None);\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.password(), None);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340:2052":{"id":"0:340:2052","crate_id":0,"name":"parse_with_params","span":{"filename":"src/lib.rs","begin":[322,4],"end":[336,5]},"visibility":"public","docs":"Parse an absolute URL from a string and add params to its query string.\n\nExisting params are not removed.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse_with_params(\"https://example.net?dont=clobberme\",\n                                 &[(\"lang\", \"rust\"), (\"browser\", \"servo\")])?;\nassert_eq!(\"https://example.net/?dont=clobberme&lang=rust&browser=servo\", url.as_str());\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an absolute URL from the given string,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:8166:164","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2606:102","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2855:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2855:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5599:4666":{"id":"5:5599:4666","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:626":{"id":"0:626","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:627:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:279:198":{"id":"0:279:198","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[13,4],"end":[13,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"a:2:41603:4033-0:741:2436":{"id":"a:2:41603:4033-0:741:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41603:4033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:497:1968":{"id":"0:497:1968","crate_id":0,"name":"Host","span":{"filename":"src/host.rs","begin":[42,0],"end":[60,1]},"visibility":"public","docs":"The host name of an URL.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:499:2167","0:502:2164","0:505:2165"],"impls":["0:64","0:67","a:2:41603:4033-0:497:1968","a:2:3110:246-0:497:1968","a:2:32044:3544-0:497:1968","a:2:31987:236-0:497:1968","a:2:41602:4034-0:497:1968","a:2:3145:4191-0:497:1968","b:2:2891-0:497:1968","b:2:2612-0:497:1968","b:2:2887-0:497:1968","b:2:2902-0:497:1968","b:2:2897-0:497:1968","b:2:3720-0:497:1968","b:2:2615-0:497:1968","b:5:725-0:497:1968","b:5:5847-0:497:1968","0:520","0:508","0:517","0:514","0:511","0:73","0:76","0:523"]}}},"0:263:3092":{"id":"0:263:3092","crate_id":0,"name":"clear","span":{"filename":"src/path_segments.rs","begin":[92,4],"end":[95,5]},"visibility":"public","docs":"Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.\n\nReturns `&mut Self` so that method calls can be chained.\n\nExample:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .clear().push(\"logout\");\nassert_eq!(url.as_str(), \"https://github.com/logout\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523":{"id":"0:523","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,44],"end":[41,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"2:10468:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10468:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:525:849"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13152:28698":{"id":"2:13152:28698","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13151:28697"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41603:4033-0:565:1972":{"id":"a:2:41603:4033-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41603:4033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:385:2399":{"id":"0:385:2399","crate_id":0,"name":"set_fragment","span":{"filename":"src/lib.rs","begin":[1492,4],"end":[1507,5]},"visibility":"public","docs":"Change this URL’s fragment identifier.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com/data.csv\")?;\nassert_eq!(url.as_str(), \"https://example.com/data.csv\");\nurl.set_fragment(Some(\"cell=4,1-6,2\"));\nassert_eq!(url.as_str(), \"https://example.com/data.csv#cell=4,1-6,2\");\nassert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n\nurl.set_fragment(None);\nassert_eq!(url.as_str(), \"https://example.com/data.csv\");\nassert!(url.fragment().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fragment",{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336:2028":{"id":"0:336:2028","crate_id":0,"name":"syntax_violation_callback","span":{"filename":"src/lib.rs","begin":[251,4],"end":[254,5]},"visibility":"public","docs":"Call the provided function or closure for a non-fatal `SyntaxViolation`\nwhen it occurs during parsing. Note that since the provided function is\n`Fn`, the caller might need to utilize _interior mutability_, such as with\na `RefCell`, to collect the violations.\n\n## Example\n```\nuse std::cell::RefCell;\nuse url::{Url, SyntaxViolation};\n# use url::ParseError;\n# fn run() -> Result<(), url::ParseError> {\nlet violations = RefCell::new(Vec::new());\nlet url = Url::options()\n    .syntax_violation_callback(Some(&|v| violations.borrow_mut().push(v)))\n    .parse(\"https:////example.com\")?;\nassert_eq!(url.as_str(), \"https://example.com/\");\nassert_eq!(violations.into_inner(),\n           vec!(SyntaxViolation::ExpectedDoubleSlash));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new",{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Fn","id":"2:3346:139","args":{"parenthesized":{"inputs":[{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":null}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45-0:679:1977":{"id":"0:45-0:679:1977","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[168,0],"end":[168,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::slicing::Position","name":"Position","id":"0:679:1977","glob":false}}},"a:2:41602:4034-0:730:2000":{"id":"a:2:41602:4034-0:730:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41602:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13252:28605":{"id":"2:13252:28605","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-0:670:1975":{"id":"0:44-0:670:1975","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[167,0],"end":[167,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::path_segments::PathSegmentsMut","name":"PathSegmentsMut","id":"0:670:1975","glob":false}}},"0:702:3341":{"id":"0:702:3341","crate_id":0,"name":"AfterPath","span":{"filename":"src/slicing.rs","begin":[116,4],"end":[116,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:3110:246-0:670:1975":{"id":"a:2:3110:246-0:670:1975","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:556":{"id":"0:556","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,24],"end":[111,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10468:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:557:849"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13151:28697":{"id":"2:13151:28697","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13152:28698"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13220:35783":{"id":"2:13220:35783","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13182:28700":{"id":"2:13182:28700","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12817:3809"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12633:4485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2612-0:527:1971":{"id":"b:2:2612-0:527:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2614:1959"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:574:2886":{"id":"0:574:2886","crate_id":0,"name":"InvalidIpv6Address","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:441:849":{"id":"0:441:849","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[2710,4],"end":[2715,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"H"},"bounds":[{"trait_bound":{"trait":{"name":"hash::Hasher","id":"2:10476:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:559":{"id":"0:559","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,30],"end":[111,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:560:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:598:1973":{"id":"0:598:1973","crate_id":0,"name":"SyntaxViolation","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"public","docs":"Non-fatal syntax violations that can occur during parsing.\n\nThis may be extended in the future so exhaustive matching is\ndiscouraged with an unused variant.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:599:3039","0:601:3041","0:603:3043","0:605:3045","0:607:3047","0:609:3049","0:611:3051","0:613:3053","0:615:3055","0:617:3057","0:619:3059"],"impls":["0:596","a:2:41603:4033-0:598:1973","a:2:3110:246-0:598:1973","a:2:32044:3544-0:598:1973","a:2:31987:236-0:598:1973","a:2:41602:4034-0:598:1973","a:2:3145:4191-0:598:1973","b:2:2891-0:598:1973","b:2:2612-0:598:1973","b:2:2887-0:598:1973","b:2:2902-0:598:1973","b:2:2897-0:598:1973","b:2:3720-0:598:1973","b:2:2615-0:598:1973","b:5:725-0:598:1973","b:5:5847-0:598:1973","0:622","0:624","0:628","0:629","0:138","0:626","0:621"]}}},"0:3-20:0:1946":{"id":"0:3-20:0:1946","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[143,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"form_urlencoded","name":"form_urlencoded","id":"20:0:1946","glob":false}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3038,0],"end":[3044,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3342:2750","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:475:650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13256:28610":{"id":"2:13256:28610","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:980:40946"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:422:2684":{"id":"0:422:2684","crate_id":0,"name":"from_str","span":{"filename":"src/lib.rs","begin":[2633,4],"end":[2635,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:352:2138":{"id":"0:352:2138","crate_id":0,"name":"into_string","span":{"filename":"src/lib.rs","begin":[605,4],"end":[607,5]},"visibility":"public","docs":"Return the serialization of this URL.\n\nThis consumes the `Url` and takes ownership of the `String` stored in it.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url_str = \"https://example.net/\";\nlet url = Url::parse(url_str)?;\nassert_eq!(String::from(url), url_str);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"2.3.0\", note = \"use Into<String>\")]"],"deprecation":{"since":"2.3.0","note":"use Into<String>"},"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:430:809":{"id":"0:430:809","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[2656,4],"end":[2658,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:554":{"id":"0:554","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,13],"end":[111,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2662:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:555:677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:546":{"id":"0:546","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,37],"end":[52,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:547:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3720-0:741:2436":{"id":"b:2:3720-0:741:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5617:3091":{"id":"5:5617:3091","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13253:28606"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41603:4033-0:670:1975":{"id":"a:2:41603:4033-0:670:1975","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41603:4033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13226:3069":{"id":"2:13226:3069","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12817:3809"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12843:4477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:533:1922":{"id":"0:533:1922","crate_id":0,"name":"0","span":{"filename":"src/origin.rs","begin":[58,10],"end":[58,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:513:779":{"id":"0:513:779","crate_id":0,"name":"fmt","span":{"filename":"src/host.rs","begin":[41,16],"end":[41,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2887-0:670:1975":{"id":"b:2:2887-0:670:1975","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2890:2139"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:289:916":{"id":"0:289:916","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"resolved_path":{"name":"Range","id":"2:39149:209","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:670:1975":{"id":"0:670:1975","crate_id":0,"name":"PathSegmentsMut","span":{"filename":"src/path_segments.rs","begin":[37,0],"end":[42,1]},"visibility":"public","docs":"Exposes methods to manipulate the path of an URL that is not cannot-be-base.\n\nThe path always starts with a `/` slash, and is made of slash-separated segments.\nThere is always at least one segment (which may be the empty string).\n\nExamples:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"mailto:me@example.com\")?;\nassert!(url.path_segments_mut().is_err());\n\nlet mut url = Url::parse(\"http://example.net/foo/index.html\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .pop().push(\"img\").push(\"2/100%.png\");\nassert_eq!(url.as_str(), \"http://example.net/foo/img/2%2F100%25.png\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:261","a:2:41603:4033-0:670:1975","a:2:3110:246-0:670:1975","a:2:32044:3544-0:670:1975","a:2:31987:236-0:670:1975","a:2:41602:4034-0:670:1975","a:2:3145:4191-0:670:1975","b:2:2891-0:670:1975","b:2:2612-0:670:1975","b:2:2887-0:670:1975","b:2:2902-0:670:1975","b:2:2897-0:670:1975","b:2:3720-0:670:1975","b:2:2615-0:670:1975","0:258","0:676"]}}},"2:2906:1754":{"id":"2:2906:1754","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:544":{"id":"0:544","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,30],"end":[52,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:545:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:366:853":{"id":"0:366:853","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[1126,4],"end":[1133,5]},"visibility":"public","docs":"Return the parsed representation of the host for this URL.\nNon-ASCII domain labels are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\n\nCannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\ndon’t have a host.\n\nSee also the `host_str` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/index.html\")?;\nassert!(url.host().is_some());\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.host().is_some());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(url.host().is_none());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(url.host().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3110:246-0:598:1973":{"id":"a:2:3110:246-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:584:3034":{"id":"0:584:3034","crate_id":0,"name":"Overflow","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:605:3045":{"id":"0:605:3045","crate_id":0,"name":"ExpectedDoubleSlash","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:40-0:527:1971":{"id":"0:40-0:527:1971","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,38],"end":[165,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::origin::Origin","name":"Origin","id":"0:527:1971","glob":false}}},"0:539":{"id":"0:539","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,20],"end":[52,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2667:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:527:1971":{"id":"b:5:725-0:527:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3566","5:728:2403","5:729:4291"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:551":{"id":"0:551","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,9],"end":[111,11]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2667:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32044:3544-0:717:1981":{"id":"a:2:32044:3544-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32044:3544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2902-0:548:1970":{"id":"b:2:2902-0:548:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2905:136","2:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13191:35779":{"id":"2:13191:35779","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12817:3809","str::split":"2:13179:2111","prim@char":"1:12295:458","str::split_terminator":"2:13188:35778"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43438:4508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12838:4478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405:2542":{"id":"0:405:2542","crate_id":0,"name":"set_ip_host","span":{"filename":"src/lib.rs","begin":[2067,4],"end":[2078,5]},"visibility":"public","docs":"Change this URL’s host to the given IP address.\n\nIf this URL is cannot-be-a-base, do nothing and return `Err`.\n\nCompared to `Url::set_host`, this skips the host parser.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"http://example.com\")?;\nurl.set_ip_host(\"127.0.0.1\".parse().unwrap());\nassert_eq!(url.host_str(), Some(\"127.0.0.1\"));\nassert_eq!(url.as_str(), \"http://127.0.0.1/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL's from mailto(cannot-be-base) to ip:\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.com\")?;\nlet result = url.set_ip_host(\"127.0.0.1\".parse().unwrap());\n\nassert_eq!(url.as_str(), \"mailto:rms@example.com\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["address",{"resolved_path":{"name":"IpAddr","id":"2:41248:169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3110:246-0:679:1977":{"id":"a:2:3110:246-0:679:1977","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:627:462":{"id":"0:627:462","crate_id":0,"name":"clone","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:613:3053":{"id":"0:613:3053","crate_id":0,"name":"NullInFragment","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:710:3345":{"id":"0:710:3345","crate_id":0,"name":"AfterFragment","span":{"filename":"src/slicing.rs","begin":[120,4],"end":[120,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:534:1923":{"id":"0:534:1923","crate_id":0,"name":"1","span":{"filename":"src/origin.rs","begin":[58,18],"end":[58,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"crate::host::Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:399:2486":{"id":"0:399:2486","crate_id":0,"name":"set_port","span":{"filename":"src/lib.rs","begin":[1789,4],"end":[1799,5]},"visibility":"public","docs":"Change this URL’s port number.\n\nNote that default port numbers are not reflected in the serialization.\n\nIf this URL is cannot-be-a-base, does not have a host, or has the `file` scheme;\ndo nothing and return `Err`.\n\n# Examples\n\n```\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"ssh://example.net:2048/\")?;\n\nurl.set_port(Some(4096)).map_err(|_| \"cannot be base\")?;\nassert_eq!(url.as_str(), \"ssh://example.net:4096/\");\n\nurl.set_port(None).map_err(|_| \"cannot be base\")?;\nassert_eq!(url.as_str(), \"ssh://example.net/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nKnown default port numbers are not reflected:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://example.org/\")?;\n\nurl.set_port(Some(443)).map_err(|_| \"cannot be base\")?;\nassert!(url.port().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot set port for cannot-be-a-base URLs:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\n\nlet result = url.set_port(Some(80));\nassert!(result.is_err());\n\nlet result = url.set_port(None);\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["port",{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/path_segments.rs","begin":[72,0],"end":[246,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:263:3092","0:264:3263","0:265:2934","0:266:2115","0:267:2557"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3145:4191-0:598:1973":{"id":"a:2:3145:4191-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3145:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:380:2120":{"id":"0:380:2120","crate_id":0,"name":"fragment","span":{"filename":"src/lib.rs","begin":[1455,4],"end":[1460,5]},"visibility":"public","docs":"Return this URL’s fragment identifier, if any.\n\nA fragment is the part of the URL after the `#` symbol.\nThe fragment is optional and, if present, contains a fragment identifier\nthat identifies a secondary resource, such as a section heading\nof a document.\n\nIn HTML, the fragment identifier is usually the id attribute of a an element\nthat is scrolled to on load. Browsers typically will not send the fragment portion\nof a URL to the server.\n\n**Note:** the parser did *not* percent-encode this component,\nbut the input may have been percent-encoded already.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/data.csv#row=4\")?;\n\nassert_eq!(url.fragment(), Some(\"row=4\"));\n\nlet url = Url::parse(\"https://example.com/data.csv#cell=4,1-6,2\")?;\n\nassert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:439:1251":{"id":"0:439:1251","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[2702,4],"end":[2704,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"2:30827:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5602:36485":{"id":"5:5602:36485","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13157:34239":{"id":"2:13157:34239","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13158:34241"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43644:4486","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:696:3338":{"id":"0:696:3338","crate_id":0,"name":"BeforePort","span":{"filename":"src/slicing.rs","begin":[113,4],"end":[113,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:572:2935":{"id":"0:572:2935","crate_id":0,"name":"InvalidIpv4Address","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:5616:29856":{"id":"5:5616:29856","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13252:28605"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:680:3330":{"id":"0:680:3330","crate_id":0,"name":"BeforeScheme","span":{"filename":"src/slicing.rs","begin":[105,4],"end":[105,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:46-20:89:1978":{"id":"0:46-20:89:1978","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[169,0],"end":[169,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"form_urlencoded::EncodingOverride","name":"EncodingOverride","id":"20:89:1978","glob":false}}},"0:428:779":{"id":"0:428:779","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2649,4],"end":[2651,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2615-0:670:1975":{"id":"b:2:2615-0:670:1975","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2617:28218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:369:2289":{"id":"0:369:2289","crate_id":0,"name":"port_or_known_default","span":{"filename":"src/lib.rs","begin":[1222,4],"end":[1224,5]},"visibility":"public","docs":"Return the port number for this URL, or the default port number if it is known.\n\nThis method only knows the default port number\nof the `http`, `https`, `ws`, `wss` and `ftp` schemes.\n\nFor URLs in these schemes, this method always returns `Some(_)`.\nFor other schemes, it is the same as `Url::port()`.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"foo://example.com\")?;\nassert_eq!(url.port_or_known_default(), None);\n\nlet url = Url::parse(\"foo://example.com:1456\")?;\nassert_eq!(url.port_or_known_default(), Some(1456));\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.port_or_known_default(), Some(443));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:420":{"id":"0:420","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2629,0],"end":[2636,1]},"visibility":"default","docs":"Parse a string as an URL, without a base URL or encoding override.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12777:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:421:135","0:422:2684"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13215:35782":{"id":"2:13215:35782","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12817:3809","`DoubleEndedIterator`":"2:8204:129","prim@char":"1:12295:458","str::match_indices":"2:13212:35781"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43538:4502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12838:4478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:414:2639":{"id":"0:414:2639","crate_id":0,"name":"from_directory_path","span":{"filename":"src/lib.rs","begin":[2480,4],"end":[2486,5]},"visibility":"public","docs":"Convert a directory name as `std::path::Path` into an URL in the `file` scheme.\n\nThis returns `Err` if the given path is not absolute or,\non Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n\nCompared to `from_file_path`, this ensure that URL’s the path has a trailing slash\nso that the entire path is considered when using this URL as a base URL.\n\nFor example:\n\n* `\"index.html\"` parsed with `Url::from_directory_path(Path::new(\"/var/www\"))`\n  as the base URL is `file:///var/www/index.html`\n* `\"index.html\"` parsed with `Url::from_file_path(Path::new(\"/var/www\"))`\n  as the base URL is `file:///var/index.html`, which might not be what was intended.\n\nNote that `std::path` does not consider trailing slashes significant\nand usually does not include them (e.g. in `Path::parent()`).","links":{},"attrs":["#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]","#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2855:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5381:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2897-0:497:1968":{"id":"b:2:2897-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2900:136","2:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2615-0:548:1970":{"id":"b:2:2615-0:548:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2617:28218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13251:28604":{"id":"2:13251:28604","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:737":{"id":"0:737","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[207,15],"end":[207,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:739:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13141:10604":{"id":"2:13141:10604","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41510:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2615-0:741:2436":{"id":"b:2:2615-0:741:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2617:28218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:475:650":{"id":"0:475:650","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[3039,4],"end":[3043,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[269,0],"end":[2626,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:339:2030","0:340:2052","0:346:2082","0:347:2097","0:349:1219","0:351:336","0:352:2138","0:356:1969","0:357:2098","0:358:2168","0:359:2211","0:360:2228","0:361:2061","0:362:2242","0:363:2247","0:364:2251","0:365:2163","0:366:853","0:367:2271","0:368:1995","0:369:2289","0:371:2310","0:375:1256","0:376:1974","0:378:2118","0:379:2370","0:380:2120","0:385:2399","0:390:2412","0:392:2057","0:394:2455","0:396:2464","0:399:2486","0:402:2512","0:405:2542","0:406:2554","0:408:2571","0:410:2604","0:412:2625","0:414:2639","0:416:2675"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:371:2310":{"id":"0:371:2310","crate_id":0,"name":"socket_addrs","span":{"filename":"src/lib.rs","begin":[1253,4],"end":[1279,5]},"visibility":"public","docs":"Resolve a URL’s host and port number to `SocketAddr`.\n\nIf the URL has the default port number of a scheme that is unknown to this library,\n`default_port_number` provides an opportunity to provide the actual port number.\nIn non-example code this should be implemented either simply as `|| None`,\nor by matching on the URL’s `.scheme()`.\n\nIf the host is a domain, it is resolved using the standard library’s DNS support.\n\n# Examples\n\n```no_run\nlet url = url::Url::parse(\"https://example.net/\").unwrap();\nlet addrs = url.socket_addrs(|| None).unwrap();\nstd::net::TcpStream::connect(&*addrs)\n# ;\n```\n\n```\n/// With application-specific known default port numbers\nfn socket_addrs(url: url::Url) -> std::io::Result<Vec<std::net::SocketAddr>> {\n    url.socket_addrs(|| match url.scheme() {\n        \"socks5\" | \"socks5h\" => Some(1080),\n        _ => None,\n    })\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["default_port_number",{"impl_trait":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3346:139","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3020:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7037:263","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddr","id":"2:41448:1964","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl Fn() -> Option<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3346:139","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:538:677":{"id":"0:538:677","crate_id":0,"name":"eq","span":{"filename":"src/origin.rs","begin":[52,9],"end":[52,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2887-0:679:1977":{"id":"b:2:2887-0:679:1977","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2890:2139"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:264:3263":{"id":"0:264:3263","crate_id":0,"name":"pop_if_empty","span":{"filename":"src/path_segments.rs","begin":[125,4],"end":[133,5]},"visibility":"public","docs":"Remove the last segment of this URL’s path if it is empty,\nexcept if these was only one segment to begin with.\n\nIn other words, remove one path trailing slash, if any,\nunless it is also the initial slash (so this does nothing if `url.path() == \"/\")`.\n\nReturns `&mut Self` so that method calls can be chained.\n\nExample:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .push(\"pulls\");\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url//pulls\");\n\nlet mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .pop_if_empty().push(\"pulls\");\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url/pulls\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:730:2000":{"id":"b:5:725-0:730:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:727:3566","5:728:2403","5:729:4291"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13259:10860":{"id":"2:13259:10860","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4904:10860"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43678:4496","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:597:3017":{"id":"0:597:3017","crate_id":0,"name":"description","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:427":{"id":"0:427","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2647,0],"end":[2652,1]},"visibility":"default","docs":"Display the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:428:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2612-0:730:2000":{"id":"b:2:2612-0:730:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2614:1959"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13225:35786":{"id":"2:13225:35786","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31987:236-0:730:2000":{"id":"a:2:31987:236-0:730:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2887-0:497:1968":{"id":"b:2:2887-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2890:2139"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2615-0:497:1968":{"id":"b:2:2615-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2617:28218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:548:1970":{"id":"b:5:725-0:548:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3566","5:728:2403","5:729:4291"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:603:3043":{"id":"0:603:3043","crate_id":0,"name":"EmbeddedCredentials","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:700:3340":{"id":"0:700:3340","crate_id":0,"name":"BeforePath","span":{"filename":"src/slicing.rs","begin":[115,4],"end":[115,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13127:973":{"id":"2:13127:973","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12295:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:712":{"id":"0:712","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[103,9],"end":[103,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[75,0],"end":[75,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","source","type_id","description","cause"],"trait":{"name":"Error","id":"2:2950:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13148:35776":{"id":"2:13148:35776","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12301:1671","crate::ops::IndexMut":"2:3381:3625","str::slice_unchecked":"2:13147:35775"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:3722:1769":{"id":"2:3722:1769","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39286:8484","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:739:462":{"id":"0:739:462","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[207,15],"end":[207,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:565:1972":{"id":"b:2:2902-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2905:136","2:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2897-0:679:1977":{"id":"b:2:2897-0:679:1977","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2900:136","2:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:497:1968":{"id":"b:2:2902-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2905:136","2:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:425:136":{"id":"0:425:136","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[2639,4],"end":[2639,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:621":{"id":"0:621","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31989:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3145:4191-0:741:2436":{"id":"a:2:3145:4191-0:741:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3145:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2612-0:741:2436":{"id":"b:2:2612-0:741:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2614:1959"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:102:2960":{"id":"0:102:2960","crate_id":0,"name":"new_opaque","span":{"filename":"src/origin.rs","begin":[63,4],"end":[66,5]},"visibility":"public","docs":"Creates a new opaque origin that is only equal to itself.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2887-0:598:1973":{"id":"b:2:2887-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2890:2139"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5849:1729":{"id":"5:5849:1729","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2897-0:598:1973":{"id":"b:2:2897-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2900:136","2:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:376:1974":{"id":"0:376:1974","crate_id":0,"name":"path_segments","span":{"filename":"src/lib.rs","begin":[1351,4],"end":[1354,5]},"visibility":"public","docs":"Unless this URL is cannot-be-a-base,\nreturn an iterator of '/' slash-separated path segments,\neach as a percent-encoded ASCII string.\n\nReturn `None` for cannot-be-a-base URLs.\n\nWhen `Some` is returned, the iterator always contains at least one string\n(which may be empty).\n\n# Examples\n\n```\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet url = Url::parse(\"https://example.com/foo/bar\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"foo\"));\nassert_eq!(path_segments.next(), Some(\"bar\"));\nassert_eq!(path_segments.next(), None);\n\nlet url = Url::parse(\"https://example.com\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"\"));\nassert_eq!(path_segments.next(), None);\n\nlet url = Url::parse(\"data:text/plain,HelloWorld\")?;\nassert!(url.path_segments().is_none());\n\nlet url = Url::parse(\"https://example.com/countries/việt nam\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"countries\"));\nassert_eq!(path_segments.next(), Some(\"vi%E1%BB%87t%20nam\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"str::Split","id":"2:43370:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41602:4034-0:717:1981":{"id":"a:2:41602:4034-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41602:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32044:3544-0:730:2000":{"id":"a:2:32044:3544-0:730:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32044:3544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:682:3331":{"id":"0:682:3331","crate_id":0,"name":"AfterScheme","span":{"filename":"src/slicing.rs","begin":[106,4],"end":[106,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:68:2030":{"id":"0:68:2030","crate_id":0,"name":"parse","span":{"filename":"src/host.rs","begin":[77,4],"end":[122,5]},"visibility":"public","docs":"Parse a host: either an IPv6 address in [] square brackets, or a domain.\n\n<https://url.spec.whatwg.org/#host-parsing>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:423":{"id":"0:423","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2638,0],"end":[2644,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:425:136","0:426:1754"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32044:3544-0:527:1971":{"id":"a:2:32044:3544-0:527:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32044:3544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:378:2118":{"id":"0:378:2118","crate_id":0,"name":"query","span":{"filename":"src/lib.rs","begin":[1380,4],"end":[1392,5]},"visibility":"public","docs":"Return this URL’s query string, if any, as a percent-encoded ASCII string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\nfn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/products?page=2\")?;\nlet query = url.query();\nassert_eq!(query, Some(\"page=2\"));\n\nlet url = Url::parse(\"https://example.com/products\")?;\nlet query = url.query();\nassert!(query.is_none());\n\nlet url = Url::parse(\"https://example.com/?country=español\")?;\nlet query = url.query();\nassert_eq!(query, Some(\"country=espa%C3%B1ol\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:36487":{"id":"5:5613:36487","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,9],"end":[52,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2662:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:538:677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:502:2164":{"id":"0:502:2164","crate_id":0,"name":"Ipv4","span":{"filename":"src/host.rs","begin":[52,4],"end":[52,18]},"visibility":"default","docs":"An IPv4 address.\n`Url::host_str` returns the serialization of this address,\nas four decimal integers separated by `.` dots.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:504:1922"]},"discriminant":null}}},"0:335:2003":{"id":"0:335:2003","crate_id":0,"name":"encoding_override","span":{"filename":"src/lib.rs","begin":[224,4],"end":[227,5]},"visibility":"public","docs":"Override the character encoding of query strings.\nThis is a legacy concept only relevant for HTML.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new",{"resolved_path":{"name":"EncodingOverride","id":"20:89:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13206:2152":{"id":"2:13206:2152","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12817:3809","`DoubleEndedIterator`":"2:8204:129","prim@char":"1:12295:458","str::rmatches":"2:13209:35780"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43574:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[139,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:139:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:519:469":{"id":"0:519:469","crate_id":0,"name":"cmp","span":{"filename":"src/host.rs","begin":[41,27],"end":[41,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30827:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:570:3024":{"id":"0:570:3024","crate_id":0,"name":"InvalidPort","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:624":{"id":"0:624","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2667:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13129:35771":{"id":"2:13129:35771","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2897-0:741:2436":{"id":"b:2:2897-0:741:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2900:136","2:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:364:2251":{"id":"0:364:2251","crate_id":0,"name":"has_host","span":{"filename":"src/lib.rs","begin":[1050,4],"end":[1052,5]},"visibility":"public","docs":"Equivalent to `url.host().is_some()`.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.has_host());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.has_host());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(!url.has_host());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,37],"end":[111,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:562:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13145:28670":{"id":"2:13145:28670","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[73,0],"end":[168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:68:2030","0:70:2524"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:713":{"id":"0:713","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[103,15],"end":[103,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:714:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3720-0:548:1970":{"id":"b:2:3720-0:548:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:288:198":{"id":"0:288:198","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[34,4],"end":[34,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"0:438":{"id":"0:438","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2700,0],"end":[2705,1]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"2:2704:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:439:1251"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3720-0:679:1977":{"id":"b:2:3720-0:679:1977","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13130:35772":{"id":"2:13130:35772","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13138:28671":{"id":"2:13138:28671","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12312:1799"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286:916":{"id":"0:286:916","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[28,4],"end":[30,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"resolved_path":{"name":"RangeTo","id":"2:39189:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13158:34241":{"id":"2:13158:34241","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13157:34239"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43653:4484","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:510:462":{"id":"0:510:462","crate_id":0,"name":"clone","span":{"filename":"src/host.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13229:3158":{"id":"2:13229:3158","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12817:3809"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31987:236-0:548:1970":{"id":"a:2:31987:236-0:548:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3145:4191-0:679:1977":{"id":"a:2:3145:4191-0:679:1977","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3145:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:563":{"id":"0:563","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:564:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3720-0:670:1975":{"id":"b:2:3720-0:670:1975","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:357:2098":{"id":"0:357:2098","crate_id":0,"name":"scheme","span":{"filename":"src/lib.rs","begin":[831,4],"end":[833,5]},"visibility":"public","docs":"Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert_eq!(url.scheme(), \"file\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[26,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:39117:3291","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeTo","id":"2:39189:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:285:198","0:286:916"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:728:2403":{"id":"5:728:2403","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:535:1924":{"id":"0:535:1924","crate_id":0,"name":"2","span":{"filename":"src/origin.rs","begin":[58,32],"end":[58,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u16"}}},"a:2:31987:236-0:679:1977":{"id":"a:2:31987:236-0:679:1977","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:582:2513":{"id":"0:582:2513","crate_id":0,"name":"SetHostOnCannotBeABaseUrl","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13209:35780":{"id":"2:13209:35780","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12817:3809","`DoubleEndedIterator`":"2:8204:129","prim@char":"1:12295:458","str::matches":"2:13206:2152"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43592:4504","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12838:4478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:729:4291":{"id":"5:729:4291","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2612-0:565:1972":{"id":"b:2:2612-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2614:1959"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13137:334":{"id":"2:13137:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13138:28671","`u8`":"1:12312:1799"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:560:462":{"id":"0:560:462","crate_id":0,"name":"clone","span":{"filename":"src/origin.rs","begin":[111,30],"end":[111,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:379:2370":{"id":"0:379:2370","crate_id":0,"name":"query_pairs","span":{"filename":"src/lib.rs","begin":[1419,4],"end":[1421,5]},"visibility":"public","docs":"Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return an iterator of (key, value) pairs.\n\n# Examples\n\n```rust\nuse std::borrow::Cow;\n\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/products?page=2&sort=desc\")?;\nlet mut pairs = url.query_pairs();\n\nassert_eq!(pairs.count(), 2);\n\nassert_eq!(pairs.next(), Some((Cow::Borrowed(\"page\"), Cow::Borrowed(\"2\"))));\nassert_eq!(pairs.next(), Some((Cow::Borrowed(\"sort\"), Cow::Borrowed(\"desc\"))));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"form_urlencoded::Parse","id":"20:91:2371","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41603:4033-0:730:2000":{"id":"a:2:41603:4033-0:730:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41603:4033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:3110:246-0:497:1968":{"id":"a:2:3110:246-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3110:246-0:741:2436":{"id":"a:2:3110:246-0:741:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:609:3049":{"id":"0:609:3049","crate_id":0,"name":"FileWithHostAndWindowsDrive","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:346:2082":{"id":"0:346:2082","crate_id":0,"name":"join","span":{"filename":"src/lib.rs","begin":[399,4],"end":[401,5]},"visibility":"public","docs":"Parse a string as an URL, with this URL as the base URL.\n\nThe inverse of this is [`make_relative`].\n\nNote: a trailing slash is significant.\nWithout it, the last path component is considered to be a “file” name\nto be removed to get at the “directory” that is used as the base:\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet base = Url::parse(\"https://example.net/a/b.html\")?;\nlet url = base.join(\"c.png\")?;\nassert_eq!(url.as_str(), \"https://example.net/a/c.png\");  // Not /a/b.html/c.png\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = base.join(\"c.png\")?;\nassert_eq!(url.as_str(), \"https://example.net/a/b/c.png\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an URL from the given string\nwith this URL as the base URL, a [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html\n[`make_relative`]: #method.make_relative","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3145:4191-0:497:1968":{"id":"a:2:3145:4191-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3145:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3145:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:508":{"id":"0:508","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:510:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2891-0:527:1971":{"id":"b:2:2891-0:527:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:527:1971":{"id":"b:2:2902-0:527:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2905:136","2:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:617:3057":{"id":"0:617:3057","crate_id":0,"name":"TabOrNewlineIgnored","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:555:677":{"id":"0:555:677","crate_id":0,"name":"eq","span":{"filename":"src/origin.rs","begin":[111,13],"end":[111,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:525:849":{"id":"0:525:849","crate_id":0,"name":"hash","span":{"filename":"src/host.rs","begin":[41,44],"end":[41,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10476:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2901:1756":{"id":"2:2901:1756","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32044:3544-0:741:2436":{"id":"a:2:32044:3544-0:741:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32044:3544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2893:809":{"id":"2:2893:809","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13197:28705":{"id":"2:13197:28705","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12295:458","str::splitn":"2:13194:28703","self::pattern":"2:12817:3809"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43492:4506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12838:4478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13253:28606":{"id":"2:13253:28606","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31987:236-0:717:1981":{"id":"a:2:31987:236-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[61,0],"end":[108,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:102:2960","0:104:2988","0:105:2990","0:106:2995"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2891-0:717:1981":{"id":"b:2:2891-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:267:2557":{"id":"0:267:2557","crate_id":0,"name":"extend","span":{"filename":"src/path_segments.rs","begin":[215,4],"end":[245,5]},"visibility":"public","docs":"Append each segment from the given iterator at the end of this URL’s path.\n\nEach segment is percent-encoded like in `Url::parse` or `Url::join`,\nexcept that `%` and `/` characters are also encoded (to `%25` and `%2F`).\nThis is unlike `Url::parse` where `%` is left as-is in case some of the input\nis already percent-encoded, and `/` denotes a path segment separator.)\n\nNote that, in addition to slashes between new segments,\nthis always adds a slash between the existing path and the new segments\n*except* if the existing path is `\"/\"`.\nIf the previous last segment was empty (if the path had a trailing slash)\nthe path after `.extend()` will contain two consecutive slashes.\nIf that is undesired, call `.pop_if_empty()` first.\n\nTo obtain a behavior similar to `Url::join`, call `.pop()` unconditionally first.\n\nReturns `&mut Self` so that method calls can be chained.\n\nExample:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/\")?;\nlet org = \"servo\";\nlet repo = \"rust-url\";\nlet issue_number = \"188\";\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .extend(&[org, repo, \"issues\", issue_number]);\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url/issues/188\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nIn order to make sure that parsing the serialization of an URL gives the same URL,\na segment is ignored if it is `\".\"` or `\"..\"`:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/servo\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .extend(&[\"..\", \"rust-url\", \".\", \"pulls\"]);\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url/pulls\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["segments",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:8166:164","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2855:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41602:4034-0:741:2436":{"id":"a:2:41602:4034-0:741:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41602:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:580:3031":{"id":"0:580:3031","crate_id":0,"name":"RelativeUrlWithCannotBeABaseBase","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:5614:2138":{"id":"5:5614:2138","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:3547","`String`":"5:7616:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:3547","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2612-0:497:1968":{"id":"b:2:2612-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2614:1959"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:410:2604":{"id":"0:410:2604","crate_id":0,"name":"set_scheme","span":{"filename":"src/lib.rs","begin":[2363,4],"end":[2412,5]},"visibility":"public","docs":"Change this URL’s scheme.\n\nDo nothing and return `Err` under the following circumstances:\n\n* If the new scheme is not in `[a-zA-Z][a-zA-Z0-9+.-]+`\n* If this URL is cannot-be-a-base and the new scheme is one of\n  `http`, `https`, `ws`, `wss` or `ftp`\n* If either the old or new scheme is `http`, `https`, `ws`,\n  `wss` or `ftp` and the other is not one of these\n* If the new scheme is `file` and this URL includes credentials\n  or has a non-null port\n* If this URL's scheme is `file` and its host is empty or null\n\nSee also [the URL specification's section on legal scheme state\noverrides](https://url.spec.whatwg.org/#scheme-state).\n\n# Examples\n\nChange the URL’s scheme from `https` to `http`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_scheme(\"http\");\nassert_eq!(url.as_str(), \"http://example.net/\");\nassert!(result.is_ok());\n# Ok(())\n# }\n# run().unwrap();\n```\nChange the URL’s scheme from `foo` to `bar`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_scheme(\"bar\");\nassert_eq!(url.as_str(), \"bar://example.net\");\nassert!(result.is_ok());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL’s scheme from `https` to `foõ`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_scheme(\"foõ\");\nassert_eq!(url.as_str(), \"https://example.net/\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL’s scheme from `mailto` (cannot-be-a-base) to `https`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\nlet result = url.set_scheme(\"https\");\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\nCannot change the URL’s scheme from `foo` to `https`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_scheme(\"https\");\nassert_eq!(url.as_str(), \"foo://example.net\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\nCannot change the URL’s scheme from `http` to `foo`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"http://example.net\")?;\nlet result = url.set_scheme(\"foo\");\nassert_eq!(url.as_str(), \"http://example.net/\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy::result_unit_err, clippy::suspicious_operation_groupings)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["scheme",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13162:2929":{"id":"2:13162:2929","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12817:3809"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287":{"id":"0:287","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[33,0],"end":[38,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:39117:3291","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:39149:209","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:288:198","0:289:916"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:437:469":{"id":"0:437:469","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[2694,4],"end":[2696,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"cmp::Ordering","id":"2:30827:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:542:849":{"id":"0:542:849","crate_id":0,"name":"hash","span":{"filename":"src/origin.rs","begin":[52,24],"end":[52,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10476:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41602:4034-0:548:1970":{"id":"a:2:41602:4034-0:548:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41602:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3110:246-0:548:1970":{"id":"a:2:3110:246-0:548:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:416:2675":{"id":"0:416:2675","crate_id":0,"name":"to_file_path","span":{"filename":"src/lib.rs","begin":[2597,4],"end":[2610,5]},"visibility":"public","docs":"Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.\n\n**Note:** This does not actually check the URL’s `scheme`,\nand may give nonsensical results for other schemes.\nIt is the user’s responsibility to check the URL’s scheme before calling this.\n\n```\n# use url::Url;\n# let url = Url::parse(\"file:///etc/passwd\").unwrap();\nlet path = url.to_file_path();\n```\n\nReturns `Err` if the host is neither empty nor `\"localhost\"` (except on Windows, where\n`file:` URLs may have a non-local host),\nor if `Path::new_opt()` returns `None`.\n(That is, if the percent-decoded path contains a NUL byte or,\nfor a Windows path, is not UTF-8.)","links":{},"attrs":["#[inline]","#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]","#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5269:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2900:136":{"id":"2:2900:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:564:779":{"id":"0:564:779","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:2934":{"id":"0:265:2934","crate_id":0,"name":"pop","span":{"filename":"src/path_segments.rs","begin":[140,4],"end":[151,5]},"visibility":"public","docs":"Remove the last segment of this URL’s path.\n\nIf the path only has one segment, make it empty such that `url.path() == \"/\"`.\n\nReturns `&mut Self` so that method calls can be chained.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:601:3041":{"id":"0:601:3041","crate_id":0,"name":"C0SpaceIgnored","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:358:2168":{"id":"0:358:2168","crate_id":0,"name":"is_special","span":{"filename":"src/lib.rs","begin":[851,4],"end":[854,5]},"visibility":"public","docs":"Return whether the URL is special (has a special scheme)\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nassert!(Url::parse(\"http:///tmp/foo\")?.is_special());\nassert!(Url::parse(\"file:///tmp/foo\")?.is_special());\nassert!(!Url::parse(\"moz:///tmp/foo\")?.is_special());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:615:3055":{"id":"0:615:3055","crate_id":0,"name":"PercentDecode","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:3110:246-0:730:2000":{"id":"a:2:3110:246-0:730:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2897-0:730:2000":{"id":"b:2:2897-0:730:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2900:136","2:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13203:28708":{"id":"2:13203:28708","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12838:4478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3720-0:497:1968":{"id":"b:2:3720-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:334:2002":{"id":"0:334:2002","crate_id":0,"name":"base_url","span":{"filename":"src/lib.rs","begin":[217,4],"end":[220,5]},"visibility":"public","docs":"Change the base URL","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new",{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349:1219":{"id":"0:349:1219","crate_id":0,"name":"options","span":{"filename":"src/lib.rs","begin":[554,4],"end":[560,5]},"visibility":"public","docs":"Return a default `ParseOptions` that can fully configure the URL parser.\n\n# Examples\n\nGet default `ParseOptions`, then change base url\n\n```rust\nuse url::Url;\n# use url::ParseError;\n# fn run() -> Result<(), ParseError> {\nlet options = Url::options();\nlet api = Url::parse(\"https://api.example.com\")?;\nlet base_url = options.base_url(Some(&api));\nlet version_url = base_url.parse(\"version.json\")?;\nassert_eq!(version_url.as_str(), \"https://api.example.com/version.json\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:741:2436":{"id":"0:741:2436","crate_id":0,"name":"UrlQuery","span":{"filename":"src/lib.rs","begin":[3009,0],"end":[3012,1]},"visibility":"public","docs":"Implementation detail of `Url::query_pairs_mut`. Typically not used directly.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:41603:4033-0:741:2436","a:2:3110:246-0:741:2436","a:2:32044:3544-0:741:2436","a:2:31987:236-0:741:2436","a:2:41602:4034-0:741:2436","a:2:3145:4191-0:741:2436","b:2:2891-0:741:2436","b:2:2612-0:741:2436","b:2:2887-0:741:2436","b:2:2902-0:741:2436","b:2:2897-0:741:2436","b:2:3720-0:741:2436","b:2:2615-0:741:2436","0:745","0:473","0:468"]}}},"2:13188:35778":{"id":"2:13188:35778","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12817:3809","str::split":"2:13179:2111","prim@char":"1:12295:458","`DoubleEndedIterator`":"2:8204:129","str::rsplit_terminator":"2:13191:35779"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43420:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2891-0:598:1973":{"id":"b:2:2891-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:708:3344":{"id":"0:708:3344","crate_id":0,"name":"BeforeFragment","span":{"filename":"src/slicing.rs","begin":[119,4],"end":[119,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:390:2412":{"id":"0:390:2412","crate_id":0,"name":"set_query","span":{"filename":"src/lib.rs","begin":[1546,4],"end":[1576,5]},"visibility":"public","docs":"Change this URL’s query string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com/products\")?;\nassert_eq!(url.as_str(), \"https://example.com/products\");\n\nurl.set_query(Some(\"page=2\"));\nassert_eq!(url.as_str(), \"https://example.com/products?page=2\");\nassert_eq!(url.query(), Some(\"page=2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["query",{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:408:2571":{"id":"0:408:2571","crate_id":0,"name":"set_username","span":{"filename":"src/lib.rs","begin":[2201,4],"end":[2250,5]},"visibility":"public","docs":"Change this URL’s username.\n\nIf this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n# Examples\n\nCannot setup username from mailto(cannot-be-base)\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rmz@example.com\")?;\nlet result = url.set_username(\"user1\");\nassert_eq!(url.as_str(), \"mailto:rmz@example.com\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nSetup username to user1\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"ftp://:secre1@example.com/\")?;\nlet result = url.set_username(\"user1\");\nassert!(result.is_ok());\nassert_eq!(url.username(), \"user1\");\nassert_eq!(url.as_str(), \"ftp://user1:secre1@example.com/\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["username",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:392:2057":{"id":"0:392:2057","crate_id":0,"name":"query_pairs_mut","span":{"filename":"src/lib.rs","begin":[1610,4],"end":[1628,5]},"visibility":"public","docs":"Manipulate this URL’s query string, viewed as a sequence of name/value pairs\nin `application/x-www-form-urlencoded` syntax.\n\nThe return value has a method-chaining API:\n\n```rust\n# use url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net?lang=fr#nav\")?;\nassert_eq!(url.query(), Some(\"lang=fr\"));\n\nurl.query_pairs_mut().append_pair(\"foo\", \"bar\");\nassert_eq!(url.query(), Some(\"lang=fr&foo=bar\"));\nassert_eq!(url.as_str(), \"https://example.net/?lang=fr&foo=bar#nav\");\n\nurl.query_pairs_mut()\n    .clear()\n    .append_pair(\"foo\", \"bar & baz\")\n    .append_pair(\"saisons\", \"\\u{00C9}t\\u{00E9}+hiver\");\nassert_eq!(url.query(), Some(\"foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver\"));\nassert_eq!(url.as_str(),\n           \"https://example.net/?foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver#nav\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nNote: `url.query_pairs_mut().clear();` is equivalent to `url.set_query(Some(\"\"))`,\nnot `url.set_query(None)`.\n\nThe state of `Url` is unspecified if this return value is leaked without being dropped.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"form_urlencoded::Serializer","id":"20:44:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:735":{"id":"0:735","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[207,9],"end":[207,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41603:4033-0:679:1977":{"id":"a:2:41603:4033-0:679:1977","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41603:4033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2612-0:548:1970":{"id":"b:2:2612-0:548:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2614:1959"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:576:2521":{"id":"0:576:2521","crate_id":0,"name":"InvalidDomainCharacter","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:282:198":{"id":"0:282:198","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[20,4],"end":[20,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"b:2:2615-0:717:1981":{"id":"b:2:2615-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2617:28218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5605:36486":{"id":"5:5605:36486","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:599:3039":{"id":"0:599:3039","crate_id":0,"name":"Backslash","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13132:35773":{"id":"2:13132:35773","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13130:35772"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:2524":{"id":"0:70:2524","crate_id":0,"name":"parse_opaque","span":{"filename":"src/host.rs","begin":[125,4],"end":[162,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:548:1970":{"id":"0:548:1970","crate_id":0,"name":"OpaqueOrigin","span":{"filename":"src/origin.rs","begin":[112,0],"end":[112,31]},"visibility":"public","docs":"Opaque identifier for URLs that have file or other schemes","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:41603:4033-0:548:1970","a:2:3110:246-0:548:1970","a:2:32044:3544-0:548:1970","a:2:31987:236-0:548:1970","a:2:41602:4034-0:548:1970","a:2:3145:4191-0:548:1970","b:2:2891-0:548:1970","b:2:2612-0:548:1970","b:2:2887-0:548:1970","b:2:2902-0:548:1970","b:2:2897-0:548:1970","b:2:3720-0:548:1970","b:2:2615-0:548:1970","b:5:725-0:548:1970","0:554","0:559","0:553","0:561","0:551","0:556"]}}},"0:42-0:565:1972":{"id":"0:42-0:565:1972","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[166,24],"end":[166,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::parser::ParseError","name":"ParseError","id":"0:565:1972","glob":false}}},"2:13241:35788":{"id":"2:13241:35788","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12817:3809"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41603:4033-0:497:1968":{"id":"a:2:41603:4033-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41603:4033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41603:4033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3145:4191-0:527:1971":{"id":"a:2:3145:4191-0:527:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3145:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:536":{"id":"0:536","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,9],"end":[52,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31989:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:468":{"id":"0:468","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3024,0],"end":[3036,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Target","id":"20:50:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:470:2747","0:471:2689","0:472:2749"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:429":{"id":"0:429","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2655,0],"end":[2659,1]},"visibility":"default","docs":"String conversion.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:430:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2891-0:741:2436":{"id":"b:2:2891-0:741:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:747:779":{"id":"0:747:779","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[3008,9],"end":[3008,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13254:28608":{"id":"2:13254:28608","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:980:40946"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:679:1977":{"id":"b:5:725-0:679:1977","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3566","5:728:2403","5:729:4291"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:497:1968":{"id":"b:5:725-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:727:3566","5:728:2403","5:729:4291"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13255:28609":{"id":"2:13255:28609","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:980:40946"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31987:236-0:741:2436":{"id":"a:2:31987:236-0:741:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2887-0:741:2436":{"id":"b:2:2887-0:741:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2890:2139"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:359:2211":{"id":"0:359:2211","crate_id":0,"name":"has_authority","span":{"filename":"src/lib.rs","begin":[884,4],"end":[887,5]},"visibility":"public","docs":"Return whether the URL has an 'authority',\nwhich can contain a username, password, host, and port number.\n\nURLs that do *not* are either path-only like `unix:/run/foo.socket`\nor cannot-be-a-base like `data:text/plain,Stuff`.\n\nSee also the `authority` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.has_authority());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.has_authority());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(!url.has_authority());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:728":{"id":"0:728","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[181,9],"end":[181,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:729:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:434":{"id":"0:434","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2684,0],"end":[2689,1]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2662:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:435:677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:629":{"id":"0:629","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:630:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:368:1995":{"id":"0:368:1995","crate_id":0,"name":"port","span":{"filename":"src/lib.rs","begin":[1190,4],"end":[1192,5]},"visibility":"public","docs":"Return the port number for this URL, if any.\n\nNote that default port numbers are never reflected by the serialization,\nuse the `port_or_known_default()` method if you want a default port number returned.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.port(), None);\n\nlet url = Url::parse(\"https://example.com:443/\")?;\nassert_eq!(url.port(), None);\n\nlet url = Url::parse(\"ssh://example.com:22\")?;\nassert_eq!(url.port(), Some(22));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[62,0],"end":[71,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"items":["0:66:2403"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:588:677":{"id":"0:588:677","crate_id":0,"name":"eq","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32044:3544-0:548:1970":{"id":"a:2:32044:3544-0:548:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32044:3544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13175:2102":{"id":"2:13175:2102","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41510:190","prim@char":"1:12295:458","self::pattern":"2:12817:3809"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12838:4478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:565:1972":{"id":"b:5:725-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3566","5:728:2403","5:729:4291"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:433":{"id":"0:433","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2681,0],"end":[2681,18]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2667:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:472:2749":{"id":"0:472:2749","crate_id":0,"name":"Finished","span":{"filename":"src/lib.rs","begin":[3035,4],"end":[3035,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"0:622":{"id":"0:622","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2662:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:623:677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2887-0:565:1972":{"id":"b:2:2887-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2890:2139"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2887-0:717:1981":{"id":"b:2:2887-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2890:2139"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:717:1981":{"id":"b:5:725-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3566","5:728:2403","5:729:4291"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13249:28601":{"id":"2:13249:28601","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:436":{"id":"0:436","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2692,0],"end":[2697,1]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2698:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:437:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41602:4034-0:497:1968":{"id":"a:2:41602:4034-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41602:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41602:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:360:2228":{"id":"0:360:2228","crate_id":0,"name":"authority","span":{"filename":"src/lib.rs","begin":[921,4],"end":[928,5]},"visibility":"public","docs":"Return the authority of this URL as an ASCII string.\n\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\nIPv6 addresses are given between `[` and `]` brackets.\nPorts are omitted if they match the well known port of a special URL.\n\nUsername and password are percent-encoded.\n\nSee also the `has_authority` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert_eq!(url.authority(), \"\");\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert_eq!(url.authority(), \"\");\nlet url = Url::parse(\"https://user:password@example.com/tmp/foo\")?;\nassert_eq!(url.authority(), \"user:password@example.com\");\nlet url = Url::parse(\"irc://àlex.рф.example.com:6667/foo\")?;\nassert_eq!(url.authority(), \"%C3%A0lex.%D1%80%D1%84.example.com:6667\");\nlet url = Url::parse(\"http://àlex.рф.example.com:80/foo\")?;\nassert_eq!(url.authority(), \"xn--lex-8ka.xn--p1ai.example.com\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31987:236-0:598:1973":{"id":"a:2:31987:236-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:440":{"id":"0:440","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2708,0],"end":[2716,1]},"visibility":"default","docs":"URLs hash like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10468:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:441:849"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13179:2111":{"id":"2:13179:2111","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12817:3809","`DoubleEndedIterator`":"2:8204:129","prim@char":"1:12295:458","str::split_whitespace":"2:13157:34239","str::rsplit":"2:13185:2917"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43370:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:520":{"id":"0:520","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,32],"end":[41,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"2:2704:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"2:2704:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:522:1251"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:566:2515":{"id":"0:566:2515","crate_id":0,"name":"EmptyHost","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:619:3059":{"id":"0:619:3059","crate_id":0,"name":"UnencodedAtSign","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:394:2455":{"id":"0:394:2455","crate_id":0,"name":"set_path","span":{"filename":"src/lib.rs","begin":[1676,4],"end":[1699,5]},"visibility":"public","docs":"Change this URL’s path.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com\")?;\nurl.set_path(\"api/comments\");\nassert_eq!(url.as_str(), \"https://example.com/api/comments\");\nassert_eq!(url.path(), \"/api/comments\");\n\nlet mut url = Url::parse(\"https://example.com/api\")?;\nurl.set_path(\"data/report.csv\");\nassert_eq!(url.as_str(), \"https://example.com/data/report.csv\");\nassert_eq!(url.path(), \"/data/report.csv\");\n\n// `set_path` percent-encodes the given string if it's not already percent-encoded.\nlet mut url = Url::parse(\"https://example.com\")?;\nurl.set_path(\"api/some comments\");\nassert_eq!(url.as_str(), \"https://example.com/api/some%20comments\");\nassert_eq!(url.path(), \"/api/some%20comments\");\n\n// `set_path` will not double percent-encode the string if it's already percent-encoded.\nlet mut url = Url::parse(\"https://example.com\")?;\nurl.set_path(\"api/some%20comments\");\nassert_eq!(url.as_str(), \"https://example.com/api/some%20comments\");\nassert_eq!(url.path(), \"/api/some%20comments\");\n\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31987:236-0:670:1975":{"id":"a:2:31987:236-0:670:1975","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:676":{"id":"0:676","crate_id":0,"name":null,"span":{"filename":"src/path_segments.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:678:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13218:3407":{"id":"2:13218:3407","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5847-0:565:1972":{"id":"b:5:5847-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10257:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5845:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5849:1729"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[12,0],"end":[17,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:39117:3291","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeFull","id":"2:39134:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:279:198","0:280:916"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258":{"id":"0:258","crate_id":0,"name":null,"span":{"filename":"src/path_segments.rs","begin":[65,0],"end":[70,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3342:2750","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:260:650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2891-0:565:1972":{"id":"b:2:2891-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:75:779":{"id":"0:75:779","crate_id":0,"name":"fmt","span":{"filename":"src/host.rs","begin":[171,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:339:2030":{"id":"0:339:2030","crate_id":0,"name":"parse","span":{"filename":"src/lib.rs","begin":[292,4],"end":[294,5]},"visibility":"public","docs":"Parse an absolute URL from a string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.net\")?;\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an absolute URL from the given string,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:595:779":{"id":"0:595:779","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2887-0:527:1971":{"id":"b:2:2887-0:527:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2890:2139"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:587":{"id":"0:587","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2662:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:588:677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13159:10749":{"id":"2:13159:10749","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43624:4499","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13160:35777":{"id":"2:13160:35777","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43634:4500","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:406:2554":{"id":"0:406:2554","crate_id":0,"name":"set_password","span":{"filename":"src/lib.rs","begin":[2107,4],"end":[2163,5]},"visibility":"public","docs":"Change this URL’s password.\n\nIf this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rmz@example.com\")?;\nlet result = url.set_password(Some(\"secret_password\"));\nassert!(result.is_err());\n\nlet mut url = Url::parse(\"ftp://user1:secret1@example.com\")?;\nlet result = url.set_password(Some(\"secret_password\"));\nassert_eq!(url.password(), Some(\"secret_password\"));\n\nlet mut url = Url::parse(\"ftp://user2:@example.com\")?;\nlet result = url.set_password(Some(\"secret2\"));\nassert!(result.is_ok());\nassert_eq!(url.password(), Some(\"secret2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["password",{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3110:246-0:717:1981":{"id":"a:2:3110:246-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13147:35775":{"id":"2:13147:35775","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12301:1671","str::slice_mut_unchecked":"2:13148:35776","crate::ops::Index":"2:39117:3291"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32044:3544-0:679:1977":{"id":"a:2:32044:3544-0:679:1977","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32044:3544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:426:1754":{"id":"0:426:1754","crate_id":0,"name":"try_from","span":{"filename":"src/lib.rs","begin":[2641,4],"end":[2643,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:2871:256","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2612-0:598:1973":{"id":"b:2:2612-0:598:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2614:1959"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13185:2917":{"id":"2:13185:2917","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12817:3809","`DoubleEndedIterator`":"2:8204:129","prim@char":"1:12295:458","str::split":"2:13179:2111"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43388:4505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12823:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12838:4478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13156:2732":{"id":"2:13156:2732","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43356:4490","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:594":{"id":"0:594","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:595:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13247:2030":{"id":"2:13247:2030","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12778:135","`FromStr`":"2:12777:2683"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12777:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12777:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:4592":{"id":"5:5615:4592","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:547:779":{"id":"0:547:779","crate_id":0,"name":"fmt","span":{"filename":"src/origin.rs","begin":[52,37],"end":[52,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:412:2625":{"id":"0:412:2625","crate_id":0,"name":"from_file_path","span":{"filename":"src/lib.rs","begin":[2443,4],"end":[2459,5]},"visibility":"public","docs":"Convert a file name as `std::path::Path` into an URL in the `file` scheme.\n\nThis returns `Err` if the given path is not absolute or,\non Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n\n# Examples\n\nOn Unix-like platforms:\n\n```\n# if cfg!(unix) {\nuse url::Url;\n\n# fn run() -> Result<(), ()> {\nlet url = Url::from_file_path(\"/tmp/foo.txt\")?;\nassert_eq!(url.as_str(), \"file:///tmp/foo.txt\");\n\nlet url = Url::from_file_path(\"../foo.txt\");\nassert!(url.is_err());\n\nlet url = Url::from_file_path(\"https://google.com/\");\nassert!(url.is_err());\n# Ok(())\n# }\n# run().unwrap();\n# }\n```","links":{},"attrs":["#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]","#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:41621:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2855:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5381:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:677":{"id":"0:79:677","crate_id":0,"name":"eq","span":{"filename":"src/host.rs","begin":[188,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13260:35791":{"id":"2:13260:35791","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4901:35791"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43687:4497","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13143:28669":{"id":"2:13143:28669","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13154:2064":{"id":"2:13154:2064","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12295:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43340:3067","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31987:236-0:497:1968":{"id":"a:2:31987:236-0:497:1968","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:684:3332":{"id":"0:684:3332","crate_id":0,"name":"BeforeUsername","span":{"filename":"src/slicing.rs","begin":[107,4],"end":[107,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:517":{"id":"0:517","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,27],"end":[41,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"2:2698:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2698:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:519:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:139:779":{"id":"0:139:779","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[140,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3720-0:717:1981":{"id":"b:2:3720-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:432:779":{"id":"0:432:779","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2664,4],"end":[2677,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:596":{"id":"0:596","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:597:3017"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:679:1977":{"id":"0:679:1977","crate_id":0,"name":"Position","span":{"filename":"src/slicing.rs","begin":[104,0],"end":[121,1]},"visibility":"public","docs":"Indicates a position within a URL based on its components.\n\nA range of positions can be used for slicing `Url`:\n\n```rust\n# use url::{Url, Position};\n# fn something(some_url: Url) {\nlet serialization: &str = &some_url[..];\nlet serialization_without_fragment: &str = &some_url[..Position::AfterQuery];\nlet authority: &str = &some_url[Position::BeforeUsername..Position::AfterPort];\nlet data_url_payload: &str = &some_url[Position::BeforePath..Position::AfterQuery];\nlet scheme_relative: &str = &some_url[Position::BeforeUsername..];\n# }\n```\n\nIn a pseudo-grammar (where `[`…`]?` makes a sub-sequence optional),\nURL components and delimiters that separate them are:\n\n```notrust\nurl =\n    scheme \":\"\n    [ \"//\" [ username [ \":\" password ]? \"@\" ]? host [ \":\" port ]? ]?\n    path [ \"?\" query ]? [ \"#\" fragment ]?\n```\n\nWhen a given component is not present,\nits \"before\" and \"after\" position are the same\n(so that `&some_url[BeforeFoo..AfterFoo]` is the empty string)\nand component ordering is preserved\n(so that a missing query \"is between\" a path and a fragment).\n\nThe end of a component and the start of the next are either the same or separate\nby a delimiter.\n(Note that the initial `/` of a path is considered part of the path here, not a delimiter.)\nFor example, `&url[..BeforeFragment]` would include a `#` delimiter (if present in `url`),\nso `&url[..AfterQuery]` might be desired instead.\n\n`BeforeScheme` and `AfterFragment` are always the start and end of the entire URL,\nso `&url[BeforeScheme..X]` is the same as `&url[..X]`\nand `&url[X..AfterFragment]` is the same as `&url[X..]`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:680:3330","0:682:3331","0:684:3332","0:686:3333","0:688:3334","0:690:3335","0:692:3336","0:694:3337","0:696:3338","0:698:3339","0:700:3340","0:702:3341","0:704:3342","0:706:3343","0:708:3344","0:710:3345"],"impls":["a:2:41603:4033-0:679:1977","a:2:3110:246-0:679:1977","a:2:32044:3544-0:679:1977","a:2:31987:236-0:679:1977","a:2:41602:4034-0:679:1977","a:2:3145:4191-0:679:1977","b:2:2891-0:679:1977","b:2:2612-0:679:1977","b:2:2887-0:679:1977","b:2:2902-0:679:1977","b:2:2897-0:679:1977","b:2:3720-0:679:1977","b:2:2615-0:679:1977","b:5:725-0:679:1977","0:715","0:713","0:712"]}}},"0:688:3334":{"id":"0:688:3334","crate_id":0,"name":"BeforePassword","span":{"filename":"src/slicing.rs","begin":[109,4],"end":[109,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:531:2966":{"id":"0:531:2966","crate_id":0,"name":"Tuple","span":{"filename":"src/origin.rs","begin":[58,4],"end":[58,36]},"visibility":"default","docs":"Consists of the URL's scheme, host and port","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:533:1922","0:534:1923","0:535:1924"]},"discriminant":null}}},"2:13222:35784":{"id":"2:13222:35784","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2887-0:548:1970":{"id":"b:2:2887-0:548:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2890:2139"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[184,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2662:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2662:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:79:677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:365:2163":{"id":"0:365:2163","crate_id":0,"name":"host_str","span":{"filename":"src/lib.rs","begin":[1087,4],"end":[1093,5]},"visibility":"public","docs":"Return the string representation of the host (domain or IP address) for this URL, if any.\n\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\nIPv6 addresses are given between `[` and `]` brackets.\n\nCannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\ndon’t have a host.\n\nSee also the `host` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/index.html\")?;\nassert_eq!(url.host_str(), Some(\"127.0.0.1\"));\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.host_str(), Some(\"example.com\"));\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert_eq!(url.host_str(), None);\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert_eq!(url.host_str(), None);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:504:1922":{"id":"0:504:1922","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[52,9],"end":[52,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::net::Ipv4Addr","id":"2:41270:2866","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[19,0],"end":[24,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:39117:3291","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeFrom","id":"2:39171:211","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:282:198","0:283:916"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:611:3051":{"id":"0:611:3051","crate_id":0,"name":"NonUrlCodePoint","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2897-0:670:1975":{"id":"b:2:2897-0:670:1975","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2900:136","2:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:704:3342":{"id":"0:704:3342","crate_id":0,"name":"BeforeQuery","span":{"filename":"src/slicing.rs","begin":[117,4],"end":[117,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41603:4033-0:717:1981":{"id":"a:2:41603:4033-0:717:1981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41603:4033","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13161:34242":{"id":"2:13161:34242","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43662:4483","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3110:246-0:527:1971":{"id":"a:2:3110:246-0:527:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:105:2990":{"id":"0:105:2990","crate_id":0,"name":"ascii_serialization","span":{"filename":"src/origin.rs","begin":[75,4],"end":[86,5]},"visibility":"public","docs":"<https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3720-0:527:1971":{"id":"b:2:3720-0:527:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:351:336":{"id":"0:351:336","crate_id":0,"name":"as_str","span":{"filename":"src/lib.rs","begin":[581,4],"end":[583,5]},"visibility":"public","docs":"Return the serialization of this URL.\n\nThis is fast since that serialization is already stored in the `Url` struct.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url_str = \"https://example.net/\";\nlet url = Url::parse(url_str)?;\nassert_eq!(url.as_str(), url_str);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2615-0:679:1977":{"id":"b:2:2615-0:679:1977","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31988:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2617:28218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:136:809":{"id":"0:136:809","crate_id":0,"name":"from","span":{"filename":"src/parser.rs","begin":[91,4],"end":[93,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_",{"resolved_path":{"name":"::idna::Errors","id":"22:170:3036","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32044:3544-0:565:1972":{"id":"a:2:32044:3544-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32044:3544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31987:236-0:565:1972":{"id":"a:2:31987:236-0:565:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3145:4191-0:670:1975":{"id":"a:2:3145:4191-0:670:1975","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3145:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"5:4147:4413":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"11:364:5242":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"22:29:10731":{"crate_id":22,"path":["idna","punycode","Decode"],"kind":"struct"},"1:8845:3653":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:581:4206":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:41536:3651":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:6433:6785":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:10055:3569":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:2861:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:6794:3701":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:21691:8364":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"18:706:4479":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6098:23521":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:12328:5733":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5515:7792":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:5400:7735":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:8257:3545":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:2478:6619":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:2524:8318":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:12464:23714":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:15734:6464":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:22815:8392":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:465:7251":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:9670:5358":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:15957:6507":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:4162:10953":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:15836:6489":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:1586:5284":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:13146:5807":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:40291:8641":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:7330:8138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:1724:5250":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:2902:22659":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:1534:9847":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:6412:23523":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:22460:11079":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:6723:3693":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:7111:6891":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6758:6834":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:40270:8639":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:41749:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8429:4594":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:45898:8818":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:10185:5624":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:2698:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:1692:7452":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:22822:8394":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:11857:8965":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:16138:6565":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:43662:4483":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:44298:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:4917:3747":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"0:717:1981":{"crate_id":0,"path":["url","Url"],"kind":"struct"},"2:10705:5320":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:2087:4582":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"0:0:2056":{"crate_id":0,"path":["url"],"kind":"module"},"17:13292:5845":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:3269:7162":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:44284:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10317:5628":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:40149:8360":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:6160:22631":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:482:5333":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:670:9658":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:646:10862":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"11:2304:6894":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:8625:4414":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:45678:8792":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10350:5629":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:2383:3651":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:10684:4529":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"11:2542:7166":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"11:856:9839":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8577:10965":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:3559:3630":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12318:5731":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:5174:7633":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:15342:6341":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:43195:8359":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:1579:4244":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13187:5816":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6746:8051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:5624:7841":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:3025:36997":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:12454:5752":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"0:730:2000":{"crate_id":0,"path":["url","ParseOptions"],"kind":"struct"},"1:8145:8908":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:613:37215":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:41677:4244":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:13507:9879":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:7584:8259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:8317:8299":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:44339:9467":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:9121:8925":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:11336:4507":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:12318:1860":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:5314:7703":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:6782:23526":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:37824:3618":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:2458:6618":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:1970:1311":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"11:0:3420":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:1207:9664":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8135:5566":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:7306:8121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:7429:8174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8294:9163":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:2234:8311":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:2338:6606":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:1923:7163":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:8188:9832":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:7888:6969":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:3473:9671":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"23:449:136":{"crate_id":23,"path":["unicode_bidi","level","Error"],"kind":"enum"},"17:11493:9700":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"18:573:5474":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:2834:3661":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:5915:5268":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:5466:7777":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:3035:36996":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:44120:8742":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:12556:8704":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:7984:8268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:5344:7709":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:46514:8872":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:1663:7441":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:2438:6617":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:11168:8924":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:39949:8618":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:11915:23689":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:43185:9887":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:45869:8817":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:7695:6953":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:6729:8047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"11:2403:4413":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:7629:8332":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:6962:6649":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:39900:8613":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:2755:8321":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:2700:4571":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:5457:7771":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:15456:6371":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:12319:1370":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:8016:10865":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:9145:4244":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:811:5284":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:4531:6676":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:5955:4548":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:5565:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:16187:6580":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:14529:6087":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:1535:7349":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:4771:6683":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:45351:8762":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:12900:5785":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:8572:8914":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:4042:3735":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:8012:8271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:5160:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:14372:6060":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:10137:23568":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:13753:5951":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:45334:8761":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:21689:10997":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:5200:7647":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:7799:6645":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:10911:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:7052:9797":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:5415:6697":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:1525:7159":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:7900:5356":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:9372:4548":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"16:6648:6809":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:22948:8403":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:4630:3750":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:5709:8075":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:12309:874":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:7546:8240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:513:9662":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:3805:9856":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:15376:6354":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:43538:4502":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"22:133:37219":{"crate_id":22,"path":["idna","uts46","Mapping"],"kind":"enum"},"5:6589:5250":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:7314:8126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12043:9728":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:4755:8167":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:6927:6866":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:43438:4508":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"24:259:37258":{"crate_id":24,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"17:15473:6378":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:6855:5313":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:7857:6965":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12824:23594":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:44104:8738":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:8616:9477":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:1940:4668":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:7581:3757":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:6629:8009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:2059:8338":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:9435:8935":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:39279:3629":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:3593:3635":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:39884:4496":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:43894:8722":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:16269:5866":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:22981:8406":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:4822:3749":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:22113:10933":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:5447:4481":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:4499:9472":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:915:9834":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:10671:37206":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:12478:5754":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:8282:8291":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:45742:8796":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:4743:3739":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:5617:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:15814:6483":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:15116:6285":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:10267:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:5817:6705":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:11869:30764":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"11:2352:9843":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:12349:9455":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:12238:9739":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:5777:5345":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:21511:10933":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:6609:8001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13922:5979":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:8622:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:7473:6745":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:14876:6219":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4837:7507":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:11574:8956":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:680:5498":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:473:7256":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:12267:10867":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:46479:8869":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:30452:4671":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"9:357:22523":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11102:9688":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:21572:10999":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:8288:8292":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:11635:9462":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13594:5910":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:622:3729":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13581:5909":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:14545:6089":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:10442:31954":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:13424:5867":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:6471:7920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:8740:3648":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:46223:8859":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"22:127:9641":{"crate_id":22,"path":["idna","uts46","StringTableSlice"],"kind":"struct"},"6:1510:7335":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:7602:8262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:9316:28402":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:40707:8654":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:7037:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:1976:762":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"18:726:5510":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:11541:9948":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"25:636:10728":{"crate_id":25,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"5:824:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:11222:8948":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:45936:8820":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:22729:8379":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:10265:3580":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:40209:8629":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:40072:3755":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:15324:6337":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:45981:8821":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:15426:6365":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:10157:8669":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:3335:4590":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:42942:8693":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:22244:11083":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:41686:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"23:511:9626":{"crate_id":23,"path":["unicode_bidi","utf16","Paragraph"],"kind":"struct"},"2:33188:3607":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:12313:1781":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:14356:6059":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:4072:5268":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:5104:4022":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:43819:8719":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:15992:6537":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:1526:7343":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:1940:3727":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:12314:1787":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:38458:3620":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:43687:4497":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:11256:5648":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:5686:6639":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:45515:8776":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:1478:4413":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:3207:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"25:43:27868":{"crate_id":25,"path":["tinyvec","array","Array"],"kind":"trait"},"2:31987:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:16223:6587":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:4398:16177":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:14855:6211":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:44369:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:11443:5663":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8218:4580":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12707:9753":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"11:1676:5246":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:8583:9925":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:7580:6948":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:8300:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:2432:10920":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12189:9735":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:11898:5687":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:2394:6615":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"22:155:4443":{"crate_id":22,"path":["idna","uts46","Idna"],"kind":"struct"},"1:837:3651":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:10263:3579":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:517:7284":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7618:6949":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:1828:5284":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:39939:8617":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"11:351:10753":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:1686:7451":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"14:31:9442":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:14341:6055":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:12305:716":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:42479:6984":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:11764:5684":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"9:0:3418":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:7559:6947":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5536:7798":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:3282:36565":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:39073:3634":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:2175:23647":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:919:9835":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7098:6888":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6300:9781":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:5472:7780":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:16050:5844":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:12150:5724":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"23:527:9630":{"crate_id":23,"path":["unicode_bidi","utf16","Utf16CharIndexIter"],"kind":"struct"},"1:4154:10951":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5031:7608":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:41621:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:4424:6673":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:3183:3622":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:9180:10991":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:5134:7630":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:1055:9842":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:7593:16253":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"23:424:5440":{"crate_id":23,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"5:3739:5250":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:9755:23567":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:5382:7724":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:10419:5631":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"11:837:9836":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:21680:10933":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:3500:4548":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:10283:9939":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:6263:6776":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:1007:6894":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:12671:9750":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:5352:7710":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:6291:5330":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:1555:9835":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:46421:8865":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"11:1160:9447":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:3633:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:4976:6690":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:15678:6456":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"18:598:37214":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:44096:8736":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:7085:6886":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:42739:3648":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:12312:1799":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:14025:5992":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"10:44:7173":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:3029:5518":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:4986:9674":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:16105:6558":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:5528:7793":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:8118:7010":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:41248:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:4539:4230":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:5489:7785":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:523:7287":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:4344:9470":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:3947:3594":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:9336:8933":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:4924:7558":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:11062:5363":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:11179:31677":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:41602:4034":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"11:1910:7161":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:1064:9843":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:10930:4567":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:7590:6654":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:11801:3594":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:11377:7229":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:12433:5749":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:6032:8342":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:1496:7330":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5260:7676":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:1827:9903":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:2548:6622":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:7686:9828":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6738:8050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:6706:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:11876:8966":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:8763:3649":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:6880:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:30484:34185":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:46578:8881":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"18:80:10736":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:3553:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:5914:6720":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:42749:8691":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:538:7296":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:10959:9457":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:4502:6675":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:43574:4503":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:16069:6551":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:7516:8223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:5403:5250":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:3171:3603":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"14:220:7104":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11075:5642":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:15058:6271":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"9:502:7232":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:7108:5301":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:11257:4505":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13375:5860":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:11652:8963":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:6763:8059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:5502:7791":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:5700:6642":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:14847:6208":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:13877:5974":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:5181:7635":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:1671:7442":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:718:5507":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:5588:7819":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:7605:5280":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:22306:10933":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:40372:8648":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"11:800:5268":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:40009:16201":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:11467:5364":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:21513:11000":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:10967:9473":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:2950:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:1516:7158":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6562:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:31989:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:43634:4500":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:45824:8800":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8692:2717":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"11:742:9835":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:4965:7574":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:2125:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:2612:6625":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:564:7309":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:15368:6351":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:1759:1962":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:11354:9697":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:39209:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:3470:4595":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:42757:8692":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:40730:8656":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:15390:6356":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:5025:10982":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:9728:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:850:4413":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:11863:9877":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:41866:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"23:8:27816":{"crate_id":23,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"2:39960:4497":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10218:5625":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:11115:9689":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:586:7321":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"11:102:7152":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:23025:8410":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"16:7355:6924":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2748:6631":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:5329:7707":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:10068:23574":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:9406:3073":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:11557:9705":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"23:0:4435":{"crate_id":23,"path":["unicode_bidi"],"kind":"module"},"24:198:10729":{"crate_id":24,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"2:7941:3677":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:14463:6080":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:8259:2699":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:42702:4420":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13568:5905":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10828:37212":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:41414:34252":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:7566:16302":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:924:5257":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:1580:7380":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11702:5676":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:4062:6671":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:14912:6249":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:2355:6608":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:6524:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"11:2569:3654":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:16165:6574":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:6844:8351":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:2548:7167":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:0:3425":{"crate_id":17,"path":["object"],"kind":"module"},"2:22334:16262":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"1:2678:5320":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:0:4436":{"crate_id":24,"path":["unicode_normalization"],"kind":"module"},"5:6543:5268":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:46655:8898":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"10:0:3419":{"crate_id":10,"path":["adler"],"kind":"module"},"17:11341:9696":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:10710:9678":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:7406:35545":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:44288:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:43255:9889":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13399:5864":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:8136:7013":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:12633:4485":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:1639:7424":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:6052:16549":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:4613:9450":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:4952:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:10259:3572":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"20:44:2435":{"crate_id":20,"path":["form_urlencoded","Serializer"],"kind":"struct"},"2:43176:8358":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13089:5797":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:6689:8031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:10639:4590":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:44116:8741":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:14402:6065":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:15151:6294":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8818:3650":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:1825:9902":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:5075:6693":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:43997:4511":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:31988:3543":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:11315:9463":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:10208:1960":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:6811:8074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:1447:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11841:9724":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:4959:7572":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10905:9681":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:13844:5966":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:39976:4495":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:40279:8640":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:46268:8860":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6775:8061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:9195:10990":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:1544:9834":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:6874:8088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"11:1887:4244":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"20:99:3670":{"crate_id":20,"path":["form_urlencoded","ByteSerialize"],"kind":"struct"},"2:7709:16245":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:14503:6085":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:8450:4567":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:14868:6218":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:15418:6363":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:7831:5619":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:41448:1964":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:39995:8620":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"23:696:9626":{"crate_id":23,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"16:5831:6708":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:5742:6699":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10954:23602":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:4802:6684":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:8174:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:43966:8728":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:7412:8173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13785:5958":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:6391:11089":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:3588:1960":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:12969:5788":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:6116:5345":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:6606:6805":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:6480:6640":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:5020:7603":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:12595:8706":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12851:5781":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:12302:1759":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:8175:3546":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:43287:8362":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:22432:11078":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:43340:3067":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:7347:4651":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:5283:7690":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:2473:849":{"crate_id":1,"path":["std","hash"],"kind":"module"},"6:5219:7655":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:12294:1148":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12408:5746":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:10901:8909":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:9290:9934":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"14:202:1972":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:7988:4529":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"15:0:3423":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:11524:9703":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"11:1066:22588":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:3236:3651":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:4150:3736":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6543:6796":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:2446:10924":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:8482:4569":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:15410:6362":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:6574:6658":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"23:632:5464":{"crate_id":23,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"1:11884:8966":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:3531:4556":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:3925:6670":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:4:1230":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:4970:16194":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:6066:6741":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:44088:8734":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:3538:3628":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:14066:5999":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:3565:3632":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12371:5786":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:40313:8643":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11214:9691":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:40362:8647":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"11:1107:9845":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:2039:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:558:9895":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:40219:8631":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:40332:8645":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:45792:8798":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:14968:6255":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:9137:9927":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:46540:8874":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:2871:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:21493:33957":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:10622:5317":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:5223:9908":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:32650:3601":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:45809:8799":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:4102:5250":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:2303:22632":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:43592:4504":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:881:7159":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:7727:6656":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:2704:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4787:7470":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:7616:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:4856:6686":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:8518:3591":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:7813:6957":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:16212:6585":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:1591:7160":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:2854:6636":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13485:5880":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:22332:34987":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:15197:6307":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:9249:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"11:2536:7165":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:21481:33959":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:542:6596":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:8462:4568":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:15333:6340":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"18:515:5477":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:9295:9935":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:10207:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:8778:2716":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8591:3591":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10439:5632":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:22597:8367":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:14587:6096":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:11270:8949":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:9095:8923":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7132:6893":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:3103:4188":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:9364:3688":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:8306:8295":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:39472:16204":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:5995:6731":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:2664:4579":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:4971:7577":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:8162:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:37714:3616":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7144:23528":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:6756:8058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:2864:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"25:1034:27872":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"2:11145:4485":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:22904:8399":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:30473:3568":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:6532:7951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:39249:3627":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:5891:3684":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:8499:4490":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:13832:5964":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:12817:3809":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:1354:9447":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:33070:3564":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:5347:6696":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:11063:9685":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:14977:6259":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:6620:6807":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:4830:6685":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:10226:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:30827:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:8265:8286":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:737:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:3337:4591":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13473:5877":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:2509:16263":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:39171:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:5320:7704":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4897:7543":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:6634:6646":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"23:520:9628":{"crate_id":23,"path":["unicode_bidi","utf16","Utf16IndexLenIter"],"kind":"struct"},"1:12081:5369":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:5781:6643":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5643:7850":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:11053:3651":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:14235:6041":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:3243:7161":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:11364:9875":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:2430:8337":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:13024:23596":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:43520:4501":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2858:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:10877:9680":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:8006:8269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:40142:4598":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:12307:886":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:45454:8772":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:3191:3624":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:2878:6637":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:22835:8395":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:3346:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:6342:37200":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:22:794":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:868:7158":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:41983:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6441:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:12333:16312":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:10252:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:14516:6086":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:15521:6415":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:6588:6797":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:1559:7366":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:46371:8863":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:44108:8739":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:10720:5325":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"11:1582:9848":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"8:0:3417":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:1597:7161":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:39121:3626":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:15138:6289":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:12443:5751":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:46499:8871":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:8597:8915":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"24:290:37259":{"crate_id":24,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"1:4140:3738":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:8259:8285":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:828:5252":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:1426:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:45471:8773":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10622:37204":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:15078:6279":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:6215:5340":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:1547:7358":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:7944:10933":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:40238:8634":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:2280:9906":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:1593:7387":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:4833:779":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:6670:8026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:3778:6666":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:559:7307":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:7485:8197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:15102:6284":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:30201:10936":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"13:226:7151":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:7446:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:15445:6370":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13412:5866":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5423:7746":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"18:643:5474":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:3245:33577":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12949:5731":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:13669:5332":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:11825:9722":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:43653:4484":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:14284:6048":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"24:266:5432":{"crate_id":24,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"5:7376:5268":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:5415:7741":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:10890:8943":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:6505:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:4682:5306":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:14723:6105":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12508:5758":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:22753:34201":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:12315:1793":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:4500:5274":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:4614:6679":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:13455:35192":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:5927:6721":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"11:1087:37182":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:9658:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:5451:4482":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"25:534:9606":{"crate_id":25,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"25:728:5222":{"crate_id":25,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"2:45725:8795":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10720:37208":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:8253:8284":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:7528:6943":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:11155:8923":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:7945:8904":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4992:7587":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:6307:5344":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:6850:8350":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:6026:6737":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:10399:4490":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:43474:4507":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:32044:3544":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:40084:4490":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:7259:5351":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:10636:4588":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"5:2205:8309":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:6478:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:11740:3593":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:3331:3621":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:2508:6620":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"11:2443:5268":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"24:312:5439":{"crate_id":24,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"2:44092:8735":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:31953:9882":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:4100:3740":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:40057:16302":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13674:5917":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:21464:33948":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:23477:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:1566:22589":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:5277:7687":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5671:7860":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:8304:2314":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:3264:9670":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:43773:8709":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:15222:6312":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:42718:4419":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:7396:8327":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"20:89:1978":{"crate_id":20,"path":["form_urlencoded","EncodingOverride"],"kind":"type_alias"},"1:357:9893":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"23:667:9621":{"crate_id":23,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"6:1490:7327":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13899:5975":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:5845:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10155:5622":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:1628:7416":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:3349:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:42200:3571":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:15214:6310":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:5143:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:40721:3689":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"25:669:9431":{"crate_id":25,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"17:12251:9740":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"11:1025:9842":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12278:9742":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:3186:3623":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:4753:8165":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:9084:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"22:120:122":{"crate_id":22,"path":["idna","punycode","Decoder"],"kind":"struct"},"17:11755:5683":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:437:5573":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"21:28:2868":{"crate_id":21,"path":["percent_encoding","CONTROLS"],"kind":"constant"},"17:13723:5942":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:23003:8408":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:4793:4233":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:8204:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:6417:7894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13526:5890":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:4746:4232":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:11497:9701":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:8202:6659":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:14298:6049":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"23:542:27815":{"crate_id":23,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"17:12289:5726":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:3961:4244":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"13:109:37184":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:5769:6703":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:2867:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:1041:6894":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7910:23532":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7539:6652":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"23:319:10933":{"crate_id":23,"path":["unicode_bidi","private","Sealed"],"kind":"trait"},"17:14449:6079":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:1503:7333":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:5211:3682":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:8669:34401":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:40261:8638":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"23:681:9623":{"crate_id":23,"path":["unicode_bidi","ParagraphBidiInfo"],"kind":"struct"},"6:4985:7584":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:7389:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:41436:3595":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:7553:3756":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11547:5565":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:10170:5623":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11405:9699":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:5225:7658":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:9417:8934":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:21564:10933":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:46593:8882":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:43624:4499":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:32045:4194":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:9910:34402":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:7356:4244":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:22387:16262":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"2:10908:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:40002:8621":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:5712:10986":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:46563:8880":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:256:9659":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:0:543":{"crate_id":2,"path":["core"],"kind":"module"},"17:12659:9749":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:46616:8883":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:9737:23569":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"18:563:5484":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:9151:8926":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:43242:8360":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:21584:8364":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:10939:31674":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:44396:4649":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:16235:6590":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"18:623:37213":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:9255:9930":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:15400:6359":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:7397:37197":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:4609:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:5296:7695":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:4332:9867":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:33962:3614":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:15190:6305":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12225:9738":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:14788:6156":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:3248:36566":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:3845:3592":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:8029:8281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:4468:6674":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:4882:6687":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:9858:23586":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"21:74:3562":{"crate_id":21,"path":["percent_encoding","PercentEncode"],"kind":"struct"},"17:13308:5849":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6427:9795":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:6821:8077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:3669:5523":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:43297:9891":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:12308:868":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:31978:8476":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:42440:8677":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:42207:3572":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:4863:3746":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:1463:3651":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:11056:5362":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12695:9752":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:10511:4417":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:1699:7455":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:14012:5991":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:2287:35542":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:44347:8748":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13325:5851":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:15931:5816":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:15646:6441":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"11:710:9834":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:7061:6885":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:13064:5796":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:46031:8823":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:15616:6434":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:150:5238":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:5046:7614":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:11293:23622":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"15:288:10744":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:10018:23571":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:22544:8366":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:9376:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:14325:6053":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:4940:3742":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:15039:6270":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:14147:6010":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4876:7533":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10661:9677":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:504:5265":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:8828:3651":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:6872:6861":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13046:5793":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:46146:8858":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:868:5255":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:9665:9917":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:46048:8824":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:4913:6688":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:9283:1977":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6442:6786":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:1565:7368":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5266:7679":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:5367:23518":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:6976:6870":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"11:673:3651":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:7321:4030":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:41944:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:3242:31560":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:5802:23519":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:43356:4490":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:3329:6663":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:45387:8768":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:10044:23591":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:11077:4413":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:14414:6067":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:7881:4594":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11153:9679":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:10642:4586":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:8512:4499":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:479:7259":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:5381:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"20:28:3663":{"crate_id":20,"path":["form_urlencoded","ParseIntoOwned"],"kind":"struct"},"17:15720:6462":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"9:53:22526":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:1585:7382":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:2855:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"22:0:2751":{"crate_id":22,"path":["idna"],"kind":"module"},"17:16176:6579":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:11743:5680":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"23:705:9640":{"crate_id":23,"path":["unicode_bidi","Utf8IndexLenIter"],"kind":"struct"},"17:10818:9679":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:4870:7531":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:43205:9888":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:7077:10994":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12362:5743":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:33789:3612":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:5846:6710":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:1608:7163":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:11877:5685":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:8093:7007":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:22867:10933":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:8175:9829":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11634:5671":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:7331:5352":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:11128:5612":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:724:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:31971:4231":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:11142:5658":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:12365:2745":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:45596:8788":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:7841:9464":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:15778:6479":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6494:6792":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13766:5953":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"18:521:27774":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:7823:23531":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:10516:4418":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:5641:9473":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:12584:9679":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:5014:7600":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:12311:861":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:6655:8345":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12494:5755":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"18:608:9653":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11621:5669":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:8073:7006":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:6788:8068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15168:6299":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:3842:6668":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"21:0:1955":{"crate_id":21,"path":["percent_encoding"],"kind":"module"},"5:3277:7160":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:15799:6482":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:45771:8797":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:1896:5284":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:15023:6267":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:2991:3732":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"25:752:5232":{"crate_id":25,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"2:40122:3772":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:43945:16151":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:12572:5658":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:6611:3689":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:5048:10984":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:7437:10769":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:735:27772":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:6915:8114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"11:1142:9846":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"18:507:5474":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:13538:5893":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:5390:7729":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:403:9661":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:8210:9919":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:14260:6045":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:8155:7016":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:41508:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:3110:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5630:7844":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:14475:6081":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:3378:4586":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:10284:5627":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:7575:8256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:7570:6653":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:11367:5642":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:44084:8733":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"23:496:9623":{"crate_id":23,"path":["unicode_bidi","utf16","ParagraphBidiInfo"],"kind":"struct"},"1:8196:4706":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:12485:23715":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:1680:7448":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:3780:1965":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:12301:1671":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:12768:23572":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:45419:8770":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:10351:9484":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:3606:4559":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:7881:5354":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:7487:4251":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"23:599:37233":{"crate_id":23,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"1:5898:3685":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:22970:8405":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:14489:6082":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:10524:9675":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:4909:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11269:23621":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:5102:7627":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:3578:34429":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:33443:3610":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:7769:6955":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:4864:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4916:7556":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:3718:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:4922:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"23:306:27801":{"crate_id":23,"path":["unicode_bidi","TextSource"],"kind":"trait"},"1:9231:3687":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:22773:34189":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:15624:6435":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:8036:10907":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"11:396:5244":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:6317:9784":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:2246:4646":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:641:9898":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:5522:9909":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:5336:7708":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:14986:6260":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:39189:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:4587:6678":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:41905:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:0:1663":{"crate_id":1,"path":["std"],"kind":"module"},"11:328:7156":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:3352:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:13631:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:22846:10950":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:12310:880":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:41470:3588":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:43867:8721":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:12891:16144":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:3031:37000":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:7436:8328":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:4263:10766":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"14:214:7102":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:22992:8407":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:33306:3608":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:14311:6050":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:2606:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:15383:6355":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:228:27841":{"crate_id":24,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"17:15289:6326":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:296:3547":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:40736:4595":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:3395:5284":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:2374:6614":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12213:9737":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:12299:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:42710:8687":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:6636:8010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:22959:8404":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:14271:6046":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:11567:9706":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:15769:6477":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:39983:16200":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:3303:7163":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:22926:8401":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:10257:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:12823:3073":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:15655:6443":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:2448:10925":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:6670:4244":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:8328:8300":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:46010:8822":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:44162:8745":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:12597:5760":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:11189:5646":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:15463:6373":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:42495:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:5770:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:39926:8616":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4942:7566":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"25:948:27871":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"11:2562:7169":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:4859:3743":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"23:457:9615":{"crate_id":23,"path":["unicode_bidi","utf16","InitialInfo"],"kind":"struct"},"20:0:1946":{"crate_id":20,"path":["form_urlencoded"],"kind":"module"},"16:5722:6644":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"9:238:3648":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:2987:5339":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:281:5250":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:45579:8787":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:14051:5996":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:33129:3609":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:41603:4033":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:44173:16356":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:5581:7817":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:3614:6665":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:5385:5622":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5112:7628":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:22737:8380":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8529:3586":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:10425:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"11:2423:4244":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:11205:8934":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:10251:5626":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:3285:4588":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:40229:8632":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:46459:8867":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:7366:8154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12808:5779":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:32464:3602":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:43167:8357":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:6409:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:9303:8930":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:8201:4705":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:597:5619":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"9:447:22508":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"23:611:9633":{"crate_id":23,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"11:2140:9842":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:7963:9913":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:33616:3611":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:46468:8868":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:41286:2867":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:21462:33955":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:5598:7824":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:1575:9855":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:10261:3571":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:5164:34169":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"15:306:10748":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:45433:8771":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:6664:8023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:946:9840":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:872:9660":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"12:0:3421":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13774:5955":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:10872:8938":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11166:5644":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:12306:732":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:7537:8237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:4821:9673":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:3597:9672":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:11646:8962":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"21:36:1958":{"crate_id":21,"path":["percent_encoding","utf8_percent_encode"],"kind":"function"},"16:5037:6692":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:6031:3682":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:2660:6627":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:41544:4413":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:10898:10933":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"14:160:9442":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:4743:6682":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:6442:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:44100:8737":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"11:430:10756":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:13706:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:5665:7858":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:1325:9843":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:46525:8873":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:40247:8635":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:2197:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"11:2151:9843":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:45500:8775":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:2684:6628":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:941:3651":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"14:165:22595":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7656:23530":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5445:7762":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:11184:9872":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:5202:4597":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:16121:6563":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:6120:23522":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"11:2498:22584":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:7682:31193":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:7014:23527":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:12320:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"18:635:5497":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:9244:9928":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:4757:8169":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:11715:5677":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:5146:7631":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"25:449:5222":{"crate_id":25,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"5:7698:5284":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:11313:5655":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:6615:3690":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:4307:3651":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:923:9836":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:2323:22658":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:638:9896":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:5711:5282":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:689:5501":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:4048:2709":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:8226:4582":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:10982:23603":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:10982:28410":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"22:170:3036":{"crate_id":22,"path":["idna","uts46","Errors"],"kind":"struct"},"17:14575:5749":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"25:386:5238":{"crate_id":25,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"2:8313:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:9671:23570":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:13482:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:41604:4016":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:5290:7692":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:11717:5366":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:13173:5815":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:15266:6323":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:45919:8819":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"22:161:4442":{"crate_id":22,"path":["idna","uts46","Config"],"kind":"struct"},"6:5677:7863":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:14111:6004":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:7006:9796":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:6385:6781":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:14091:6001":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:1969:3728":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:12353:5742":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:3014:22661":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:12993:23595":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:45640:8790":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:13855:5967":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8030:10866":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:481:5472":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8051:9457":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:4641:6680":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:41661:3651":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:1653:7435":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:8271:8287":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:40169:9884":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:5122:7629":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:9359:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:45693:8793":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:21991:8365":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:5212:7654":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:13814:5963":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:13797:5960":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:21447:33945":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:5960:6728":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:1575:3651":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:39117:3291":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:11537:9704":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:42024:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:5970:3698":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10612:9676":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:415:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:41330:8667":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:9386:3696":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:32076:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:12316:1775":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:41613:4415":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:904:5284":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:42961:8695":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"9:424:22510":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:13738:5946":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:2504:1961":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:11089:9687":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:4824:7497":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:2998:6660":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12724:23593":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:3156:3563":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:44112:8740":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:4356:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:12388:5744":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5361:7714":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:40497:4570":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:45404:8769":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:1723:7464":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11799:9717":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7497:6942":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12929:5786":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:12076:9730":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"11:687:4413":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:589:10859":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:6813:6847":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:7639:9449":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:6780:3700":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:6768:8060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:42727:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:5192:9908":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:42542:3570":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:12246:9200":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:12298:1268":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:6946:5293":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:6519:7945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:4800:7479":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:11378:9876":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"21:81:3055":{"crate_id":21,"path":["percent_encoding","PercentDecode"],"kind":"struct"},"17:9781:23585":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:8675:4026":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:15092:6283":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:11730:5679":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:4932:7560":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13455:5876":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:9915:34599":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"23:470:9619":{"crate_id":23,"path":["unicode_bidi","utf16","InitialInfoExt"],"kind":"struct"},"16:2528:6621":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:40755:8657":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:2662:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:43979:4510":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"25:0:4437":{"crate_id":25,"path":["tinyvec"],"kind":"module"},"2:40094:3759":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:43268:8361":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:8642:3744":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:12342:5738":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:15:2491":{"crate_id":2,"path":["core","write"],"kind":"macro"},"25:1122:5429":{"crate_id":25,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"2:41302:3587":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5477:7782":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:9391:3697":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:9938:23589":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:910:9847":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:6752:5250":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:5653:7851":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:3248:33574":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"22:70:10734":{"crate_id":22,"path":["idna","uts46","Mapper"],"kind":"struct"},"1:4292:10768":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:7461:8185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:9984:23590":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:11324:9694":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:10271:3578":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:8197:8282":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:2572:6623":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:6504:6793":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:7522:10877":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:7511:3654":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:23014:8409":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"5:5061:4548":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:39037:3637":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"11:1051:9843":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:12843:4477":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:46400:8864":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:15301:6332":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:5269:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:6678:8028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:5536:9474":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"0:741:2436":{"crate_id":0,"path":["url","UrlQuery"],"kind":"struct"},"2:21962:10933":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:1863:9904":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:40041:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:3548:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:2768:6632":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:5244:953":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:3790:4582":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"25:470:5226":{"crate_id":25,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"17:14560:6093":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:6621:8008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:4618:9451":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11812:9720":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"9:330:7210":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:12296:1821":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:553:7304":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"14:187:22602":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:44281:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:8125:16251":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:45529:8777":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:9262:28374":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:2609:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:40300:8642":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:6665:23525":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6532:6795":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:3342:2750":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"11:123:5240":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:8226:23533":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:43492:4506":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:1566:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:7509:9819":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:6900:8103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:10877:8908":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:11896:9878":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:12300:1637":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:12262:31191":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:4819:10985":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"26:0:4438":{"crate_id":26,"path":["tinyvec_macros"],"kind":"module"},"1:3020:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:1062:5250":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:2101:9856":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:8505:2350":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:43216:8696":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:4379:4643":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:6339:9912":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:40323:8644":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"25:966:5237":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"16:5400:5623":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:12647:9748":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:1189:10763":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:15748:6471":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"11:1903:7160":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:1494:4244":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:4092:3741":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:42504:3568":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:44306:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"11:2326:9842":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:4237:4548":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:43420:4509":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"11:2369:9852":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:9381:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:14752:6125":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:7657:10764":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12683:9751":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:4352:6672":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:6714:8045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:940:9839":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:860:4244":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:1886:4757":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:7420:4244":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:31915:3660":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:10476:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:42467:34199":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:41592:4031":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:12777:2683":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:4255:4548":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11688:5675":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"9:178:22575":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:7604:6655":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:22200:11082":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:2708:6629":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:15608:6431":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:7306:37199":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:7741:6657":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:1153:10762":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"9:392:22509":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:6410:11090":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"23:642:9615":{"crate_id":23,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"17:14994:6261":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:30854:4206":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:12519:8701":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:9129:3651":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"11:883:9841":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:8492:4570":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:7379:37201":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:22665:8369":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8152:8909":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:4737:5307":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:40714:8655":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:4692:4231":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:7348:8145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"15:394:22623":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"23:620:16310":{"crate_id":23,"path":["unicode_bidi","Direction"],"kind":"enum"},"6:7359:8150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12107:5658":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:6651:3699":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:6940:6868":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:5236:7664":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:15126:6286":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:13252:5834":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12543:9747":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:40507:8651":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4885:7538":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:11350:4506":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:2112:9857":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:11222:9873":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13497:5881":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"24:276:27855":{"crate_id":24,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"1:8162:8910":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:12621:5761":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:14212:6040":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:9807:23575":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:2739:4581":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:42450:3568":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:11102:2350":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:9296:4032":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:8129:16250":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:9399:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:2833:10933":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:3827:5268":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:1707:7459":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:2307:8317":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"23:534:9631":{"crate_id":23,"path":["unicode_bidi","utf16","Utf16CharIter"],"kind":"struct"},"6:5250:7670":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:8190:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:3318:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:9168:8927":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:5191:7642":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:22320:11087":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:12317:942":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:22003:33950":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:10948:31676":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:1169:37001":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:40521:8652":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:299:7153":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13015:5749":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:39299:5429":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:37769:3617":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:43370:2350":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:2418:6616":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:44360:9892":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"18:698:5502":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:22704:8377":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:3027:8314":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"21:17:3000":{"crate_id":21,"path":["percent_encoding","AsciiSet"],"kind":"struct"},"2:4766:3724":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:40200:8628":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:15249:6316":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:43956:8724":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11865:9726":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:6132:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:10759:5658":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:39286:8484":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:4979:7582":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:3161:3605":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:40191:8626":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6491:7933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:9886:23587":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:9916:23588":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:4496:8341":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:11051:9684":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:12887:5783":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:261:9660":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:16151:6571":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:2838:6635":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:4344:9868":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:12832:4479":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:4279:10964":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:21479:33952":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:11937:4487":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:13437:5868":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15569:6416":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:13649:5330":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:39890:8612":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:6698:8037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:4241:10765":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"11:787:7159":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:40028:8625":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"24:301:5436":{"crate_id":24,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"5:4267:4548":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:12422:5747":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:6948:6648":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:497:7267":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6353:6778":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:11563:28397":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"16:6335:9792":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:1582:5268":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:7648:9827":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"20:50:248":{"crate_id":20,"path":["form_urlencoded","Target"],"kind":"trait"},"2:13761:4650":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:14386:6062":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"13:0:3415":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:11016:9682":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:7467:8186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:10920:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:8620:8154":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:3475:6664":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:14038:5994":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:5863:23520":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:7968:8905":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:5546:7804":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:22465:11077":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:15281:6325":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:10573:37209":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"18:754:5515":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:2728:6630":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:43346:4491":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:9210:10992":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:12278:28408":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:578:7317":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:15822:6486":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:45486:8774":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13235:5831":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:2458:10930":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"11:875:9840":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:7428:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:8299:9164":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:40112:3773":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:41552:4244":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:40745:5315":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:5449:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:43931:8723":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:952:9841":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:832:9847":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:7364:8326":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:3646:3651":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"21:34:1957":{"crate_id":21,"path":["percent_encoding","percent_encode"],"kind":"function"},"6:485:7262":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:2667:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:4861:3745":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:6895:6862":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:7452:8181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6560:6641":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:45710:8794":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:8301:7025":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:9108:8924":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:7593:3758":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:6849:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:8565:1964":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"25:879:27870":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"2:40763:8659":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:46342:8862":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:1857:4548":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:8834:3652":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:45366:8763":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"11:700:4244":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:32074:2966":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:30458:4672":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:5083:7626":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"18:491:5473":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:3022:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:11045:5361":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:9078:9926":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:4708:3751":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:3842:3593":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:0:3424":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:2234:9669":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:6394:5345":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:3810:6667":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:46488:8870":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:6505:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:5999:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:30420:4670":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:10867:8936":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:12838:4478":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:11607:8959":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:42957:8694":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:21435:33945":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:13211:5830":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:734:10937":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:15701:6457":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:6079:6598":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:22937:8402":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:43388:4505":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:3659:4413":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:2936:22660":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:534:5334":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"21:50:1956":{"crate_id":21,"path":["percent_encoding","percent_decode"],"kind":"function"},"1:11240:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:860:9756":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"5:7456:4244":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:10534:9926":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:43788:8715":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:43669:4495":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"14:7:9442":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:867:9659":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:11392:9698":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:12295:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:4560:6677":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11595:5666":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:6398:6638":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:42102:3683":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:11187:8742":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:2788:6633":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:5505:1671":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"2:8631:16249":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:32836:3604":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10887:37207":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:894:5268":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12089:5721":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:25877:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:41827:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:16093:6556":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:8341:8304":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:929:10878":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:3152:4193":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:40178:4569":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:5006:6691":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:45319:8760":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:5587:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:22915:8400":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:13986:5988":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:1891:5268":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:6650:8021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11773:5765":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:16079:6552":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:10848:9947":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:6849:6860":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:4078:3737":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11042:9683":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"18:765:27773":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:15313:6333":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:11467:5665":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:14189:6031":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"7:31:22494":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:43316:4498":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"14:0:3422":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:39911:34180":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:11580:9950":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:16249:6591":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:13972:5692":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:39134:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:669:9448":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:3105:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"18:538:5482":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:14599:6103":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:1485:7325":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:11419:5658":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:3024:3566":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:45611:8789":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:22418:10933":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"23:482:9621":{"crate_id":23,"path":["unicode_bidi","utf16","BidiInfo"],"kind":"struct"},"17:15582:6422":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"10:36:7172":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:44138:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:6146:8344":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:35838:3615":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:5556:9475":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:15596:6428":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:4718:6681":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:15944:5830":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:42063:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:15010:6262":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:7464:4244":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6456:23524":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:12863:5782":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:10264:9904":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:1933:650":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:6749:6833":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:1340:9842":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:8438:4596":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4891:7540":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:10688:5319":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:5244:7668":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"18:96:10737":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:8294:8293":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13116:5803":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:15760:6473":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"20:91:2371":{"crate_id":20,"path":["form_urlencoded","Parse"],"kind":"struct"},"6:5052:7616":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5064:7625":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:45661:8791":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:10534:37205":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:4436:5274":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:2653:469":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"6:5370:7720":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:5897:6715":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:10997:5639":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:41561:4030":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:2195:5265":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:40348:5495":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:43678:4496":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:31957:2699":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:532:7293":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:2050:8335":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:5034:10983":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"5:7386:5261":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7633:37193":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:2493:651":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:21566:10996":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12300:23713":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:2636:6626":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:545:7299":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:5107:6694":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:11780:3592":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:5436:7756":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"18:651:5474":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:7288:9461":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:3630:3636":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11674:5674":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:6460:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:5784:8903":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12264:9741":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:42214:3579":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:6542:7958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:43277:9890":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:2283:5302":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:7592:16252":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:12579:8705":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:11647:5672":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:15273:6324":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"23:197:27821":{"crate_id":23,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"17:14933:6254":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11026:23604":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"11:844:10878":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:40046:3754":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5636:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:8351:8306":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:22115:10998":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:4271:10767":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:41527:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:570:7312":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"11:2469:5284":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"18:589:5485":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"24:319:9610":{"crate_id":24,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"16:6231:6771":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:5376:7721":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6379:7867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:14177:6029":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:1603:7162":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:6802:6846":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:46313:8861":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:113:10740":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:531:5479":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:1810:674":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:14246:6043":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:2042:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:4608:3749":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:14436:6078":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:45287:8756":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:2808:6634":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:2507:16262":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:7168:8930":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:6278:9766":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:43329:4494":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:22373:11088":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:43752:16150":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:0:978":{"crate_id":6,"path":["libc"],"kind":"module"},"2:5859:4548":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"15:327:22617":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:5483:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:13272:5844":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11605:5667":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:12127:5723":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:45272:8753":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11788:9716":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12030:9727":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:3380:4587":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:5756:9757":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:5925:3686":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:2287:4557":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:41488:3589":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:14079:6000":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:1073:9447":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"23:655:9619":{"crate_id":23,"path":["unicode_bidi","InitialInfoExt"],"kind":"struct"},"17:2037:9665":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:7549:6946":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13387:5861":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11661:5673":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:43644:4486":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:7537:3753":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:11510:9702":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:4425:9471":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:31964:9883":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:7428:23529":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:10285:9938":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"5:6936:5292":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:2203:9666":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6466:6789":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:3899:6669":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:10915:37210":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13946:5980":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:16032:5834":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"11:2554:37181":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:3475:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"19:0:1247":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:1517:7338":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"7:0:1850":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:3287:4589":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:41270:2866":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:15356:6348":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:39229:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:10468:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:10999:8925":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"9:482:22507":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:11621:8960":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"11:2231:7164":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:2036:16272":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:3597:30509":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:3427:4575":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:13509:5882":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:46442:8866":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5557:7810":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:11295:9874":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"14:40:5831":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:219:4653":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"7:78:22501":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:6447:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:3300:3633":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"11:1603:9849":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:6726:3694":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:8216:7018":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:45558:8786":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:1098:9663":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:40:4652":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:7755:6647":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:3241:3613":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:9497:4757":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:37879:3619":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:22681:8373":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:5407:1217":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:14131:6005":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:5307:6695":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:12293:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:3196:6605":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:4421:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:22788:34193":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:4465:9869":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:6047:9759":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:5002:7594":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11242:9693":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:1917:7162":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:3549:4558":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12399:5745":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:6913:5282":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:12530:9746":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:7339:8144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:12201:9736":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:5306:7699":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:7714:5288":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13959:5983":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:15635:6440":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:2592:6624":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:9723:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:363:9894":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:10092:23592":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:2278:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:13606:5913":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:5039:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11574:7164":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6991:37191":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"11:2124:6894":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:1888:9905":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:16198:6581":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:10769:37211":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:44408:8752":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:41669:4413":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"4:0:3416":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:8247:8283":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:46069:8825":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:15434:6366":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"3:0:485":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:41788:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:4106:3739":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:730:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:491:7264":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:21425:4206":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:13363:5857":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:7561:8247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:45302:8757":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:12516:9744":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:11227:9692":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12792:5587":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:43116:9886":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:16259:5861":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:22650:8368":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:10269:3577":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:6597:7996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"11:1883:3651":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:2939:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"18:0:3426":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:434:10757":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:4811:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12175:9731":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:43802:8718":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:6657:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:5572:9476":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:3145:4191":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:8140:9917":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:33247:3606":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:10577:5359":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:11853:9725":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:13051:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:12557:5642":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:1621:7412":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:4466:4548":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:22282:11084":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:2596:4578":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:7083:5298":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:6435:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:6156:4548":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:15176:6302":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:22715:34254":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:8524:3590":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:13344:5856":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13553:5899":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:41710:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:44385:8751":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:3616:4562":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:4940:6689":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12056:5719":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:6721:8046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:13999:5989":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:1309:6894":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:42221:3580":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:774:7158":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11583:9711":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:8166:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:659:9654":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"23:432:5443":{"crate_id":23,"path":["unicode_bidi","level","Level"],"kind":"struct"},"2:39149:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:3870:5284":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:2628:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:39968:4496":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:42521:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:21967:11002":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:15206:6308":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:3115:4189":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:3381:3625":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"}},"external_crates":{"26":{"name":"tinyvec_macros","html_root_url":null},"23":{"name":"unicode_bidi","html_root_url":null},"20":{"name":"form_urlencoded","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"tinyvec","html_root_url":null},"22":{"name":"idna","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"unicode_normalization","html_root_url":null},"21":{"name":"percent_encoding","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}