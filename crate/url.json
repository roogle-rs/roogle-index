{"root":"0:0:1675","crate_version":"2.2.2","includes_private":false,"index":{"0:442":{"id":"0:442","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[26,0],"end":[31,1]},"visibility":{"restricted":{"parent":"0:416:1595","path":"::slicing"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3576:2858","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeTo","id":"2:45919:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Position","id":"0:870:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:443:181","0:444:753"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4745:4166":{"id":"1:4745:4166","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4746:57197","1:4747:41265","1:4748:57198","1:4749:57199"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3277:217":{"id":"2:3277:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:799:2618":{"id":"0:799:2618","crate_id":0,"name":"ExpectedFileDoubleSlash","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:8886:4645":{"id":"2:8886:4645","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7927:4647","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2966:184":{"id":"2:2966:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2968:997","2:2969:826","2:2970:792","2:2971:713","2:2972:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6091:62220":{"id":"5:6091:62220","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:4074","1:2579:2584","1:2580:4075","1:2581:4076"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[150,24],"end":[150,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::ParseError","name":"ParseError","id":"0:754:1591","glob":false}},"0:437:181":{"id":"0:437:181","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[13,4],"end":[13,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[153,0],"end":[153,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"form_urlencoded::EncodingOverride","name":"EncodingOverride","id":"21:95:1597","glob":false}},"2:3524:132":{"id":"2:3524:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3526:181","2:3527:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:513":{"id":"0:513","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,0],"end":[2486,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:514:1649","0:515:1670","0:519:1691","0:520:1706","0:522:971","0:524:306","0:525:1749","0:529:1588","0:530:1708","0:531:1817","0:532:1707","0:533:1832","0:534:1838","0:535:1842","0:536:1775","0:537:1566","0:538:1865","0:539:1614","0:540:1883","0:542:1904","0:547:1002","0:548:1593","0:549:1729","0:550:1965","0:551:1731","0:556:1994","0:561:2009","0:563:1676","0:565:2047","0:567:2056","0:570:2078","0:573:2104","0:576:2133","0:577:2145","0:579:2161","0:581:2194","0:583:2215","0:585:2229","0:587:2266"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13083:4087":{"id":"2:13083:4087","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:885:2895":{"id":"0:885:2895","crate_id":0,"name":"AfterHost","span":{"filename":"src/slicing.rs","begin":[89,4],"end":[89,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:22801:4856":{"id":"2:22801:4856","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22802:4751","2:22803:59903","2:22804:1225","2:22805:1226","2:22806:44238","2:22807:61114","2:22808:10692","2:22809:61115","2:22810:61116","2:22811:59916","2:22812:59920","2:22813:59921","2:22814:59922","2:22815:59923","2:22816:61039","2:22817:61040","2:22818:61041"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:712:1590":{"id":"0:712:1590","crate_id":0,"name":"Origin","span":{"filename":"src/origin.rs","begin":[54,0],"end":[60,1]},"visibility":"public","docs":"The origin of an URL\n\nTwo URLs with the same origin are considered\nto originate from the same entity and can therefore trust\neach other.\n\nThe origin is determined based on the scheme as follows:\n\n- If the scheme is \"blob\" the origin is the origin of the\n  URL contained in the path component. If parsing fails,\n  it is an opaque origin.\n- If the scheme is \"ftp\", \"http\", \"https\", \"ws\", or \"wss\",\n  then the origin is a tuple of the scheme, host, and port.\n- If the scheme is anything else, the origin is opaque, meaning\n  the URL does not have the same origin as any other URL.\n\nFor more information see <https://url.spec.whatwg.org/#origin>","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:713:2549","0:716:2534"],"impls":[]}},"1:5789:3343":{"id":"1:5789:3343","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5790:59134"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3309:3086-0:932:2034":{"id":"a:2:3309:3086-0:932:2034","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3309:3086","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6104:1749":{"id":"5:6104:1749","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:3089"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3089","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4252","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:591":{"id":"0:591","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2489,0],"end":[2496,1]},"visibility":"crate","docs":"Parse a string as an URL, without a base URL or encoding override.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:592:126","0:593:2275"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:483:2914":{"id":"0:483:2914","crate_id":0,"name":"set_href","span":{"filename":"src/quirks.rs","begin":[42,0],"end":[45,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-href","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:754:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:685:1776":{"id":"0:685:1776","crate_id":0,"name":"Ipv4","span":{"filename":"src/host.rs","begin":[52,4],"end":[52,18]},"visibility":"default","docs":"An IPv4 address.\n`Url::host_str` returns the serialization of this address,\nas four decimal integers separated by `.` dots.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11228:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:3439:3167":{"id":"2:3439:3167","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3441:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:573:2104":{"id":"0:573:2104","crate_id":0,"name":"set_host","span":{"filename":"src/lib.rs","begin":[1790,4],"end":[1845,5]},"visibility":"public","docs":"Change this URL’s host.\n\nRemoving the host (calling this with `None`)\nwill also remove any username, password, and port number.\n\n# Examples\n\nChange host:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_host(Some(\"rust-lang.org\"));\nassert!(result.is_ok());\nassert_eq!(url.as_str(), \"https://rust-lang.org/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nRemove host:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_host(None);\nassert!(result.is_ok());\nassert_eq!(url.as_str(), \"foo:/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot remove host for 'special' schemes (e.g. `http`):\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_host(None);\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"https://example.net/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change or remove host for cannot-be-a-base URLs:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\n\nlet result = url.set_host(Some(\"rust-lang.org\"));\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\n\nlet result = url.set_host(None);\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf this URL is cannot-be-a-base or there is an error parsing the given `host`,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["host",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:754:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22937:4356":{"id":"2:22937:4356","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22927:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3197-0:932:2034":{"id":"b:2:3197-0:932:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3200:1750"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:480:2464":{"id":"0:480:2464","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/quirks.rs","begin":[18,0],"end":[23,1]},"visibility":"public","docs":"https://url.spec.whatwg.org/#dom-url-domaintoascii","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:755:2106":{"id":"0:755:2106","crate_id":0,"name":"EmptyHost","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3309:3086-0:908:1600":{"id":"a:2:3309:3086-0:908:1600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3309:3086","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:563:1676":{"id":"0:563:1676","crate_id":0,"name":"query_pairs_mut","span":{"filename":"src/lib.rs","begin":[1495,4],"end":[1513,5]},"visibility":"public","docs":"Manipulate this URL’s query string, viewed as a sequence of name/value pairs\nin `application/x-www-form-urlencoded` syntax.\n\nThe return value has a method-chaining API:\n\n```rust\n# use url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net?lang=fr#nav\")?;\nassert_eq!(url.query(), Some(\"lang=fr\"));\n\nurl.query_pairs_mut().append_pair(\"foo\", \"bar\");\nassert_eq!(url.query(), Some(\"lang=fr&foo=bar\"));\nassert_eq!(url.as_str(), \"https://example.net/?lang=fr&foo=bar#nav\");\n\nurl.query_pairs_mut()\n    .clear()\n    .append_pair(\"foo\", \"bar & baz\")\n    .append_pair(\"saisons\", \"\\u{00C9}t\\u{00E9}+hiver\");\nassert_eq!(url.query(), Some(\"foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver\"));\nassert_eq!(url.as_str(),\n           \"https://example.net/?foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver#nav\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nNote: `url.query_pairs_mut().clear();` is equivalent to `url.set_query(Some(\"\"))`,\nnot `url.set_query(None)`.\n\nThe state of `Url` is unspecified if this return value is leaked without being dropped.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"form_urlencoded::Serializer","id":"21:50:2033","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2871-0:908:1600":{"id":"b:2:2871-0:908:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2865:3110","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2873:55345"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12500:5113":{"id":"2:12500:5113","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12501:1674","2:12502:60585"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:597:1414":{"id":"0:597:1414","crate_id":0,"name":"try_from","span":{"filename":"src/lib.rs","begin":[2501,4],"end":[2503,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3181:227","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:609":{"id":"0:609","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2560,0],"end":[2565,1]},"visibility":"crate","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:610:997"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2871-0:932:2034":{"id":"b:2:2871-0:932:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2865:3110","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2873:55345"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:757:2593":{"id":"0:757:2593","crate_id":0,"name":"IdnaError","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:895:2900":{"id":"0:895:2900","crate_id":0,"name":"BeforeQuery","span":{"filename":"src/slicing.rs","begin":[94,4],"end":[94,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:5739:3347":{"id":"1:5739:3347","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5740:6468","1:5741:8694"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13781:150":{"id":"2:13781:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13782:181","2:13783:150","2:13784:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:690:1540":{"id":"0:690:1540","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[59,9],"end":[59,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"1:11246:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:3210:127":{"id":"2:3210:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"2:3174:135":{"id":"2:3174:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::host::Host","name":"Host","id":"0:680:1587","glob":false}},"0:585:2229":{"id":"0:585:2229","crate_id":0,"name":"from_directory_path","span":{"filename":"src/lib.rs","begin":[2340,4],"end":[2346,5]},"visibility":"public","docs":"Convert a directory name as `std::path::Path` into an URL in the `file` scheme.\n\nThis returns `Err` if the given path is not absolute or,\non Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n\nCompared to `from_file_path`, this ensure that URL’s the path has a trailing slash\nso that the entire path is considered when using this URL as a base URL.\n\nFor example:\n\n* `\"index.html\"` parsed with `Url::from_directory_path(Path::new(\"/var/www\"))`\n  as the base URL is `file:///var/www/index.html`\n* `\"index.html\"` parsed with `Url::from_file_path(Path::new(\"/var/www\"))`\n  as the base URL is `file:///var/index.html`, which might not be what was intended.\n\nNote that `std::path` does not consider trailing slashes significant\nand usually does not include them (e.g. in `Path::parent()`).","links":{},"attrs":["#[cfg(any(unix, windows, target_os = \"redox\"))]","#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["path",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7445:185","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:870:1596":{"id":"0:870:1596","crate_id":0,"name":"Position","span":{"filename":"src/slicing.rs","begin":[81,0],"end":[98,1]},"visibility":"public","docs":"Indicates a position within a URL based on its components.\n\nA range of positions can be used for slicing `Url`:\n\n```rust\n# use url::{Url, Position};\n# fn something(some_url: Url) {\nlet serialization: &str = &some_url[..];\nlet serialization_without_fragment: &str = &some_url[..Position::AfterQuery];\nlet authority: &str = &some_url[Position::BeforeUsername..Position::AfterPort];\nlet data_url_payload: &str = &some_url[Position::BeforePath..Position::AfterQuery];\nlet scheme_relative: &str = &some_url[Position::BeforeUsername..];\n# }\n```\n\nIn a pseudo-grammar (where `[`…`]?` makes a sub-sequence optional),\nURL components and delimiters that separate them are:\n\n```notrust\nurl =\n    scheme \":\"\n    [ \"//\" [ username [ \":\" password ]? \"@\" ]? host [ \":\" port ]? ]?\n    path [ \"?\" query ]? [ \"#\" fragment ]?\n```\n\nWhen a given component is not present,\nits \"before\" and \"after\" position are the same\n(so that `&some_url[BeforeFoo..AfterFoo]` is the empty string)\nand component ordering is preserved\n(so that a missing query \"is between\" a path and a fragment).\n\nThe end of a component and the start of the next are either the same or separate\nby a delimiter.\n(Not that the initial `/` of a path is considered part of the path here, not a delimiter.)\nFor example, `&url[..BeforeFragment]` would include a `#` delimiter (if present in `url`),\nso `&url[..AfterQuery]` might be desired instead.\n\n`BeforeScheme` and `AfterFragment` are always the start and end of the entire URL,\nso `&url[BeforeScheme..X]` is the same as `&url[..X]`\nand `&url[X..AfterFragment]` is the same as `&url[X..]`.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:871:2888","0:873:2889","0:875:2890","0:877:2891","0:879:2892","0:881:2893","0:883:2894","0:885:2895","0:887:2896","0:889:2897","0:891:2898","0:893:2899","0:895:2900","0:897:2901","0:899:2902","0:901:2903"],"impls":[]}},"0:600":{"id":"0:600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2515,0],"end":[2519,1]},"visibility":"crate","docs":"String converstion.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:601:681"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:601:681":{"id":"0:601:681","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[2516,4],"end":[2518,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3280:220":{"id":"2:3280:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1675":{"id":"0:0:1675","crate_id":0,"name":"url","span":{"filename":"src/lib.rs","begin":[9,0],"end":[2889,1]},"visibility":"public","docs":"\nrust-url is an implementation of the [URL Standard](http://url.spec.whatwg.org/)\nfor the [Rust](http://rust-lang.org/) programming language.\n\n\n# URL parsing and data structures\n\nFirst, URL parsing may fail for various reasons and therefore returns a `Result`.\n\n```\nuse url::{Url, ParseError};\n\nassert!(Url::parse(\"http://[:::1]\") == Err(ParseError::InvalidIpv6Address))\n```\n\nLet’s parse a valid URL and look at its components.\n\n```\nuse url::{Url, Host, Position};\n# use url::ParseError;\n# fn run() -> Result<(), ParseError> {\nlet issue_list_url = Url::parse(\n    \"https://github.com/rust-lang/rust/issues?labels=E-easy&state=open\"\n)?;\n\n\nassert!(issue_list_url.scheme() == \"https\");\nassert!(issue_list_url.username() == \"\");\nassert!(issue_list_url.password() == None);\nassert!(issue_list_url.host_str() == Some(\"github.com\"));\nassert!(issue_list_url.host() == Some(Host::Domain(\"github.com\")));\nassert!(issue_list_url.port() == None);\nassert!(issue_list_url.path() == \"/rust-lang/rust/issues\");\nassert!(issue_list_url.path_segments().map(|c| c.collect::<Vec<_>>()) ==\n        Some(vec![\"rust-lang\", \"rust\", \"issues\"]));\nassert!(issue_list_url.query() == Some(\"labels=E-easy&state=open\"));\nassert!(&issue_list_url[Position::BeforePath..] == \"/rust-lang/rust/issues?labels=E-easy&state=open\");\nassert!(issue_list_url.fragment() == None);\nassert!(!issue_list_url.cannot_be_a_base());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nSome URLs are said to be *cannot-be-a-base*:\nthey don’t have a username, password, host, or port,\nand their \"path\" is an arbitrary string rather than slash-separated segments:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet data_url = Url::parse(\"data:text/plain,Hello?World#\")?;\n\nassert!(data_url.cannot_be_a_base());\nassert!(data_url.scheme() == \"data\");\nassert!(data_url.path() == \"text/plain,Hello\");\nassert!(data_url.path_segments().is_none());\nassert!(data_url.query() == Some(\"World\"));\nassert!(data_url.fragment() == Some(\"\"));\n# Ok(())\n# }\n# run().unwrap();\n```\n\n## Serde\n\nEnable the `serde` feature to include `Deserialize` and `Serialize` implementations for `url::Url`.\n\n# Base URL\n\nMany contexts allow URL *references* that can be relative to a *base URL*:\n\n```html\n<link rel=\"stylesheet\" href=\"../main.css\">\n```\n\nSince parsed URLs are absolute, giving a base is required for parsing relative URLs:\n\n```\nuse url::{Url, ParseError};\n\nassert!(Url::parse(\"../main.css\") == Err(ParseError::RelativeUrlWithoutBase))\n```\n\nUse the `join` method on an `Url` to use it as a base URL:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet this_document = Url::parse(\"http://servo.github.io/rust-url/url/index.html\")?;\nlet css_url = this_document.join(\"../main.css\")?;\nassert_eq!(css_url.as_str(), \"http://servo.github.io/rust-url/main.css\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Feature: `serde`\n\nIf you enable the `serde` feature, [`Url`](struct.Url.html) will implement\n[`serde::Serialize`](https://docs.rs/serde/1/serde/trait.Serialize.html) and\n[`serde::Deserialize`](https://docs.rs/serde/1/serde/trait.Deserialize.html).\nSee [serde documentation](https://serde.rs) for more information.\n\n```toml\nurl = { version = \"2\", features = [\"serde\"] }\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/url/2.2.2\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:908:1600","0:921:1619","0:932:2034","0:4","0:94","0:98","0:101","0:105","0:108","0:111","0:114","0:117"],"is_stripped":false}},"2:13452:1772":{"id":"2:13452:1772","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:16005:2983","self::pattern":"2:13053:3424"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3103:3215":{"id":"2:3103:3215","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3102:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3357:3151":{"id":"2:3357:3151","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3359:181","2:3360:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:514:1649":{"id":"0:514:1649","crate_id":0,"name":"parse","span":{"filename":"src/lib.rs","begin":[275,4],"end":[277,5]},"visibility":"public","docs":"Parse an absolute URL from a string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.net\")?;\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an absolute URL from the given string,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::ParseError","id":"0:754:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:440:181":{"id":"0:440:181","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[20,4],"end":[20,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"1:5012:1586":{"id":"1:5012:1586","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5013:3195","1:5014:1914"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8412:3088":{"id":"2:8412:3088","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8414:2147","2:8416:3840","2:8417:3841"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13441:1766":{"id":"2:13441:1766","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:16005:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49429:2638","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:599:660":{"id":"0:599:660","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2509,4],"end":[2511,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["formatter",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10251:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10240:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1338","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:62218","5:6085:1986","5:6088:62219","5:6091:62220","5:6103:62221","5:6104:1749","5:6105:4190","5:6106:55358","5:6107:2662"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:542:1904":{"id":"0:542:1904","crate_id":0,"name":"socket_addrs","span":{"filename":"src/lib.rs","begin":[1139,4],"end":[1165,5]},"visibility":"public","docs":"Resolve a URL’s host and port number to `SocketAddr`.\n\nIf the URL has the default port number of a scheme that is unknown to this library,\n`default_port_number` provides an opportunity to provide the actual port number.\nIn non-example code this should be implemented either simply as `|| None`,\nor by matching on the URL’s `.scheme()`.\n\nIf the host is a domain, it is resolved using the standard library’s DNS support.\n\n# Examples\n\n```no_run\nlet url = url::Url::parse(\"https://example.net/\").unwrap();\nlet addrs = url.socket_addrs(|| None).unwrap();\nstd::net::TcpStream::connect(&*addrs)\n# ;\n```\n\n```\n/// With application-specific known default port numbers\nfn socket_addrs(url: url::Url) -> std::io::Result<Vec<std::net::SocketAddr>> {\n    url.socket_addrs(|| match url.scheme() {\n        \"socks5\" | \"socks5h\" => Some(1080),\n        _ => None,\n    })\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["default_port_number",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Fn","id":"2:3518:130","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4082:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:11152:1585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"impl Fn() -> Option<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Fn","id":"2:3518:130","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22837:4863":{"id":"2:22837:4863","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22838:59903","2:22839:1225","2:22840:1226","2:22841:59920","2:22842:59921","2:22843:59922","2:22844:59923","2:22845:61039","2:22846:61040","2:22847:61041"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13078:4088":{"id":"2:13078:4088","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13080:3835","2:13081:60964","2:13082:60965"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13072:4089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[149,24],"end":[149,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::origin::OpaqueOrigin","name":"OpaqueOrigin","id":"0:735:1589","glob":false}},"2:13499:61584":{"id":"2:13499:61584","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:16005:2983","`DoubleEndedIterator`":"2:8447:120","self::pattern":"2:13053:3424","str::rmatch_indices":"1:16011:2988"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49609:4109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:795:2614":{"id":"0:795:2614","crate_id":0,"name":"EmbeddedCredentials","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:583:2215":{"id":"0:583:2215","crate_id":0,"name":"from_file_path","span":{"filename":"src/lib.rs","begin":[2303,4],"end":[2319,5]},"visibility":"public","docs":"Convert a file name as `std::path::Path` into an URL in the `file` scheme.\n\nThis returns `Err` if the given path is not absolute or,\non Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n\n# Examples\n\nOn Unix-like platforms:\n\n```\n# if cfg!(unix) {\nuse url::Url;\n\n# fn run() -> Result<(), ()> {\nlet url = Url::from_file_path(\"/tmp/foo.txt\")?;\nassert_eq!(url.as_str(), \"file:///tmp/foo.txt\");\n\nlet url = Url::from_file_path(\"../foo.txt\");\nassert!(url.is_err());\n\nlet url = Url::from_file_path(\"https://google.com/\");\nassert!(url.is_err());\n# Ok(())\n# }\n# run().unwrap();\n# }\n```","links":{},"attrs":["#[cfg(any(unix, windows, target_os = \"redox\"))]","#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["path",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7445:185","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13540:61593":{"id":"2:13540:61593","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:16005:2983"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49758:4103","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:570:2078":{"id":"0:570:2078","crate_id":0,"name":"set_port","span":{"filename":"src/lib.rs","begin":[1657,4],"end":[1667,5]},"visibility":"public","docs":"Change this URL’s port number.\n\nNote that default port numbers are not reflected in the serialization.\n\nIf this URL is cannot-be-a-base, does not have a host, or has the `file` scheme;\ndo nothing and return `Err`.\n\n# Examples\n\n```\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"ssh://example.net:2048/\")?;\n\nurl.set_port(Some(4096)).map_err(|_| \"cannot be base\")?;\nassert_eq!(url.as_str(), \"ssh://example.net:4096/\");\n\nurl.set_port(None).map_err(|_| \"cannot be base\")?;\nassert_eq!(url.as_str(), \"ssh://example.net/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nKnown default port numbers are not reflected:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://example.org/\")?;\n\nurl.set_port(Some(443)).map_err(|_| \"cannot be base\")?;\nassert!(url.port().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot set port for cannot-be-a-base URLs:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\n\nlet result = url.set_port(Some(80));\nassert!(result.is_err());\n\nlet result = url.set_port(None);\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["port",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3165:75":{"id":"2:3165:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3167:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3273:3085":{"id":"2:3273:3085","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:495:2933":{"id":"0:495:2933","crate_id":0,"name":"hostname","span":{"filename":"src/quirks.rs","begin":[156,0],"end":[158,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-hostname","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:522:971":{"id":"0:522:971","crate_id":0,"name":"options","span":{"filename":"src/lib.rs","begin":[511,4],"end":[517,5]},"visibility":"public","docs":"Return a default `ParseOptions` that can fully configure the URL parser.\n\n# Examples\n\nGet default `ParseOptions`, then change base url\n\n```rust\nuse url::Url;\n# use url::ParseError;\n# fn run() -> Result<(), ParseError> {\nlet options = Url::options();\nlet api = Url::parse(\"https://api.example.com\")?;\nlet base_url = options.base_url(Some(&api));\nlet version_url = base_url.parse(\"version.json\")?;\nassert_eq!(version_url.as_str(), \"https://api.example.com/version.json\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13440:57704":{"id":"2:13440:57704","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:16011:2988"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13433:57684":{"id":"2:13433:57684","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:7927:4647":{"id":"2:7927:4647","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7928:60854","2:7929:60855","2:7930:60852","2:7931:60850","2:7932:60856","2:7933:60853","2:7934:60851"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1395"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:525:1749":{"id":"0:525:1749","crate_id":0,"name":"into_string","span":{"filename":"src/lib.rs","begin":[562,4],"end":[564,5]},"visibility":"public","docs":"Return the serialization of this URL.\n\nThis consumes the `Url` and takes ownership of the `String` stored in it.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url_str = \"https://example.net/\";\nlet url = Url::parse(url_str)?;\nassert_eq!(String::from(url), url_str);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"2.3.0\", note = \"use Into<String>\")]"],"deprecation":{"since":"2.3.0","note":"use Into<String>"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13496:61583":{"id":"2:13496:61583","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:16005:2983","str::matches":"1:16011:2988","`DoubleEndedIterator`":"2:8447:120","self::pattern":"2:13053:3424"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49681:4112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:611":{"id":"0:611","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2568,0],"end":[2576,1]},"visibility":"crate","docs":"URLs hash like their serialization.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10529:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:612:715"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13493:1563":{"id":"2:13493:1563","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13053:3424","prim@char":"1:16005:2983","str::matches":"1:16011:2988","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49663:4111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13429:2803":{"id":"2:13429:2803","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5801:4341":{"id":"1:5801:4341","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5802:6468"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3197-0:908:1600":{"id":"b:2:3197-0:908:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3200:1750"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:581:2194":{"id":"0:581:2194","crate_id":0,"name":"set_scheme","span":{"filename":"src/lib.rs","begin":[2223,4],"end":[2272,5]},"visibility":"public","docs":"Change this URL’s scheme.\n\nDo nothing and return `Err` under the following circumstances:\n\n* If the new scheme is not in `[a-zA-Z][a-zA-Z0-9+.-]+`\n* If this URL is cannot-be-a-base and the new scheme is one of\n  `http`, `https`, `ws`, `wss` or `ftp`\n* If either the old or new scheme is `http`, `https`, `ws`,\n  `wss` or `ftp` and the other is not one of these\n* If the new scheme is `file` and this URL includes credentials\n  or has a non-null port\n* If this URL's scheme is `file` and its host is empty or null\n\nSee also [the URL specification's section on legal scheme state\noverrides](https://url.spec.whatwg.org/#scheme-state).\n\n# Examples\n\nChange the URL’s scheme from `https` to `foo`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_scheme(\"http\");\nassert_eq!(url.as_str(), \"http://example.net/\");\nassert!(result.is_ok());\n# Ok(())\n# }\n# run().unwrap();\n```\nChange the URL’s scheme from `foo` to `bar`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_scheme(\"bar\");\nassert_eq!(url.as_str(), \"bar://example.net\");\nassert!(result.is_ok());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL’s scheme from `https` to `foõ`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_scheme(\"foõ\");\nassert_eq!(url.as_str(), \"https://example.net/\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL’s scheme from `mailto` (cannot-be-a-base) to `https`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\nlet result = url.set_scheme(\"https\");\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\nCannot change the URL’s scheme from `foo` to `https`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_scheme(\"https\");\nassert_eq!(url.as_str(), \"foo://example.net\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\nCannot change the URL’s scheme from `http` to `foo`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"http://example.net\")?;\nlet result = url.set_scheme(\"foo\");\nassert_eq!(url.as_str(), \"http://example.net/\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy :: result_unit_err, clippy :: suspicious_operation_groupings)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["scheme",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9258:3573-0:921:1619":{"id":"a:2:9258:3573-0:921:1619","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9258:3573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:2865:3110":{"id":"2:2865:3110","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2867:55345"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3521:131":{"id":"2:3521:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3523:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3524:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3647:3171":{"id":"2:3647:3171","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3649:60805","2:3650:60806","2:3651:2494"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:805:2624":{"id":"0:805:2624","crate_id":0,"name":"NullInFragment","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:9258:3573":{"id":"2:9258:3573","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22748:4836":{"id":"2:22748:4836","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22749:4751","2:22750:59903","2:22751:59904","2:22752:59905","2:22753:59906","2:22754:44238","2:22755:59907","2:22756:59908","2:22757:59909","2:22758:59910","2:22759:59911","2:22760:59912","2:22761:59913","2:22762:59914","2:22763:10526","2:22764:59915","2:22765:59916","2:22766:9860","2:22767:59917","2:22768:59918","2:22769:59919","2:22770:59920","2:22771:59921","2:22772:59922","2:22773:59923"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:502:2946":{"id":"0:502:2946","crate_id":0,"name":"search","span":{"filename":"src/quirks.rs","begin":[251,0],"end":[253,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-search","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:8879:3203":{"id":"2:8879:3203","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13442:4728":{"id":"2:13442:4728","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:16005:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49435:4099","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13422:61575":{"id":"2:13422:61575","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:16011:2988"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5793:4339":{"id":"1:5793:4339","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5794:57097"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3268:211-0:908:1600":{"id":"a:2:3268:211-0:908:1600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13427:304":{"id":"2:13427:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:16011:2988","`u8`":"1:16022:2997"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:500:2940":{"id":"0:500:2940","crate_id":0,"name":"pathname","span":{"filename":"src/quirks.rs","begin":[228,0],"end":[230,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-pathname","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:6415:1395":{"id":"5:6415:1395","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3351:3148":{"id":"2:3351:3148","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3353:181","2:3354:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13531:61592":{"id":"2:13531:61592","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13053:3424","prim@char":"1:16005:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13537:55359":{"id":"2:13537:55359","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:926":{"id":"0:926","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,9],"end":[191,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:529:1588":{"id":"0:529:1588","crate_id":0,"name":"origin","span":{"filename":"src/lib.rs","begin":[761,4],"end":[763,5]},"visibility":"public","docs":"Return the origin of this URL (<https://url.spec.whatwg.org/#origin>)\n\nNote: this returns an opaque origin for `file:` URLs, which causes\n`url.origin() != url.origin()`.\n\n# Examples\n\nURL with `ftp` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://example.com/foo\")?;\nassert_eq!(url.origin(),\n           Origin::Tuple(\"ftp\".into(),\n                         Host::Domain(\"example.com\".into()),\n                         21));\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with `blob` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"blob:https://example.com/foo\")?;\nassert_eq!(url.origin(),\n           Origin::Tuple(\"https\".into(),\n                         Host::Domain(\"example.com\".into()),\n                         443));\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with `file` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert!(!url.origin().is_tuple());\n\nlet other_url = Url::parse(\"file:///tmp/foo\")?;\nassert!(url.origin() != other_url.origin());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with other scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"foo:bar\")?;\nassert!(!url.origin().is_tuple());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Origin","id":"0:712:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:444:753":{"id":"0:444:753","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[28,4],"end":[30,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"resolved_path","inner":{"name":"RangeTo","id":"2:45919:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Position","id":"0:870:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7799:4425":{"id":"1:7799:4425","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7800:59131"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:883:2894":{"id":"0:883:2894","crate_id":0,"name":"BeforeHost","span":{"filename":"src/slicing.rs","begin":[88,4],"end":[88,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:6863:3350":{"id":"1:6863:3350","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6864:59776"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3430:3165":{"id":"2:3430:3165","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3432:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3212-0:921:1619":{"id":"b:2:3212-0:921:1619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3215:127","2:3216:1414"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2871-0:921:1619":{"id":"b:2:2871-0:921:1619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2865:3110","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2873:55345"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8362:4850":{"id":"2:8362:4850","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8364:3880"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13455:2109":{"id":"2:13455:2109","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:16005:2983","self::pattern":"2:13053:3424"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4050:3332":{"id":"2:4050:3332","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4051:4076"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3168:74":{"id":"2:3168:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3170:2338"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:515:1670":{"id":"0:515:1670","crate_id":0,"name":"parse_with_params","span":{"filename":"src/lib.rs","begin":[305,4],"end":[319,5]},"visibility":"public","docs":"Parse an absolute URL from a string and add params to its query string.\n\nExisting params are not removed.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse_with_params(\"https://example.net?dont=clobberme\",\n                                 &[(\"lang\", \"rust\"), (\"browser\", \"servo\")])?;\nassert_eq!(\"https://example.net/?dont=clobberme&lang=rust&browser=servo\", url.as_str());\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an absolute URL from the given string,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::ParseError","id":"0:754:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:605":{"id":"0:605","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2544,0],"end":[2549,1]},"visibility":"crate","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:606:604"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3268:211-0:932:2034":{"id":"a:2:3268:211-0:932:2034","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:765:2112":{"id":"0:765:2112","crate_id":0,"name":"InvalidDomainCharacter","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3491:116":{"id":"2:3491:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3492:221","2:3493:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13519:10127":{"id":"2:13519:10127","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13053:3424","prim@char":"1:16005:2983"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:656:578":{"id":"0:656:578","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[2884,4],"end":[2888,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4001-0:921:1619":{"id":"b:2:4001-0:921:1619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3999:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:4003:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3416:3162":{"id":"2:3416:3162","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3418:181","2:3419:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9258:3573-0:932:2034":{"id":"a:2:9258:3573-0:932:2034","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9258:3573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:4782:4247":{"id":"2:4782:4247","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4783:1674","2:4784:60135","2:4785:3844"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:598":{"id":"0:598","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2507,0],"end":[2512,1]},"visibility":"crate","docs":"Display the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:599:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13416":{"id":"2:13416","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12513:1338","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13417:793","2:13418:1716","2:13419:10524","2:13420:61574","2:13422:61575","2:13425:1967","2:13426:61576","2:13427:304","2:13428:9564","2:13429:2803","2:13431:9553","2:13433:57684","2:13435:57685","2:13437:4393","2:13438:61577","2:13439:1715","2:13440:57704","2:13441:1766","2:13442:4728","2:13443:2322","2:13444:10735","2:13445:10733","2:13446:5447","2:13447:61578","2:13448:10475","2:13449:2494","2:13452:1772","2:13455:2109","2:13458:2111","2:13462:1712","2:13466:1721","2:13469:10734","2:13472:57713","2:13475:61579","2:13478:61580","2:13481:57715","2:13484:57717","2:13487:61581","2:13490:61582","2:13493:1563","2:13496:61583","2:13499:61584","2:13502:61585","2:13505:2947","2:13507:61586","2:13509:61587","2:13511:61588","2:13512:61589","2:13513:2641","2:13516:2731","2:13519:10127","2:13522:57719","2:13525:61590","2:13528:61591","2:13531:61592","2:13534:1649","2:13536:5120","2:13537:55359","2:13538:55360","2:13539:55361","2:13540:61593","2:13542:4366","2:13543:61594"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:684:1540":{"id":"0:684:1540","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[47,11],"end":[47,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"S"}},"0:773:2605":{"id":"0:773:2605","crate_id":0,"name":"Overflow","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3181:227":{"id":"2:3181:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3183:127","2:3184:1414"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3216:1414":{"id":"2:3216:1414","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13428:9564":{"id":"2:13428:9564","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16022:2997"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10312:3120":{"id":"2:10312:3120","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10313:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"25:344:6013":{"id":"25:344:6013","crate_id":25,"name":"UnicodeNormalization","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:346:55346","25:347:55347","25:348:3243","25:349:55348","25:350:55349","25:351:6021"],"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:754:1591":{"id":"0:754:1591","crate_id":0,"name":"ParseError","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"public","docs":"Errors that can occur during parsing.\n\nThis may be extended in the future so exhaustive matching is\ndiscouraged with an unused variant.","links":{},"attrs":["#[allow(clippy :: manual_non_exhaustive)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:755:2106","0:757:2593","0:759:2595","0:761:2505","0:763:2461","0:765:2112","0:767:2600","0:769:2602","0:771:2105","0:773:2605"],"impls":[]}},"2:13502:61585":{"id":"2:13502:61585","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13053:3424","`DoubleEndedIterator`":"2:8447:120","str::match_indices":"1:16011:2988","prim@char":"1:16005:2983"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49627:4110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3558:3177":{"id":"2:3558:3177","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3560:237","2:3561:206","2:3562:61061"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23467:18258":{"id":"2:23467:18258","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23468:59918","2:23469:59917","2:23470:59919"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23462:4753","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:492:2104":{"id":"0:492:2104","crate_id":0,"name":"set_host","span":{"filename":"src/quirks.rs","begin":[105,0],"end":[152,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-host","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_host",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:23771:4747":{"id":"2:23771:4747","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23772:4751"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23767:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3197-0:921:1619":{"id":"b:2:3197-0:921:1619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3200:1750"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6794:3356":{"id":"1:6794:3356","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6795:9206"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6689:3346":{"id":"1:6689:3346","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6690:57105","1:6691:8298","1:6692:8299","1:6693:8301","1:6694:8300","1:6695:8302","1:6696:8303","1:6697:8305","1:6698:6510","1:6699:8308","1:6700:8309","1:6701:8310","1:6702:8311","1:6703:8312","1:6704:8313","1:6705:8306","1:6706:8307"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:718:1540":{"id":"0:718:1540","crate_id":0,"name":"0","span":{"filename":"src/origin.rs","begin":[59,10],"end":[59,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:652:652":{"id":"0:652:652","crate_id":0,"name":"finish","span":{"filename":"src/lib.rs","begin":[2874,4],"end":[2878,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:809:2628":{"id":"0:809:2628","crate_id":0,"name":"TabOrNewlineIgnored","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:680:1587":{"id":"0:680:1587","crate_id":0,"name":"Host","span":{"filename":"src/host.rs","begin":[42,0],"end":[60,1]},"visibility":"public","docs":"The host name of an URL.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:682:1779","0:685:1776","0:688:1777"],"impls":[]}},"2:13445:10733":{"id":"2:13445:10733","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:16011:2988"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49742:4094","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:612:715":{"id":"0:612:715","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[2570,4],"end":[2575,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"H"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"hash::Hasher","id":"2:10539:146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6107:2662":{"id":"5:6107:2662","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:16011:2988"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3375:3154":{"id":"2:3375:3154","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3377:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3363:3150":{"id":"2:3363:3150","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3364:181","2:3365:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:535:1842":{"id":"0:535:1842","crate_id":0,"name":"has_host","span":{"filename":"src/lib.rs","begin":[936,4],"end":[938,5]},"visibility":"public","docs":"Equivalent to `url.host().is_some()`.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.has_host());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.has_host());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(!url.has_host());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:807:2626":{"id":"0:807:2626","crate_id":0,"name":"PercentDecode","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:22874:4839":{"id":"2:22874:4839","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22875:4751","2:22876:1245","2:22877:1270"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3410:3161":{"id":"2:3410:3161","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3412:181","2:3413:1231"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6088:62219":{"id":"5:6088:62219","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3733:137":{"id":"2:3733:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3735:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13513:2641":{"id":"2:13513:2641","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:16005:2983","self::pattern":"2:13053:3424"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13083:4087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:556:1994":{"id":"0:556:1994","crate_id":0,"name":"set_fragment","span":{"filename":"src/lib.rs","begin":[1383,4],"end":[1397,5]},"visibility":"public","docs":"Change this URL’s fragment identifier.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com/data.csv\")?;\nassert_eq!(url.as_str(), \"https://example.com/data.csv\");\nurl.set_fragment(Some(\"cell=4,1-6,2\"));\nassert_eq!(url.as_str(), \"https://example.com/data.csv#cell=4,1-6,2\");\nassert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n\nurl.set_fragment(None);\nassert_eq!(url.as_str(), \"https://example.com/data.csv\");\nassert!(url.fragment().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["fragment",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3379:3153":{"id":"2:3379:3153","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3381:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:120:1566":{"id":"0:120:1566","crate_id":0,"name":"host","span":{"filename":"src/host.rs","begin":[9,0],"end":[480,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:680:1587"],"is_stripped":true}},"2:2925:124":{"id":"2:2925:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3201-0:921:1619":{"id":"b:2:3201-0:921:1619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3203:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:443:181":{"id":"0:443:181","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[27,4],"end":[27,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"b:2:4001-0:932:2034":{"id":"b:2:4001-0:932:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3999:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:4003:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:771:2105":{"id":"0:771:2105","crate_id":0,"name":"SetHostOnCannotBeABaseUrl","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3246:115":{"id":"2:3246:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2920:183":{"id":"2:2920:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2922:604","2:2923:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:504:715":{"id":"0:504:715","crate_id":0,"name":"hash","span":{"filename":"src/quirks.rs","begin":[265,0],"end":[267,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-hash","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"b:2:4001-0:908:1600":{"id":"b:2:4001-0:908:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3999:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4003:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13417:793":{"id":"2:13417:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:16005:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3999:68":{"id":"2:3999:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4000:1427"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:13542:4366":{"id":"2:13542:4366","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:16005:2983"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49767:4104","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:487:1832":{"id":"0:487:1832","crate_id":0,"name":"username","span":{"filename":"src/quirks.rs","begin":[71,0],"end":[73,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-username","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:791:3889":{"id":"5:791:3889","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:897:2901":{"id":"0:897:2901","crate_id":0,"name":"AfterQuery","span":{"filename":"src/slicing.rs","begin":[95,4],"end":[95,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:9259:3572-0:908:1600":{"id":"a:2:9259:3572-0:908:1600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9259:3572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3504:3168":{"id":"2:3504:3168","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3491:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13543:61594":{"id":"2:13543:61594","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:16005:2983"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49776:4105","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3276:218":{"id":"2:3276:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3346:3149":{"id":"2:3346:3149","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3348:181","2:3349:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:537:1566":{"id":"0:537:1566","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[1012,4],"end":[1019,5]},"visibility":"public","docs":"Return the parsed representation of the host for this URL.\nNon-ASCII domain labels are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\n\nCannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\ndon’t have a host.\n\nSee also the `host_str` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/index.html\")?;\nassert!(url.host().is_some());\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.host().is_some());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(url.host().is_none());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(url.host().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Host","id":"0:680:1587","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:534:1838":{"id":"0:534:1838","crate_id":0,"name":"password","span":{"filename":"src/lib.rs","begin":[901,4],"end":[913,5]},"visibility":"public","docs":"Return the password for this URL, if any, as a percent-encoded ASCII string.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms:secret123@example.com\")?;\nassert_eq!(url.password(), Some(\"secret123\"));\n\nlet url = Url::parse(\"ftp://:secret123@example.com\")?;\nassert_eq!(url.password(), Some(\"secret123\"));\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.password(), None);\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.password(), None);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3268:211-0:921:1619":{"id":"a:2:3268:211-0:921:1619","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:13072:4089":{"id":"2:13072:4089","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13074:4721","2:13075:922","2:13076:60203","2:13077:60204"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13512:61589":{"id":"2:13512:61589","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3280:220-0:932:2034":{"id":"a:2:3280:220-0:932:2034","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8403:151":{"id":"2:8403:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8404:1674","2:8405:3842","2:8406:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2868-0:932:2034":{"id":"b:2:2868-0:932:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2870:1579"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:720:1542":{"id":"0:720:1542","crate_id":0,"name":"2","span":{"filename":"src/origin.rs","begin":[59,32],"end":[59,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u16"}},"0:873:2889":{"id":"0:873:2889","crate_id":0,"name":"AfterScheme","span":{"filename":"src/slicing.rs","begin":[83,4],"end":[83,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:5:787-0:921:1619":{"id":"b:5:787-0:921:1619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["5:789:3112","5:790:2000","5:791:3889"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3201-0:908:1600":{"id":"b:2:3201-0:908:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3203:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13466:1721":{"id":"2:13466:1721","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:16011:2988","prim@char":"1:16005:2983","self::pattern":"2:13053:3424","`DoubleEndedIterator`":"2:8447:120","str::rsplit":"1:16011:2988"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49459:1947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:498:2078":{"id":"0:498:2078","crate_id":0,"name":"set_port","span":{"filename":"src/quirks.rs","begin":[204,0],"end":[224,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-port","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_port",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:687:1540":{"id":"0:687:1540","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[52,9],"end":[52,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11228:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:899:2902":{"id":"0:899:2902","crate_id":0,"name":"BeforeFragment","span":{"filename":"src/slicing.rs","begin":[96,4],"end":[96,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:921:1619":{"id":"0:921:1619","crate_id":0,"name":"ParseOptions","span":{"filename":"src/lib.rs","begin":[192,0],"end":[196,1]},"visibility":"public","docs":"Full configuration for the URL parser.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:507","a:2:3268:211-0:921:1619","a:2:3280:220-0:921:1619","a:2:3309:3086-0:921:1619","a:2:9258:3573-0:921:1619","a:2:9259:3572-0:921:1619","b:2:3197-0:921:1619","b:2:2868-0:921:1619","b:2:3201-0:921:1619","b:2:4001-0:921:1619","b:2:3207-0:921:1619","b:2:2871-0:921:1619","b:2:3212-0:921:1619","b:5:787-0:921:1619","0:926","0:928"]}},"5:5837:4092":{"id":"5:5837:4092","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:1691"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:901:2903":{"id":"0:901:2903","crate_id":0,"name":"AfterFragment","span":{"filename":"src/slicing.rs","begin":[97,4],"end":[97,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:539:1614":{"id":"0:539:1614","crate_id":0,"name":"port","span":{"filename":"src/lib.rs","begin":[1076,4],"end":[1078,5]},"visibility":"public","docs":"Return the port number for this URL, if any.\n\nNote that default port numbers are never reflected by the serialization,\nuse the `port_or_known_default()` method if you want a default port number returned.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.port(), None);\n\nlet url = Url::parse(\"https://example.com:443/\")?;\nassert_eq!(url.port(), None);\n\nlet url = Url::parse(\"ssh://example.com:22\")?;\nassert_eq!(url.port(), Some(22));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:509:1621":{"id":"0:509:1621","crate_id":0,"name":"base_url","span":{"filename":"src/lib.rs","begin":[200,4],"end":[203,5]},"visibility":"public","docs":"Change the base URL","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["new",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:496:2935":{"id":"0:496:2935","crate_id":0,"name":"set_hostname","span":{"filename":"src/quirks.rs","begin":[162,0],"end":[194,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-hostname","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_hostname",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"a:2:3309:3086-0:921:1619":{"id":"a:2:3309:3086-0:921:1619","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3309:3086","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2873:55345":{"id":"2:2873:55345","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:930:408":{"id":"0:930:408","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[191,15],"end":[191,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9259:3572-0:921:1619":{"id":"a:2:9259:3572-0:921:1619","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9259:3572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:13435:57685":{"id":"2:13435:57685","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10310:3119":{"id":"2:10310:3119","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10311:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:790:1592":{"id":"0:790:1592","crate_id":0,"name":"SyntaxViolation","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"public","docs":"Non-fatal syntax violations that can occur during parsing.\n\nThis may be extended in the future so exhaustive matching is\ndiscouraged with an unused variant.","links":{},"attrs":["#[allow(clippy :: manual_non_exhaustive)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:791:2610","0:793:2612","0:795:2614","0:797:2616","0:799:2618","0:801:2620","0:803:2622","0:805:2624","0:807:2626","0:809:2628","0:811:2630"],"impls":[]}},"0:649":{"id":"0:649","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2869,0],"end":[2881,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Target","id":"21:56:221","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:651:2337","0:652:652","0:653:2339"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6106:55358":{"id":"5:6106:55358","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:16011:2988"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5651:3342":{"id":"1:5651:3342","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5652:55433","1:5653:3774"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:386:1593":{"id":"0:386:1593","crate_id":0,"name":"path_segments","span":{"filename":"src/path_segments.rs","begin":[9,0],"end":[246,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:861:1594"],"is_stripped":true}},"2:10298:119":{"id":"2:10298:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10299:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:450:1598":{"id":"0:450:1598","crate_id":0,"name":"quirks","span":{"filename":"src/quirks.rs","begin":[9,0],"end":[287,1]},"visibility":"public","docs":"Getters and setters for URL components implemented per https://url.spec.whatwg.org/#api\n\nUnless you need to be interoperable with web browsers,\nyou probably want to use `Url` method instead.","links":{},"attrs":["#[doc(hidden)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:480:2464","0:481:2526","0:482:2912","0:483:2914","0:484:1588","0:485:2917","0:486:2919","0:487:1832","0:488:2161","0:489:1838","0:490:2145","0:491:1566","0:492:2104","0:495:2933","0:496:2935","0:497:1614","0:498:2078","0:500:2940","0:501:2942","0:502:2946","0:503:2949","0:504:715","0:505:2953"],"is_stripped":true}},"2:13487:61581":{"id":"2:13487:61581","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:511:1647":{"id":"0:511:1647","crate_id":0,"name":"syntax_violation_callback","span":{"filename":"src/lib.rs","begin":[234,4],"end":[237,5]},"visibility":"public","docs":"Call the provided function or closure for a non-fatal `SyntaxViolation`\nwhen it occurs during parsing. Note that since the provided function is\n`Fn`, the caller might need to utilize _interior mutability_, such as with\na `RefCell`, to collect the violations.\n\n## Example\n```\nuse std::cell::RefCell;\nuse url::{Url, SyntaxViolation};\n# use url::ParseError;\n# fn run() -> Result<(), url::ParseError> {\nlet violations = RefCell::new(Vec::new());\nlet url = Url::options()\n    .syntax_violation_callback(Some(&|v| violations.borrow_mut().push(v)))\n    .parse(\"https:////example.com\")?;\nassert_eq!(url.as_str(), \"https://example.com/\");\nassert_eq!(violations.into_inner(),\n           vec!(SyntaxViolation::ExpectedDoubleSlash));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["new",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Fn","id":"2:3518:130","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"SyntaxViolation","id":"0:790:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":null}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:651:2337":{"id":"0:651:2337","crate_id":0,"name":"as_mut_string","span":{"filename":"src/lib.rs","begin":[2870,4],"end":[2872,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:481:2526":{"id":"0:481:2526","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/quirks.rs","begin":[26,0],"end":[34,1]},"visibility":"public","docs":"https://url.spec.whatwg.org/#dom-url-domaintounicode","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3576:2858":{"id":"2:3576:2858","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3578:181","2:3579:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:439":{"id":"0:439","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[19,0],"end":[24,1]},"visibility":{"restricted":{"parent":"0:416:1595","path":"::slicing"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3576:2858","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFrom","id":"2:45898:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Position","id":"0:870:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:440:181","0:441:753"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3388:3160":{"id":"2:3388:3160","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3389:181","2:3390:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23462:4753":{"id":"2:23462:4753","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23463:1268","2:23464:1267","2:23465:1265","2:23466:1264"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22874:4839","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3434:3166":{"id":"2:3434:3166","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3436:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:891:2898":{"id":"0:891:2898","crate_id":0,"name":"BeforePath","span":{"filename":"src/slicing.rs","begin":[92,4],"end":[92,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:5723:3344":{"id":"1:5723:3344","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5724:59734","1:5725:59736","1:5726:59735","1:5727:59737"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6561:3358":{"id":"1:6561:3358","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6562:57153","1:6563:57154"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:759:2595":{"id":"0:759:2595","crate_id":0,"name":"InvalidPort","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:735:1589":{"id":"0:735:1589","crate_id":0,"name":"OpaqueOrigin","span":{"filename":"src/origin.rs","begin":[113,0],"end":[113,31]},"visibility":"public","docs":"Opaque identifier for URLs that have file or other schemes","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3278:106":{"id":"2:3278:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:5:787-0:908:1600":{"id":"b:5:787-0:908:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:3112","5:790:2000","5:791:3889"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3207-0:932:2034":{"id":"b:2:3207-0:932:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3177:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3210:127","2:3211:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:4752:4169":{"id":"1:4752:4169","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:59221","1:4754:59222","1:4755:59223","1:4757:4168","1:4758:59224","1:4760:1721","1:4761:5447"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4670:4162","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13439:1715":{"id":"2:13439:1715","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:16011:2988"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:607":{"id":"0:607","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2552,0],"end":[2557,1]},"visibility":"crate","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2956:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:608:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:769:2602":{"id":"0:769:2602","crate_id":0,"name":"RelativeUrlWithCannotBeABaseBase","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:9347:4353":{"id":"1:9347:4353","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9348:57496","1:9349:57497","1:9350:57498","1:9351:57499","1:9352:57500","1:9353:40876","1:9354:57495"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:938:660":{"id":"0:938:660","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2853,9],"end":[2853,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10251:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10240:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3426:3164":{"id":"2:3426:3164","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:210:1568":{"id":"0:210:1568","crate_id":0,"name":"parser","span":{"filename":"src/parser.rs","begin":[9,0],"end":[1606,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:754:1591","0:790:1592"],"is_stripped":true}},"0:801:2620":{"id":"0:801:2620","crate_id":0,"name":"FileWithHostAndWindowsDrive","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3515:2340":{"id":"2:3515:2340","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3516:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13447:61578":{"id":"2:13447:61578","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49723:4108","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8447:120":{"id":"2:8447:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8448:3835","2:8449:3836","2:8450:3837","2:8451:3838","2:8455:3839","2:8458:1712"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5833:4091":{"id":"5:5833:4091","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"21:56:221":{"id":"21:56:221","crate_id":21,"name":"Target","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:57:2337","21:58:652","21:59:2339"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:6413-0:908:1600":{"id":"b:5:6413-0:908:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6411:223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6415:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3211:1415":{"id":"2:3211:1415","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:919":{"id":"0:919","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,9],"end":[165,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:920:408"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:524:306":{"id":"0:524:306","crate_id":0,"name":"as_str","span":{"filename":"src/lib.rs","begin":[538,4],"end":[540,5]},"visibility":"public","docs":"Return the serialization of this URL.\n\nThis is fast since that serialization is already stored in the `Url` struct.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url_str = \"https://example.net/\";\nlet url = Url::parse(url_str)?;\nassert_eq!(url.as_str(), url_str);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:548:1593":{"id":"0:548:1593","crate_id":0,"name":"path_segments","span":{"filename":"src/lib.rs","begin":[1238,4],"end":[1245,5]},"visibility":"public","docs":"Unless this URL is cannot-be-a-base,\nreturn an iterator of '/' slash-separated path segments,\neach as a percent-encoded ASCII string.\n\nReturn `None` for cannot-be-a-base URLs.\n\nWhen `Some` is returned, the iterator always contains at least one string\n(which may be empty).\n\n# Examples\n\n```\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet url = Url::parse(\"https://example.com/foo/bar\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"foo\"));\nassert_eq!(path_segments.next(), Some(\"bar\"));\nassert_eq!(path_segments.next(), None);\n\nlet url = Url::parse(\"https://example.com\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"\"));\nassert_eq!(path_segments.next(), None);\n\nlet url = Url::parse(\"data:text/plain,HelloWorld\")?;\nassert!(url.path_segments().is_none());\n\nlet url = Url::parse(\"https://example.com/countries/việt nam\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"countries\"));\nassert_eq!(path_segments.next(), Some(\"vi%E1%BB%87t%20nam\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy :: manual_strip)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"str::Split","id":"2:49459:1947","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:510:1622":{"id":"0:510:1622","crate_id":0,"name":"encoding_override","span":{"filename":"src/lib.rs","begin":[207,4],"end":[210,5]},"visibility":"public","docs":"Override the character encoding of query strings.\nThis is a legacy concept only relevant for HTML.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["new",{"kind":"resolved_path","inner":{"name":"EncodingOverride","id":"21:95:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:887:2896":{"id":"0:887:2896","crate_id":0,"name":"BeforePort","span":{"filename":"src/slicing.rs","begin":[90,4],"end":[90,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3716:3172":{"id":"2:3716:3172","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3647:3171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23134:4752":{"id":"2:23134:4752","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23771:4747","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23125:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13444:10735":{"id":"2:13444:10735","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:16011:2988"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49733:4096","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2862:97":{"id":"2:2862:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2864:1579"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13438:61577":{"id":"2:13438:61577","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:16011:2988","crate::ops::IndexMut":"2:3580:3169","str::slice_unchecked":"1:16011:2988"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13418:1716":{"id":"2:13418:1716","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:512:1649":{"id":"0:512:1649","crate_id":0,"name":"parse","span":{"filename":"src/lib.rs","begin":[240,4],"end":[249,5]},"visibility":"public","docs":"Parse an URL string with the configuration so far.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::ParseError","id":"0:754:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5779:3345":{"id":"1:5779:3345","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5780:55415","1:5781:55416","1:5782:55417","1:5783:55418"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5745:3346":{"id":"1:5745:3346","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5746:7953","1:5747:59134","1:5748:6468","1:5749:59135","1:5750:4578","1:5751:4579","1:5752:59136","1:5753:1302","1:5754:59137","1:5755:59138","1:5756:59139","1:5757:59140","1:5758:59141","1:5759:59142","1:5760:59143","1:5761:59144"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:928":{"id":"0:928","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,15],"end":[191,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:930:408"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:719:1541":{"id":"0:719:1541","crate_id":0,"name":"1","span":{"filename":"src/origin.rs","begin":[59,18],"end":[59,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Host","id":"0:680:1587","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},"0:793:2612":{"id":"0:793:2612","crate_id":0,"name":"C0SpaceIgnored","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2868-0:908:1600":{"id":"b:2:2868-0:908:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2870:1579"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:482:2912":{"id":"0:482:2912","crate_id":0,"name":"href","span":{"filename":"src/quirks.rs","begin":[37,0],"end":[39,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-href","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:594":{"id":"0:594","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2498,0],"end":[2504,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:596:127","0:597:1414"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:879:2892":{"id":"0:879:2892","crate_id":0,"name":"BeforePassword","span":{"filename":"src/slicing.rs","begin":[86,4],"end":[86,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:608:415":{"id":"0:608:415","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[2554,4],"end":[2556,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"cmp::Ordering","id":"2:37624:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2956:177":{"id":"2:2956:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2957:415","2:2958:3805","2:2959:2516","2:2960:3834"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:579:2161":{"id":"0:579:2161","crate_id":0,"name":"set_username","span":{"filename":"src/lib.rs","begin":[2061,4],"end":[2110,5]},"visibility":"public","docs":"Change this URL’s username.\n\nIf this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n# Examples\n\nCannot setup username from mailto(cannot-be-base)\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rmz@example.com\")?;\nlet result = url.set_username(\"user1\");\nassert_eq!(url.as_str(), \"mailto:rmz@example.com\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nSetup username to user1\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"ftp://:secre1@example.com/\")?;\nlet result = url.set_username(\"user1\");\nassert!(result.is_ok());\nassert_eq!(url.username(), \"user1\");\nassert_eq!(url.as_str(), \"ftp://user1:secre1@example.com/\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["username",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:881:2893":{"id":"0:881:2893","crate_id":0,"name":"AfterPassword","span":{"filename":"src/slicing.rs","begin":[87,4],"end":[87,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:602":{"id":"0:602","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2522,0],"end":[2538,1]},"visibility":"crate","docs":"Debug the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:603:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:871:2888":{"id":"0:871:2888","crate_id":0,"name":"BeforeScheme","span":{"filename":"src/slicing.rs","begin":[82,4],"end":[82,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:505:2953":{"id":"0:505:2953","crate_id":0,"name":"set_hash","span":{"filename":"src/quirks.rs","begin":[270,0],"end":[279,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-hash","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_hash",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3405:3159":{"id":"2:3405:3159","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3407:181","2:3408:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13528:61591":{"id":"2:13528:61591","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13053:3424","prim@char":"1:16005:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:549:1729":{"id":"0:549:1729","crate_id":0,"name":"query","span":{"filename":"src/lib.rs","begin":[1271,4],"end":[1283,5]},"visibility":"public","docs":"Return this URL’s query string, if any, as a percent-encoded ASCII string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\nfn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/products?page=2\")?;\nlet query = url.query();\nassert_eq!(query, Some(\"page=2\"));\n\nlet url = Url::parse(\"https://example.com/products\")?;\nlet query = url.query();\nassert!(query.is_none());\n\nlet url = Url::parse(\"https://example.com/?country=español\")?;\nlet query = url.query();\nassert_eq!(query, Some(\"country=espa%C3%B1ol\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14239:4251":{"id":"2:14239:4251","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14240:59403","2:14241:59404","2:14242:59405","2:14243:59406","2:14244:59407","2:14245:59408","2:14246:2652"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:713:2549":{"id":"0:713:2549","crate_id":0,"name":"Opaque","span":{"filename":"src/origin.rs","begin":[56,4],"end":[56,24]},"visibility":"default","docs":"A globally unique identifier","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"OpaqueOrigin","id":"0:735:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:438:753":{"id":"0:438:753","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["_",{"kind":"resolved_path","inner":{"name":"RangeFull","id":"2:45857:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13458:2111":{"id":"2:13458:2111","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:16005:2983","`None`":"2:47492:176","self::pattern":"2:13053:3424"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6463:3357":{"id":"1:6463:3357","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6464:55843","1:6465:8376","1:6466:55844","1:6467:55845","1:6468:55846","1:6469:55847"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:551:1731":{"id":"0:551:1731","crate_id":0,"name":"fragment","span":{"filename":"src/lib.rs","begin":[1346,4],"end":[1351,5]},"visibility":"public","docs":"Return this URL’s fragment identifier, if any.\n\nA fragment is the part of the URL after the `#` symbol.\nThe fragment is optional and, if present, contains a fragment identifier\nthat identifies a secondary resource, such as a section heading\nof a document.\n\nIn HTML, the fragment identifier is usually the id attribute of a an element\nthat is scrolled to on load. Browsers typically will not send the fragment portion\nof a URL to the server.\n\n**Note:** the parser did *not* percent-encode this component,\nbut the input may have been percent-encoded already.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/data.csv#row=4\")?;\n\nassert_eq!(url.fragment(), Some(\"row=4\"));\n\nlet url = Url::parse(\"https://example.com/data.csv#cell=4,1-6,2\")?;\n\nassert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10300:3115":{"id":"2:10300:3115","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10301:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:761:2505":{"id":"0:761:2505","crate_id":0,"name":"InvalidIpv4Address","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3774:3179":{"id":"2:3774:3179","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10241:1580":{"id":"2:10241:1580","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10242:1531","2:10243:4077","2:10245:3468"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:501:2942":{"id":"0:501:2942","crate_id":0,"name":"set_pathname","span":{"filename":"src/quirks.rs","begin":[233,0],"end":[248,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-pathname","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_pathname",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"24:10:5980":{"id":"24:10:5980","crate_id":24,"name":"BidiDataSource","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:11:5985"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:489:1838":{"id":"0:489:1838","crate_id":0,"name":"password","span":{"filename":"src/quirks.rs","begin":[83,0],"end":[85,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-password","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13766:138":{"id":"2:13766:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13767:181","2:13768:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6963:3349":{"id":"1:6963:3349","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6964:55878"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13481:57715":{"id":"2:13481:57715","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:16005:2983","str::rsplitn":"1:16011:2988","self::pattern":"2:13053:3424"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49563:4115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13420:61574":{"id":"2:13420:61574","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[150,36],"end":[150,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::SyntaxViolation","name":"SyntaxViolation","id":"0:790:1592","glob":false}},"0:491:1566":{"id":"0:491:1566","crate_id":0,"name":"host","span":{"filename":"src/quirks.rs","begin":[99,0],"end":[101,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-host","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:936":{"id":"0:936","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2853,9],"end":[2853,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:938:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13448:10475":{"id":"2:13448:10475","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49751:4093","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13525:61590":{"id":"2:13525:61590","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13053:3424","prim@char":"1:16005:2983"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10306:3122":{"id":"2:10306:3122","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10307:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:536:1775":{"id":"0:536:1775","crate_id":0,"name":"host_str","span":{"filename":"src/lib.rs","begin":[973,4],"end":[979,5]},"visibility":"public","docs":"Return the string representation of the host (domain or IP address) for this URL, if any.\n\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\nIPv6 addresses are given between `[` and `]` brackets.\n\nCannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\ndon’t have a host.\n\nSee also the `host` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/index.html\")?;\nassert_eq!(url.host_str(), Some(\"127.0.0.1\"));\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.host_str(), Some(\"example.com\"));\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert_eq!(url.host_str(), None);\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert_eq!(url.host_str(), None);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:550:1965":{"id":"0:550:1965","crate_id":0,"name":"query_pairs","span":{"filename":"src/lib.rs","begin":[1310,4],"end":[1312,5]},"visibility":"public","docs":"Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return an iterator of (key, value) pairs.\n\n# Examples\n\n```rust\nuse std::borrow::Cow;\n\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/products?page=2&sort=desc\")?;\nlet mut pairs = url.query_pairs();\n\nassert_eq!(pairs.count(), 2);\n\nassert_eq!(pairs.next(), Some((Cow::Borrowed(\"page\"), Cow::Borrowed(\"2\"))));\nassert_eq!(pairs.next(), Some((Cow::Borrowed(\"sort\"), Cow::Borrowed(\"desc\"))));\n# Ok(())\n# }\n# run().unwrap();\n","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"form_urlencoded::Parse","id":"21:97:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3201-0:932:2034":{"id":"b:2:3201-0:932:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3203:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:4670:4162":{"id":"1:4670:4162","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4671:4524","1:4672:55482","1:4674:55483","1:4675:55484","1:4676:4163","1:4677:10084","1:4678:10083","1:4680:55485","1:4681:2652","1:4682:2322","1:4683:3848","1:4685:1999"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10574:4025":{"id":"2:10574:4025","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:146","2:10576:10224","2:10577:57160"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:893:2899":{"id":"0:893:2899","crate_id":0,"name":"AfterPath","span":{"filename":"src/slicing.rs","begin":[93,4],"end":[93,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:567:2056":{"id":"0:567:2056","crate_id":0,"name":"path_segments_mut","span":{"filename":"src/lib.rs","begin":[1573,4],"end":[1579,5]},"visibility":"public","docs":"Return an object with methods to manipulate this URL’s path segments.\n\nReturn `Err(())` if this URL is cannot-be-a-base.","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PathSegmentsMut","id":"0:861:1594","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13063:2644":{"id":"2:13063:2644","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13065:4089","2:13066:60008","2:13067:60013","2:13068:60009","2:13069:60011","2:13070:60010","2:13071:60012"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:445":{"id":"0:445","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[33,0],"end":[38,1]},"visibility":{"restricted":{"parent":"0:416:1595","path":"::slicing"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3576:2858","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Range","id":"2:45873:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Position","id":"0:870:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:446:181","0:447:753"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8399:136":{"id":"2:8399:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8401:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10933:214":{"id":"2:10933:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10935:181","2:10936:2803","2:10937:9553","2:10938:57684","2:10939:57685","2:10940:753","2:10941:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10924:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:576:2133":{"id":"0:576:2133","crate_id":0,"name":"set_ip_host","span":{"filename":"src/lib.rs","begin":[1928,4],"end":[1939,5]},"visibility":"public","docs":"Change this URL’s host to the given IP address.\n\nIf this URL is cannot-be-a-base, do nothing and return `Err`.\n\nCompared to `Url::set_host`, this skips the host parser.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"http://example.com\")?;\nurl.set_ip_host(\"127.0.0.1\".parse().unwrap());\nassert_eq!(url.host_str(), Some(\"127.0.0.1\"));\nassert_eq!(url.as_str(), \"http://127.0.0.1/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL's from mailto(cannot-be-base) to ip:\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.com\")?;\nlet result = url.set_ip_host(\"127.0.0.1\".parse().unwrap());\n\nassert_eq!(url.as_str(), \"mailto:rms@example.com\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["address",{"kind":"resolved_path","inner":{"name":"IpAddr","id":"1:11204:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:532:1707":{"id":"0:532:1707","crate_id":0,"name":"cannot_be_a_base","span":{"filename":"src/lib.rs","begin":[842,4],"end":[844,5]},"visibility":"public","docs":"Return whether this URL is a cannot-be-a-base URL,\nmeaning that parsing a relative URL string with this URL as the base will return an error.\n\nThis is the case if the scheme and `:` delimiter are not followed by a `/` slash,\nas is typically the case of `data:` and `mailto:` URLs.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(!url.cannot_be_a_base());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.cannot_be_a_base());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(url.cannot_be_a_base());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:507":{"id":"0:507","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,0],"end":[250,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:509:1621","0:510:1622","0:511:1647","0:512:1649"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:606:604":{"id":"0:606:604","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2546,4],"end":[2548,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:654":{"id":"0:654","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2883,0],"end":[2889,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Drop","id":"2:3515:2340","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:656:578"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6791:4368":{"id":"1:6791:4368","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6792:55460","1:6793:55461"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13484:57717":{"id":"2:13484:57717","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:16005:2983","str::splitn":"1:16011:2988","self::pattern":"2:13053:3424"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49581:4114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3580:3169":{"id":"2:3580:3169","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3582:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3576:2858","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6865:3352":{"id":"1:6865:3352","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6866:55815"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3383:3155":{"id":"2:3383:3155","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3385:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9259:3572-0:932:2034":{"id":"a:2:9259:3572-0:932:2034","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9259:3572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:519:1691":{"id":"0:519:1691","crate_id":0,"name":"join","span":{"filename":"src/lib.rs","begin":[356,4],"end":[358,5]},"visibility":"public","docs":"Parse a string as an URL, with this URL as the base URL.\n\nThe inverse of this is [`make_relative`].\n\nNote: a trailing slash is significant.\nWithout it, the last path component is considered to be a “file” name\nto be removed to get at the “directory” that is used as the base:\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet base = Url::parse(\"https://example.net/a/b.html\")?;\nlet url = base.join(\"c.png\")?;\nassert_eq!(url.as_str(), \"https://example.net/a/c.png\");  // Not /a/b.html/c.png\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = base.join(\"c.png\")?;\nassert_eq!(url.as_str(), \"https://example.net/a/b/c.png\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an URL from the given string\nwith this URL as the base URL, a [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html\n[`make_relative`]: #method.make_relative","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::ParseError","id":"0:754:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:114":{"id":"0:114","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::slicing::Position","name":"Position","id":"0:870:1596","glob":false}},"0:688:1777":{"id":"0:688:1777","crate_id":0,"name":"Ipv6","span":{"filename":"src/host.rs","begin":[59,4],"end":[59,18]},"visibility":"default","docs":"An IPv6 address.\n`Url::host_str` returns the serialization of that address between `[` and `]` brackets,\nin the format per [RFC 5952 *A Recommendation\nfor IPv6 Address Text Representation*](https://tools.ietf.org/html/rfc5952):\nlowercase hexadecimal with maximal `::` compression.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"1:11246:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:593:2275":{"id":"0:593:2275","crate_id":0,"name":"from_str","span":{"filename":"src/lib.rs","begin":[2493,4],"end":[2495,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::ParseError","id":"0:754:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13536:5120":{"id":"2:13536:5120","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:484:1588":{"id":"0:484:1588","crate_id":0,"name":"origin","span":{"filename":"src/quirks.rs","begin":[48,0],"end":[50,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-origin","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:1079:4364":{"id":"1:1079:4364","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:3112","1:1081:5120","1:1082:55358","1:1083:2662","1:1084:55359","1:1085:55360","1:1086:55361"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10291:109":{"id":"2:10291:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:653:2339":{"id":"0:653:2339","crate_id":0,"name":"Finished","span":{"filename":"src/lib.rs","begin":[2880,4],"end":[2880,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"0:716:2534":{"id":"0:716:2534","crate_id":0,"name":"Tuple","span":{"filename":"src/origin.rs","begin":[59,4],"end":[59,36]},"visibility":"default","docs":"Consists of the URL's scheme, host and port","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Host","id":"0:680:1587","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},{"kind":"primitive","inner":"u16"}]}},"2:23086:18239":{"id":"2:23086:18239","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23087:7456","2:23088:60959","2:23089:60960"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23079:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3171:149":{"id":"2:3171:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173:1750"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9258:3573-0:908:1600":{"id":"a:2:9258:3573-0:908:1600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9258:3573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13449:2494":{"id":"2:13449:2494","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13053:3424","prim@char":"1:16005:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:932:2034":{"id":"0:932:2034","crate_id":0,"name":"UrlQuery","span":{"filename":"src/lib.rs","begin":[2854,0],"end":[2857,1]},"visibility":"public","docs":"Implementation detail of `Url::query_pairs_mut`. Typically not used directly.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:3268:211-0:932:2034","a:2:3280:220-0:932:2034","a:2:3309:3086-0:932:2034","a:2:9258:3573-0:932:2034","a:2:9259:3572-0:932:2034","b:2:3197-0:932:2034","b:2:2868-0:932:2034","b:2:3201-0:932:2034","b:2:4001-0:932:2034","b:2:3207-0:932:2034","b:2:2871-0:932:2034","b:2:3212-0:932:2034","0:936","0:649","0:654"]}},"0:540:1883":{"id":"0:540:1883","crate_id":0,"name":"port_or_known_default","span":{"filename":"src/lib.rs","begin":[1108,4],"end":[1110,5]},"visibility":"public","docs":"Return the port number for this URL, or the default port number if it is known.\n\nThis method only knows the default port number\nof the `http`, `https`, `ws`, `wss` and `ftp` schemes.\n\nFor URLs in these schemes, this method always returns `Some(_)`.\nFor other schemes, it is the same as `Url::port()`.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"foo://example.com\")?;\nassert_eq!(url.port_or_known_default(), None);\n\nlet url = Url::parse(\"foo://example.com:1456\")?;\nassert_eq!(url.port_or_known_default(), Some(1456));\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.port_or_known_default(), Some(443));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3200:1750":{"id":"2:3200:1750","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3174:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:497:1614":{"id":"0:497:1614","crate_id":0,"name":"port","span":{"filename":"src/quirks.rs","begin":[198,0],"end":[200,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-port","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13534:1649":{"id":"2:13534:1649","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12992:2274","FromStr::Err":"2:12992:2274"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:603:660":{"id":"0:603:660","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2524,4],"end":[2537,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["formatter",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10251:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10240:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13511:61588":{"id":"2:13511:61588","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:790:2000":{"id":"5:790:2000","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10539:146":{"id":"2:10539:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10540:652","2:10541:2083","2:10542:55641","2:10543:55642","2:10544:55643","2:10545:55644","2:10546:55645","2:10547:55646","2:10548:55647","2:10549:55648","2:10550:55649","2:10551:55650","2:10552:55651","2:10553:55652","2:10554:55653","2:10555:1531"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13490:61582":{"id":"2:13490:61582","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13507:61586":{"id":"2:13507:61586","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3341:3152":{"id":"2:3341:3152","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3343:181","2:3344:1353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6867:3353":{"id":"1:6867:3353","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6868:59209"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13478:61580":{"id":"2:13478:61580","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13053:3424","prim@char":"1:16005:2983","str::split_terminator":"1:16011:2988","str::split":"1:16011:2988"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49527:4116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3422:3163":{"id":"2:3422:3163","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3424:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10308:189":{"id":"2:10308:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10309:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13469:10734":{"id":"2:13469:10734","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13053:3424","prim@char":"1:16005:2983"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12845:4095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:920:408":{"id":"0:920:408","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[165,9],"end":[165,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:715:1540":{"id":"0:715:1540","crate_id":0,"name":"0","span":{"filename":"src/origin.rs","begin":[56,11],"end":[56,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"OpaqueOrigin","id":"0:735:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:520:1706":{"id":"0:520:1706","crate_id":0,"name":"make_relative","span":{"filename":"src/lib.rs","begin":[401,4],"end":[490,5]},"visibility":"public","docs":"Creates a relative URL if possible, with this URL as the base URL.\n\nThis is the inverse of [`join`].\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet base = Url::parse(\"https://example.net/a/b.html\")?;\nlet url = Url::parse(\"https://example.net/a/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = Url::parse(\"https://example.net/a/b/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = Url::parse(\"https://example.net/a/d/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"../d/c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b.html?c=d\")?;\nlet url = Url::parse(\"https://example.net/a/b.html?e=f\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"?e=f\"));\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf this URL can't be a base for the given URL, `None` is returned.\nThis is for example the case if the scheme, host or port are not the same.\n\n[`join`]: #method.join","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:763:2461":{"id":"0:763:2461","crate_id":0,"name":"InvalidIpv6Address","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:875:2890":{"id":"0:875:2890","crate_id":0,"name":"BeforeUsername","span":{"filename":"src/slicing.rs","begin":[84,4],"end":[84,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:447:753":{"id":"0:447:753","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"resolved_path","inner":{"name":"Range","id":"2:45873:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Position","id":"0:870:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:908:1600":{"id":"b:2:3207-0:908:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3177:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3210:127","2:3211:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3280:220-0:908:1600":{"id":"a:2:3280:220-0:908:1600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13539:55361":{"id":"2:13539:55361","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2870:1579":{"id":"2:2870:1579","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:441:753":{"id":"0:441:753","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[21,4],"end":[23,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"resolved_path","inner":{"name":"RangeFrom","id":"2:45898:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Position","id":"0:870:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3336:3108":{"id":"2:3336:3108","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3338:181","2:3339:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:791:2610":{"id":"0:791:2610","crate_id":0,"name":"Backslash","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:12992:2274":{"id":"2:12992:2274","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12993:126","2:12994:2275"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3728:224":{"id":"2:3728:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3729:181","2:3730:3174","2:3731:686","2:3732:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3733:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13505:2947":{"id":"2:13505:2947","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3395:3157":{"id":"2:3395:3157","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:181","2:3398:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13538:55360":{"id":"2:13538:55360","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8882:4023":{"id":"2:8882:4023","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:531:1817":{"id":"0:531:1817","crate_id":0,"name":"has_authority","span":{"filename":"src/lib.rs","begin":[811,4],"end":[814,5]},"visibility":"public","docs":"Return whether the URL has an 'authority',\nwhich can contain a username, password, host, and port number.\n\nURLs that do *not* are either path-only like `unix:/run/foo.socket`\nor cannot-be-a-base like `data:text/plain,Stuff`.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.has_authority());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.has_authority());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(!url.has_authority());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:577:2145":{"id":"0:577:2145","crate_id":0,"name":"set_password","span":{"filename":"src/lib.rs","begin":[1968,4],"end":[2023,5]},"visibility":"public","docs":"Change this URL’s password.\n\nIf this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rmz@example.com\")?;\nlet result = url.set_password(Some(\"secret_password\"));\nassert!(result.is_err());\n\nlet mut url = Url::parse(\"ftp://user1:secret1@example.com\")?;\nlet result = url.set_password(Some(\"secret_password\"));\nassert_eq!(url.password(), Some(\"secret_password\"));\n\nlet mut url = Url::parse(\"ftp://user2:@example.com\")?;\nlet result = url.set_password(Some(\"secret2\"));\nassert!(result.is_ok());\nassert_eq!(url.password(), Some(\"secret2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["password",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:547:1002":{"id":"0:547:1002","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[1190,4],"end":[1197,5]},"visibility":"public","docs":"Return the path for this URL, as a percent-encoded ASCII string.\nFor cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'.\nFor other URLs, this starts with a '/' slash\nand continues with slash-separated path segments.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/api/versions?page=2\")?;\nassert_eq!(url.path(), \"/api/versions\");\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.path(), \"/\");\n\nlet url = Url::parse(\"https://example.com/countries/việt nam\")?;\nassert_eq!(url.path(), \"/countries/vi%E1%BB%87t%20nam\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:533:1832":{"id":"0:533:1832","crate_id":0,"name":"username","span":{"filename":"src/lib.rs","begin":[868,4],"end":[875,5]},"visibility":"public","docs":"Return the username for this URL (typically the empty string)\nas a percent-encoded ASCII string.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.username(), \"rms\");\n\nlet url = Url::parse(\"ftp://:secret123@example.com\")?;\nassert_eq!(url.username(), \"\");\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.username(), \"\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3371:3156":{"id":"2:3371:3156","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3373:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13516:2731":{"id":"2:13516:2731","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13053:3424","prim@char":"1:16005:2983"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5657:2299":{"id":"1:5657:2299","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5658:2327","1:5659:1967"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14165:141":{"id":"2:14165:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14166:277","2:14167:518","2:14168:280","2:14169:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"26:103:6044":{"id":"26:103:6044","crate_id":26,"name":"Array","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["26:104:1674","26:105:62580","26:106:60585","26:107:62581","26:108:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3212-0:932:2034":{"id":"b:2:3212-0:932:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UrlQuery","id":"0:932:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3215:127","2:3216:1414"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:610:997":{"id":"0:610:997","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[2562,4],"end":[2564,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"cmp::Ordering","id":"2:37624:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13426:61576":{"id":"2:13426:61576","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:4003:1427":{"id":"2:4003:1427","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46028:3333","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:767:2600":{"id":"0:767:2600","crate_id":0,"name":"RelativeUrlWithoutBase","span":{"filename":"src/parser.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:889:2897":{"id":"0:889:2897","crate_id":0,"name":"AfterPort","span":{"filename":"src/slicing.rs","begin":[91,4],"end":[91,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3518:130":{"id":"2:3518:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3280:220-0:921:1619":{"id":"a:2:3280:220-0:921:1619","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:861:1594":{"id":"0:861:1594","crate_id":0,"name":"PathSegmentsMut","span":{"filename":"src/path_segments.rs","begin":[37,0],"end":[42,1]},"visibility":"public","docs":"Exposes methods to manipulate the path of an URL that is not cannot-be-base.\n\nThe path always starts with a `/` slash, and is made of slash-separated segments.\nThere is always at least one segment (which may be the empty string).\n\nExamples:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"mailto:me@example.com\")?;\nassert!(url.path_segments_mut().is_err());\n\nlet mut url = Url::parse(\"http://example.net/foo/index.html\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .pop().push(\"img\").push(\"2/100%.png\");\nassert_eq!(url.as_str(), \"http://example.net/foo/img/2%2F100%25.png\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:10304:3121":{"id":"2:10304:3121","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10305:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6084:62218":{"id":"5:6084:62218","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3089","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4252","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3089","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4252","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:416:1595":{"id":"0:416:1595","crate_id":0,"name":"slicing","span":{"filename":"src/slicing.rs","begin":[9,0],"end":[187,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:870:1596"],"is_stripped":true}},"2:13443:2322":{"id":"2:13443:2322","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49445:4098","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5731:3348":{"id":"1:5731:3348","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5732:6468","1:5733:55795","1:5734:55796"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13522:57719":{"id":"2:13522:57719","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13053:3424","prim@char":"1:16005:2983"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8601:157":{"id":"2:8601:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8602:1674","2:8603:922","2:8604:3843","2:8607:3844","2:8608:495","2:8610:2499","2:8613:3845","2:8614:3846","2:8615:3847","2:8616:3848","2:8618:3849","2:8620:3850","2:8621:3851","2:8623:841","2:8626:3852","2:8633:3853","2:8635:3854","2:8638:2511","2:8639:1722","2:8640:3855","2:8642:2667","2:8644:3856","2:8647:1306","2:8648:1999","2:8649:3857","2:8653:3858","2:8656:3859","2:8657:3860","2:8658:3861","2:8660:2652","2:8661:1915","2:8663:3862","2:8666:3863","2:8668:3864","2:8678:3865","2:8693:3866","2:8695:3867","2:8699:3868","2:8708:3869","2:8711:3870","2:8713:3871","2:8716:276","2:8723:294","2:8730:2111","2:8737:3872","2:8746:3873","2:8756:1014","2:8763:3874","2:8770:3805","2:8771:2516","2:8772:3807","2:8784:3806","2:8791:3804","2:8803:3803","2:8810:3875","2:8811:3876","2:8816:3877","2:8819:3878","2:8822:3879","2:8823:3880","2:8825:3881","2:8827:415","2:8830:3882","2:8833:997","2:8836:3883","2:8839:604","2:8842:3884","2:8845:907","2:8847:826","2:8849:792","2:8851:713","2:8853:696","2:8855:3885","2:8856:3886","2:8864:3887"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:530:1708":{"id":"0:530:1708","crate_id":0,"name":"scheme","span":{"filename":"src/lib.rs","begin":[781,4],"end":[783,5]},"visibility":"public","docs":"Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert_eq!(url.scheme(), \"file\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6105:4190":{"id":"5:6105:4190","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:488:2161":{"id":"0:488:2161","crate_id":0,"name":"set_username","span":{"filename":"src/quirks.rs","begin":[77,0],"end":[79,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-username","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_username",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:503:2949":{"id":"0:503:2949","crate_id":0,"name":"set_search","span":{"filename":"src/quirks.rs","begin":[256,0],"end":[262,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-search","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_search",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3177:228":{"id":"2:3177:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3179:127","2:3180:1415"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:604":{"id":"0:604","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2541,0],"end":[2541,18]},"visibility":"crate","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:561:2009":{"id":"0:561:2009","crate_id":0,"name":"set_query","span":{"filename":"src/lib.rs","begin":[1436,4],"end":[1461,5]},"visibility":"public","docs":"Change this URL’s query string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com/products\")?;\nassert_eq!(url.as_str(), \"https://example.com/products\");\n\nurl.set_query(Some(\"page=2\"));\nassert_eq!(url.as_str(), \"https://example.com/products?page=2\");\nassert_eq!(url.query(), Some(\"page=2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["query",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:797:2616":{"id":"0:797:2616","crate_id":0,"name":"ExpectedDoubleSlash","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13509:61587":{"id":"2:13509:61587","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4727:1580":{"id":"1:4727:1580","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4728:2083","1:4729:59017","1:4731:59018","1:4732:5370","1:4733:59016","1:4734:10172","1:4735:3468","1:4744:2652"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"form_urlencoded","name":"form_urlencoded","id":"21:0:1564","glob":false}},"2:13425:1967":{"id":"2:13425:1967","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12524:2335"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3203:681":{"id":"2:3203:681","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:615:305":{"id":"0:615:305","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[2581,4],"end":[2583,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:565:2047":{"id":"0:565:2047","crate_id":0,"name":"set_path","span":{"filename":"src/lib.rs","begin":[1548,4],"end":[1567,5]},"visibility":"public","docs":"Change this URL’s path.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com\")?;\nurl.set_path(\"api/comments\");\nassert_eq!(url.as_str(), \"https://example.com/api/comments\");\nassert_eq!(url.path(), \"/api/comments\");\n\nlet mut url = Url::parse(\"https://example.com/api\")?;\nurl.set_path(\"data/report.csv\");\nassert_eq!(url.as_str(), \"https://example.com/data/report.csv\");\nassert_eq!(url.path(), \"/data/report.csv\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10302:3114":{"id":"2:10302:3114","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10303:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:446:181":{"id":"0:446:181","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[34,4],"end":[34,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"0:811:2630":{"id":"0:811:2630","crate_id":0,"name":"UnencodedAtSign","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13437:4393":{"id":"2:13437:4393","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:16011:2988","crate::ops::Index":"2:3576:2858","str::slice_mut_unchecked":"1:16011:2988"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3400:3158":{"id":"2:3400:3158","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3402:181","2:3403:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10529:142":{"id":"2:10529:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10530:715","2:10532:4030"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:789:3112":{"id":"5:789:3112","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:2:3212-0:908:1600":{"id":"b:2:3212-0:908:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3215:127","2:3216:1414"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13446:5447":{"id":"2:13446:5447","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49713:4107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:436":{"id":"0:436","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[12,0],"end":[17,1]},"visibility":{"restricted":{"parent":"0:416:1595","path":"::slicing"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3576:2858","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFull","id":"2:45857:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:437:181","0:438:753"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3215:127":{"id":"2:3215:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38805:3214","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:183:1588":{"id":"0:183:1588","crate_id":0,"name":"origin","span":{"filename":"src/origin.rs","begin":[9,0],"end":[113,31]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:712:1590","0:735:1589"],"is_stripped":true}},"b:2:3207-0:921:1619":{"id":"b:2:3207-0:921:1619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3177:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3210:127","2:3211:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8472:3087":{"id":"2:8472:3087","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8473:793","2:8474:1716"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:908:1600":{"id":"0:908:1600","crate_id":0,"name":"Url","span":{"filename":"src/lib.rs","begin":[166,0],"end":[188,1]},"visibility":"public","docs":"A parsed URL record.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:513","a:2:3268:211-0:908:1600","a:2:3280:220-0:908:1600","a:2:3309:3086-0:908:1600","a:2:9258:3573-0:908:1600","a:2:9259:3572-0:908:1600","b:2:3197-0:908:1600","b:2:2868-0:908:1600","b:2:3201-0:908:1600","b:2:4001-0:908:1600","b:2:3207-0:908:1600","b:2:2871-0:908:1600","b:2:3212-0:908:1600","b:5:6413-0:908:1600","b:5:787-0:908:1600","0:436","0:439","0:442","0:445","0:919","0:591","0:594","0:598","0:600","0:602","0:604","0:605","0:607","0:609","0:611","0:614"]}},"0:877:2891":{"id":"0:877:2891","crate_id":0,"name":"AfterUsername","span":{"filename":"src/slicing.rs","begin":[85,4],"end":[85,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13462:1712":{"id":"2:13462:1712","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47492:176","prim@char":"1:16005:2983","self::pattern":"2:13053:3424"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13419:10524":{"id":"2:13419:10524","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8366:4852":{"id":"2:8366:4852","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8368:3881"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13475:61579":{"id":"2:13475:61579","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13053:3424","`DoubleEndedIterator`":"2:8447:120","str::rsplit_terminator":"1:16011:2988","prim@char":"1:16005:2983","str::split":"1:16011:2988"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49509:4117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3367:3109":{"id":"2:3367:3109","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:614":{"id":"0:614","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2579,0],"end":[2584,1]},"visibility":"crate","docs":"Return the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:615:305"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13431:9553":{"id":"2:13431:9553","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[151,0],"end":[151,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::path_segments::PathSegmentsMut","name":"PathSegmentsMut","id":"0:861:1594","glob":false}},"0:803:2622":{"id":"0:803:2622","crate_id":0,"name":"NonUrlCodePoint","span":{"filename":"src/parser.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13472:57713":{"id":"2:13472:57713","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:16005:2983","self::pattern":"2:13053:3424","`DoubleEndedIterator`":"2:8447:120","str::split":"1:16011:2988"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49477:4113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3268:211":{"id":"2:3268:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:486:2919":{"id":"0:486:2919","crate_id":0,"name":"set_protocol","span":{"filename":"src/quirks.rs","begin":[60,0],"end":[67,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-protocol","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_protocol",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:682:1779":{"id":"0:682:1779","crate_id":0,"name":"Domain","span":{"filename":"src/host.rs","begin":[47,4],"end":[47,13]},"visibility":"default","docs":"A DNS domain name, as '.' dot-separated labels.\nNon-ASCII labels are encoded in punycode per IDNA if this is the host of\na special URL, or percent encoded for non-special URLs. Hosts for\nnon-special URLs are also called opaque hosts.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"S"}]}},"0:592:126":{"id":"0:592:126","crate_id":0,"name":"Err","span":{"filename":"src/lib.rs","begin":[2490,4],"end":[2490,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:754:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"2:3811:3180":{"id":"2:3811:3180","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:596:127":{"id":"0:596:127","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[2499,4],"end":[2499,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:754:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:485:2917":{"id":"0:485:2917","crate_id":0,"name":"protocol","span":{"filename":"src/quirks.rs","begin":[54,0],"end":[56,1]},"visibility":"public","docs":"Getter for https://url.spec.whatwg.org/#dom-url-protocol","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:6085:1986":{"id":"5:6085:1986","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2887:104":{"id":"2:2887:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2888:408","2:2889:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9259:3572":{"id":"2:9259:3572","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3739:3174":{"id":"2:3739:3174","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3741:56531"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:490:2145":{"id":"0:490:2145","crate_id":0,"name":"set_password","span":{"filename":"src/quirks.rs","begin":[89,0],"end":[95,1]},"visibility":"public","docs":"Setter for https://url.spec.whatwg.org/#dom-url-password","links":{},"attrs":["#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["url",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Url","id":"0:908:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["new_password",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"b:2:2868-0:921:1619":{"id":"b:2:2868-0:921:1619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseOptions","id":"0:921:1619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2870:1579"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3309:3086":{"id":"2:3309:3086","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:538:1865":{"id":"0:538:1865","crate_id":0,"name":"domain","span":{"filename":"src/lib.rs","begin":[1044,4],"end":[1049,5]},"visibility":"public","docs":"If this URL has a host and it is a domain name (not an IP address), return it.\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/\")?;\nassert_eq!(url.domain(), None);\n\nlet url = Url::parse(\"mailto:rms@example.net\")?;\nassert_eq!(url.domain(), None);\n\nlet url = Url::parse(\"https://example.com/\")?;\nassert_eq!(url.domain(), Some(\"example.com\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[149,38],"end":[149,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::origin::Origin","name":"Origin","id":"0:712:1590","glob":false}},"0:587:2266":{"id":"0:587:2266","crate_id":0,"name":"to_file_path","span":{"filename":"src/lib.rs","begin":[2457,4],"end":[2470,5]},"visibility":"public","docs":"Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.\n\n**Note:** This does not actually check the URL’s `scheme`,\nand may give nonsensical results for other schemes.\nIt is the user’s responsibility to check the URL’s scheme before calling this.\n\n```\n# use url::Url;\n# let url = Url::parse(\"file:///etc/passwd\").unwrap();\nlet path = url.to_file_path();\n```\n\nReturns `Err` if the host is neither empty nor `\"localhost\"` (except on Windows, where\n`file:` URLs may have a non-local host),\nor if `Path::new_opt()` returns `None`.\n(That is, if the percent-decoded path contains a NUL byte or,\nfor a Windows path, is not UTF-8.)","links":{},"attrs":["#[inline]","#[cfg(any(unix, windows, target_os = \"redox\"))]","#[allow(clippy :: result_unit_err)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:7336:186","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6103:62221":{"id":"5:6103:62221","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6441:3356":{"id":"1:6441:3356","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6442:4578","1:6443:4579","1:6444:9205","1:6445:59459","1:6447:59463","1:6449:59460","1:6450:59461","1:6452:59462"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:3112","5:785:2000","5:786:3889"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"1:2462:9195":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:7511:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:3174:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:11502:3644":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13282:6930":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:49297:4963":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:1665:7710":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:3168:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:22580:60068":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"2:51592:4778":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4331:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:13782:4427":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:22546:60045":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:5945:8264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:8463:5158":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"12:432:5401":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:1617:7674":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"23:176:3234":{"crate_id":23,"path":["idna","uts46","Idna"],"kind":"struct"},"5:3951:4374":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:3918:7801":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:10854:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:22748:4836":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:9933:9101":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5221:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4272:7935":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:13083:4087":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:3488:4374":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:12028:6598":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10656:6409":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:11147:6456":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:3772:7151":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:10302:3114":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:15392:3138":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:15755:6204":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:5969:8281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:6954:5132":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:4448:7159":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:12456:6686":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:3728:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10543:6446":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"24:416:5974":{"crate_id":24,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"2:22599:60063":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:12810:4980":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:5505:5544":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:4995:7175":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:3549:7149":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:12794:4979":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10266:5844":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:6865:3352":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:5360:5536":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:10697:9002":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:6703:8312":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:12734:4977":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"9:41:5316":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:11449:4367":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11100:5832":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:2268:4633":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:4955:7174":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:12771:6736":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:10298:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:3422:3163":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:12278:4402":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:2889:5772":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:1637:4449":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:10377:5846":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10071:5928":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"12:764:4022":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:46970:8557":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:46363:4105":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"18:136:9743":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12725:6729":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:15217:4389":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:1744:7752":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:24010:8447":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:10596:4509":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:11405:4609":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:45942:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:9471:9005":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:7619:4413":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:2181:4376":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4358:7979":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:6200:8391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11726:6537":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6014:5561":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:11152:1585":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:13278:9001":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"16:6518:5573":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:2159:3195":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:5456:5541":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:5975:5559":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:47550:3842":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:1736:7748":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"18:783:6300":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:8902:48384":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:3362:4377":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:1646:4450":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:8929:48385":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:4643:4154":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:24219:5062":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6152:5494":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:10680:14042":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:6791:4368":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7024:5800":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:8203:3842":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:4112:7903":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:3580:3169":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:5273:5746":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"23:140:2526":{"crate_id":23,"path":["idna","domain_to_unicode"],"kind":"function"},"6:1563:7637":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:16030:3005":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:6136:5534":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:7927:4647":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:12845:4095":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:46483:5036":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"20:0:1563":{"crate_id":20,"path":["matches"],"kind":"module"},"2:49459:1947":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:7406:5498":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"12:2045:4374":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:24598:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:16011:2988":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:10642:13057":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:13799:7082":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11678:6524":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:4599:6153":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"6:624:7610":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:1644:4439":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4083:7889":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:23134:4752":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13574:7005":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:8694:3266":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:695:5956":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:605:7600":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7804:5504":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:12112:3195":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12431:6682":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:4782:4247":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:14644:59558":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"22:0:1575":{"crate_id":22,"path":["percent_encoding"],"kind":"module"},"2:23136:4751":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10095:5922":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:6100:8329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:3504:3168":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13986:7128":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:1602:7662":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:10240:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:47923:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:48546:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:1419:3195":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:13172:6901":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"12:1256:4451":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:16019:2994":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:525:7552":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:3772:4022":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:53252:4757":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:50436:3330":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:5241:8115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13272:6929":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:0:2956":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:46670:4658":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:12238:3268":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:6510:4671":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:13919:4417":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:4127:7909":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13154:6896":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:4670:4162":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:10948:4462":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:24836:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"12:2412:7458":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"14:216:46739":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:49323:4964":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:49891:4710":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:2399:9192":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:9368:6393":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:46028:3333":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:12061:59356":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:49043:5117":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:611:5951":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:6005:8297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:12057:8684":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:5779:3345":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:14068:1570":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:6221:8403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13564:7002":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:14627:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:13583:9758":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:12982:6799":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:12287:6639":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:49417:4102":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:404:5111":{"crate_id":24,"path":["unicode_bidi","Direction"],"kind":"enum"},"1:16016:2991":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:6208:5565":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:1760:7757":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:9064:3273":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:4386:7157":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:3357:3151":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:4516:4185":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:10836:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:49609:4109":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:4641:7164":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10611:9121":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:3367:3109":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"26:745:6047":{"crate_id":26,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"2:45919:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:6155:8367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12073:6610":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:13942:7121":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:7445:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:10801:9125":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:3278:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:5330:6391":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:51718:4755":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"26:1054:6060":{"crate_id":26,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"2:46768:4670":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:14242:4184":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:47004:8560":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:48528:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:11082:5830":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:6085:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:7257:6150":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:1527:7621":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11653:6522":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"12:2059:4376":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:11139:1947":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:5632:5548":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:53425:8643":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6682:5508":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:5972:4613":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:3327:4527":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:7928:2289":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:2062:4154":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:51231:4789":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:5159:8074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:5377:3139":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:6475:4373":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:5407:5538":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"18:850:5945":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:7073:5582":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:4762:7168":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:4922:7173":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:52936:4768":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:7653:4415":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:49663:4111":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:49276:4961":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4377:7987":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:53377:4760":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:3103:3215":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:11094:4167":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:4470:8026":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:3400:3158":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"0:932:2034":{"crate_id":0,"path":["url","UrlQuery"],"kind":"struct"},"17:2543:5911":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:12154:4477":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:2991:5766":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:7264:5510":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:50395:4996":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:7796:4423":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:4046:7869":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:11282:4953":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:3491:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:15186:4387":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:7279:5802":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8650:3265":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:3396:4378":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:50020:4714":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:10591:4495":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"26:0:3228":{"crate_id":26,"path":["tinyvec"],"kind":"module"},"1:0:1329":{"crate_id":1,"path":["std"],"kind":"module"},"2:2862:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:3286:3795":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"26:1210:4870":{"crate_id":26,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"16:6176:5564":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:13957:4419":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:5987:8288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:6203:4575":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"12:114:9749":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:13766:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:14103:6200":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:8160:3842":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:1311:5929":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:48800:8570":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5400:8202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:14566:8688":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:4395:7994":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:45781:3181":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:15475:8701":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:11358:5880":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9332:5909":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:12298:4403":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:2966:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4060:7877":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:3346:3149":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:23462:4753":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:9005:48386":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:9347:4353":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:7336:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:3426:3164":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:69:4253":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12582:6704":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13098:6890":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"25:382:6023":{"crate_id":25,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"17:12010:6597":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:9600:62538":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:12049:4422":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:13746:7065":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:46618:4653":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"23:85:9741":{"crate_id":23,"path":["idna","uts46","Mapper"],"kind":"struct"},"16:6357:5569":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:13394:6955":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:46470:3364":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:1690:7729":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:2797:3328":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:3990:7846":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12327:6646":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4459:8020":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:3343:4532":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:7633:4414":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:9659:62544":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:9598:6190":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:3363:3150":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:37624:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:10331:5857":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:1700:7735":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:10291:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:3714:7150":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13685:7058":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:10878:4180":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:8106:4192":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:812:5942":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:47755:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:49358:4967":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11962:6587":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:161:41227":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:11204:1584":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:4669:4154":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:46417:5100":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:3309:3086":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:9762:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:8313:5036":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:49758:4103":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13356:6948":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10140:5857":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"23:182:3233":{"crate_id":23,"path":["idna","uts46","Config"],"kind":"struct"},"6:5459:8218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:14576:4346":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:4023:7861":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:4494:8033":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:9638:6191":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"9:1056:5326":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:5889:6162":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:16025:3000":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:4242:6150":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:11082:4165":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:5745:3346":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"0:0:1675":{"crate_id":0,"path":["url"],"kind":"module"},"6:670:41557":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10623:9122":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:9065:48388":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:46394:5099":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:12946:6768":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:1463:4439":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:11277:6461":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:10574:4025":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:49563:4115":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:3345:4533":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:11611:2306":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:6718:5789":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"1:14589:8695":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:2310:5250":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:12385:6672":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:6812:8416":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:46789:4666":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:9280:6391":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:22533:3802":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:16026:3001":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:8399:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:9849:62540":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:8886:4645":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:51048:8582":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:13582:7006":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"12:2419:3202":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:2938:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4364:7982":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:7420:5516":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"16:6126:5562":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:13532:6994":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"26:452:6053":{"crate_id":26,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"2:8412:3088":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10448:5904":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:51208:4785":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12685:6724":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:10310:3119":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"14:47:8997":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:10657:13059":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:5380:3138":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8384:4511":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"22:15:2567":{"crate_id":22,"path":["percent_encoding","AsciiSet"],"kind":"struct"},"16:3118:5768":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:637:6300":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:3515:2340":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"12:183:5404":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:48495:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:57696:8660":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:7212:4373":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:13506:6984":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:46108:4870":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:578:7586":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:3375:5135":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:510:9092":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:3745:3176":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:2401:9193":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"18:705:6300":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:767:6311":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:10887:6443":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:46325:4893":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:3195:5759":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:7669:3849":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:4890:7172":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:9551:5823":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:10800:4521":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:12128:3842":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10128:5925":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:11116:3326":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4293:7947":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:3892:7781":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:51073:4796":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11616:6516":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:3336:4376":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:8742:3279":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13446:6968":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:2733:5729":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:14551:4369":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:15971:59368":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:24768:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"18:713:3802":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11970:6589":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:10149:9100":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6554:5574":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:4436:4186":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12343:6651":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:56361:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:51489:4786":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:511:7544":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:49435:4099":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:51442:4798":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"10:0:2959":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11604:6513":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:6893:8426":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"15:269:5424":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:9978:4939":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:24666:4514":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:22801:4856":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:2314:5847":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:10381:9006":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"21:56:221":{"crate_id":21,"path":["form_urlencoded","Target"],"kind":"trait"},"1:11681:3198":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"9:963:5331":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:50199:4986":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5384:5537":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:3868:7764":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:5292:8140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"26:806:6144":{"crate_id":26,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"17:12234:6632":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:8197:6176":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"5:3039:61193":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:6764:4154":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:11410:4114":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:14239:4188":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:7884:5502":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:10236:5821":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:47671:4022":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12795:6746":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:12000:4418":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:11572:6507":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:9440:6395":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:830:5944":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:2262:5233":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:14953:6202":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:15987:57094":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13258:6924":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"12:353:7452":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:13781:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:802:5941":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12610:6709":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:5837:4092":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:47713:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:10294:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:5167:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:4964:3822":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:5536:3262":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:7786:5505":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:32331:4276":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:5100:4935":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"9:900:7512":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:50418:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:6185:8384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:1534:4447":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:3395:3157":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"19:117:6295":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"18:668:5955":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13590:7008":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"26:1036:6059":{"crate_id":26,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"6:5414:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:48513:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"27:0:3229":{"crate_id":27,"path":["tinyvec_macros"],"kind":"module"},"6:1522:7619":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:10304:5843":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:7453:6150":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4193:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13760:7071":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:10614:4135":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:6068:8318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4227:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:5978:8287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:6633:60791":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"12:750:3195":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12155:6622":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:51639:4766":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:4501:8036":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:8197:3842":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:14809:4363":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"14:250:7406":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:5029:3824":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:51670:4770":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9759:9098":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:24530:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:51375:4754":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:6923:8432":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:1843:6150":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:38868:3798":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:8176:5131":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:50183:4992":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:24032:4919":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:4401:7995":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:6899:8427":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:9143:3276":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:12134:4476":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:2843:5752":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:50179:4988":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:16020:2995":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:5428:8210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:16023:2998":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:10462:715":{"crate_id":2,"path":["core","hash"],"kind":"module"},"17:11847:6570":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11328:6736":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"12:2398:7456":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:10300:3115":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:157:41226":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:51520:4790":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:6087:5492":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:6887:8425":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:24065:8452":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:10304:3121":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:2512:5841":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13465:6975":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"21:105:3219":{"crate_id":21,"path":["form_urlencoded","ByteSerialize"],"kind":"struct"},"1:10456:6197":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"14:244:7404":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12537:6697":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:3757:4860":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12182:6626":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:11189:3133":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"5:6257:5162":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:6021:5751":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12408:6681":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"24:10:5980":{"crate_id":24,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"18:886:5948":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7823:5506":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7856:5597":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:3320:5816":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:10431:6195":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:3287:5763":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:1236:9094":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:3999:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:9737:4561":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:15976:13062":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:51313:4765":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"9:27:5315":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:57675:8659":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:2291:4637":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:46287:8543":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:47663:3195":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:7642:5163":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:5379:8190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:53530:8650":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:5231:7177":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:9643:55352":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:32497:60239":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:1045:4372":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10160:6402":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:11482:6485":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"12:1682:5411":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12756:6735":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12568:6702":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:6731:5790":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6949:5797":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:13062:6860":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:3410:3161":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11750:6539":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"12:379:5403":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12442:6684":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:11406:6466":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:1653:4440":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:12019:4420":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7042:5801":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:3604:6321":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:1194:13061":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:14317:4135":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:8472:3087":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:24126:8458":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:3388:3160":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:1674:4442":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:50341:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10279:5855":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:11424:4956":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:3862:7763":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:24632:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:6591:5576":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:6636:8413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:7849:6169":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:37648:3802":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12040:6600":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:6491:5572":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:6028:8315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:0:2965":{"crate_id":17,"path":["object"],"kind":"module"},"14:56:6485":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:11458:6484":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:14165:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:11199:6460":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:5130:8050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:5522:5545":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:10516:5915":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:49627:4110":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:32156:5057":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12195:6627":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:9689:62543":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:8392:3192":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"6:6935:8434":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"25:429:6038":{"crate_id":25,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"16:7477:5517":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:5707:5550":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:53592:8652":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:791:5940":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:6032:5485":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:9067:3274":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:4704:7166":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:6106:8330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:16010:2987":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"12:472:9751":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:46799:4667":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:11396:4115":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:24234:5026":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:51898:8593":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:3064:5814":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:56348:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11416:4570":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:6238:5497":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:4398:4551":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:5801:4341":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:4404:4553":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"9:927:46160":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:8136:4511":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:11162:1947":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"14:11:8997":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7571:5491":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:15046:59560":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:3774:3179":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"24:297:5981":{"crate_id":24,"path":["unicode_bidi","level","Level"],"kind":"struct"},"2:8362:4850":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:10570:4487":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:47797:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:12769:9201":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"12:815:4442":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:3264:5762":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:49713:4107":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:10420:5839":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:6870:8420":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:14610:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:7295:5512":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:6051:8316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5191:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:1694:5228":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:10558:9115":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:46656:8553":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:2925:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:48632:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:9380:2644":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:6892:4674":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:47525:1674":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:7824:6164":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:46281:4104":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:7453:5495":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:3800:7152":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:8115:3842":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4439:8013":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:11146:4107":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:4884:4927":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10435:9111":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:38805:3214":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:10468:5913":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:11113:3195":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:7158:5584":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6166:5563":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:48558:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8478:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:6561:3358":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4523:8046":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:11293:8674":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"2:50225:4405":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:7290:9196":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:97:1966":{"crate_id":21,"path":["form_urlencoded","Parse"],"kind":"struct"},"1:897:4490":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:6867:3353":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:16012:2989":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:9088:48389":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:15413:3140":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:7226:5590":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13963:7124":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"12:1183:5397":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9839:5857":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:12524:2335":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10673:48576":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"11:46:7461":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:50203:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:4699:6155":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:10502:6405":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:16004:2982":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:3296:3797":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:7514:5515":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:32345:60237":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:11126:4170":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:10489:5914":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:45898:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:3894:5216":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"9:692:5266":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:12659:6722":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:7894:5531":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:16027:3002":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:51693:4773":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:5956:4610":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:1486:4451":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:52435:4756":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:2755:3327":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"25:392:6036":{"crate_id":25,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"1:4611:4193":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:13053:3424":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:547:5736":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:11956:4971":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:10862:4545":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:47542:4022":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:1441:4448":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4511:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:11001:9136":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:2218:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:11430:4577":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:6413:5416":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:5371:8189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:48519:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"12:2040:4373":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:24496:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:12275:6638":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:46977:3269":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:24090:4914":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:9245:5834":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"21:0:1564":{"crate_id":21,"path":["form_urlencoded"],"kind":"module"},"17:11337:5910":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:50034:4715":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"12:2072:4378":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:49266:4960":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:46699:4660":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:5766:5554":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:11205:4095":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:9034:48387":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11519:6500":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:49723:4108":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:3355:4538":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:5717:5551":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:3978:7837":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:8298:3363":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"21:95:1597":{"crate_id":21,"path":["form_urlencoded","EncodingOverride"],"kind":"typedef"},"16:7549:5503":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:5029:7176":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:8366:4852":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:11304:48394":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:5657:2299":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"12:1784:6148":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:49349:4966":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:4823:7170":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:46688:4673":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:9631:55351":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:2507:4248":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"9:0:2958":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:50175:4989":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:8362:8440":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:13933:7119":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:9476:6396":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:14000:7131":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:3839:6150":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:51177:4797":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"22:32:1578":{"crate_id":22,"path":["percent_encoding","utf8_percent_encode"],"kind":"function"},"16:5855:5557":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"12:399:5402":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:2941:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:11594:3193":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:1432:4022":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:3044:61190":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:5386:8191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:46779:4170":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11378:5879":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:3439:3167":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13620:7014":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:4082:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:22561:60045":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:23125:4349":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:14571:8690":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:5228:8106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10599:9120":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:12699:6727":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"9:1075:5334":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:12917:6748":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:5207:3826":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:4535:7162":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"7:85:46063":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:50448:3329":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:11475:3351":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:10571:9118":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5563:8257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:48792:4028":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:10317:5842":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:4477:7160":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:2773:5778":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:4255:3341":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12783:6739":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10001:48438":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13180:6902":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:16009:2986":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:14602:4523":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:11159:6457":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:1635:4438":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:12034:4421":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13637:7021":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:4752:4169":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:4203:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:1584:7652":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:8447:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"12:895:5395":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:4164:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:610:7602":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:48091:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"12:2032:3195":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11588:6512":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:4306:4022":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:47839:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:3145:5767":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:48580:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:13780:7077":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:7681:4417":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:53553:8651":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:32296:4275":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:3647:3171":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:994:5221":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:11438:4957":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:12253:3278":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:24700:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:50404:4997":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"26:830:6048":{"crate_id":26,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"6:6852:8417":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"12:971:4446":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:7379:3842":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:46727:4662":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:46063:3823":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:6768:5793":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:10539:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:2866:5753":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:2282:4636":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"12:777:3842":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:1676:7718":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11809:6562":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4306:7951":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:755:62547":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:13788:7078":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:3091:5815":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:299:9091":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:46350:5104":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4013:7855":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:13283:9757":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"17:13978:7125":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:14805:9002":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:12167:4478":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:3662:6174":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:48847:8575":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:5184:3323":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13221:6915":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:9722:4560":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:8879:3203":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:3277:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:15093:4401":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:22837:4863":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"12:2253:4448":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:11835:6567":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"14:0:2962":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:52129:4791":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:52243:4779":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:4417:7158":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:2887:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:48133:3263":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4120:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:5753:5553":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:49983:4713":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:5420:8208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:46647:4656":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:923:5220":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:14822:4422":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:6072:5513":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:5407:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"24:0:3226":{"crate_id":24,"path":["unicode_bidi"],"kind":"module"},"12:2052:4375":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:8121:5222":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:1522:4445":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46578:4668":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:599:7597":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"24:454:5977":{"crate_id":24,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"1:7979:6176":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:4745:4166":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:11779:6550":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:7185:5586":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:5433:5540":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12480:6689":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6620:5784":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:28051:4855":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"26:965:6058":{"crate_id":26,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"2:13072:4089":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:9528:4098":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"26:1122:6061":{"crate_id":26,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"2:5604:4643":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:48269:3121":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:8807:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:13205:6912":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:12738:4521":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:2163:3842":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:5185:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:7799:4425":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:3165:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:15020:4420":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:4325:7960":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11186:6458":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:13318:6935":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:48616:3813":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:56335:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13377:6952":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:2484:48476":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:6437:4657":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:49248:4958":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13520:6991":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:49378:4969":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:10958:1910":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:8391:5126":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:730:62549":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"9:776:5313":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"16:6269:5568":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:8106:4252":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:5998:8293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:1450:4438":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:4727:4847":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5274:8128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"24:324:5979":{"crate_id":24,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"6:4095:7895":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"18:775:6300":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:9770:6192":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:6941:3354":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:16006:2984":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"12:933:4443":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:5346:5493":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:10370:6464":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"26:538:6054":{"crate_id":26,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"1:4736:55394":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:47881:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:10822:4347":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:5723:3344":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:6124:8341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:10253:5845":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6636:5511":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:46679:4659":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:11654:3194":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:6964:3569":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:1623:4448":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:5548:8246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:13892:9179":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:7250:5592":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:11118:48393":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:1663:4441":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:6701:8310":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:14634:4165":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:12645:6721":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"12:162:5400":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:6239:8406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"24:394:9068":{"crate_id":24,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"2:23079:4349":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:1492:4440":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4066:7879":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13370:6950":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"24:439:5976":{"crate_id":24,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"1:12072:55450":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:49776:4105":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:5790:5555":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:1505:4443":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:11424:3137":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"25:407:62576":{"crate_id":25,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"2:8882:4023":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:3565:4176":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:50187:4990":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:14129:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"16:7333:5514":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:7236:5591":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:3576:2858":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:51355:8584":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:5862:4605":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:3181:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:46736:4663":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:6689:3346":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:11696:6533":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:25240:4897":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:24870:5013":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:9259:3572":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"18:821:5943":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"14:189:8997":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11794:6556":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:5436:8212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12142:6619":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:12223:3267":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:3338:5743":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:1547:7629":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:13129:4706":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"25:298:6039":{"crate_id":25,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"2:47015:8562":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:10701:5239":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:56400:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9971:62539":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:699:4486":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:46371:5098":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:50171:4987":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:1729:4571":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:49767:4104":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"12:856:4439":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:49336:4965":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:52082:4787":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"12:1147:4450":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:13078:4088":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:49751:4093":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"12:1203:5398":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9799:9099":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"0:921:1619":{"crate_id":0,"path":["url","ParseOptions"],"kind":"struct"},"17:13192:6907":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:1528:4446":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:45809:3178":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:6101:5490":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13477:6976":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:8849:5822":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:8250:3202":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:7303:5593":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:519:7549":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:51144:4764":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:13418:4572":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"9:749:5268":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:8344:3362":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:3430:3165":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:12221:6630":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"26:103:6044":{"crate_id":26,"path":["tinyvec","array","Array"],"kind":"trait"},"2:53515:8649":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:49445:4098":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:49681:4112":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:374:4254":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:24802:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:3280:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:10933:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:16003:2981":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:2794:5480":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:15033:4421":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:10081:5855":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:1655:4451":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"12:0:2961":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:10446:9178":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:46548:3380":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:24247:5025":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:5934:4608":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"22:70:3103":{"crate_id":22,"path":["percent_encoding","PercentEncode"],"kind":"struct"},"6:5359:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:50195:4985":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"14:231:1591":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:3177:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:10353:5848":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:3429:5481":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:48829:3192":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:4101:7898":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:5875:6159":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:10814:5877":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:9769:62537":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13054:6858":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:6863:3350":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:52369:4771":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:5960:5741":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4371:7984":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:1153:9186":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:10061:9106":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:5964:4611":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:12741:6731":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:4515:5195":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:12248:3277":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12247:6634":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:4920:4928":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:52160:4794":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:6463:3357":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:10795:4358":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:11073:4194":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:7761:5595":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7195:5587":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:32337:4277":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:4036:4465":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"22:46:1576":{"crate_id":22,"path":["percent_encoding","percent_decode"],"kind":"function"},"2:11317:4113":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:53451:8645":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:10938:9131":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"13:120:46705":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:3882:4180":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11665:6523":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"24:316:127":{"crate_id":24,"path":["unicode_bidi","level","Error"],"kind":"enum"},"2:10306:3122":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:6910:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:10844:5857":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:3038:3112":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:50359:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:1215:5230":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"26:515:6144":{"crate_id":26,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"2:22874:4839":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:12079:8685":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:22990:4751":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13898:7106":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7378:5499":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:56322:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11254:5824":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:4347:7971":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:6794:3356":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:8293:4511":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:10106:5923":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:15332:4360":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:14:2083":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:15499:5428":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:3524:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:9296:6392":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:6858:8418":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:46587:3326":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10028:9103":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:4350:7156":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:4477:4189":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:47679:3842":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:9886:9100":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:9178:9197":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:14236:4186":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:6214:8400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"12:979:4447":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:5815:5556":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:16005:2983":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:24182:40611":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:11571:3192":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:14959:6203":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11738:6538":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:4514:4184":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:12243:3270":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12467:6687":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"21:34:3217":{"crate_id":21,"path":["form_urlencoded","ParseIntoOwned"],"kind":"struct"},"2:47602:4078":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:4727:1580":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:55964:4743":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:56374:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:51121:4776":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:2768:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:9719:9097":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:4050:3332":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:5736:5552":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13041:6851":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:1472:4449":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13884:7104":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:1533:7624":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:47965:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"18:661:5954":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:45988:3170":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:2218:5137":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:49862:4704":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:7738:5594":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:3392:5769":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:12258:4401":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:4852:7171":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:11767:6547":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5197:8093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:5312:8156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:6644:8415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:14239:4251":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:2968:5755":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11714:6534":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"22:30:1577":{"crate_id":22,"path":["percent_encoding","percent_encode"],"kind":"function"},"1:1501:4442":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"15:248:5420":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:46465:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:12120:4473":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:10569:4349":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"12:2280:4450":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10179:6404":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"25:436:9063":{"crate_id":25,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"17:13772:7074":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:2777:5235":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:46758:4665":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9264:6390":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:3201:4524":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"15:230:5419":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:46558:3379":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:50055:4717":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:49039:5118":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:1011:3195":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:49509:4117":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:9258:3573":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:5110:3823":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:13119:6895":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:53126:4772":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:13564:9194":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:3951:7825":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8929:4590":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:7936:55357":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"17:13429:6961":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"9:996:5332":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"12:1121:4449":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4517:8043":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:616:7605":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4410:7998":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:7174:5585":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:11228:2441":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:4506:7161":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:11246:2442":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:49477:4113":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:7392:5500":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:10581:57096":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:46388:4104":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:48049:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:8601:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:14030:4418":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:50167:4984":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:9809:62542":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11640:6520":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:5421:5539":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:3905:7791":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:3048:61192":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"23:0:2341":{"crate_id":23,"path":["idna"],"kind":"module"},"1:13935:55353":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:50045:4716":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:24166:40602":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:3041:5757":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"13:232:7451":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:1497:4441":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:3881:7773":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:7146:5583":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:2816:5771":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:8492:4475":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:3375:3154":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:10579:4026":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:11137:4022":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:12183:4479":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6807:5580":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:5295:46810":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:10224:9110":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5282:8133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:1717:7742":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:23767:4349":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:11670:3197":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:1511:4444":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:53416:8642":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:49581:4114":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12632:6720":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"9:603:46235":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:8031:4511":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:10962:9133":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:5731:3348":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12507:6692":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:11539:6501":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:8146:61200":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:12521:6695":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:53047:4788":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"12:928:4440":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:53299:4775":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:0:2966":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4005:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7467:5496":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:5630:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:46049:2289":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:11434:6470":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:8643:3264":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:11026:9138":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:8138:5223":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:4671:7165":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:3273:3085":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:8485:4474":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13609:7013":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"25:0:3227":{"crate_id":25,"path":["unicode_normalization"],"kind":"module"},"6:5469:8220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:23673:60048":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:9729:62541":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10812:4523":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:7755:4677":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:4008:9095":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:3434:3166":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13240:6916":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:46628:4654":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:32693:4278":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:50191:4991":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7205:5588":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:23939:5010":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:53405:8641":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:12992:2274":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:10912:9126":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13865:7099":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:10950:9132":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:48817:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"16:6219:5566":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:48007:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:5415:4154":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:3743:5874":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:11355:4954":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:3716:3172":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:51866:8592":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:14078:4998":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:48839:8574":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:5793:4339":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:12006:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:3686:4172":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:3040:8436":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:632:7615":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:10584:5885":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:49908:4711":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4241:7927":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:51818:8591":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:51250:8583":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:1442:3842":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:23868:5008":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:537:7557":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:56387:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3204:4163":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:11664:3195":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:53436:8644":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:9260:3571":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4281:7940":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:4084:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:8330:3361":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:5407:5095":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:2553:5236":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:6744:5791":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12168:6414":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13488:6980":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:4401:4552":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:49197:4955":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:24049:8449":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"12:843:4438":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:3365:5744":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:4341:7968":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:9865:6194":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"5:3370:4375":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:786:6194":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"5:4643:6155":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:1136:3334":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:52586:4780":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"14:194:46733":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:13842:7098":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:11066:4192":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:16008:2985":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:49839:4703":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:6614:8412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:4377:3842":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:3268:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:46340:5103":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:9162:5825":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:23661:4355":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:51922:8594":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:6963:3349":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:6086:4567":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:1572:7643":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:432:3089":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:22850:4349":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:49956:4712":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:3518:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:7843:5596":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:47619:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:3972:7834":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:10211:9109":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5953:8269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:6864:8419":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:13816:60130":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:11244:4952":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:4449:8019":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:4443:3195":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:53338:4795":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:5561:5546":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:6110:5533":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:15230:4395":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:12199:4480":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:47492:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"23:154:62551":{"crate_id":23,"path":["idna","uts46","Mapping"],"kind":"enum"},"16:3522:6317":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:51027:8581":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:1079:4364":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:53189:4792":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:4215:4373":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:9775:6193":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:11264:3134":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:3558:3177":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:10870:4178":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10458:6353":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6577:5575":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"12:2392:7455":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:2193:4273":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11915:6572":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:49402:4106":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:16022:2997":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:6672:3262":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"13:0:2955":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:5314:6390":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11628:6517":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:3196:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:2187:4377":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:1540:7627":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:2396:4437":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:4734:7167":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:7216:5589":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"22:26:2443":{"crate_id":22,"path":["percent_encoding","CONTROLS"],"kind":"constant"},"2:10251:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:4475:4188":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:15054:4402":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:50351:8580":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"12:940:4444":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:6424:5571":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:584:7589":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:8912:3269":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:46717:4661":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:51766:4759":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:49286:4962":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:2865:3110":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:1486:4374":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:12494:6691":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:3218:5760":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:32397:60238":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"6:1908:42528":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:1622:7676":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:12740:6199":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:4438:4187":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:5833:4091":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:11453:8297":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:11176:3132":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:10673:4452":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:15073:8697":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:10924:4349":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:1723:7745":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12598:6707":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:52793:4800":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:3945:7824":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:7119:5486":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:1156:9188":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:8843:9197":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:7667:4416":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:46424:5101":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:46056:4859":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:15131:4429":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:3379:3153":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:10241:1580":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:6391:5570":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:9186:5882":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"12:1103:4448":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:46986:8558":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:7121:3643":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:11981:6592":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:3246:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:607:9093":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:16018:2993":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:2956:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:3370:1581":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:8954:5883":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:3416:3162":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:6699:8308":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"25:418:6037":{"crate_id":25,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"6:6091:8325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"26:602:6055":{"crate_id":26,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"12:1238:5399":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:2437:9194":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"24:120:5986":{"crate_id":24,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"17:4157:5886":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:4133:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:24103:4915":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:47534:3195":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"18:867:5947":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:16017:2992":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:11923:4970":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:4304:7155":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:10529:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:51741:4758":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:22578:60065":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:10988:9135":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:3274:3793":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:9404:6394":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13733:7059":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4215:7925":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4262:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:8163:9756":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:53477:8647":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:11133:4098":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:13497:6983":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:1607:4022":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:10953:4463":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:49257:4959":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:47688:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"22:77:2626":{"crate_id":22,"path":["percent_encoding","PercentDecode"],"kind":"struct"},"6:4040:7867":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:11045:48392":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:3171:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:7857:4651":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:49733:4096":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:1235:5231":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:46021:3173":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13306:6932":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:823:6194":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:51394:8585":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:543:7560":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:6881:8424":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13453:6969":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10864:6442":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:6441:3356":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"7:38:46056":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:2912:5754":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:10635:6407":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:11520:2307":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:5595:5547":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:3371:3156":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:10926:9130":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:5522:8231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4300:7948":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:49429:2638":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4431:8008":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4478:8028":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"23:27:9738":{"crate_id":23,"path":["idna","punycode","Decode"],"kind":"struct"},"17:11993:6594":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:4065:3331":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:15202:4388":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:8403:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:46748:4664":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6999:5581":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:22937:4356":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10052:9105":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:5488:5543":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:52003:4799":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:8446:4374":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:46410:4103":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:838:4089":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:5580:5734":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:2192:4378":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:7342:5528":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"25:375:62577":{"crate_id":25,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"17:10477:5912":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4052:7872":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4145:7920":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13331:6940":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:1630:7681":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:13857:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:7259:9196":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:1658:7706":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12262:6637":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:53396:8640":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:1195:9755":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:12771:4978":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:15484:57095":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:5788:6150":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:6780:5579":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:45965:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:5985:4614":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11947:6582":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:645:5953":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"12:2269:4449":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:5012:1586":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:6323:4576":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:5583:3378":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:5033:4929":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:22931:4354":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:12056:6172":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"5:1597:3195":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:2945:5777":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:3957:7827":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:2166:4373":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"23:148:9076":{"crate_id":23,"path":["idna","uts46","StringTableSlice"],"kind":"struct"},"16:4614:7163":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:3739:3174":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:152:9744":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:16024:2999":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:23771:4747":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:6252:5567":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:3733:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:7111:6164":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:52400:4774":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:24118:8457":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:2915:415":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"2:8179:3258":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:0:2964":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:52322:4767":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"18:651:5950":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10200:9108":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13554:6999":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:11410:4612":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"9:157:5283":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"5:2330:5232":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:49877:4707":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:13655:4434":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:3341:5134":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:4073:7882":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"12:787:4441":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:46309:4891":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:23086:18239":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:3488:5765":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4183:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:15123:8698":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:0:2960":{"crate_id":11,"path":["adler"],"kind":"module"},"12:2066:4377":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:1476:4373":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:9210:48391":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:1708:7736":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:5903:1338":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"2:5164:3825":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:3351:3148":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:15510:5428":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:5472:5542":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8414:5215":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"6:563:7577":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:11336:3135":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:11398:1585":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:46600:4669":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:51096:4784":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:1161:13060":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:9973:4938":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:1554:7632":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:5038:4930":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11231:5826":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:23467:18258":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:4304:4195":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:681:6464":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:8977:3280":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13912:7113":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:11822:6566":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"26:712:6056":{"crate_id":26,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"2:24144:40610":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:5789:3343":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:6176:8381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:3652:4177":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:3405:3159":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:15354:3139":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:6688:5207":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:10403:5853":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:542:5467":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4425:8005":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:10308:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:3521:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:16029:3004":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:53500:8648":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:48255:3114":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:1091:6150":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12208:6629":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"9:469:46166":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"23:141:113":{"crate_id":23,"path":["idna","punycode","Decoder"],"kind":"struct"},"2:49527:4116":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12712:6728":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11932:6578":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6569:5786":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:9649:9096":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:45857:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:12731:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:11350:3137":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"25:344:6013":{"crate_id":25,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"17:11015:9137":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:15236:4396":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:7870:5501":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:5255:8126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:3966:7832":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:591:7592":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:8263:4455":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13402:6957":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:3811:3180":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:9943:62536":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:5504:3140":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:9574:5831":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5528:8232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:4751:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10117:5924":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:12401:6205":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:13627:7016":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:6464:5507":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:3329:3195":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:22927:4349":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:24734:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:2460:6205":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"9:809:3192":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:4688:4164":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:16028:3003":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:51336:4769":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:8379:5125":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:13540:6997":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:50238:5045":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:46995:4193":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:3102:4349":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10529:6406":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:3997:7850":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:294:9090":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:9133:48390":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13810:7083":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:5210:8094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:46431:5102":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"12:1162:5396":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:3241:5761":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:13924:7115":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:858:5946":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4387:7990":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"9:722:5267":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"12:1666:5410":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9896:62545":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:46708:4675":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:13063:2644":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:24212:8470":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10041:9104":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"8:0:2957":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"12:466:9750":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3341:3152":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:2598:9003":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"16:6605:5509":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"18:745:62546":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"23:191:2607":{"crate_id":23,"path":["idna","uts46","Errors"],"kind":"struct"},"1:16021:2996":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:10407:5840":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:3172:5758":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:5927:5558":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:5739:3347":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"9:686:5264":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"24:382:62553":{"crate_id":24,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"17:13386:6953":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12095:6611":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:10663:4381":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:5672:5549":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"9:1020:5333":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:4790:7169":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:3506:5764":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:3018:5756":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:24564:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:48276:3122":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:3276:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"11:54:5387":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:2175:4375":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:7931:4510":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"17:9961:9102":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:9767:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:6644:5577":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:8130:4373":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4317:7957":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"0:908:1600":{"crate_id":0,"path":["url","Url"],"kind":"struct"},"2:51543:4793":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13296:6931":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"15:0:2963":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:3939:7153":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13547:6998":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:2200:6152":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4033:7864":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12118:6617":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:49368:4968":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:3198:4522":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"12:952:4445":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:47593:3570":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:13348:6945":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:903:4491":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12051:6601":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13598:7009":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"12:1703:5412":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:1457:4450":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6366:5417":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:10788:9123":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"12:2404:62534":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:4230:7154":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:3759:3195":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"12:880:4374":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"21:50:2033":{"crate_id":21,"path":["form_urlencoded","Serializer"],"kind":"struct"},"6:1596:7660":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:11356:3136":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:49742:4094":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:3336:3108":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"12:869:4373":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:12500:5113":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11499:6490":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12373:6670":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11555:6505":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:10312:3120":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:2754:5745":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:2186:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:7620:5162":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:16015:2990":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:13962:60131":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"9:234:5291":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:14937:6201":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:3970:6150":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:5651:3342":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:53462:8646":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:48262:3115":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:88:41160":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:10975:9134":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:897:5949":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:621:6299":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5269:8127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"18:740:9088":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13163:6900":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:46609:4672":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:1944:1582":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:12671:6723":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:46450:4895":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"24:425:5975":{"crate_id":24,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"12:2036:3842":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:10805:4346":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:3383:3155":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:169:9747":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:5347:8177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"18:721:6302":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:47559:3569":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:13819:7085":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:46500:5037":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:4739:4848":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"7:0:1479":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:2920:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:7736:4419":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:4419:8004":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:46638:4655":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:48808:4027":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10827:5878":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:569:7580":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:12552:6701":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:5996:5560":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:12307:6645":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:45873:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:22601:60067":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:10706:3326":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"1:11313:55454":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:531:7555":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:5155:4936":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:1939:4374":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:47611:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:3740:4179":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:1021:4511":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:3329:4528":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:50068:9183":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"5:1618:3842":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:51282:4777":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:2170:4374":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:46296:4890":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:11361:3130":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:6691:5578":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"}},"external_crates":{"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"unicode_normalization","html_root_url":null},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"tinyvec_macros","html_root_url":null},"23":{"name":"idna","html_root_url":null},"26":{"name":"tinyvec","html_root_url":null},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"unicode_bidi","html_root_url":null},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"form_urlencoded","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"percent_encoding","html_root_url":null},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"matches","html_root_url":null},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}