{"root":"0:0:2055","crate_version":"2.5.0","includes_private":false,"index":{"0:598:1972":{"id":"0:598:1972","crate_id":0,"name":"SyntaxViolation","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"public","docs":"Non-fatal syntax violations that can occur during parsing.\n\nThis may be extended in the future so exhaustive matching is\ndiscouraged with an unused variant.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:599:3036","0:601:3038","0:603:3040","0:605:3042","0:607:3044","0:609:3046","0:611:3048","0:613:3050","0:615:3052","0:617:3054","0:619:3056"],"impls":["0:596","a:2:31852:3541-0:598:1972","a:2:41440:4032-0:598:1972","a:2:41441:4031-0:598:1972","a:2:2909:246-0:598:1972","a:2:31795:236-0:598:1972","a:2:2944:4189-0:598:1972","b:2:2701-0:598:1972","b:2:3523-0:598:1972","b:2:2686-0:598:1972","b:2:2690-0:598:1972","b:2:2411-0:598:1972","b:2:2696-0:598:1972","b:2:2414-0:598:1972","b:5:727-0:598:1972","b:5:5850-0:598:1972","0:138","0:628","0:626","0:624","0:621","0:622","0:629"]}}},"a:2:31852:3541-0:670:1974":{"id":"a:2:31852:3541-0:670:1974","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31852:3541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2411-0:679:1976":{"id":"b:2:2411-0:679:1976","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2405:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2413:1958"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:584:3031":{"id":"0:584:3031","crate_id":0,"name":"Overflow","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:280:917":{"id":"0:280:917","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_",{"resolved_path":{"name":"RangeFull","id":"2:38942:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:727-0:548:1969":{"id":"b:5:727-0:548:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:3563","5:730:2402","5:731:4289"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:260:650":{"id":"0:260:650","crate_id":0,"name":"drop","span":{"filename":"src/path_segments.rs","begin":[66,4],"end":[69,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2696-0:679:1976":{"id":"b:2:2696-0:679:1976","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2666:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2699:137","2:2700:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:362:2241":{"id":"0:362:2241","crate_id":0,"name":"username","span":{"filename":"src/lib.rs","begin":[982,4],"end":[989,5]},"visibility":"public","docs":"Return the username for this URL (typically the empty string)\nas a percent-encoded ASCII string.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.username(), \"rms\");\n\nlet url = Url::parse(\"ftp://:secret123@example.com\")?;\nassert_eq!(url.username(), \"\");\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.username(), \"\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:553":{"id":"0:553","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,13],"end":[111,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31797:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:430:811":{"id":"0:430:811","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[2656,4],"end":[2658,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2944:4189-0:497:1967":{"id":"a:2:2944:4189-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:2944:4189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:2944:4189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:444:335":{"id":"0:444:335","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[2721,4],"end":[2723,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2696-0:730:1999":{"id":"b:2:2696-0:730:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2666:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2699:137","2:2700:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12957:10635":{"id":"2:12957:10635","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41318:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1945":{"id":"0:3-20:0:1945","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[143,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"form_urlencoded","name":"form_urlencoded","id":"20:0:1945","glob":false}}},"2:13057:35802":{"id":"2:13057:35802","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:3807"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41441:4031-0:730:1999":{"id":"a:2:41441:4031-0:730:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41441:4031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2411-0:565:1971":{"id":"b:2:2411-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2405:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2413:1958"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2411-0:670:1974":{"id":"b:2:2411-0:670:1974","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2405:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2413:1958"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:410:2603":{"id":"0:410:2603","crate_id":0,"name":"set_scheme","span":{"filename":"src/lib.rs","begin":[2363,4],"end":[2412,5]},"visibility":"public","docs":"Change this URL’s scheme.\n\nDo nothing and return `Err` under the following circumstances:\n\n* If the new scheme is not in `[a-zA-Z][a-zA-Z0-9+.-]+`\n* If this URL is cannot-be-a-base and the new scheme is one of\n  `http`, `https`, `ws`, `wss` or `ftp`\n* If either the old or new scheme is `http`, `https`, `ws`,\n  `wss` or `ftp` and the other is not one of these\n* If the new scheme is `file` and this URL includes credentials\n  or has a non-null port\n* If this URL's scheme is `file` and its host is empty or null\n\nSee also [the URL specification's section on legal scheme state\noverrides](https://url.spec.whatwg.org/#scheme-state).\n\n# Examples\n\nChange the URL’s scheme from `https` to `http`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_scheme(\"http\");\nassert_eq!(url.as_str(), \"http://example.net/\");\nassert!(result.is_ok());\n# Ok(())\n# }\n# run().unwrap();\n```\nChange the URL’s scheme from `foo` to `bar`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_scheme(\"bar\");\nassert_eq!(url.as_str(), \"bar://example.net\");\nassert!(result.is_ok());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL’s scheme from `https` to `foõ`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_scheme(\"foõ\");\nassert_eq!(url.as_str(), \"https://example.net/\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL’s scheme from `mailto` (cannot-be-a-base) to `https`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\nlet result = url.set_scheme(\"https\");\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\nCannot change the URL’s scheme from `foo` to `https`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_scheme(\"https\");\nassert_eq!(url.as_str(), \"foo://example.net\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\nCannot change the URL’s scheme from `http` to `foo`:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"http://example.net\")?;\nlet result = url.set_scheme(\"foo\");\nassert_eq!(url.as_str(), \"http://example.net/\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy::result_unit_err, clippy::suspicious_operation_groupings)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["scheme",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2985":{"id":"0:104:2985","crate_id":0,"name":"is_tuple","span":{"filename":"src/origin.rs","begin":[70,4],"end":[72,5]},"visibility":"public","docs":"Return whether this origin is a (scheme, host, port) tuple\n(as opposed to an opaque origin).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:2556":{"id":"0:267:2556","crate_id":0,"name":"extend","span":{"filename":"src/path_segments.rs","begin":[215,4],"end":[245,5]},"visibility":"public","docs":"Append each segment from the given iterator at the end of this URL’s path.\n\nEach segment is percent-encoded like in `Url::parse` or `Url::join`,\nexcept that `%` and `/` characters are also encoded (to `%25` and `%2F`).\nThis is unlike `Url::parse` where `%` is left as-is in case some of the input\nis already percent-encoded, and `/` denotes a path segment separator.)\n\nNote that, in addition to slashes between new segments,\nthis always adds a slash between the existing path and the new segments\n*except* if the existing path is `\"/\"`.\nIf the previous last segment was empty (if the path had a trailing slash)\nthe path after `.extend()` will contain two consecutive slashes.\nIf that is undesired, call `.pop_if_empty()` first.\n\nTo obtain a behavior similar to `Url::join`, call `.pop()` unconditionally first.\n\nReturns `&mut Self` so that method calls can be chained.\n\nExample:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/\")?;\nlet org = \"servo\";\nlet repo = \"rust-url\";\nlet issue_number = \"188\";\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .extend(&[org, repo, \"issues\", issue_number]);\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url/issues/188\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nIn order to make sure that parsing the serialization of an URL gives the same URL,\na segment is ignored if it is `\".\"` or `\"..\"`:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/servo\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .extend(&[\"..\", \"rust-url\", \".\", \"pulls\"]);\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url/pulls\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["segments",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7969:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7969:164","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2654:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:541":{"id":"0:541","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,24],"end":[52,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10281:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:542:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:696:3335":{"id":"0:696:3335","crate_id":0,"name":"BeforePort","span":{"filename":"src/slicing.rs","begin":[113,4],"end":[113,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2944:4189-0:679:1976":{"id":"a:2:2944:4189-0:679:1976","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:2944:4189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:727-0:598:1972":{"id":"b:5:727-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:3563","5:730:2402","5:731:4289"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:339:2029":{"id":"0:339:2029","crate_id":0,"name":"parse","span":{"filename":"src/lib.rs","begin":[292,4],"end":[294,5]},"visibility":"public","docs":"Parse an absolute URL from a string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.net\")?;\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an absolute URL from the given string,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12963:35789":{"id":"2:12963:35789","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12300:1672","str::slice_mut_unchecked":"2:12964:35790","crate::ops::Index":"2:38925:3288"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13073:35804":{"id":"2:13073:35804","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4706:35804"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43507:4498","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13051:29956":{"id":"2:13051:29956","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:3807"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:4481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2705:1755":{"id":"2:2705:1755","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2696-0:717:1980":{"id":"b:2:2696-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2666:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2699:137","2:2700:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:443":{"id":"0:443","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2719,0],"end":[2724,1]},"visibility":"default","docs":"Return the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2654:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:444:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:560:464":{"id":"0:560:464","crate_id":0,"name":"clone","span":{"filename":"src/origin.rs","begin":[111,30],"end":[111,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2414-0:717:1980":{"id":"b:2:2414-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2408:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2416:28250"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:615:3052":{"id":"0:615:3052","crate_id":0,"name":"PercentDecode","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:613:3050":{"id":"0:613:3050","crate_id":0,"name":"NullInFragment","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:710:3342":{"id":"0:710:3342","crate_id":0,"name":"AfterFragment","span":{"filename":"src/slicing.rs","begin":[120,4],"end":[120,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:334:2001":{"id":"0:334:2001","crate_id":0,"name":"base_url","span":{"filename":"src/lib.rs","begin":[217,4],"end":[220,5]},"visibility":"public","docs":"Change the base URL","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new",{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:534:1922":{"id":"0:534:1922","crate_id":0,"name":"1","span":{"filename":"src/origin.rs","begin":[58,18],"end":[58,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"crate::host::Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"b:2:2414-0:548:1969":{"id":"b:2:2414-0:548:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2408:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2416:28250"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:390:2411":{"id":"0:390:2411","crate_id":0,"name":"set_query","span":{"filename":"src/lib.rs","begin":[1546,4],"end":[1576,5]},"visibility":"public","docs":"Change this URL’s query string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com/products\")?;\nassert_eq!(url.as_str(), \"https://example.com/products\");\n\nurl.set_query(Some(\"page=2\"));\nassert_eq!(url.as_str(), \"https://example.com/products?page=2\");\nassert_eq!(url.query(), Some(\"page=2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["query",{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:589":{"id":"0:589","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2466:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:547:781":{"id":"0:547:781","crate_id":0,"name":"fmt","span":{"filename":"src/origin.rs","begin":[52,37],"end":[52,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:628":{"id":"0:628","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2904:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:285:198":{"id":"0:285:198","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[27,4],"end":[27,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"0:439:1252":{"id":"0:439:1252","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[2702,4],"end":[2704,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"2:30635:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2701-0:497:1967":{"id":"b:2:2701-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2704:137","2:2705:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2411-0:730:1999":{"id":"b:2:2411-0:730:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2405:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2413:1958"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:572:2932":{"id":"0:572:2932","crate_id":0,"name":"InvalidIpv4Address","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:46-20:89:1977":{"id":"0:46-20:89:1977","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[169,0],"end":[169,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"form_urlencoded::EncodingOverride","name":"EncodingOverride","id":"20:89:1977","glob":false}}},"2:13001:2914":{"id":"2:13001:2914","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12633:3807","`DoubleEndedIterator`":"2:8007:130","prim@char":"1:12294:458","str::split":"2:12995:2110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43226:4508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:4481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:599:3036":{"id":"0:599:3036","crate_id":0,"name":"Backslash","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41440:4032-0:527:1970":{"id":"a:2:41440:4032-0:527:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41440:4032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5850-0:565:1971":{"id":"b:5:5850-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10070:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5848:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5852:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:369:2288":{"id":"0:369:2288","crate_id":0,"name":"port_or_known_default","span":{"filename":"src/lib.rs","begin":[1222,4],"end":[1224,5]},"visibility":"public","docs":"Return the port number for this URL, or the default port number if it is known.\n\nThis method only knows the default port number\nof the `http`, `https`, `ws`, `wss` and `ftp` schemes.\n\nFor URLs in these schemes, this method always returns `Some(_)`.\nFor other schemes, it is the same as `Url::port()`.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"foo://example.com\")?;\nassert_eq!(url.port_or_known_default(), None);\n\nlet url = Url::parse(\"foo://example.com:1456\")?;\nassert_eq!(url.port_or_known_default(), Some(1456));\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.port_or_known_default(), Some(443));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12966:29941":{"id":"2:12966:29941","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12965:2104","str::split_at_mut_checked":"2:12968:29945"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:578:3026":{"id":"0:578:3026","crate_id":0,"name":"RelativeUrlWithoutBase","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:714:464":{"id":"0:714:464","crate_id":0,"name":"clone","span":{"filename":"src/slicing.rs","begin":[103,15],"end":[103,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13036:35797":{"id":"2:13036:35797","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:745":{"id":"0:745","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3008,9],"end":[3008,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10065:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:747:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:414:2638":{"id":"0:414:2638","crate_id":0,"name":"from_directory_path","span":{"filename":"src/lib.rs","begin":[2480,4],"end":[2486,5]},"visibility":"public","docs":"Convert a directory name as `std::path::Path` into an URL in the `file` scheme.\n\nThis returns `Err` if the given path is not absolute or,\non Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n\nCompared to `from_file_path`, this ensure that URL’s the path has a trailing slash\nso that the entire path is considered when using this URL as a base URL.\n\nFor example:\n\n* `\"index.html\"` parsed with `Url::from_directory_path(Path::new(\"/var/www\"))`\n  as the base URL is `file:///var/www/index.html`\n* `\"index.html\"` parsed with `Url::from_file_path(Path::new(\"/var/www\"))`\n  as the base URL is `file:///var/index.html`, which might not be what was intended.\n\nNote that `std::path` does not consider trailing slashes significant\nand usually does not include them (e.g. in `Path::parent()`).","links":{},"attrs":["#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]","#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2654:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5380:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2414-0:497:1967":{"id":"b:2:2414-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2408:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2416:28250"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12978:2926":{"id":"2:12978:2926","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:3807"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13040:35799":{"id":"2:13040:35799","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13076:35805":{"id":"2:13076:35805","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4704:35805"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43525:4500","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2690-0:548:1969":{"id":"b:2:2690-0:548:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2692:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2909:246-0:527:1970":{"id":"a:2:2909:246-0:527:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2909:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12998:29947":{"id":"2:12998:29947","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:3807"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12449:4488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349:1220":{"id":"0:349:1220","crate_id":0,"name":"options","span":{"filename":"src/lib.rs","begin":[554,4],"end":[560,5]},"visibility":"public","docs":"Return a default `ParseOptions` that can fully configure the URL parser.\n\n# Examples\n\nGet default `ParseOptions`, then change base url\n\n```rust\nuse url::Url;\n# use url::ParseError;\n# fn run() -> Result<(), ParseError> {\nlet options = Url::options();\nlet api = Url::parse(\"https://api.example.com\")?;\nlet base_url = options.base_url(Some(&api));\nlet version_url = base_url.parse(\"version.json\")?;\nassert_eq!(version_url.as_str(), \"https://api.example.com/version.json\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:586":{"id":"0:586","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31797:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12955:3168":{"id":"2:12955:3168","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41318:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2701-0:527:1970":{"id":"b:2:2701-0:527:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2704:137","2:2705:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5605:36499":{"id":"5:5605:36499","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2662,0],"end":[2678,1]},"visibility":"default","docs":"Debug the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10065:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:432:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2690-0:730:1999":{"id":"b:2:2690-0:730:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2692:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:75:781":{"id":"0:75:781","crate_id":0,"name":"fmt","span":{"filename":"src/host.rs","begin":[171,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5852:1730":{"id":"5:5852:1730","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31795:236-0:548:1969":{"id":"a:2:31795:236-0:548:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31795:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2944:4189-0:548:1969":{"id":"a:2:2944:4189-0:548:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:2944:4189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41440:4032-0:598:1972":{"id":"a:2:41440:4032-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41440:4032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:630:781":{"id":"0:630:781","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:597:3014":{"id":"0:597:3014","crate_id":0,"name":"description","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:3260":{"id":"0:264:3260","crate_id":0,"name":"pop_if_empty","span":{"filename":"src/path_segments.rs","begin":[125,4],"end":[133,5]},"visibility":"public","docs":"Remove the last segment of this URL’s path if it is empty,\nexcept if these was only one segment to begin with.\n\nIn other words, remove one path trailing slash, if any,\nunless it is also the initial slash (so this does nothing if `url.path() == \"/\")`.\n\nReturns `&mut Self` so that method calls can be chained.\n\nExample:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .push(\"pulls\");\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url//pulls\");\n\nlet mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .pop_if_empty().push(\"pulls\");\nassert_eq!(url.as_str(), \"https://github.com/servo/rust-url/pulls\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3523-0:679:1976":{"id":"b:2:3523-0:679:1976","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3521:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3525:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:332":{"id":"0:332","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[215,0],"end":[267,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:334:2001","0:335:2002","0:336:2027","0:337:2029"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2411-0:741:2435":{"id":"b:2:2411-0:741:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2405:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2413:1958"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:472:2748":{"id":"0:472:2748","crate_id":0,"name":"Finished","span":{"filename":"src/lib.rs","begin":[3035,4],"end":[3035,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"5:5608:36500":{"id":"5:5608:36500","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2686-0:670:1974":{"id":"b:2:2686-0:670:1974","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2689:2138"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2690-0:679:1976":{"id":"b:2:2690-0:679:1976","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2692:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:37-0:497:1967":{"id":"0:37-0:497:1967","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[164,0],"end":[164,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::host::Host","name":"Host","id":"0:497:1967","glob":false}}},"2:13004:35792":{"id":"2:13004:35792","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12633:3807","str::split":"2:12995:2110","prim@char":"1:12294:458","`DoubleEndedIterator`":"2:8007:130","str::rsplit_terminator":"2:13007:35793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43258:4512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2411-0:548:1969":{"id":"b:2:2411-0:548:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2405:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2413:1958"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[170,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2654:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10070:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:75:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:511":{"id":"0:511","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,16],"end":[41,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10065:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10065:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:513:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3523-0:598:1972":{"id":"b:2:3523-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3521:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3525:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2414-0:565:1971":{"id":"b:2:2414-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2408:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2416:28250"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:428:781":{"id":"0:428:781","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2649,4],"end":[2651,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:623:677":{"id":"0:623:677","crate_id":0,"name":"eq","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2686-0:565:1971":{"id":"b:2:2686-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2689:2138"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13068:29253":{"id":"2:13068:29253","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5602:4669":{"id":"5:5602:4669","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:514":{"id":"0:514","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,23],"end":[41,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"2:2466:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2466:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:66:2402":{"id":"0:66:2402","crate_id":0,"name":"to_owned","span":{"filename":"src/host.rs","begin":[64,4],"end":[70,5]},"visibility":"public","docs":"Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519:471":{"id":"0:519:471","crate_id":0,"name":"cmp","span":{"filename":"src/host.rs","begin":[41,27],"end":[41,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30635:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:505:2164":{"id":"0:505:2164","crate_id":0,"name":"Ipv6","span":{"filename":"src/host.rs","begin":[59,4],"end":[59,18]},"visibility":"default","docs":"An IPv6 address.\n`Url::host_str` returns the serialization of that address between `[` and `]` brackets,\nin the format per [RFC 5952 *A Recommendation\nfor IPv6 Address Text Representation*](https://tools.ietf.org/html/rfc5952):\nlowercase hexadecimal with maximal `::` compression.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:507:1921"]},"discriminant":null}}},"a:2:41441:4031-0:598:1972":{"id":"a:2:41441:4031-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41441:4031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:570:3021":{"id":"0:570:3021","crate_id":0,"name":"InvalidPort","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:31852:3541-0:565:1971":{"id":"a:2:31852:3541-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31852:3541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:580:3028":{"id":"0:580:3028","crate_id":0,"name":"RelativeUrlWithCannotBeABaseBase","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:591":{"id":"0:591","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:592:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:42-0:565:1971":{"id":"0:42-0:565:1971","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[166,24],"end":[166,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::parser::ParseError","name":"ParseError","id":"0:565:1971","glob":false}}},"0:715":{"id":"0:715","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[103,22],"end":[103,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10065:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:716:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:406:2553":{"id":"0:406:2553","crate_id":0,"name":"set_password","span":{"filename":"src/lib.rs","begin":[2107,4],"end":[2163,5]},"visibility":"public","docs":"Change this URL’s password.\n\nIf this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rmz@example.com\")?;\nlet result = url.set_password(Some(\"secret_password\"));\nassert!(result.is_err());\n\nlet mut url = Url::parse(\"ftp://user1:secret1@example.com\")?;\nlet result = url.set_password(Some(\"secret_password\"));\nassert_eq!(url.password(), Some(\"secret_password\"));\n\nlet mut url = Url::parse(\"ftp://user2:@example.com\")?;\nlet result = url.set_password(Some(\"secret2\"));\nassert!(result.is_ok());\nassert_eq!(url.password(), Some(\"secret2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["password",{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2944:4189-0:565:1971":{"id":"a:2:2944:4189-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:2944:4189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:426:1755":{"id":"0:426:1755","crate_id":0,"name":"try_from","span":{"filename":"src/lib.rs","begin":[2641,4],"end":[2643,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:2670:256","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3523-0:717:1980":{"id":"b:2:3523-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3521:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3525:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:340:2051":{"id":"0:340:2051","crate_id":0,"name":"parse_with_params","span":{"filename":"src/lib.rs","begin":[322,4],"end":[336,5]},"visibility":"public","docs":"Parse an absolute URL from a string and add params to its query string.\n\nExisting params are not removed.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse_with_params(\"https://example.net?dont=clobberme\",\n                                 &[(\"lang\", \"rust\"), (\"browser\", \"servo\")])?;\nassert_eq!(\"https://example.net/?dont=clobberme&lang=rust&browser=servo\", url.as_str());\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an absolute URL from the given string,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7969:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7969:164","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2405:102","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2654:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2654:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:680:3327":{"id":"0:680:3327","crate_id":0,"name":"BeforeScheme","span":{"filename":"src/slicing.rs","begin":[105,4],"end":[105,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:5:727-0:565:1971":{"id":"b:5:727-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:3563","5:730:2402","5:731:4289"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:435:677":{"id":"0:435:677","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2686,4],"end":[2688,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3525:1770":{"id":"2:3525:1770","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39094:8533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2987":{"id":"0:105:2987","crate_id":0,"name":"ascii_serialization","span":{"filename":"src/origin.rs","begin":[75,4],"end":[86,5]},"visibility":"public","docs":"<https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:593":{"id":"0:593","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2904:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:335:2002":{"id":"0:335:2002","crate_id":0,"name":"encoding_override","span":{"filename":"src/lib.rs","begin":[224,4],"end":[227,5]},"visibility":"public","docs":"Override the character encoding of query strings.\nThis is a legacy concept only relevant for HTML.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new",{"resolved_path":{"name":"EncodingOverride","id":"20:89:1977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:497:1967":{"id":"0:497:1967","crate_id":0,"name":"Host","span":{"filename":"src/host.rs","begin":[42,0],"end":[60,1]},"visibility":"public","docs":"The host name of an URL.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:499:2166","0:502:2163","0:505:2164"],"impls":["0:64","0:67","a:2:31852:3541-0:497:1967","a:2:41440:4032-0:497:1967","a:2:41441:4031-0:497:1967","a:2:2909:246-0:497:1967","a:2:31795:236-0:497:1967","a:2:2944:4189-0:497:1967","b:2:2701-0:497:1967","b:2:3523-0:497:1967","b:2:2686-0:497:1967","b:2:2690-0:497:1967","b:2:2411-0:497:1967","b:2:2696-0:497:1967","b:2:2414-0:497:1967","b:5:727-0:497:1967","b:5:5850-0:497:1967","0:520","0:76","0:73","0:523","0:511","0:517","0:514","0:508"]}}},"0:557:850":{"id":"0:557:850","crate_id":0,"name":"hash","span":{"filename":"src/origin.rs","begin":[111,24],"end":[111,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10289:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13070:29864":{"id":"2:13070:29864","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:40963"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[90,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"22:170:3033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13063:2029":{"id":"2:13063:2029","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12594:136","`FromStr`":"2:12593:2682"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12593:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12593:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31795:236-0:565:1971":{"id":"a:2:31795:236-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31795:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13060:35803":{"id":"2:13060:35803","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:3807"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:4481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:364:2250":{"id":"0:364:2250","crate_id":0,"name":"has_host","span":{"filename":"src/lib.rs","begin":[1050,4],"end":[1052,5]},"visibility":"public","docs":"Equivalent to `url.host().is_some()`.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.has_host());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.has_host());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(!url.has_host());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:679:1976":{"id":"0:679:1976","crate_id":0,"name":"Position","span":{"filename":"src/slicing.rs","begin":[104,0],"end":[121,1]},"visibility":"public","docs":"Indicates a position within a URL based on its components.\n\nA range of positions can be used for slicing `Url`:\n\n```rust\n# use url::{Url, Position};\n# fn something(some_url: Url) {\nlet serialization: &str = &some_url[..];\nlet serialization_without_fragment: &str = &some_url[..Position::AfterQuery];\nlet authority: &str = &some_url[Position::BeforeUsername..Position::AfterPort];\nlet data_url_payload: &str = &some_url[Position::BeforePath..Position::AfterQuery];\nlet scheme_relative: &str = &some_url[Position::BeforeUsername..];\n# }\n```\n\nIn a pseudo-grammar (where `[`…`]?` makes a sub-sequence optional),\nURL components and delimiters that separate them are:\n\n```notrust\nurl =\n    scheme \":\"\n    [ \"//\" [ username [ \":\" password ]? \"@\" ]? host [ \":\" port ]? ]?\n    path [ \"?\" query ]? [ \"#\" fragment ]?\n```\n\nWhen a given component is not present,\nits \"before\" and \"after\" position are the same\n(so that `&some_url[BeforeFoo..AfterFoo]` is the empty string)\nand component ordering is preserved\n(so that a missing query \"is between\" a path and a fragment).\n\nThe end of a component and the start of the next are either the same or separate\nby a delimiter.\n(Note that the initial `/` of a path is considered part of the path here, not a delimiter.)\nFor example, `&url[..BeforeFragment]` would include a `#` delimiter (if present in `url`),\nso `&url[..AfterQuery]` might be desired instead.\n\n`BeforeScheme` and `AfterFragment` are always the start and end of the entire URL,\nso `&url[BeforeScheme..X]` is the same as `&url[..X]`\nand `&url[X..AfterFragment]` is the same as `&url[X..]`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:680:3327","0:682:3328","0:684:3329","0:686:3330","0:688:3331","0:690:3332","0:692:3333","0:694:3334","0:696:3335","0:698:3336","0:700:3337","0:702:3338","0:704:3339","0:706:3340","0:708:3341","0:710:3342"],"impls":["a:2:31852:3541-0:679:1976","a:2:41440:4032-0:679:1976","a:2:41441:4031-0:679:1976","a:2:2909:246-0:679:1976","a:2:31795:236-0:679:1976","a:2:2944:4189-0:679:1976","b:2:2701-0:679:1976","b:2:3523-0:679:1976","b:2:2686-0:679:1976","b:2:2690-0:679:1976","b:2:2411-0:679:1976","b:2:2696-0:679:1976","b:2:2414-0:679:1976","b:5:727-0:679:1976","0:713","0:715","0:712"]}}},"0:626":{"id":"0:626","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:627:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:279:198":{"id":"0:279:198","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[13,4],"end":[13,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"0:504:1921":{"id":"0:504:1921","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[52,9],"end":[52,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::net::Ipv4Addr","id":"2:41078:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2701-0:679:1976":{"id":"b:2:2701-0:679:1976","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2704:137","2:2705:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2701-0:670:1974":{"id":"b:2:2701-0:670:1974","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2704:137","2:2705:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12995:2110":{"id":"2:12995:2110","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12633:3807","`DoubleEndedIterator`":"2:8007:130","prim@char":"1:12294:458","str::split_whitespace":"2:12973:34199","str::rsplit":"2:13001:2914"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43208:2349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523":{"id":"0:523","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,44],"end":[41,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"2:10281:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10281:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:525:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2686-0:598:1972":{"id":"b:2:2686-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2689:2138"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:352:2137":{"id":"0:352:2137","crate_id":0,"name":"into_string","span":{"filename":"src/lib.rs","begin":[605,4],"end":[607,5]},"visibility":"public","docs":"Return the serialization of this URL.\n\nThis consumes the `Url` and takes ownership of the `String` stored in it.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url_str = \"https://example.net/\";\nlet url = Url::parse(url_str)?;\nassert_eq!(String::from(url), url_str);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"2.3.0\", note = \"use Into<String>\")]"],"deprecation":{"since":"2.3.0","note":"use Into<String>"},"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:562:781":{"id":"0:562:781","crate_id":0,"name":"fmt","span":{"filename":"src/origin.rs","begin":[111,37],"end":[111,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:730:2402":{"id":"5:730:2402","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2909:246-0:497:1967":{"id":"a:2:2909:246-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2909:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2909:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13045:3155":{"id":"2:13045:3155","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:3807"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:425:137":{"id":"0:425:137","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[2639,4],"end":[2639,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:556":{"id":"0:556","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,24],"end":[111,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10281:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:557:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5850-0:497:1967":{"id":"b:5:5850-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10070:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5848:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:5852:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:716:781":{"id":"0:716:781","crate_id":0,"name":"fmt","span":{"filename":"src/slicing.rs","begin":[103,22],"end":[103,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:533:1921":{"id":"0:533:1921","crate_id":0,"name":"0","span":{"filename":"src/origin.rs","begin":[58,10],"end":[58,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:559":{"id":"0:559","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,30],"end":[111,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:560:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:402:2511":{"id":"0:402:2511","crate_id":0,"name":"set_host","span":{"filename":"src/lib.rs","begin":[1922,4],"end":[1984,5]},"visibility":"public","docs":"Change this URL’s host.\n\nRemoving the host (calling this with `None`)\nwill also remove any username, password, and port number.\n\n# Examples\n\nChange host:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_host(Some(\"rust-lang.org\"));\nassert!(result.is_ok());\nassert_eq!(url.as_str(), \"https://rust-lang.org/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nRemove host:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"foo://example.net\")?;\nlet result = url.set_host(None);\nassert!(result.is_ok());\nassert_eq!(url.as_str(), \"foo:/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot remove host for 'special' schemes (e.g. `http`):\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net\")?;\nlet result = url.set_host(None);\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"https://example.net/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change or remove host for cannot-be-a-base URLs:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\n\nlet result = url.set_host(Some(\"rust-lang.org\"));\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\n\nlet result = url.set_host(None);\nassert!(result.is_err());\nassert_eq!(url.as_str(), \"mailto:rms@example.net\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf this URL is cannot-be-a-base or there is an error parsing the given `host`,\na [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2909:246-0:741:2435":{"id":"a:2:2909:246-0:741:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2909:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:367:2270":{"id":"0:367:2270","crate_id":0,"name":"domain","span":{"filename":"src/lib.rs","begin":[1158,4],"end":[1163,5]},"visibility":"public","docs":"If this URL has a host and it is a domain name (not an IP address), return it.\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/\")?;\nassert_eq!(url.domain(), None);\n\nlet url = Url::parse(\"mailto:rms@example.net\")?;\nassert_eq!(url.domain(), None);\n\nlet url = Url::parse(\"https://example.com/\")?;\nassert_eq!(url.domain(), Some(\"example.com\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3038,0],"end":[3044,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3145:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:475:650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3523-0:527:1970":{"id":"b:2:3523-0:527:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3521:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3525:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13065:29249":{"id":"2:13065:29249","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:554":{"id":"0:554","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,13],"end":[111,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2461:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:555:677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:546":{"id":"0:546","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,37],"end":[52,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10065:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:547:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2692:811":{"id":"2:2692:811","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31852:3541-0:679:1976":{"id":"a:2:31852:3541-0:679:1976","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31852:3541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31795:236-0:679:1976":{"id":"a:2:31795:236-0:679:1976","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31795:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:747:781":{"id":"0:747:781","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[3008,9],"end":[3008,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:441:850":{"id":"0:441:850","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[2710,4],"end":[2715,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"H"},"bounds":[{"trait_bound":{"trait":{"name":"hash::Hasher","id":"2:10289:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286:917":{"id":"0:286:917","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[28,4],"end":[30,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"resolved_path":{"name":"RangeTo","id":"2:38997:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41440:4032-0:741:2435":{"id":"a:2:41440:4032-0:741:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41440:4032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:2909:246-0:565:1971":{"id":"a:2:2909:246-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2909:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5850-0:598:1972":{"id":"b:5:5850-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10070:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5848:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5852:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:366:854":{"id":"0:366:854","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[1126,4],"end":[1133,5]},"visibility":"public","docs":"Return the parsed representation of the host for this URL.\nNon-ASCII domain labels are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\n\nCannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\ndon’t have a host.\n\nSee also the `host_str` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/index.html\")?;\nassert!(url.host().is_some());\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.host().is_some());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(url.host().is_none());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(url.host().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600":{"id":"5:5600","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5601:36498","5:5602:4669","5:5605:36499","5:5608:36500","5:5616:36501","5:5617:2137","5:5618:4595","5:5619:29251","5:5620:3088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2696-0:548:1969":{"id":"b:2:2696-0:548:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2666:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2699:137","2:2700:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31852:3541-0:527:1970":{"id":"a:2:31852:3541-0:527:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31852:3541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:266:2114":{"id":"0:266:2114","crate_id":0,"name":"push","span":{"filename":"src/path_segments.rs","begin":[158,4],"end":[160,5]},"visibility":"public","docs":"Append the given segment at the end of this URL’s path.\n\nSee the documentation for `.extend()`.\n\nReturns `&mut Self` so that method calls can be chained.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["segment",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:507:1921":{"id":"0:507:1921","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[59,9],"end":[59,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::net::Ipv6Addr","id":"2:41094:2864","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:544":{"id":"0:544","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,30],"end":[52,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:545:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2944:4189-0:730:1999":{"id":"a:2:2944:4189-0:730:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:2944:4189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31852:3541-0:598:1972":{"id":"a:2:31852:3541-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31852:3541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:727-0:717:1980":{"id":"b:5:727-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:3563","5:730:2402","5:731:4289"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:510:464":{"id":"0:510:464","crate_id":0,"name":"clone","span":{"filename":"src/host.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:530:1921":{"id":"0:530:1921","crate_id":0,"name":"0","span":{"filename":"src/origin.rs","begin":[55,11],"end":[55,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:13016:29954":{"id":"2:13016:29954","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12974:34201":{"id":"2:12974:34201","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12973:34199"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43491:4487","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41441:4031-0:670:1974":{"id":"a:2:41441:4031-0:670:1974","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41441:4031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:539":{"id":"0:539","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,20],"end":[52,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2466:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:551":{"id":"0:551","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,9],"end":[111,11]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2466:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:136:811":{"id":"0:136:811","crate_id":0,"name":"from","span":{"filename":"src/parser.rs","begin":[91,4],"end":[93,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_",{"resolved_path":{"name":"::idna::Errors","id":"22:170:3033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:731:4289":{"id":"5:731:4289","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3523-0:730:1999":{"id":"b:2:3523-0:730:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3521:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3525:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2909:246-0:679:1976":{"id":"a:2:2909:246-0:679:1976","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2909:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2690-0:741:2435":{"id":"b:2:2690-0:741:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2692:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2944:4189-0:670:1974":{"id":"a:2:2944:4189-0:670:1974","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:2944:4189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/path_segments.rs","begin":[72,0],"end":[246,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:263:3089","0:264:3260","0:265:2931","0:266:2114","0:267:2556"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13054:35801":{"id":"2:13054:35801","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:3807"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:4481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:702:3338":{"id":"0:702:3338","crate_id":0,"name":"AfterPath","span":{"filename":"src/slicing.rs","begin":[116,4],"end":[116,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12976:35791":{"id":"2:12976:35791","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43472:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:416:2674":{"id":"0:416:2674","crate_id":0,"name":"to_file_path","span":{"filename":"src/lib.rs","begin":[2597,4],"end":[2610,5]},"visibility":"public","docs":"Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.\n\n**Note:** This does not actually check the URL’s `scheme`,\nand may give nonsensical results for other schemes.\nIt is the user’s responsibility to check the URL’s scheme before calling this.\n\n```\n# use url::Url;\n# let url = Url::parse(\"file:///etc/passwd\").unwrap();\nlet path = url.to_file_path();\n```\n\nReturns `Err` if the host is neither empty nor `\"localhost\"` (except on Windows, where\n`file:` URLs may have a non-local host),\nor if `Path::new_opt()` returns `None`.\n(That is, if the percent-decoded path contains a NUL byte or,\nfor a Windows path, is not UTF-8.)","links":{},"attrs":["#[inline]","#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]","#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5268:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:607:3044":{"id":"0:607:3044","crate_id":0,"name":"ExpectedFileDoubleSlash","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:717:1980":{"id":"0:717:1980","crate_id":0,"name":"Url","span":{"filename":"src/lib.rs","begin":[182,0],"end":[204,1]},"visibility":"public","docs":"A parsed URL record.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:338","a:2:31852:3541-0:717:1980","a:2:41440:4032-0:717:1980","a:2:41441:4031-0:717:1980","a:2:2909:246-0:717:1980","a:2:31795:236-0:717:1980","a:2:2944:4189-0:717:1980","b:2:2701-0:717:1980","b:2:3523-0:717:1980","b:2:2686-0:717:1980","b:2:2690-0:717:1980","b:2:2411-0:717:1980","b:2:2696-0:717:1980","b:2:2414-0:717:1980","b:5:727-0:717:1980","b:5:5850-0:717:1980","0:420","0:429","0:440","0:436","0:287","0:423","0:728","0:427","0:278","0:433","0:443","0:284","0:438","0:281","0:431","0:434"]}}},"b:5:727-0:527:1970":{"id":"b:5:727-0:527:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:3563","5:730:2402","5:731:4289"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13071:29865":{"id":"2:13071:29865","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:40963"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2696-0:527:1970":{"id":"b:2:2696-0:527:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2666:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2699:137","2:2700:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:527:1970":{"id":"0:527:1970","crate_id":0,"name":"Origin","span":{"filename":"src/origin.rs","begin":[53,0],"end":[59,1]},"visibility":"public","docs":"The origin of an URL\n\nTwo URLs with the same origin are considered\nto originate from the same entity and can therefore trust\neach other.\n\nThe origin is determined based on the scheme as follows:\n\n- If the scheme is \"blob\" the origin is the origin of the\n  URL contained in the path component. If parsing fails,\n  it is an opaque origin.\n- If the scheme is \"ftp\", \"http\", \"https\", \"ws\", or \"wss\",\n  then the origin is a tuple of the scheme, host, and port.\n- If the scheme is anything else, the origin is opaque, meaning\n  the URL does not have the same origin as any other URL.\n\nFor more information see <https://url.spec.whatwg.org/#origin>","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:528:2978","0:531:2963"],"impls":["0:101","a:2:31852:3541-0:527:1970","a:2:41440:4032-0:527:1970","a:2:41441:4031-0:527:1970","a:2:2909:246-0:527:1970","a:2:31795:236-0:527:1970","a:2:2944:4189-0:527:1970","b:2:2701-0:527:1970","b:2:3523-0:527:1970","b:2:2686-0:527:1970","b:2:2690-0:527:1970","b:2:2411-0:527:1970","b:2:2696-0:527:1970","b:2:2414-0:527:1970","b:5:727-0:527:1970","0:539","0:537","0:544","0:546","0:536","0:541"]}}},"0:408:2570":{"id":"0:408:2570","crate_id":0,"name":"set_username","span":{"filename":"src/lib.rs","begin":[2201,4],"end":[2250,5]},"visibility":"public","docs":"Change this URL’s username.\n\nIf this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n# Examples\n\nCannot setup username from mailto(cannot-be-base)\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rmz@example.com\")?;\nlet result = url.set_username(\"user1\");\nassert_eq!(url.as_str(), \"mailto:rmz@example.com\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nSetup username to user1\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"ftp://:secre1@example.com/\")?;\nlet result = url.set_username(\"user1\");\nassert!(result.is_ok());\nassert_eq!(url.username(), \"user1\");\nassert_eq!(url.as_str(), \"ftp://user1:secre1@example.com/\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["username",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:565:1971":{"id":"0:565:1971","crate_id":0,"name":"ParseError","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"public","docs":"Errors that can occur during parsing.\n\nThis may be extended in the future so exhaustive matching is\ndiscouraged with an unused variant.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:566:2514","0:568:3019","0:570:3021","0:572:2932","0:574:2883","0:576:2520","0:578:3026","0:580:3028","0:582:2512","0:584:3031"],"impls":["a:2:31852:3541-0:565:1971","a:2:41440:4032-0:565:1971","a:2:41441:4031-0:565:1971","a:2:2909:246-0:565:1971","a:2:31795:236-0:565:1971","a:2:2944:4189-0:565:1971","b:2:2701-0:565:1971","b:2:3523-0:565:1971","b:2:2686-0:565:1971","b:2:2690-0:565:1971","b:2:2411-0:565:1971","b:2:2696-0:565:1971","b:2:2414-0:565:1971","b:5:727-0:565:1971","b:5:5850-0:565:1971","0:587","0:594","0:586","0:563","0:134","0:591","0:593","0:135","0:589"]}}},"2:13069:29254":{"id":"2:13069:29254","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:690:3332":{"id":"0:690:3332","crate_id":0,"name":"AfterPassword","span":{"filename":"src/slicing.rs","begin":[110,4],"end":[110,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:420":{"id":"0:420","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2629,0],"end":[2636,1]},"visibility":"default","docs":"Parse a string as an URL, without a base URL or encoding override.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12593:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:421:136","0:422:2683"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13042:3066":{"id":"2:13042:3066","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:3807"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12659:4480","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:392:2056":{"id":"0:392:2056","crate_id":0,"name":"query_pairs_mut","span":{"filename":"src/lib.rs","begin":[1610,4],"end":[1628,5]},"visibility":"public","docs":"Manipulate this URL’s query string, viewed as a sequence of name/value pairs\nin `application/x-www-form-urlencoded` syntax.\n\nThe return value has a method-chaining API:\n\n```rust\n# use url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.net?lang=fr#nav\")?;\nassert_eq!(url.query(), Some(\"lang=fr\"));\n\nurl.query_pairs_mut().append_pair(\"foo\", \"bar\");\nassert_eq!(url.query(), Some(\"lang=fr&foo=bar\"));\nassert_eq!(url.as_str(), \"https://example.net/?lang=fr&foo=bar#nav\");\n\nurl.query_pairs_mut()\n    .clear()\n    .append_pair(\"foo\", \"bar & baz\")\n    .append_pair(\"saisons\", \"\\u{00C9}t\\u{00E9}+hiver\");\nassert_eq!(url.query(), Some(\"foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver\"));\nassert_eq!(url.as_str(),\n           \"https://example.net/?foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver#nav\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nNote: `url.query_pairs_mut().clear();` is equivalent to `url.set_query(Some(\"\"))`,\nnot `url.set_query(None)`.\n\nThe state of `Url` is unspecified if this return value is leaked without being dropped.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"form_urlencoded::Serializer","id":"20:44:2434","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:592:464":{"id":"0:592:464","crate_id":0,"name":"clone","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:576:2520":{"id":"0:576:2520","crate_id":0,"name":"InvalidDomainCharacter","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:2704:137":{"id":"2:2704:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31723:3658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:737":{"id":"0:737","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[207,15],"end":[207,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:739:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13013:29952":{"id":"2:13013:29952","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12294:458","str::splitn":"2:13010:29950","self::pattern":"2:12633:3807"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43330:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:4481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2414-0:679:1976":{"id":"b:2:2414-0:679:1976","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2408:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2416:28250"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:727-0:497:1967":{"id":"b:5:727-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:729:3563","5:730:2402","5:731:4289"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:396:2463":{"id":"0:396:2463","crate_id":0,"name":"path_segments_mut","span":{"filename":"src/lib.rs","begin":[1705,4],"end":[1711,5]},"visibility":"public","docs":"Return an object with methods to manipulate this URL’s path segments.\n\nReturn `Err(())` if this URL is cannot-be-a-base.","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:475:650":{"id":"0:475:650","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[3039,4],"end":[3043,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13025:35794":{"id":"2:13025:35794","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12633:3807","`DoubleEndedIterator`":"2:8007:130","prim@char":"1:12294:458","str::matches":"2:13022:2151"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43430:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:4481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[269,0],"end":[2626,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:339:2029","0:340:2051","0:346:2081","0:347:2096","0:349:1220","0:351:336","0:352:2137","0:356:1968","0:357:2097","0:358:2167","0:359:2210","0:360:2227","0:361:2060","0:362:2241","0:363:2246","0:364:2250","0:365:2162","0:366:854","0:367:2270","0:368:1994","0:369:2288","0:371:2309","0:375:1257","0:376:1973","0:378:2117","0:379:2369","0:380:2119","0:385:2398","0:390:2411","0:392:2056","0:394:2454","0:396:2463","0:399:2485","0:402:2511","0:405:2541","0:406:2553","0:408:2570","0:410:2603","0:412:2624","0:414:2638","0:416:2674"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:538:677":{"id":"0:538:677","crate_id":0,"name":"eq","span":{"filename":"src/origin.rs","begin":[52,9],"end":[52,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2414-0:741:2435":{"id":"b:2:2414-0:741:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2408:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2416:28250"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13075:10892":{"id":"2:13075:10892","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4707:10892"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43516:4499","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:427":{"id":"0:427","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2647,0],"end":[2652,1]},"visibility":"default","docs":"Display the serialization of this URL.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10070:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:428:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:359:2210":{"id":"0:359:2210","crate_id":0,"name":"has_authority","span":{"filename":"src/lib.rs","begin":[884,4],"end":[887,5]},"visibility":"public","docs":"Return whether the URL has an 'authority',\nwhich can contain a username, password, host, and port number.\n\nURLs that do *not* are either path-only like `unix:/run/foo.socket`\nor cannot-be-a-base like `data:text/plain,Stuff`.\n\nSee also the `authority` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(url.has_authority());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.has_authority());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(!url.has_authority());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12964:35790":{"id":"2:12964:35790","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12300:1672","crate::ops::IndexMut":"2:3184:3622","str::slice_unchecked":"2:12963:35789"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:368:1994":{"id":"0:368:1994","crate_id":0,"name":"port","span":{"filename":"src/lib.rs","begin":[1190,4],"end":[1192,5]},"visibility":"public","docs":"Return the port number for this URL, if any.\n\nNote that default port numbers are never reflected by the serialization,\nuse the `port_or_known_default()` method if you want a default port number returned.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.port(), None);\n\nlet url = Url::parse(\"https://example.com:443/\")?;\nassert_eq!(url.port(), None);\n\nlet url = Url::parse(\"ssh://example.com:22\")?;\nassert_eq!(url.port(), Some(22));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:595:781":{"id":"0:595:781","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:686:3330":{"id":"0:686:3330","crate_id":0,"name":"AfterUsername","span":{"filename":"src/slicing.rs","begin":[108,4],"end":[108,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12968:29945":{"id":"2:12968:29945","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12967:29944"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31795:236-0:730:1999":{"id":"a:2:31795:236-0:730:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31795:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:2944:4189-0:527:1970":{"id":"a:2:2944:4189-0:527:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:2944:4189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:376:1973":{"id":"0:376:1973","crate_id":0,"name":"path_segments","span":{"filename":"src/lib.rs","begin":[1351,4],"end":[1354,5]},"visibility":"public","docs":"Unless this URL is cannot-be-a-base,\nreturn an iterator of '/' slash-separated path segments,\neach as a percent-encoded ASCII string.\n\nReturn `None` for cannot-be-a-base URLs.\n\nWhen `Some` is returned, the iterator always contains at least one string\n(which may be empty).\n\n# Examples\n\n```\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet url = Url::parse(\"https://example.com/foo/bar\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"foo\"));\nassert_eq!(path_segments.next(), Some(\"bar\"));\nassert_eq!(path_segments.next(), None);\n\nlet url = Url::parse(\"https://example.com\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"\"));\nassert_eq!(path_segments.next(), None);\n\nlet url = Url::parse(\"data:text/plain,HelloWorld\")?;\nassert!(url.path_segments().is_none());\n\nlet url = Url::parse(\"https://example.com/countries/việt nam\")?;\nlet mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\nassert_eq!(path_segments.next(), Some(\"countries\"));\nassert_eq!(path_segments.next(), Some(\"vi%E1%BB%87t%20nam\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"str::Split","id":"2:43208:2349","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:712":{"id":"0:712","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[103,9],"end":[103,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2904:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[75,0],"end":[75,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","source","type_id","description","cause"],"trait":{"name":"Error","id":"2:2749:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3523-0:741:2435":{"id":"b:2:3523-0:741:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3521:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3525:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:283:917":{"id":"0:283:917","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[21,4],"end":[23,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"resolved_path":{"name":"RangeFrom","id":"2:38979:211","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2690-0:565:1971":{"id":"b:2:2690-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2692:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:700:3337":{"id":"0:700:3337","crate_id":0,"name":"BeforePath","span":{"filename":"src/slicing.rs","begin":[115,4],"end":[115,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:45-0:679:1976":{"id":"0:45-0:679:1976","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[168,0],"end":[168,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::slicing::Position","name":"Position","id":"0:679:1976","glob":false}}},"0:375:1257":{"id":"0:375:1257","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[1304,4],"end":[1311,5]},"visibility":"public","docs":"Return the path for this URL, as a percent-encoded ASCII string.\nFor cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'.\nFor other URLs, this starts with a '/' slash\nand continues with slash-separated path segments.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/api/versions?page=2\")?;\nassert_eq!(url.path(), \"/api/versions\");\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.path(), \"/\");\n\nlet url = Url::parse(\"https://example.com/countries/việt nam\")?;\nassert_eq!(url.path(), \"/countries/vi%E1%BB%87t%20nam\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378:2117":{"id":"0:378:2117","crate_id":0,"name":"query","span":{"filename":"src/lib.rs","begin":[1380,4],"end":[1392,5]},"visibility":"public","docs":"Return this URL’s query string, if any, as a percent-encoded ASCII string.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\nfn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/products?page=2\")?;\nlet query = url.query();\nassert_eq!(query, Some(\"page=2\"));\n\nlet url = Url::parse(\"https://example.com/products\")?;\nlet query = url.query();\nassert!(query.is_none());\n\nlet url = Url::parse(\"https://example.com/?country=español\")?;\nlet query = url.query();\nassert_eq!(query, Some(\"country=espa%C3%B1ol\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-0:670:1974":{"id":"0:44-0:670:1974","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[167,0],"end":[167,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::path_segments::PathSegmentsMut","name":"PathSegmentsMut","id":"0:670:1974","glob":false}}},"b:2:2686-0:527:1970":{"id":"b:2:2686-0:527:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2689:2138"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:621":{"id":"0:621","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31797:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12965:2104":{"id":"2:12965:2104","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12967:29944","str::split_at_mut":"2:12966:29941"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:502:2163":{"id":"0:502:2163","crate_id":0,"name":"Ipv4","span":{"filename":"src/host.rs","begin":[52,4],"end":[52,18]},"visibility":"default","docs":"An IPv4 address.\n`Url::host_str` returns the serialization of this address,\nas four decimal integers separated by `.` dots.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:504:1921"]},"discriminant":null}}},"0:39-0:548:1969":{"id":"0:39-0:548:1969","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,24],"end":[165,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::origin::OpaqueOrigin","name":"OpaqueOrigin","id":"0:548:1969","glob":false}}},"2:13038:35798":{"id":"2:13038:35798","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2696-0:670:1974":{"id":"b:2:2696-0:670:1974","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2666:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2699:137","2:2700:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:394:2454":{"id":"0:394:2454","crate_id":0,"name":"set_path","span":{"filename":"src/lib.rs","begin":[1676,4],"end":[1699,5]},"visibility":"public","docs":"Change this URL’s path.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com\")?;\nurl.set_path(\"api/comments\");\nassert_eq!(url.as_str(), \"https://example.com/api/comments\");\nassert_eq!(url.path(), \"/api/comments\");\n\nlet mut url = Url::parse(\"https://example.com/api\")?;\nurl.set_path(\"data/report.csv\");\nassert_eq!(url.as_str(), \"https://example.com/data/report.csv\");\nassert_eq!(url.path(), \"/data/report.csv\");\n\n// `set_path` percent-encodes the given string if it's not already percent-encoded.\nlet mut url = Url::parse(\"https://example.com\")?;\nurl.set_path(\"api/some comments\");\nassert_eq!(url.as_str(), \"https://example.com/api/some%20comments\");\nassert_eq!(url.path(), \"/api/some%20comments\");\n\n// `set_path` will not double percent-encode the string if it's already percent-encoded.\nlet mut url = Url::parse(\"https://example.com\")?;\nurl.set_path(\"api/some%20comments\");\nassert_eq!(url.as_str(), \"https://example.com/api/some%20comments\");\nassert_eq!(url.path(), \"/api/some%20comments\");\n\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263:3089":{"id":"0:263:3089","crate_id":0,"name":"clear","span":{"filename":"src/path_segments.rs","begin":[92,4],"end":[95,5]},"visibility":"public","docs":"Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.\n\nReturns `&mut Self` so that method calls can be chained.\n\nExample:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .clear().push(\"logout\");\nassert_eq!(url.as_str(), \"https://github.com/logout\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31795:236-0:717:1980":{"id":"a:2:31795:236-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31795:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12972:2731":{"id":"2:12972:2731","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43194:4493","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:437:471":{"id":"0:437:471","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[2694,4],"end":[2696,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"cmp::Ordering","id":"2:30635:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:423":{"id":"0:423","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2638,0],"end":[2644,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:425:137","0:426:1755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:678:781":{"id":"0:678:781","crate_id":0,"name":"fmt","span":{"filename":"src/path_segments.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31852:3541-0:741:2435":{"id":"a:2:31852:3541-0:741:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31852:3541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,9],"end":[52,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2461:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:538:677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:729:3563":{"id":"5:729:3563","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:13048:2350":{"id":"2:13048:2350","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:3807"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31795:236-0:598:1972":{"id":"a:2:31795:236-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31795:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:729:464":{"id":"0:729:464","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[181,9],"end":[181,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:470:2746":{"id":"0:470:2746","crate_id":0,"name":"as_mut_string","span":{"filename":"src/lib.rs","begin":[3025,4],"end":[3027,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:727-0:679:1976":{"id":"b:5:727-0:679:1976","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:3563","5:730:2402","5:731:4289"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41441:4031-0:717:1980":{"id":"a:2:41441:4031-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41441:4031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2696-0:565:1971":{"id":"b:2:2696-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2666:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2699:137","2:2700:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[139,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10070:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:139:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2701-0:548:1969":{"id":"b:2:2701-0:548:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2704:137","2:2705:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:624":{"id":"0:624","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2466:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2909:246-0:598:1972":{"id":"a:2:2909:246-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2909:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:684:3329":{"id":"0:684:3329","crate_id":0,"name":"BeforeUsername","span":{"filename":"src/slicing.rs","begin":[107,4],"end":[107,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:289:917":{"id":"0:289:917","crate_id":0,"name":"index","span":{"filename":"src/slicing.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"resolved_path":{"name":"Range","id":"2:38957:209","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[111,37],"end":[111,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10065:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:562:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:363:2246":{"id":"0:363:2246","crate_id":0,"name":"password","span":{"filename":"src/lib.rs","begin":[1015,4],"end":[1027,5]},"visibility":"public","docs":"Return the password for this URL, if any, as a percent-encoded ASCII string.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms:secret123@example.com\")?;\nassert_eq!(url.password(), Some(\"secret123\"));\n\nlet url = Url::parse(\"ftp://:secret123@example.com\")?;\nassert_eq!(url.password(), Some(\"secret123\"));\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.password(), None);\n\nlet url = Url::parse(\"https://example.com\")?;\nassert_eq!(url.password(), None);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371:2309":{"id":"0:371:2309","crate_id":0,"name":"socket_addrs","span":{"filename":"src/lib.rs","begin":[1253,4],"end":[1279,5]},"visibility":"public","docs":"Resolve a URL’s host and port number to `SocketAddr`.\n\nIf the URL has the default port number of a scheme that is unknown to this library,\n`default_port_number` provides an opportunity to provide the actual port number.\nIn non-example code this should be implemented either simply as `|| None`,\nor by matching on the URL’s `.scheme()`.\n\nIf the host is a domain, it is resolved using the standard library’s DNS support.\n\n# Examples\n\n```no_run\nlet url = url::Url::parse(\"https://example.net/\").unwrap();\nlet addrs = url.socket_addrs(|| None).unwrap();\nstd::net::TcpStream::connect(&*addrs)\n# ;\n```\n\n```\n/// With application-specific known default port numbers\nfn socket_addrs(url: url::Url) -> std::io::Result<Vec<std::net::SocketAddr>> {\n    url.socket_addrs(|| match url.scheme() {\n        \"socks5\" | \"socks5h\" => Some(1080),\n        _ => None,\n    })\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["default_port_number",{"impl_trait":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3149:140","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3019:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7037:263","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddr","id":"2:41256:1963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl Fn() -> Option<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3149:140","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[73,0],"end":[168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:68:2029","0:70:2523"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:713":{"id":"0:713","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[103,15],"end":[103,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:714:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:438":{"id":"0:438","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2700,0],"end":[2705,1]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"2:2503:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:439:1252"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:288:198":{"id":"0:288:198","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[34,4],"end":[34,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"b:2:2686-0:497:1967":{"id":"b:2:2686-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2689:2138"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:380:2119":{"id":"0:380:2119","crate_id":0,"name":"fragment","span":{"filename":"src/lib.rs","begin":[1455,4],"end":[1460,5]},"visibility":"public","docs":"Return this URL’s fragment identifier, if any.\n\nA fragment is the part of the URL after the `#` symbol.\nThe fragment is optional and, if present, contains a fragment identifier\nthat identifies a secondary resource, such as a section heading\nof a document.\n\nIn HTML, the fragment identifier is usually the id attribute of a an element\nthat is scrolled to on load. Browsers typically will not send the fragment portion\nof a URL to the server.\n\n**Note:** the parser did *not* percent-encode this component,\nbut the input may have been percent-encoded already.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/data.csv#row=4\")?;\n\nassert_eq!(url.fragment(), Some(\"row=4\"));\n\nlet url = Url::parse(\"https://example.com/data.csv#cell=4,1-6,2\")?;\n\nassert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:412:2624":{"id":"0:412:2624","crate_id":0,"name":"from_file_path","span":{"filename":"src/lib.rs","begin":[2443,4],"end":[2459,5]},"visibility":"public","docs":"Convert a file name as `std::path::Path` into an URL in the `file` scheme.\n\nThis returns `Err` if the given path is not absolute or,\non Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n\n# Examples\n\nOn Unix-like platforms:\n\n```\n# if cfg!(unix) {\nuse url::Url;\n\n# fn run() -> Result<(), ()> {\nlet url = Url::from_file_path(\"/tmp/foo.txt\")?;\nassert_eq!(url.as_str(), \"file:///tmp/foo.txt\");\n\nlet url = Url::from_file_path(\"../foo.txt\");\nassert!(url.is_err());\n\nlet url = Url::from_file_path(\"https://google.com/\");\nassert!(url.is_err());\n# Ok(())\n# }\n# run().unwrap();\n# }\n```","links":{},"attrs":["#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]","#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"generic":"P"}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2654:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5380:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336:2027":{"id":"0:336:2027","crate_id":0,"name":"syntax_violation_callback","span":{"filename":"src/lib.rs","begin":[251,4],"end":[254,5]},"visibility":"public","docs":"Call the provided function or closure for a non-fatal `SyntaxViolation`\nwhen it occurs during parsing. Note that since the provided function is\n`Fn`, the caller might need to utilize _interior mutability_, such as with\na `RefCell`, to collect the violations.\n\n## Example\n```\nuse std::cell::RefCell;\nuse url::{Url, SyntaxViolation};\n# use url::ParseError;\n# fn run() -> Result<(), url::ParseError> {\nlet violations = RefCell::new(Vec::new());\nlet url = Url::options()\n    .syntax_violation_callback(Some(&|v| violations.borrow_mut().push(v)))\n    .parse(\"https:////example.com\")?;\nassert_eq!(url.as_str(), \"https://example.com/\");\nassert_eq!(violations.into_inner(),\n           vec!(SyntaxViolation::ExpectedDoubleSlash));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["new",{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Fn","id":"2:3149:140","args":{"parenthesized":{"inputs":[{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":null}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:535:1923":{"id":"0:535:1923","crate_id":0,"name":"2","span":{"filename":"src/origin.rs","begin":[58,32],"end":[58,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u16"}}},"0:40-0:527:1970":{"id":"0:40-0:527:1970","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,38],"end":[165,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::origin::Origin","name":"Origin","id":"0:527:1970","glob":false}}},"a:2:2909:246-0:730:1999":{"id":"a:2:2909:246-0:730:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2909:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2411-0:527:1970":{"id":"b:2:2411-0:527:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2405:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2413:1958"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2909:246-0:548:1969":{"id":"a:2:2909:246-0:548:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2909:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2701-0:565:1971":{"id":"b:2:2701-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2704:137","2:2705:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:346:2081":{"id":"0:346:2081","crate_id":0,"name":"join","span":{"filename":"src/lib.rs","begin":[399,4],"end":[401,5]},"visibility":"public","docs":"Parse a string as an URL, with this URL as the base URL.\n\nThe inverse of this is [`make_relative`].\n\nNote: a trailing slash is significant.\nWithout it, the last path component is considered to be a “file” name\nto be removed to get at the “directory” that is used as the base:\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet base = Url::parse(\"https://example.net/a/b.html\")?;\nlet url = base.join(\"c.png\")?;\nassert_eq!(url.as_str(), \"https://example.net/a/c.png\");  // Not /a/b.html/c.png\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = base.join(\"c.png\")?;\nassert_eq!(url.as_str(), \"https://example.net/a/b/c.png\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf the function can not parse an URL from the given string\nwith this URL as the base URL, a [`ParseError`] variant will be returned.\n\n[`ParseError`]: enum.ParseError.html\n[`make_relative`]: #method.make_relative","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:730:1999":{"id":"0:730:1999","crate_id":0,"name":"ParseOptions","span":{"filename":"src/lib.rs","begin":[209,0],"end":[213,1]},"visibility":"public","docs":"Full configuration for the URL parser.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:332","a:2:31852:3541-0:730:1999","a:2:41440:4032-0:730:1999","a:2:41441:4031-0:730:1999","a:2:2909:246-0:730:1999","a:2:31795:236-0:730:1999","a:2:2944:4189-0:730:1999","b:2:2701-0:730:1999","b:2:3523-0:730:1999","b:2:2686-0:730:1999","b:2:2690-0:730:1999","b:2:2411-0:730:1999","b:2:2696-0:730:1999","b:2:2414-0:730:1999","b:5:727-0:730:1999","0:737","0:735"]}}},"0:563":{"id":"0:563","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10070:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:564:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[26,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:38925:3288","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeTo","id":"2:38997:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:285:198","0:286:917"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:501:1921":{"id":"0:501:1921","crate_id":0,"name":"0","span":{"filename":"src/host.rs","begin":[47,11],"end":[47,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"S"}}},"a:2:41440:4032-0:548:1969":{"id":"a:2:41440:4032-0:548:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41440:4032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:609:3046":{"id":"0:609:3046","crate_id":0,"name":"FileWithHostAndWindowsDrive","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:2416:28250":{"id":"2:2416:28250","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:29918":{"id":"2:12954:29918","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12311:1799"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2411-0:598:1972":{"id":"b:2:2411-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2405:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2413:1958"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:627:464":{"id":"0:627:464","crate_id":0,"name":"clone","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:422:2683":{"id":"0:422:2683","crate_id":0,"name":"from_str","span":{"filename":"src/lib.rs","begin":[2633,4],"end":[2635,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2414-0:730:1999":{"id":"b:2:2414-0:730:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2408:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2416:28250"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2696-0:598:1972":{"id":"b:2:2696-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2666:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2699:137","2:2700:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:617:3054":{"id":"0:617:3054","crate_id":0,"name":"TabOrNewlineIgnored","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13067:29252":{"id":"2:13067:29252","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3523-0:497:1967":{"id":"b:2:3523-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3521:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3525:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2414-0:527:1970":{"id":"b:2:2414-0:527:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2408:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2416:28250"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:704:3339":{"id":"0:704:3339","crate_id":0,"name":"BeforeQuery","span":{"filename":"src/slicing.rs","begin":[117,4],"end":[117,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41441:4031-0:741:2435":{"id":"a:2:41441:4031-0:741:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41441:4031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12945:35785":{"id":"2:12945:35785","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:334":{"id":"2:12953:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12954:29918","`u8`":"1:12311:1799"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12971:8766":{"id":"2:12971:8766","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12294:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43184:4494","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12952:35788":{"id":"2:12952:35788","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:508":{"id":"0:508","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:510:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12977:34257":{"id":"2:12977:34257","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43500:4486","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2689:2138":{"id":"2:2689:2138","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2663:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:555:677":{"id":"0:555:677","crate_id":0,"name":"eq","span":{"filename":"src/origin.rs","begin":[111,13],"end":[111,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:2137":{"id":"5:5617:2137","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:3544","`String`":"5:7616:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:3544","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2699:137":{"id":"2:2699:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:2686-0:730:1999":{"id":"b:2:2686-0:730:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2689:2138"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12951:2371":{"id":"2:12951:2371","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12181:2744"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:421:136":{"id":"0:421:136","crate_id":0,"name":"Err","span":{"filename":"src/lib.rs","begin":[2630,4],"end":[2630,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2414-0:598:1972":{"id":"b:2:2414-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2408:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2416:28250"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:670:1974":{"id":"0:670:1974","crate_id":0,"name":"PathSegmentsMut","span":{"filename":"src/path_segments.rs","begin":[37,0],"end":[42,1]},"visibility":"public","docs":"Exposes methods to manipulate the path of an URL that is not cannot-be-base.\n\nThe path always starts with a `/` slash, and is made of slash-separated segments.\nThere is always at least one segment (which may be the empty string).\n\nExamples:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"mailto:me@example.com\")?;\nassert!(url.path_segments_mut().is_err());\n\nlet mut url = Url::parse(\"http://example.net/foo/index.html\")?;\nurl.path_segments_mut().map_err(|_| \"cannot be base\")?\n    .pop().push(\"img\").push(\"2/100%.png\");\nassert_eq!(url.as_str(), \"http://example.net/foo/img/2%2F100%25.png\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:261","a:2:31852:3541-0:670:1974","a:2:41440:4032-0:670:1974","a:2:41441:4031-0:670:1974","a:2:2909:246-0:670:1974","a:2:31795:236-0:670:1974","a:2:2944:4189-0:670:1974","b:2:2701-0:670:1974","b:2:3523-0:670:1974","b:2:2686-0:670:1974","b:2:2690-0:670:1974","b:2:2411-0:670:1974","b:2:2696-0:670:1974","b:2:2414-0:670:1974","0:258","0:676"]}}},"0:692:3333":{"id":"0:692:3333","crate_id":0,"name":"BeforeHost","span":{"filename":"src/slicing.rs","begin":[111,4],"end":[111,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12987:2519":{"id":"2:12987:2519","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41318:190","prim@char":"1:12294:458","self::pattern":"2:12633:3807"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13066:29861":{"id":"2:13066:29861","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39280:16236","Self::is_ascii":"2:13065:29249"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39280:16236","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[61,0],"end":[108,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:102:2957","0:104:2985","0:105:2987","0:106:2992"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:265:2931":{"id":"0:265:2931","crate_id":0,"name":"pop","span":{"filename":"src/path_segments.rs","begin":[140,4],"end":[151,5]},"visibility":"public","docs":"Remove the last segment of this URL’s path.\n\nIf the path only has one segment, make it empty such that `url.path() == \"/\"`.\n\nReturns `&mut Self` so that method calls can be chained.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2701-0:717:1980":{"id":"b:2:2701-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2704:137","2:2705:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:337:2029":{"id":"0:337:2029","crate_id":0,"name":"parse","span":{"filename":"src/lib.rs","begin":[257,4],"end":[266,5]},"visibility":"public","docs":"Parse an URL string with the configuration so far.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"crate::ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:605:3042":{"id":"0:605:3042","crate_id":0,"name":"ExpectedDoubleSlash","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:5601:36498":{"id":"5:5601:36498","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:3544","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:3544","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:3088":{"id":"5:5620:3088","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13069:29254"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2055":{"id":"0:0:2055","crate_id":0,"name":"url","span":{"filename":"src/lib.rs","begin":[9,0],"end":[3044,1]},"visibility":"public","docs":"\nrust-url is an implementation of the [URL Standard](http://url.spec.whatwg.org/)\nfor the [Rust](http://rust-lang.org/) programming language.\n\n\n# URL parsing and data structures\n\nFirst, URL parsing may fail for various reasons and therefore returns a `Result`.\n\n```\nuse url::{Url, ParseError};\n\nassert!(Url::parse(\"http://[:::1]\") == Err(ParseError::InvalidIpv6Address))\n```\n\nLet’s parse a valid URL and look at its components.\n\n```\nuse url::{Url, Host, Position};\n# use url::ParseError;\n# fn run() -> Result<(), ParseError> {\nlet issue_list_url = Url::parse(\n    \"https://github.com/rust-lang/rust/issues?labels=E-easy&state=open\"\n)?;\n\n\nassert!(issue_list_url.scheme() == \"https\");\nassert!(issue_list_url.username() == \"\");\nassert!(issue_list_url.password() == None);\nassert!(issue_list_url.host_str() == Some(\"github.com\"));\nassert!(issue_list_url.host() == Some(Host::Domain(\"github.com\")));\nassert!(issue_list_url.port() == None);\nassert!(issue_list_url.path() == \"/rust-lang/rust/issues\");\nassert!(issue_list_url.path_segments().map(|c| c.collect::<Vec<_>>()) ==\n        Some(vec![\"rust-lang\", \"rust\", \"issues\"]));\nassert!(issue_list_url.query() == Some(\"labels=E-easy&state=open\"));\nassert!(&issue_list_url[Position::BeforePath..] == \"/rust-lang/rust/issues?labels=E-easy&state=open\");\nassert!(issue_list_url.fragment() == None);\nassert!(!issue_list_url.cannot_be_a_base());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nSome URLs are said to be *cannot-be-a-base*:\nthey don’t have a username, password, host, or port,\nand their \"path\" is an arbitrary string rather than slash-separated segments:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet data_url = Url::parse(\"data:text/plain,Hello?World#\")?;\n\nassert!(data_url.cannot_be_a_base());\nassert!(data_url.scheme() == \"data\");\nassert!(data_url.path() == \"text/plain,Hello\");\nassert!(data_url.path_segments().is_none());\nassert!(data_url.query() == Some(\"World\"));\nassert!(data_url.fragment() == Some(\"\"));\n# Ok(())\n# }\n# run().unwrap();\n```\n\n## Serde\n\nEnable the `serde` feature to include `Deserialize` and `Serialize` implementations for `url::Url`.\n\n# Base URL\n\nMany contexts allow URL *references* that can be relative to a *base URL*:\n\n```html\n<link rel=\"stylesheet\" href=\"../main.css\">\n```\n\nSince parsed URLs are absolute, giving a base is required for parsing relative URLs:\n\n```\nuse url::{Url, ParseError};\n\nassert!(Url::parse(\"../main.css\") == Err(ParseError::RelativeUrlWithoutBase))\n```\n\nUse the `join` method on an `Url` to use it as a base URL:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet this_document = Url::parse(\"http://servo.github.io/rust-url/url/index.html\")?;\nlet css_url = this_document.join(\"../main.css\")?;\nassert_eq!(css_url.as_str(), \"http://servo.github.io/rust-url/main.css\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Feature: `serde`\n\nIf you enable the `serde` feature, [`Url`](struct.Url.html) will implement\n[`serde::Serialize`](https://docs.rs/serde/1/serde/trait.Serialize.html) and\n[`serde::Deserialize`](https://docs.rs/serde/1/serde/trait.Deserialize.html).\nSee [serde documentation](https://serde.rs) for more information.\n\n```toml\nurl = { version = \"2\", features = [\"serde\"] }\n```\n\n# Feature: `debugger_visualizer`\n\nIf you enable the `debugger_visualizer` feature, the `url` crate will include\na [natvis file](https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects)\nfor [Visual Studio](https://www.visualstudio.com/) that allows you to view\n[`Url`](struct.Url.html) objects in the debugger.\n\nThis feature requires Rust 1.71 or later.\n\n```toml\nurl = { version = \"2\", features = [\"debugger_visualizer\"] }\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/url/2.5.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1945","0:37-0:497:1967","0:39-0:548:1969","0:40-0:527:1970","0:42-0:565:1971","0:43-0:598:1972","0:44-0:670:1974","0:45-0:679:1976","0:46-20:89:1977","0:717:1980","0:730:1999","0:741:2435"],"is_stripped":false}}},"b:2:2696-0:497:1967":{"id":"b:2:2696-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2666:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2699:137","2:2700:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:405:2541":{"id":"0:405:2541","crate_id":0,"name":"set_ip_host","span":{"filename":"src/lib.rs","begin":[2067,4],"end":[2078,5]},"visibility":"public","docs":"Change this URL’s host to the given IP address.\n\nIf this URL is cannot-be-a-base, do nothing and return `Err`.\n\nCompared to `Url::set_host`, this skips the host parser.\n\n# Examples\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"http://example.com\")?;\nurl.set_ip_host(\"127.0.0.1\".parse().unwrap());\nassert_eq!(url.host_str(), Some(\"127.0.0.1\"));\nassert_eq!(url.as_str(), \"http://127.0.0.1/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot change URL's from mailto(cannot-be-base) to ip:\n\n```rust\nuse url::{Url, ParseError};\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.com\")?;\nlet result = url.set_ip_host(\"127.0.0.1\".parse().unwrap());\n\nassert_eq!(url.as_str(), \"mailto:rms@example.com\");\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```\n","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["address",{"resolved_path":{"name":"IpAddr","id":"2:41056:169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:358:2167":{"id":"0:358:2167","crate_id":0,"name":"is_special","span":{"filename":"src/lib.rs","begin":[851,4],"end":[854,5]},"visibility":"public","docs":"Return whether the URL is special (has a special scheme)\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nassert!(Url::parse(\"http:///tmp/foo\")?.is_special());\nassert!(Url::parse(\"file:///tmp/foo\")?.is_special());\nassert!(!Url::parse(\"moz:///tmp/foo\")?.is_special());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:2063":{"id":"2:12970:2063","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12294:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43178:3064","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:682:3328":{"id":"0:682:3328","crate_id":0,"name":"AfterScheme","span":{"filename":"src/slicing.rs","begin":[106,4],"end":[106,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:287":{"id":"0:287","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[33,0],"end":[38,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:38925:3288","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:38957:209","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:288:198","0:289:917"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:68:2029":{"id":"0:68:2029","crate_id":0,"name":"parse","span":{"filename":"src/host.rs","begin":[77,4],"end":[122,5]},"visibility":"public","docs":"Parse a host: either an IPv6 address in [] square brackets, or a domain.\n\n<https://url.spec.whatwg.org/#host-parsing>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399:2485":{"id":"0:399:2485","crate_id":0,"name":"set_port","span":{"filename":"src/lib.rs","begin":[1789,4],"end":[1799,5]},"visibility":"public","docs":"Change this URL’s port number.\n\nNote that default port numbers are not reflected in the serialization.\n\nIf this URL is cannot-be-a-base, does not have a host, or has the `file` scheme;\ndo nothing and return `Err`.\n\n# Examples\n\n```\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"ssh://example.net:2048/\")?;\n\nurl.set_port(Some(4096)).map_err(|_| \"cannot be base\")?;\nassert_eq!(url.as_str(), \"ssh://example.net:4096/\");\n\nurl.set_port(None).map_err(|_| \"cannot be base\")?;\nassert_eq!(url.as_str(), \"ssh://example.net/\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\nKnown default port numbers are not reflected:\n\n```rust\nuse url::Url;\n# use std::error::Error;\n\n# fn run() -> Result<(), Box<dyn Error>> {\nlet mut url = Url::parse(\"https://example.org/\")?;\n\nurl.set_port(Some(443)).map_err(|_| \"cannot be base\")?;\nassert!(url.port().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nCannot set port for cannot-be-a-base URLs:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"mailto:rms@example.net\")?;\n\nlet result = url.set_port(Some(80));\nassert!(result.is_err());\n\nlet result = url.set_port(None);\nassert!(result.is_err());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[allow(clippy::result_unit_err)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["port",{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3523-0:548:1969":{"id":"b:2:3523-0:548:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3521:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3525:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2944:4189-0:717:1980":{"id":"a:2:2944:4189-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:2944:4189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12975:10780":{"id":"2:12975:10780","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43462:4502","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2700:1757":{"id":"2:2700:1757","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:708:3341":{"id":"0:708:3341","crate_id":0,"name":"BeforeFragment","span":{"filename":"src/slicing.rs","begin":[119,4],"end":[119,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2701-0:730:1999":{"id":"b:2:2701-0:730:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2704:137","2:2705:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:741:2435":{"id":"0:741:2435","crate_id":0,"name":"UrlQuery","span":{"filename":"src/lib.rs","begin":[3009,0],"end":[3012,1]},"visibility":"public","docs":"Implementation detail of `Url::query_pairs_mut`. Typically not used directly.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:31852:3541-0:741:2435","a:2:41440:4032-0:741:2435","a:2:41441:4031-0:741:2435","a:2:2909:246-0:741:2435","a:2:31795:236-0:741:2435","a:2:2944:4189-0:741:2435","b:2:2701-0:741:2435","b:2:3523-0:741:2435","b:2:2686-0:741:2435","b:2:2690-0:741:2435","b:2:2411-0:741:2435","b:2:2696-0:741:2435","b:2:2414-0:741:2435","0:468","0:745","0:473"]}}},"0:522:1252":{"id":"0:522:1252","crate_id":0,"name":"partial_cmp","span":{"filename":"src/host.rs","begin":[41,32],"end":[41,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30635:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:781":{"id":"0:139:781","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[140,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2690-0:670:1974":{"id":"b:2:2690-0:670:1974","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2692:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3523-0:565:1971":{"id":"b:2:3523-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3521:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3525:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41440:4032-0:497:1967":{"id":"a:2:41440:4032-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41440:4032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41440:4032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:601:3038":{"id":"0:601:3038","crate_id":0,"name":"C0SpaceIgnored","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2944:4189-0:741:2435":{"id":"a:2:2944:4189-0:741:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:2944:4189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2909:246-0:717:1980":{"id":"a:2:2909:246-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2909:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2909:246-0:670:1974":{"id":"a:2:2909:246-0:670:1974","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2909:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2690-0:598:1972":{"id":"b:2:2690-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2692:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12944:2105":{"id":"2:12944:2105","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12948:35787":{"id":"2:12948:35787","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12946:35786"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12961:29917":{"id":"2:12961:29917","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12981:2159":{"id":"2:12981:2159","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:3807"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2686-0:548:1969":{"id":"b:2:2686-0:548:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2689:2138"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:356:1968":{"id":"0:356:1968","crate_id":0,"name":"origin","span":{"filename":"src/lib.rs","begin":[811,4],"end":[813,5]},"visibility":"public","docs":"Return the origin of this URL (<https://url.spec.whatwg.org/#origin>)\n\nNote: this returns an opaque origin for `file:` URLs, which causes\n`url.origin() != url.origin()`.\n\n# Examples\n\nURL with `ftp` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://example.com/foo\")?;\nassert_eq!(url.origin(),\n           Origin::Tuple(\"ftp\".into(),\n                         Host::Domain(\"example.com\".into()),\n                         21));\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with `blob` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"blob:https://example.com/foo\")?;\nassert_eq!(url.origin(),\n           Origin::Tuple(\"https\".into(),\n                         Host::Domain(\"example.com\".into()),\n                         443));\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with `file` scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert!(!url.origin().is_tuple());\n\nlet other_url = Url::parse(\"file:///tmp/foo\")?;\nassert!(url.origin() != other_url.origin());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nURL with other scheme:\n\n```rust\nuse url::{Host, Origin, Url};\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"foo:bar\")?;\nassert!(!url.origin().is_tuple());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942":{"id":"2:12942","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12943:974","2:12944:2105","2:12945:35785","2:12946:35786","2:12948:35787","2:12951:2371","2:12952:35788","2:12953:334","2:12954:29918","2:12955:3168","2:12957:10635","2:12959:29916","2:12961:29917","2:12963:35789","2:12964:35790","2:12965:2104","2:12966:29941","2:12967:29944","2:12968:29945","2:12970:2063","2:12971:8766","2:12972:2731","2:12973:34199","2:12974:34201","2:12975:10780","2:12976:35791","2:12977:34257","2:12978:2926","2:12981:2159","2:12984:2517","2:12987:2519","2:12991:2101","2:12995:2110","2:12998:29947","2:13001:2914","2:13004:35792","2:13007:35793","2:13010:29950","2:13013:29952","2:13016:29954","2:13019:29955","2:13022:2151","2:13025:35794","2:13028:35795","2:13031:35796","2:13034:3404","2:13036:35797","2:13038:35798","2:13040:35799","2:13041:35800","2:13042:3066","2:13045:3155","2:13048:2350","2:13051:29956","2:13054:35801","2:13057:35802","2:13060:35803","2:13063:2029","2:13065:29249","2:13066:29861","2:13067:29252","2:13068:29253","2:13069:29254","2:13070:29864","2:13071:29865","2:13072:29866","2:13073:35804","2:13075:10892","2:13076:35805"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2414-0:670:1974":{"id":"b:2:2414-0:670:1974","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2408:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2416:28250"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41440:4032-0:679:1976":{"id":"a:2:41440:4032-0:679:1976","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41440:4032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12943:974":{"id":"2:12943:974","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12294:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:735":{"id":"0:735","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[207,9],"end":[207,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2904:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:347:2096":{"id":"0:347:2096","crate_id":0,"name":"make_relative","span":{"filename":"src/lib.rs","begin":[444,4],"end":[533,5]},"visibility":"public","docs":"Creates a relative URL if possible, with this URL as the base URL.\n\nThis is the inverse of [`join`].\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet base = Url::parse(\"https://example.net/a/b.html\")?;\nlet url = Url::parse(\"https://example.net/a/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = Url::parse(\"https://example.net/a/b/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b/\")?;\nlet url = Url::parse(\"https://example.net/a/d/c.png\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"../d/c.png\"));\n\nlet base = Url::parse(\"https://example.net/a/b.html?c=d\")?;\nlet url = Url::parse(\"https://example.net/a/b.html?e=f\")?;\nlet relative = base.make_relative(&url);\nassert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"?e=f\"));\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nIf this URL can't be a base for the given URL, `None` is returned.\nThis is for example the case if the scheme, host or port are not the same.\n\n[`join`]: #method.join","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["url",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5619:29251":{"id":"5:5619:29251","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13068:29253"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:542:850":{"id":"0:542:850","crate_id":0,"name":"hash","span":{"filename":"src/origin.rs","begin":[52,24],"end":[52,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10289:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:698:3336":{"id":"0:698:3336","crate_id":0,"name":"AfterPort","span":{"filename":"src/slicing.rs","begin":[114,4],"end":[114,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2944:4189-0:598:1972":{"id":"a:2:2944:4189-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:2944:4189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2686-0:679:1976":{"id":"b:2:2686-0:679:1976","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2689:2138"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:739:464":{"id":"0:739:464","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[207,15],"end":[207,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:432:781":{"id":"0:432:781","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2664,4],"end":[2677,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2701-0:741:2435":{"id":"b:2:2701-0:741:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2704:137","2:2705:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5616:36501":{"id":"5:5616:36501","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282:198":{"id":"0:282:198","crate_id":0,"name":"Output","span":{"filename":"src/slicing.rs","begin":[20,4],"end":[20,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"0:106:2992":{"id":"0:106:2992","crate_id":0,"name":"unicode_serialization","span":{"filename":"src/origin.rs","begin":[89,4],"end":[107,5]},"visibility":"public","docs":"<https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:4595":{"id":"5:5618:4595","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13010:29950":{"id":"2:13010:29950","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:3807","str::rsplitn":"2:13013:29952"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43312:4510","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2686-0:741:2435":{"id":"b:2:2686-0:741:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2689:2138"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:694:3334":{"id":"0:694:3334","crate_id":0,"name":"AfterHost","span":{"filename":"src/slicing.rs","begin":[112,4],"end":[112,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41441:4031-0:679:1976":{"id":"a:2:41441:4031-0:679:1976","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41441:4031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2411-0:717:1980":{"id":"b:2:2411-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2405:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2413:1958"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41441:4031-0:527:1970":{"id":"a:2:41441:4031-0:527:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41441:4031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:536":{"id":"0:536","crate_id":0,"name":null,"span":{"filename":"src/origin.rs","begin":[52,9],"end":[52,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31797:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12959:29916":{"id":"2:12959:29916","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13007:35793":{"id":"2:13007:35793","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12633:3807","str::split":"2:12995:2110","prim@char":"1:12294:458","str::split_terminator":"2:13004:35792"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43276:4511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:4481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:468":{"id":"0:468","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3024,0],"end":[3036,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Target","id":"20:50:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:470:2746","0:471:2688","0:472:2748"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13028:35795":{"id":"2:13028:35795","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12633:3807","`DoubleEndedIterator`":"2:8007:130","prim@char":"1:12294:458","str::rmatch_indices":"2:13031:35796"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43358:4504","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:429":{"id":"0:429","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2655,0],"end":[2659,1]},"visibility":"default","docs":"String conversion.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:430:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13041:35800":{"id":"2:13041:35800","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:568:3019":{"id":"0:568:3019","crate_id":0,"name":"IdnaError","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:379:2369":{"id":"0:379:2369","crate_id":0,"name":"query_pairs","span":{"filename":"src/lib.rs","begin":[1419,4],"end":[1421,5]},"visibility":"public","docs":"Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return an iterator of (key, value) pairs.\n\n# Examples\n\n```rust\nuse std::borrow::Cow;\n\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://example.com/products?page=2&sort=desc\")?;\nlet mut pairs = url.query_pairs();\n\nassert_eq!(pairs.count(), 2);\n\nassert_eq!(pairs.next(), Some((Cow::Borrowed(\"page\"), Cow::Borrowed(\"2\"))));\nassert_eq!(pairs.next(), Some((Cow::Borrowed(\"sort\"), Cow::Borrowed(\"desc\"))));\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"form_urlencoded::Parse","id":"20:91:2370","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:2227":{"id":"0:360:2227","crate_id":0,"name":"authority","span":{"filename":"src/lib.rs","begin":[921,4],"end":[928,5]},"visibility":"public","docs":"Return the authority of this URL as an ASCII string.\n\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\nIPv6 addresses are given between `[` and `]` brackets.\nPorts are omitted if they match the well known port of a special URL.\n\nUsername and password are percent-encoded.\n\nSee also the `has_authority` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert_eq!(url.authority(), \"\");\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert_eq!(url.authority(), \"\");\nlet url = Url::parse(\"https://user:password@example.com/tmp/foo\")?;\nassert_eq!(url.authority(), \"user:password@example.com\");\nlet url = Url::parse(\"irc://àlex.рф.example.com:6667/foo\")?;\nassert_eq!(url.authority(), \"%C3%A0lex.%D1%80%D1%84.example.com:6667\");\nlet url = Url::parse(\"http://àlex.рф.example.com:80/foo\")?;\nassert_eq!(url.authority(), \"xn--lex-8ka.xn--p1ai.example.com\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31852:3541-0:730:1999":{"id":"a:2:31852:3541-0:730:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31852:3541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12991:2101":{"id":"2:12991:2101","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41318:190","prim@char":"1:12294:458","self::pattern":"2:12633:3807"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:4481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:513:781":{"id":"0:513:781","crate_id":0,"name":"fmt","span":{"filename":"src/host.rs","begin":[41,16],"end":[41,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2686-0:717:1980":{"id":"b:2:2686-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2689:2138"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:728":{"id":"0:728","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[181,9],"end":[181,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:729:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41441:4031-0:548:1969":{"id":"a:2:41441:4031-0:548:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41441:4031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:434":{"id":"0:434","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2684,0],"end":[2689,1]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2461:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:435:677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:629":{"id":"0:629","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10065:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:630:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[62,0],"end":[71,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"items":["0:66:2402"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:588:677":{"id":"0:588:677","crate_id":0,"name":"eq","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41440:4032-0:670:1974":{"id":"a:2:41440:4032-0:670:1974","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41440:4032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:564:781":{"id":"0:564:781","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13034:3404":{"id":"2:13034:3404","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:603:3040":{"id":"0:603:3040","crate_id":0,"name":"EmbeddedCredentials","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:433":{"id":"0:433","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2681,0],"end":[2681,18]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2466:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:622":{"id":"0:622","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2461:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:623:677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:619:3056":{"id":"0:619:3056","crate_id":0,"name":"UnencodedAtSign","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:31795:236-0:527:1970":{"id":"a:2:31795:236-0:527:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31795:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2411-0:497:1967":{"id":"b:2:2411-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2405:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2413:1958"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70:2523":{"id":"0:70:2523","crate_id":0,"name":"parse_opaque","span":{"filename":"src/host.rs","begin":[125,4],"end":[162,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:525:850":{"id":"0:525:850","crate_id":0,"name":"hash","span":{"filename":"src/host.rs","begin":[41,44],"end":[41,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10289:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:436":{"id":"0:436","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2692,0],"end":[2697,1]},"visibility":"default","docs":"URLs compare like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2497:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:437:471"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:545:464":{"id":"0:545:464","crate_id":0,"name":"clone","span":{"filename":"src/origin.rs","begin":[52,30],"end":[52,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:440":{"id":"0:440","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2708,0],"end":[2716,1]},"visibility":"default","docs":"URLs hash like their serialization.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10281:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:441:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31795:236-0:497:1967":{"id":"a:2:31795:236-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31795:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31795:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:520":{"id":"0:520","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,32],"end":[41,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"2:2503:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"2:2503:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:522:1252"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2701-0:598:1972":{"id":"b:2:2701-0:598:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2704:137","2:2705:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31852:3541-0:717:1980":{"id":"a:2:31852:3541-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31852:3541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2413:1958":{"id":"2:2413:1958","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:528:2978":{"id":"0:528:2978","crate_id":0,"name":"Opaque","span":{"filename":"src/origin.rs","begin":[55,4],"end":[55,24]},"visibility":"default","docs":"A globally unique identifier","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:530:1921"]},"discriminant":null}}},"b:2:2690-0:527:1970":{"id":"b:2:2690-0:527:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2692:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3523-0:670:1974":{"id":"b:2:3523-0:670:1974","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3521:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3525:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:676":{"id":"0:676","crate_id":0,"name":null,"span":{"filename":"src/path_segments.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10065:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:678:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[12,0],"end":[17,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:38925:3288","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeFull","id":"2:38942:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:279:198","0:280:917"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258":{"id":"0:258","crate_id":0,"name":null,"span":{"filename":"src/path_segments.rs","begin":[65,0],"end":[70,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3145:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:260:650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2690-0:497:1967":{"id":"b:2:2690-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2692:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:706:3340":{"id":"0:706:3340","crate_id":0,"name":"AfterQuery","span":{"filename":"src/slicing.rs","begin":[118,4],"end":[118,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2690-0:717:1980":{"id":"b:2:2690-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2663:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2692:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:566:2514":{"id":"0:566:2514","crate_id":0,"name":"EmptyHost","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:361:2060":{"id":"0:361:2060","crate_id":0,"name":"cannot_be_a_base","span":{"filename":"src/lib.rs","begin":[956,4],"end":[958,5]},"visibility":"public","docs":"Return whether this URL is a cannot-be-a-base URL,\nmeaning that parsing a relative URL string with this URL as the base will return an error.\n\nThis is the case if the scheme and `:` delimiter are not followed by a `/` slash,\nas is typically the case of `data:` and `mailto:` URLs.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert!(!url.cannot_be_a_base());\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert!(!url.cannot_be_a_base());\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert!(url.cannot_be_a_base());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:587":{"id":"0:587","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2461:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:588:677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:499:2166":{"id":"0:499:2166","crate_id":0,"name":"Domain","span":{"filename":"src/host.rs","begin":[47,4],"end":[47,13]},"visibility":"default","docs":"A DNS domain name, as '.' dot-separated labels.\nNon-ASCII labels are encoded in punycode per IDNA if this is the host of\na special URL, or percent encoded for non-special URLs. Hosts for\nnon-special URLs are also called opaque hosts.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:501:1921"]},"discriminant":null}}},"a:2:41440:4032-0:717:1980":{"id":"a:2:41440:4032-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41440:4032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13022:2151":{"id":"2:13022:2151","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12633:3807","`DoubleEndedIterator`":"2:8007:130","prim@char":"1:12294:458","str::rmatches":"2:13025:35794"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43412:4506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31795:236-0:741:2435":{"id":"a:2:31795:236-0:741:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31795:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2696-0:741:2435":{"id":"b:2:2696-0:741:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2670:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2666:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UrlQuery","id":"0:741:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2699:137","2:2700:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:688:3331":{"id":"0:688:3331","crate_id":0,"name":"BeforePassword","span":{"filename":"src/slicing.rs","begin":[109,4],"end":[109,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:531:2963":{"id":"0:531:2963","crate_id":0,"name":"Tuple","span":{"filename":"src/origin.rs","begin":[58,4],"end":[58,36]},"visibility":"default","docs":"Consists of the URL's scheme, host and port","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:533:1921","0:534:1922","0:535:1923"]},"discriminant":null}}},"0:471:2688":{"id":"0:471:2688","crate_id":0,"name":"finish","span":{"filename":"src/lib.rs","begin":[3029,4],"end":[3033,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31852:3541-0:497:1967":{"id":"a:2:31852:3541-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:31852:3541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31852:3541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13019:29955":{"id":"2:13019:29955","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:4481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:594":{"id":"0:594","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10065:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:595:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:727-0:730:1999":{"id":"b:5:727-0:730:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2427:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:729:3563","5:730:2402","5:731:4289"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12984:2517":{"id":"2:12984:2517","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:3807"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:4481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41440:4032-0:730:1999":{"id":"a:2:41440:4032-0:730:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41440:4032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseOptions","id":"0:730:1999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:548:1969":{"id":"0:548:1969","crate_id":0,"name":"OpaqueOrigin","span":{"filename":"src/origin.rs","begin":[112,0],"end":[112,31]},"visibility":"public","docs":"Opaque identifier for URLs that have file or other schemes","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:31852:3541-0:548:1969","a:2:41440:4032-0:548:1969","a:2:41441:4031-0:548:1969","a:2:2909:246-0:548:1969","a:2:31795:236-0:548:1969","a:2:2944:4189-0:548:1969","b:2:2701-0:548:1969","b:2:3523-0:548:1969","b:2:2686-0:548:1969","b:2:2690-0:548:1969","b:2:2411-0:548:1969","b:2:2696-0:548:1969","b:2:2414-0:548:1969","b:5:727-0:548:1969","0:561","0:554","0:556","0:551","0:553","0:559"]}}},"0:79:677":{"id":"0:79:677","crate_id":0,"name":"eq","span":{"filename":"src/host.rs","begin":[188,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:574:2883":{"id":"0:574:2883","crate_id":0,"name":"InvalidIpv6Address","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12946:35786":{"id":"2:12946:35786","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:517":{"id":"0:517","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[41,27],"end":[41,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"2:2497:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2497:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:519:471"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41440:4032-0:565:1971":{"id":"a:2:41440:4032-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41440:4032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13072:29866":{"id":"2:13072:29866","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:40963"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:596":{"id":"0:596","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SyntaxViolation","id":"0:598:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:597:3014"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41441:4031-0:565:1971":{"id":"a:2:41441:4031-0:565:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41441:4031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:565:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:611:3048":{"id":"0:611:3048","crate_id":0,"name":"NonUrlCodePoint","span":{"filename":"src/parser.rs","begin":[122,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12967:29944":{"id":"2:12967:29944","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12968:29945"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:357:2097":{"id":"0:357:2097","crate_id":0,"name":"scheme","span":{"filename":"src/lib.rs","begin":[831,4],"end":[833,5]},"visibility":"public","docs":"Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"file:///tmp/foo\")?;\nassert_eq!(url.scheme(), \"file\");\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13031:35796":{"id":"2:13031:35796","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12633:3807","`DoubleEndedIterator`":"2:8007:130","prim@char":"1:12294:458","str::match_indices":"2:13028:35795"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43376:4505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:3070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:4481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/host.rs","begin":[184,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2461:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2461:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:79:677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31852:3541-0:548:1969":{"id":"a:2:31852:3541-0:548:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31852:3541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OpaqueOrigin","id":"0:548:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:43-0:598:1972":{"id":"0:43-0:598:1972","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[166,36],"end":[166,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::parser::SyntaxViolation","name":"SyntaxViolation","id":"0:598:1972","glob":false}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/slicing.rs","begin":[19,0],"end":[24,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:38925:3288","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeFrom","id":"2:38979:211","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Position","id":"0:679:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:282:198","0:283:917"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:385:2398":{"id":"0:385:2398","crate_id":0,"name":"set_fragment","span":{"filename":"src/lib.rs","begin":[1492,4],"end":[1507,5]},"visibility":"public","docs":"Change this URL’s fragment identifier.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet mut url = Url::parse(\"https://example.com/data.csv\")?;\nassert_eq!(url.as_str(), \"https://example.com/data.csv\");\nurl.set_fragment(Some(\"cell=4,1-6,2\"));\nassert_eq!(url.as_str(), \"https://example.com/data.csv#cell=4,1-6,2\");\nassert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n\nurl.set_fragment(None);\nassert_eq!(url.as_str(), \"https://example.com/data.csv\");\nassert!(url.fragment().is_none());\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fragment",{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5850-0:717:1980":{"id":"b:5:5850-0:717:1980","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10070:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5848:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Url","id":"0:717:1980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5852:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12973:34199":{"id":"2:12973:34199","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12974:34201"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43482:4489","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:582:2512":{"id":"0:582:2512","crate_id":0,"name":"SetHostOnCannotBeABaseUrl","span":{"filename":"src/parser.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:102:2957":{"id":"0:102:2957","crate_id":0,"name":"new_opaque","span":{"filename":"src/origin.rs","begin":[63,4],"end":[66,5]},"visibility":"public","docs":"Creates a new opaque origin that is only equal to itself.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Origin","id":"0:527:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:351:336":{"id":"0:351:336","crate_id":0,"name":"as_str","span":{"filename":"src/lib.rs","begin":[581,4],"end":[583,5]},"visibility":"public","docs":"Return the serialization of this URL.\n\nThis is fast since that serialization is already stored in the `Url` struct.\n\n# Examples\n\n```rust\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url_str = \"https://example.net/\";\nlet url = Url::parse(url_str)?;\nassert_eq!(url.as_str(), url_str);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41441:4031-0:497:1967":{"id":"a:2:41441:4031-0:497:1967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41441:4031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41441:4031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Host","id":"0:497:1967","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:365:2162":{"id":"0:365:2162","crate_id":0,"name":"host_str","span":{"filename":"src/lib.rs","begin":[1087,4],"end":[1093,5]},"visibility":"public","docs":"Return the string representation of the host (domain or IP address) for this URL, if any.\n\nNon-ASCII domains are punycode-encoded per IDNA if this is the host\nof a special URL, or percent encoded for non-special URLs.\nIPv6 addresses are given between `[` and `]` brackets.\n\nCannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\ndon’t have a host.\n\nSee also the `host` method.\n\n# Examples\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet url = Url::parse(\"https://127.0.0.1/index.html\")?;\nassert_eq!(url.host_str(), Some(\"127.0.0.1\"));\n\nlet url = Url::parse(\"ftp://rms@example.com\")?;\nassert_eq!(url.host_str(), Some(\"example.com\"));\n\nlet url = Url::parse(\"unix:/run/foo.socket\")?;\nassert_eq!(url.host_str(), None);\n\nlet url = Url::parse(\"data:text/plain,Stuff\")?;\nassert_eq!(url.host_str(), None);\n# Ok(())\n# }\n# run().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31795:236-0:670:1974":{"id":"a:2:31795:236-0:670:1974","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31795:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathSegmentsMut","id":"0:670:1974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"2:44122:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:13522:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:25511:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:2303:22664":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:6650:8082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:10155:5683":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:870:5316":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:4641:6741":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:42288:3565":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:14079:6061":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:43276:4511":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"20:89:1977":{"crate_id":20,"path":["form_urlencoded","EncodingOverride"],"kind":"type_alias"},"17:14475:6142":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:12633:3807":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:13424:5928":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:43769:8772":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:40538:8705":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:7944:8953":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12225:9787":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:44246:8801":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:14788:6217":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:5382:7785":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:261:9709":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:43794:8773":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:6519:8006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:12318:1370":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11788:9765":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:8472:34674":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:45984:8907":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:6872:6922":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"25:752:5293":{"crate_id":25,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"2:39836:8674":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:38997:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:8144:8957":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:38925:3288":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:4913:6749":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6442:6847":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:9120:8974":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:7727:6717":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:4856:6747":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:8564:1963":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13946:6041":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:7511:3651":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:22604:34209":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:6976:6931":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:2998:6721":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:2749:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:5450:4484":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:15596:6489":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:7602:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11812:9769":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:11562:29036":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:9128:3648":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:40156:5556":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:31765:2698":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:40087:8689":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:5290:7753":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:7512:16278":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:38929:3623":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:22589:34216":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:1547:7419":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:1568:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:613:37248":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:4607:3747":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"21:36:1957":{"crate_id":21,"path":["percent_encoding","utf8_percent_encode"],"kind":"function"},"2:22553:8441":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:37577:3614":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:10938:28410":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:7098:6949":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10092:23624":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:10721:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:16121:6624":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:4818:11017":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:5477:7843":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:7456:4242":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:43657:8768":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:14723:6166":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:3247:29492":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:3808:9905":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:10399:4493":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:2788:6694":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:14025:6053":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:1518:7219":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12808:5840":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:5024:11014":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:1794:1311":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"23:542:27847":{"crate_id":23,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"17:13473:5938":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:6880:8150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:9179:11023":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:2236:8372":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:14311:6111":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:6263:6837":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"21:34:1956":{"crate_id":21,"path":["percent_encoding","percent_encode"],"kind":"function"},"23:319:10965":{"crate_id":23,"path":["unicode_bidi","private","Sealed"],"kind":"trait"},"2:7932:16283":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:14235:6102":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"14:40:5892":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:12056:5780":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:2548:6683":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:14341:6116":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:15778:6540":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"23:8:27848":{"crate_id":23,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"17:13252:5895":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:4503:5335":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:14868:6279":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:22497:8434":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:11269:8998":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:15608:6492":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:2878:6698":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:6532:8012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:44126:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:2951:4191":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:4858:3741":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:437:5634":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11269:23653":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:14912:6310":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:7629:8393":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:6160:22663":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:4412:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:6504:6854":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:14994:6322":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:39280:16236":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:922:9885":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:8511:4502":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:40131:8693":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:5781:6704":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:41524:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:42548:8736":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:11051:9733":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"23:432:5504":{"crate_id":23,"path":["unicode_bidi","level","Level"],"kind":"struct"},"6:5064:7686":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:465:7312":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:8288:8353":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10905:9730":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:6214:5401":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:13375:5921":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:1565:7429":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:1590:7221":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:12300:23745":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:11579:9999":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:3264:9719":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:6393:5406":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:45257:8819":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:15289:6387":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:2457:10962":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6588:6858":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:16138:6626":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:14147:6071":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"21:50:1955":{"crate_id":21,"path":["percent_encoding","percent_decode"],"kind":"function"},"2:44011:16388":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:2738:124":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:872:9709":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"18:531:5540":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:41138:8716":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:8161:8959":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"11:2326:9891":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:2289:35745":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:5700:6703":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:6532:6856":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:1764:4671":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:5472:7841":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:6936:5353":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"25:966:5298":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"16:5927:6782":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:14051:6057":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:5306:7760":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:2338:6667":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:14516:6147":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:39037:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:7485:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:10866:8985":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:1596:7222":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:7962:9962":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:43043:9937":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:10284:5688":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:2175:23679":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:2196:129":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:43023:9936":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:15760:6534":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:15410:6423":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:21505:11029":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:7681:33704":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:1559:7427":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6026:6798":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"14:214:7163":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5565:7873":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:37522:3613":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"14:7:9491":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"14:220:7165":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:4596:4231":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:6610:3687":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:10947:28419":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:4932:7621":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:12449:4488":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:3155:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:1686:7512":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:14977:6320":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"23:482:9670":{"crate_id":23,"path":["unicode_bidi","utf16","BidiInfo"],"kind":"struct"},"1:8582:9974":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:46317:8918":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:4352:6733":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"25:669:9480":{"crate_id":25,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"2:2790:3730":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:9107:8973":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:14933:6315":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:12277:28426":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:0:979":{"crate_id":6,"path":["libc"],"kind":"module"},"1:4270:10798":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11016:9731":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:15116:6346":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:2738:4584":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:12597:5821":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"11:800:5329":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6342:37234":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13399:5925":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:43194:4493":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:538:7357":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:33424:3608":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5112:7689":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:10039:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:3530:4559":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:3030:8375":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:7604:6716":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:517:7345":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10661:9726":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:39017:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:5686:6700":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:4469:4551":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:951:9890":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4979:7643":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4800:7540":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:14246:6104":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:8449:4570":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"23:655:9668":{"crate_id":23,"path":["unicode_bidi","InitialInfoExt"],"kind":"struct"},"17:11715:5738":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:2677:5381":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:5643:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:44207:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:9781:23617":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13899:6036":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:46151:8910":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:45189:8811":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:12593:2682":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:22276:11111":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:43154:4501":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:43783:16183":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:15624:6496":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:4756:8230":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"5:2309:8378":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:22531:34205":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:12264:9790":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:15992:6598":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:2992:3621":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:10915:37238":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:1517:7399":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:43590:16182":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12454:5813":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:15445:6431":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:7037:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:46352:8921":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"24:259:37312":{"crate_id":24,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"25:449:5283":{"crate_id":25,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"25:636:10759":{"crate_id":25,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"16:5769:6764":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:6940:6929":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:9136:9976":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:8265:8347":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:1939:3725":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:45869:8872":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4891:7601":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:4091:3739":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"22:161:4445":{"crate_id":22,"path":["idna","uts46","Config"],"kind":"struct"},"1:893:5329":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"19:0:1248":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:37687:3616":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:35646:3612":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:9868:3566":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:11755:5744":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:7648:9876":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:43376:4505":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:3742:5311":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:6946:5354":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:6689:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:3398:5345":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"9:53:22558":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:10638:4593":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"11:1066:22620":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:31852:3541":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:8050:9506":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:5037:6753":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:7356:4242":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:5831:6769":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13089:5858":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:1663:7502":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:43178:3064":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:43135:9940":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12557:5703":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:42278:8726":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:4743:6743":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:5817:6766":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:5571:9525":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:7978:3543":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5653:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"18:573:5535":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:3336:4594":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:5949:8405":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:8116:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:16176:6640":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:15521:6476":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:1891:5329":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:7987:4532":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:723:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:7880:5415":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:40553:5376":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:9371:4551":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:15126:6347":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:45736:8867":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:41382:4416":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:7083:5359":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:1602:7223":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:10084:3575":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:4939:3740":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:7321:4028":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:11620:9009":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:41821:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:10435:5378":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"23:611:9682":{"crate_id":23,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"2:1863:16305":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:1585:7443":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:6546:5329":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"23:306:27833":{"crate_id":23,"path":["unicode_bidi","TextSource"],"kind":"trait"},"18:113:10771":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:2670:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:3121:125":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"23:696:9675":{"crate_id":23,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"11:687:4416":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:1546:9883":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"20:28:3661":{"crate_id":20,"path":["form_urlencoded","ParseIntoOwned"],"kind":"struct"},"17:16069:6612":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"23:620:16343":{"crate_id":23,"path":["unicode_bidi","Direction"],"kind":"enum"},"1:503:5326":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:6480:6701":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:12308:875":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:45157:8809":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11898:5748":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:6948:6709":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:11142:5719":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"25:386:5299":{"crate_id":25,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"17:14356:6120":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12695:9801":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:3630:5329":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"5:1527:7220":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:7566:16335":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5536:7859":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:43093:9938":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:6471:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:5103:4020":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:11800:3591":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:3475:6725":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:45531:8842":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:10890:4416":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11634:5732":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:10251:5687":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:15944:5891":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:6543:6857":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:671:9497":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:11044:5422":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:46306:8917":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:6120:23554":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:10929:4570":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:5415:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:15957:6568":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:44136:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"11:328:7217":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:21931:11030":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"25:0:4440":{"crate_id":25,"path":["tinyvec"],"kind":"module"},"1:10683:4532":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:39920:3771":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:150:5299":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:9248:116":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11524:9752":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"11:2423:4242":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5236:7725":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5352:7771":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:6895:6923":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:43125:8423":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:43184:4494":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:12076:9779":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:7888:7030":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:7464:4242":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:5014:7661":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:15023:6328":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:12304:716":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:12494:5816":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:15678:6517":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:12301:1760":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:542:6657":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:689:5562":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:21496:10965":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:9398:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:30266:4675":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:6755:5311":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7686:9877":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:8093:7068":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"14:0:3419":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:5031:7669":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"18:765:27805":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:403:9710":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:5466:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:45647:8848":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:8195:4709":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:5361:7775":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:3019:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:30228:4673":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:3329:6724":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:14414:6128":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:45309:8822":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:5521:9958":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:15400:6420":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:15836:6550":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:43330:4509":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:12317:1859":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:3636:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13832:6025":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:12238:9788":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:3596:29672":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:8777:2715":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:8247:8344":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:2708:6690":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:8073:7067":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:1054:9891":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:45907:8874":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:43954:8790":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:21783:11034":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:10044:23623":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:12289:5787":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:15569:6477":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:41515:4242":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:30292:34289":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:6658:5374":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:13046:5854":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:8282:8352":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"18:598:37250":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:6775:8122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:5924:3684":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:41278:3585":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:43705:8770":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:7364:8387":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:39817:16233":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:41078:2863":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:6494:6853":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:43106:8422":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:33770:3611":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:9737:23601":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:40055:8684":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"15:288:10775":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:8833:3649":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:45848:8871":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"18:754:5576":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:6317:9833":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:15190:6366":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:6721:8107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:9807:23607":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"12:0:3418":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6758:6895":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:10156:8718":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:5250:7731":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10710:9727":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:3842:6729":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:645:10894":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:1877:8396":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:8271:8348":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:6793:3699":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:10534:37239":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:5219:7716":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:2936:22692":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:3587:1959":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:1446:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:9144:4242":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:2103:9905":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:1485:7386":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:7561:8308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"11:434:10788":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:6849:6921":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:14271:6107":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:14284:6109":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:16223:6648":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:41374:3648":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:45630:8847":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11367:5703":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:31779:4229":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:11026:23636":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:7348:8206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:5914:6781":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13292:5906":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:1699:7516":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:5005:4600":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:5212:7715":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11189:5707":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:6664:8084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:2231:7225":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:9536:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"18:481:5533":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:2663:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:8173:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:42045:3569":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:40515:8703":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:45449:8838":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:33114:3605":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:14177:6090":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:10324:4420":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:7314:8187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:10711:10965":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12399:5806":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:13581:5970":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:46363:8922":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"24:198:10760":{"crate_id":24,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"2:31786:8525":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:9167:8976":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:3278:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:12306:887":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:6466:6850":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:3899:6730":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:5296:7756":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:10518:5381":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"18:507:5535":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12647:9797":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:4718:6742":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:8615:9526":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11799:9766":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:2987:3620":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:2466:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:15368:6412":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:4424:9520":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:3038:35639":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13766:6014":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5742:6760":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:2458:6679":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:22638:8455":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12792:5648":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:597:5680":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"11:1917:7223":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:10533:5386":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:44000:8794":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:39957:8421":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:4836:781":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:6665:23557":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:2955:3560":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:4047:2708":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:10082:3574":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:3778:6727":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:41399:4028":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:12293:1149":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:22234:10965":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:4058:4551":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:42954:9935":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:4885:7599":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:8351:8367":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:12683:9800":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:2323:16296":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:2612:6686":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:2438:6678":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:12312:1781":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"11:123:5301":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:1535:7410":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:12362:5804":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:39849:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:10982:23635":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:6597:8057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:9150:8975":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:45110:8802":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"11:2562:7230":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:5756:9806":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:2527:8379":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:578:7378":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:11186:8791":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:14436:6139":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:5107:6755":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:12150:5785":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:7593:3756":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"11:787:7220":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:3362:3627":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:6456:23556":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"18:718:5568":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:219:4655":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11567:9755":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:9077:9975":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:2748:6692":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:9916:23620":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:10020:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:39757:8667":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:1639:7485":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:12165:9504":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:10759:5719":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"23:705:9689":{"crate_id":23,"path":["unicode_bidi","Utf8IndexLenIter"],"kind":"struct"},"10:0:3416":{"crate_id":10,"path":["adler"],"kind":"module"},"17:2203:9715":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"11:1883:3648":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:21400:8425":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:41782:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:15313:6394":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:3597:9721":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:774:7219":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:2355:6669":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12824:23626":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:6650:3697":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:21819:35180":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11214:9740":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:11883:9015":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"26:0:4441":{"crate_id":26,"path":["tinyvec_macros"],"kind":"module"},"1:9209:11024":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:9194:11022":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:39791:16232":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:6802:6907":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:2277:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"11:2498:22616":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:43482:4489":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"11:430:10787":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:513:9711":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:2970:3600":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12213:9786":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:12310:862":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:4291:10799":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:2307:651":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"25:534:9655":{"crate_id":25,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"11:710:9883":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:5020:7664":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:12305:732":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:8259:2698":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13173:5876":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:10958:9506":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:3149:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:46401:8929":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:40121:8692":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:45338:8824":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:2660:6688":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:7575:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4965:7635":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:45609:8846":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:532:7354":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"25:948:27903":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"10:36:7233":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:3021:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:42059:3577":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:8197:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11688:5736":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:9541:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:21807:8426":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:523:7348":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"11:1007:6955":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:1107:9894":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:5671:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:2660:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:11466:5425":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:6706:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:362:9943":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:4940:6750":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:11324:9743":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:2478:6680":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:8300:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"7:0:1849":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:5268:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:6746:8112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:7006:9845":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:7928:16284":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:39892:4493":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:6657:8083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:10876:8957":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"11:351:10784":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:41441:4031":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:7616:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:557:9944":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:39810:8670":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:545:7360":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:12300:1672":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:1557:9884":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:7605:5341":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:6606:6866":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:44234:4651":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"3:0:487":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:21507:8425":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"18:589:5546":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:570:7373":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:5863:23552":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:5969:3696":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11042:9732":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:5776:5406":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:8504:2349":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:2497:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:14587:6157":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:41587:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:15:2490":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:14449:6140":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:43626:8764":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"24:319:9659":{"crate_id":24,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"16:5307:6756":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:45324:8823":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:2503:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:3379:4590":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:3844:3589":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:22360:8427":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"18:643:5535":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:8817:3647":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:6306:5405":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:15418:6424":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:12654:4481":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:880:7220":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"21:0:1954":{"crate_id":21,"path":["percent_encoding"],"kind":"module"},"1:10284:9987":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"11:2304:6955":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:6394:11121":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:45774:8869":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:38881:3631":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"11:2383:3648":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:2041:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"11:2542:7227":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:11716:5427":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:621:3727":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:12309:881":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:45886:8873":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:7014:23559":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:13797:6021":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:5586:114":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:11063:9734":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:11221:8997":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"5:4270:4551":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:12201:9785":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:9984:23622":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:43054:8745":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:4870:7592":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:732:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:30662:4204":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:15463:6434":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:10076:3576":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:4099:3738":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:44223:8800":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"22:120:123":{"crate_id":22,"path":["idna","punycode","Decoder"],"kind":"struct"},"1:11239:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:7339:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13785:6019":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:1607:7224":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:1526:7404":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:8317:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:2854:6697":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:46061:8908":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:39930:3770":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:11177:9924":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:8007:130":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:3377:4589":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:826:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:10866:3648":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"18:698:5563":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"9:482:22539":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"25:1034:27904":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"23:197:27853":{"crate_id":23,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"1:2286:4560":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:6379:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12516:9793":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"11:875:9889":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11443:5724":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5445:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:1480:4416":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:5665:7919":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:4161:10985":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7813:7018":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:12319:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"24:276:27887":{"crate_id":24,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"17:11419:5719":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:102:7213":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:3810:6728":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:8015:10897":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11730:5740":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:6915:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13814:6024":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:3272:7223":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:15655:6504":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:40522:8704":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:5995:6792":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:4967:34689":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:29835:10968":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:32272:3599":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:15010:6323":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:39719:34229":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:31797:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:45396:8835":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"11:1887:4242":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:40315:8700":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:1726:5311":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:11739:3590":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:6813:6908":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:13308:5910":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:2633:3659":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:2089:4585":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:31761:9931":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:5897:3683":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"22:127:9690":{"crate_id":22,"path":["idna","uts46","StringTableSlice"],"kind":"struct"},"16:6962:6710":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:15249:6377":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:42780:8742":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:939:9888":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:6131:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:43817:4513":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:8596:8964":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:14038:6055":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:7830:5680":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:5555:9524":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:3473:9720":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:11674:5735":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:6620:6868":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:12639:3070":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:7633:37228":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"23:527:9679":{"crate_id":23,"path":["unicode_bidi","utf16","Utf16CharIndexIter"],"kind":"struct"},"16:8118:7071":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:15426:6426":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:6768:8121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:2572:6684":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:1757:650":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:21388:11031":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:46180:8911":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:5320:7765":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:42038:3568":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:5006:6752":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"9:178:22607":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:7516:8284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5200:7708":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:1342:9891":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:3368:3629":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12422:5808":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:7429:8235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12443:5812":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:4182:4646":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:12307:869":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"18:563:5545":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:10080:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:45499:8840":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:15281:6386":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:1577:9904":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:8428:4417":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:22:796":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:45367:8826":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:4342:4228":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"23:496:9672":{"crate_id":23,"path":["unicode_bidi","utf16","ParagraphBidiInfo"],"kind":"struct"},"17:15333:6401":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:6614:3688":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:11676:9926":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:8202:6720":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:12292:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:6821:8138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:5122:7690":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12408:5807":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4811:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"23:632:5525":{"crate_id":23,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"1:5448:129":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:1072:9496":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:4240:4551":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"11:2369:9901":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:3028:35649":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:4159:110":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:39094:8533":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13024:23628":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11605:5728":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:41901:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4916:7617":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:4787:7531":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:4343:9519":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:5160:7693":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:7452:8242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:945:9889":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:6848:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5329:7768":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:12371:5847":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:12867:120":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:5260:7737":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:10847:9996":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"8:0:3414":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:12149:16345":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:6478:7985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:3341:3625":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"14:160:9491":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:21251:35174":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:4971:7638":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:2758:8382":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:3605:4562":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:9434:8984":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:7052:9846":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"11:2554:37216":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:4153:10983":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:6412:23555":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:9671:23602":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:4752:8226":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:7258:5412":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:10622:37241":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:4549:4230":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:32458:3598":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:21329:11032":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:11493:9749":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:43835:4514":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:43226:4508":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:1692:7513":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7428:23561":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13509:5943":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:45225:8817":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:830:5313":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:5617:7899":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:10900:8958":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:43640:8767":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:43507:4498":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:46106:8909":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:3241:28864":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"0:0:2055":{"crate_id":0,"path":["url"],"kind":"module"},"16:2508:6681":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:15646:6502":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:9416:8983":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:10441:28625":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:3793:4585":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:553:7365":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11128:5673":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:4531:6737":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:13485:5393":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:3779:1964":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11242:9742":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13235:5892":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:4771:6744":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13437:5929":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15748:6532":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:5052:7677":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:21295:35170":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:7389:8233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:15635:6501":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:7769:7016":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:15266:6384":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:3334:4593":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:42540:4423":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:9723:34675":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8225:4585":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:42595:8741":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:3381:35045":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:7799:6706":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:21929:10965":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:5415:6758":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:7741:6718":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:43950:8789":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:10919:128":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"11:883:9890":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:14111:6065":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:5407:1218":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:14325:6114":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:11606:9008":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"21:17:2997":{"crate_id":21,"path":["percent_encoding","AsciiSet"],"kind":"struct"},"2:12659:4480":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6698:8098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:10877:9729":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:11779:3589":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:45563:8844":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:31723:3658":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:2944:4189":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:14189:6092":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:11153:9728":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:7840:9513":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6927:6927":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"11:1582:9897":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:40:4654":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:296:3544":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:5708:8136":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:21309:35182":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"23:642:9664":{"crate_id":23,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"2:12707:16176":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:39854:3752":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:42305:34290":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:943:3648":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:32937:3606":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:43732:8771":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:15822:6547":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"9:447:22540":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:7330:8199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:6335:9841":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:16050:5905":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:3103:3630":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:6505:8005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:12298:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:11856:9014":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:40017:8678":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:14298:6110":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:1680:7509":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:8306:8356":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:46454:8932":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:11293:23654":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:39107:5490":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"23:449:137":{"crate_id":23,"path":["unicode_bidi","level","Error"],"kind":"enum"},"2:45580:8845":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:4862:3744":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:6609:8062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:14876:6280":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:2838:6696":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:6779:3698":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:44185:8797":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:7684:4597":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:15582:6483":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:396:5305":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:8139:9966":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:9363:3686":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:12584:9728":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"15:0:3420":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:0:545":{"crate_id":2,"path":["core"],"kind":"module"},"18:659:9703":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"15:394:22655":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:10329:4421":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:43208:2349":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12433:5810":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:7168:8979":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4837:7568":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:7473:6806":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:8844:3650":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"14:165:22627":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:32996:3604":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:3615:4565":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:533:5395":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:13455:5937":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"11:1923:7224":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11256:5709":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:9083:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:43258:4512":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:8209:9968":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:12316:943":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:40078:8688":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:3134:3618":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:4262:10797":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:40305:4573":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:0:3421":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:5134:7691":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:31853:4192":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:13959:6044":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:12314:1793":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12993:23627":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:11314:9512":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:15342:6402":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:39708:8662":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11841:9773":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:3669:5584":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:10072:3569":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:1593:7448":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"18:635:5558":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12089:5782":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"11:2403:4416":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:6353:6839":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"22:70:10765":{"crate_id":22,"path":["idna","uts46","Mapper"],"kind":"struct"},"5:5848:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:5244:7729":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:1064:5311":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:281:5311":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:45204:8812":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:9282:1976":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:7386:5322":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:11875:9015":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:22016:11114":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:8294:8354":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:11467:5726":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12621:5822":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:38957:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:8253:8345":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:14599:6164":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:13774:6016":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:40046:8683":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:8301:7086":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:43430:4507":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"11:837:9885":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:6441:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:5002:7655":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"11:700:4242":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:5222:9957":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:14986:6321":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:16198:6642":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:10424:114":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:2038:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:41316:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:1653:7496":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:4707:3749":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:7639:9498":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:12372:8753":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:11621:5730":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:42565:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:12080:5430":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12127:5784":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:16151:6632":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:42342:3565":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:15376:6415":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:1578:4242":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:5546:7865":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:5711:11018":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"11:844:10910":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12671:9799":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:11154:8972":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:9094:8972":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:46337:8920":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:4959:7633":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:13723:6003":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:10871:8987":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"18:735:27804":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:38845:3634":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:15214:6371":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:13465:5391":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13922:6040":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11075:5703":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:1678:4551":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:3469:4598":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:13485:5941":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:7420:4242":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:16093:6617":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:10018:23603":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:6338:9961":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:13344:5917":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:16165:6635":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:41056:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:10289:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:12245:9249":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"25:43:27900":{"crate_id":25,"path":["tinyvec","array","Array"],"kind":"trait"},"16:5846:6771":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:6678:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:13298:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:22203:16295":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:14091:6062":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12485:23747":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:6034:3680":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:7366:8215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:5918:5329":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:914:9883":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:9858:23618":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:80:10767":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:5283:7751":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:11709:9927":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"16:6079:6659":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"25:879:27902":{"crate_id":25,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"2:2909:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:7744:3675":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:5102:7688":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8461:4571":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:7406:35684":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:640:9947":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:43033:8420":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:40037:8681":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:15168:6360":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:14131:6066":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2960:3602":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:10065:120":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:43976:131":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:45548:8843":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:7306:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:45707:8866":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:14855:6272":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:4976:6751":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:8303:2313":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:21297:35176":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:4560:6738":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"24:266:5493":{"crate_id":24,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"16:2902:22691":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:15769:6538":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:15273:6385":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:16249:6652":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:8155:7077":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:39692:4499":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:41244:3592":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"7:31:22526":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11574:7225":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:42052:3576":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:40329:8701":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:8528:3583":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"18:538:5543":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:7111:6952":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:6441:7971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:10915:2349":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:39865:16335":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:22148:34988":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:5266:7740":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:7965:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7306:37232":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:39776:4499":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:1887:9954":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:8517:3588":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"18:623:37247":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:2445:10956":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:37632:3615":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:2405:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:14372:6121":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:7580:7009":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:7698:5345":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:12313:1787":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:4985:7645":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:8341:8365":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12929:5847":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10828:37240":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:8481:4572":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:4502:6736":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:10635:4591":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"10:44:7234":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:31772:9932":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:13497:5942":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:2427:113":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:39768:4500":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10720:37244":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:12294:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:43804:8777":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:39950:4601":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:40170:8696":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:21778:10965":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:4310:3648":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"23:424:5501":{"crate_id":23,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"24:301:5497":{"crate_id":24,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"2:40180:8697":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:11645:9011":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:1824:9951":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:6542:8019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11102:9737":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:6413:11122":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:9289:9983":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:13986:6049":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12189:9784":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:12295:1820":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:1574:3648":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:8200:4708":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:4824:7558":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:7537:3751":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"20:0:1945":{"crate_id":20,"path":["form_urlencoded"],"kind":"module"},"23:667:9670":{"crate_id":23,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"17:14503:6146":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:726:10969":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:43926:8783":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:2636:6687":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:497:7328":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:4498:9521":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:43500:4486":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6714:8106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:10282:9988":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"6:479:7320":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:5508:1672":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"2:39698:8661":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:2374:6675":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:42359:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12768:23604":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:6278:9815":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:8226:23565":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:4075:5329":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:45417:8836":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:41256:1963":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:15324:6398":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:4773:16226":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:6055:16581":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:8328:8361":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:22520:8438":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:7695:7014":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12107:5719":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:39057:3624":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:6738:8111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:41451:4418":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10818:9728":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:33055:3603":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:2279:9955":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:2904:118":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:11163:4509":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:6653:8411":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:21263:35174":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:1671:7503":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:11573:9005":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:14463:6141":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:4424:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10997:5700":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:5385:5683":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:256:9708":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"11:364:5303":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:13553:5960":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"11:2151:9892":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:31795:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:11647:5733":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:559:7368":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:5489:7846":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:588:10891":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:22662:10982":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:39902:3757":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"5:3246:7222":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:7553:3754":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"0:717:1980":{"crate_id":0,"path":["url","Url"],"kind":"struct"},"16:4062:6732":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6524:8007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:4299:8402":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:2982:3619":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:5214:3680":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"13:0:3412":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:10612:9725":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:6231:6832":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:42587:8740":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:3044:3610":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:8498:4493":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:11061:5424":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:45271:8820":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:8259:8346":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:15473:6439":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:10185:5685":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:2503:1960":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:7618:7010":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:21278:35179":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:2431:10952":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12030:9776":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:7376:5329":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:4742:3737":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13844:6027":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:46431:8931":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:22150:16295":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"2:41548:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13363:5918":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:6722:3691":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:15039:6331":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:15301:6393":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:12328:5794":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:3284:4591":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:15814:6544":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"23:457:9664":{"crate_id":23,"path":["unicode_bidi","utf16","InitialInfo"],"kind":"struct"},"5:1171:35648":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:7460:10795":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8189:128":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"22:170:3033":{"crate_id":22,"path":["idna","uts46","Errors"],"kind":"struct"},"16:6047:9808":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:6673:4242":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:40027:8680":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11915:23721":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:5640:9522":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:5075:6754":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5390:7790":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:11392:9747":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:11376:7290":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:10769:37243":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:8739:3645":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:41940:3681":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:30635:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:2684:6689":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:3251:35689":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"15:327:22649":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:6417:7955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13753:6012":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:38942:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12863:5843":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:41094:2864":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:40069:8687":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:3034:35640":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:4802:6745":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"11:2569:3651":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:14968:6316":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:14545:6150":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11497:9750":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"13:226:7212":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:832:9896":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:46280:8915":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5436:7817":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:11595:5727":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:2592:6685":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:8425:3652":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"22:155:4446":{"crate_id":22,"path":["idna","uts46","Idna"],"kind":"struct"},"2:10074:3568":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:11178:28421":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:7396:8388":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:16269:5927":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:4240:10796":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:3286:4592":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:10958:4488":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:2728:6691":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:3499:4551":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:14752:6186":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:43930:8784":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:22466:8429":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:9669:5419":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:2472:850":{"crate_id":1,"path":["std","hash"],"kind":"module"},"17:15206:6369":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"9:357:22555":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:11167:8973":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13855:6028":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:41507:4416":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:21280:35177":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:1862:9953":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:7910:23564":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"24:228:27873":{"crate_id":24,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"1:3946:3591":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:39880:3753":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12707:9802":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:4147:9917":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6066:6802":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:8619:8215":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:4754:8228":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"15:306:10779":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:15701:6518":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8134:5627":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:10501:5380":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:1809:674":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:11149:4510":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:22189:11120":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:43312:4510":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8428:4597":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:41704:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:10671:37237":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:1585:5345":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"20:44:2434":{"crate_id":20,"path":["form_urlencoded","Serializer"],"kind":"struct"},"16:5960:6789":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"22:0:2750":{"crate_id":22,"path":["idna"],"kind":"module"},"2:42799:8744":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:7395:16285":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:3873:5345":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"9:238:3645":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:43516:4499":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:5769:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:6560:6702":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:12464:23746":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"21:28:2865":{"crate_id":21,"path":["percent_encoding","CONTROLS"],"kind":"constant"},"1:414:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:608:9702":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:4629:3748":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:31796:3540":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:45140:8806":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:45353:8825":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:5423:7807":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:10137:23600":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8298:9213":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:2657:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:43005:8418":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:6729:8108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:860:9805":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:7559:7008":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:41442:4014":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"11:1051:9892":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:3244:29490":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:1191:10794":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:45478:8839":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"11:2443:5329":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:12949:5792":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:15456:6432":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:6290:5391":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11115:9738":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13674:5978":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:6409:7953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"23:520:9677":{"crate_id":23,"path":["unicode_bidi","utf16","Utf16IndexLenIter"],"kind":"struct"},"6:4992:7648":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:46378:8923":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7132:6954":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:9230:3685":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:11743:5741":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12318:5792":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:10021:1959":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"18:670:9707":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:2595:4581":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:4424:6734":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:10981:28420":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:4278:10996":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:43938:8786":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:5033:11015":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:43462:4502":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:43412:4506":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:39977:9933":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:9496:4760":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:11313:5716":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:46326:8919":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"22:133:37251":{"crate_id":22,"path":["idna","uts46","Mapping"],"kind":"enum"},"1:10998:8974":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:9728:34817":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:5181:7696":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:45242:8818":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:41390:4242":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:44198:9941":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:39986:4572":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:6725:3692":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:3184:3622":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:2528:6682":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:7546:8301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"23:511:9675":{"crate_id":23,"path":["unicode_bidi","utf16","Paragraph"],"kind":"struct"},"2:46209:8912":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:5191:7703":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:16235:6651":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"21:74:3559":{"crate_id":21,"path":["percent_encoding","PercentEncode"],"kind":"struct"},"2:4201:16209":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:4041:3733":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:7509:9868":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11877:5746":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6648:6870":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:45292:8821":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:5588:7880":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:8188:9881":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:1356:9496":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"11:856:9888":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5347:6757":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:5758:4551":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:5783:8952":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:4830:6746":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"25:470:5287":{"crate_id":25,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"2:22060:11115":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:6433:6846":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12572:5719":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:11547:5626":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:22136:11119":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:9886:23619":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:4485:5367":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6634:6707":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:1155:10793":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:5370:7781":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:4946:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12724:23625":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:15799:6543":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10573:37236":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"14:31:9491":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:928:10910":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:3426:4578":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:8006:8330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:23111:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"20:99:3668":{"crate_id":20,"path":["form_urlencoded","ByteSerialize"],"kind":"struct"},"5:3027:3563":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8151:8958":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:1207:9713":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:15931:5877":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:41626:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"25:728:5283":{"crate_id":25,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"16:2768:6693":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:13015:5810":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:4:1231":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:14012:6052":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:14529:6148":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:22248:11110":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"23:0:4438":{"crate_id":23,"path":["unicode_bidi"],"kind":"module"},"2:46416:8930":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:3433:3633":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:41862:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:22631:8453":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:1087:37215":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:14066:6060":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:14489:6143":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:5598:7885":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:473:7317":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11853:9774":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:22281:11109":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"5:6159:4551":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:1490:7388":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:356:9942":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:491:7325":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:491:5534":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:21382:11028":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:15434:6427":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13211:5891":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:5174:7694":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:4569:3722":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:7397:37231":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4924:7619":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:4540:5368":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:8571:8963":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:8491:4573":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:859:4242":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:44144:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:7537:8298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12900:5846":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:22545:8440":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:45434:8837":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"24:0:4439":{"crate_id":24,"path":["unicode_normalization"],"kind":"module"},"9:424:22542":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:3356:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6991:37230":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:45172:8810":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:15222:6373":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:5376:7782":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:15176:6363":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:1465:3648":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:5400:5684":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:13064:5857":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:43525:4500":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:5677:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:3239:3648":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:6098:23553":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:4421:9500":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:5662:4551":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:8590:3588":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10419:5692":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:12261:33700":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:10439:5693":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:3306:7224":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:6491:7994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:32644:3601":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:15102:6345":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:15616:6495":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:6002:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:10533:9975":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:42380:3567":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:849:4416":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:40571:8708":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:11773:5826":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:6592:5311":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:5380:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:1952:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"11:2352:9892":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:13594:5971":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:7396:16286":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:637:9945":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:11108:9923":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:1707:7520":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:8029:8342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:1885:4760":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:4268:9918":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:4105:3737":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:5047:11016":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:481:5394":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:5146:7692":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"11:1025:9891":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:46493:8947":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:45125:8805":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:16105:6619":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:2282:5363":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:43014:8419":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:1311:6955":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:9358:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:7467:8247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:9390:3695":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:7347:4653":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:7967:8954":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:14575:5810":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:10068:23606":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:6756:8119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:564:7370":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:1886:8399":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:11070:4508":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:1581:5329":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:2452:471":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"6:4909:7613":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:10576:5420":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:46297:8916":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"11:1910:7222":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:4439:5335":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:909:9896":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11702:5737":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:13272:5905":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:22481:8430":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:40563:8706":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:485:7323":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:41499:3648":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:13146:5868":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:12335:8750":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:586:7382":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:14212:6101":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"20:50:248":{"crate_id":20,"path":["form_urlencoded","Target"],"kind":"trait"},"2:43472:4503":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:4495:4229":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:8029:10898":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:1496:4242":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:8434:16282":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:5528:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:15720:6523":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"18:651:5535":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:15197:6368":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:44177:9516":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:45662:8849":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:7428:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:6913:5343":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:7446:8240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:1628:7477":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:41459:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:6427:9844":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"18:706:4482":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:1830:5345":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"24:312:5500":{"crate_id":24,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"11:1896:5345":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:5581:7878":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:43115:9939":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:41665:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:4916:3745":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:5890:3682":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:22569:34215":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7539:6713":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:3521:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"23:681:9672":{"crate_id":23,"path":["unicode_bidi","ParagraphBidiInfo"],"kind":"struct"},"1:1826:9952":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"11:1566:22621":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:6788:8129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:22098:11116":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:5277:7748":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:2418:6677":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:43942:8787":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:2234:9718":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:45819:8870":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:9243:9977":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:8012:8332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12278:9791":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10317:5689":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:4150:4416":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:5835:8403":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:867:9708":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:11865:9775":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:673:3648":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:22651:8456":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"13:109:37218":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:11651:9012":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:7076:11026":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:12297:1269":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:12266:10899":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:11661:5734":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:11764:5745":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:8762:3646":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:15734:6525":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:0:3423":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7755:6708":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:2197:5326":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:11868:28918":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"22:29:10762":{"crate_id":22,"path":["idna","punycode","Decode"],"kind":"struct"},"1:1968:3726":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:1503:7394":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:10263:9953":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:2663:4582":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:42556:4422":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:5535:9523":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:5367:23550":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:13271:34967":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:10966:9522":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:39784:4498":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:4468:6735":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:1621:7473":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:4882:6748":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:7522:10909":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:742:9884":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:1428:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:4077:3735":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11510:9751":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5457:7832":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"18:726:5571":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12887:5844":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:12851:5842":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:14260:6106":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7549:7007":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:2447:10957":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:6300:9830":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:581:4204":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:5502:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"11:1160:9496":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:0:3413":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10524:9724":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12530:9795":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:8175:9878":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:33597:3609":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:43946:8788":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:42333:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:7061:6946":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:2394:6676":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:4952:7630":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:2902:4186":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:6435:7968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"23:470:9668":{"crate_id":23,"path":["unicode_bidi","utf16","InitialInfoExt"],"kind":"struct"},"6:7584:8320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:9302:8979":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:21327:10965":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:5636:7908":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:7656:23562":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:11055:5423":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:43167:4497":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:12388:5805":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:15356:6409":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"11:1903:7221":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:1063:9892":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:5406:5311":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:11354:9746":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:9375:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:22122:10965":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"23:599:37255":{"crate_id":23,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"17:11537:9753":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:7287:9510":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:2207:8370":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:4614:6740":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:3014:22693":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5344:7770":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:39734:8665":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:30281:3565":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:1496:7391":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:5191:9957":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9335:8982":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:9755:23599":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:9261:28417":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:3210:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:7943:10965":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:9254:9979":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:4986:9723":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:8674:4024":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"11:2469:5345":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:8437:4599":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4864:7591":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13412:5927":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:10350:5690":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:3145:2749":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:43958:8791":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"9:0:3415":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:6115:5406":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:39999:8675":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:13323:9928":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:16032:5895":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:2429:8398":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"18:515:5538":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:299:7214":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:1580:1961":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:6670:8087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:6562:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:3280:7221":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:6398:6699":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13538:5954":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:8691:2716":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:5064:4551":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:16079:6613":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:3029:5579":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:1142:9895":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:9657:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:8827:3648":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:1536:9896":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10170:5684":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11341:9745":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:11540:9997":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"16:5802:23551":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13116:5864":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:15092:6344":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:6621:8069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:1975:764":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:46259:8914":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:2408:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:2072:4648":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:723:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:43080:8421":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:11634:9511":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:2632:10965":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:7085:6947":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:41743:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:6874:8149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:1327:9892":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:2114:9906":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:5515:7853":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"18:521:27806":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:12299:1638":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:13577:4652":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:2986:5400":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:31882:2963":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:38266:3617":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:2699:4574":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:3649:3648":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:7570:6714":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:41430:4029":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:4821:3747":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:11405:9748":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:15058:6332":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:12181:2744":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:43611:8758":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:9315:28415":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:8523:3587":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:7590:6715":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:39087:3626":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:41110:3584":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:21241:4204":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:10078:3577":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:725:10965":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:15138:6350":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:3285:35690":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:4139:3736":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:43358:4504":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:7899:5417":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:5454:4485":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:7461:8246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:5314:7764":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:4860:3743":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"18:96:10768":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:9109:4030":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13972:5753":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:11753:4490":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:42795:8743":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11825:9771":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8293:9212":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:31884:115":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:6749:6894":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10954:23634":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:6900:8164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4897:7604":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12175:9780":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13606:5974":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6636:8071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:7144:23560":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:2037:9714":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:7497:7003":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:42317:7045":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:11035:9922":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:1723:7525":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:6504:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:4105:5311":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:13526:5951":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:7359:8211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5336:7769":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:6458:8406":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:16212:6646":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:45516:8841":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"11:2536:7226":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:40140:8694":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:4587:6739":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:2124:6955":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"0:730:1999":{"crate_id":0,"path":["url","ParseOptions"],"kind":"struct"},"2:38979:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:41365:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:12648:4482":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:12411:8755":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:41222:34220":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:4821:9722":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:5897:6776":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:13447:116":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:12342:5799":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12043:9777":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12251:9789":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:0:3422":{"crate_id":17,"path":["object"],"kind":"module"},"17:11089:9736":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:3396:3632":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:41440:4032":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:12395:8754":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:6782:23558":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:2666:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:14402:6126":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:7714:5349":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5630:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:7581:3755":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:2654:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:43934:8785":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:7355:6985":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"21:81:3052":{"crate_id":21,"path":["percent_encoding","PercentDecode"],"kind":"struct"},"16:7528:7004":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:6460:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:7290:4249":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:46238:8913":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"7:78:22533":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:1098:9712":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:5714:5343":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11583:9760":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:44119:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:8217:4583":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:4135:9916":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"11:1676:5307":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:7108:5362":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:8641:3742":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:13738:6007":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:3152:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:926:5318":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"14:202:1971":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:6629:8070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:12315:1775":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:10350:9533":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:3764:4242":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:918:9884":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"0:741:2435":{"crate_id":0,"path":["url","UrlQuery"],"kind":"struct"},"11:2548:7228":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"11:2140:9891":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:5722:6705":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11557:9754":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:10281:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:39803:8669":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:16187:6641":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"5:4925:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:7823:23563":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:12311:1799":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:3614:6726":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:41296:3586":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:11227:9741":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:1580:7441":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:2808:6695":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"11:1603:9898":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10887:37242":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13877:6035":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:4876:7594":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:836:3648":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:8136:7074":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"14:187:22634":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:1040:6955":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"9:330:7271":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"9:502:7293":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"25:1122:5490":{"crate_id":25,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"6:5624:7902":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:7330:5413":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:22413:8428":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:9664:9966":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:5047:954":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:10997:9921":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:40099:8690":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:16259:5922":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:43491:4487":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:43922:8782":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:8576:10997":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:5046:7675":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12969:5849":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13387:5922":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"20:91:2370":{"crate_id":20,"path":["form_urlencoded","Parse"],"kind":"struct"},"17:13999:6050":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:4416:9499":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:3351:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:2323:22690":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:15390:6417":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:4149:3734":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:1510:7396":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:10641:4589":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:9938:23621":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:10070:129":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:7969:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:32878:3561":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:5083:7687":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:7436:8389":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:6647:8412":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:3662:4416":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:6811:8135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:2461:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:13325:5912":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:21380:10965":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:903:5345":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:33251:3607":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:42577:3645":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:40529:3687":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:3548:4561":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12543:9796":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:11204:8983":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:5483:7844":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:5557:7871":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13187:5877":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:15151:6355":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:7379:37235":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:6447:7972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:15078:6340":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"11:0:3417":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:12478:5815":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:8216:7079":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:7412:8234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:40008:8677":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:0:1664":{"crate_id":1,"path":["std"],"kind":"module"},"2:40544:4598":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:40108:8691":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4942:7627":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:867:7219":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:11191:9925":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13568:5966":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:811:5345":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:45757:8868":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:15383:6416":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:3196:6666":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"18:680:5559":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:30260:4674":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11166:5705":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:9294:9984":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:12508:5819":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:7436:10800":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:5039:7673":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:10910:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:8060:3542":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:2914:4187":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:5400:7796":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:9385:3694":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:10889:8992":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:12659:9798":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"9:392:22541":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:14386:6123":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:8035:10939":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:14560:6154":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12353:5803":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:9219:3070":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:5225:7719":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:3841:3590":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"24:290:37311":{"crate_id":24,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"16:7857:7026":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:9380:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:7984:8329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:2321:16295":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:39747:8666":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:6763:8120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:728:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:6574:6719":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6385:6842":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:10218:5686":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"23:534:9680":{"crate_id":23,"path":["unicode_bidi","utf16","Utf16CharIter"],"kind":"struct"},"17:14847:6269":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:3925:6731":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"}},"external_crates":{"26":{"name":"tinyvec_macros","html_root_url":null},"23":{"name":"unicode_bidi","html_root_url":null},"20":{"name":"form_urlencoded","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"tinyvec","html_root_url":null},"22":{"name":"idna","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"unicode_normalization","html_root_url":null},"21":{"name":"percent_encoding","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}