{"root":"0:0:1949","crate_version":"2.7.1","includes_private":false,"index":{"0:1006:779":{"id":"0:1006:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/twoway.rs","begin":[36,22],"end":[36,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41603:3525-0:947:2350":{"id":"a:1:41603:3525-0:947:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:485":{"id":"0:485","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[667,0],"end":[682,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter","nth","ne","eq","is_sorted_by","sum","position","min_by","try_for_each","try_collect","flat_map","filter_map","step_by","all","partial_cmp","is_sorted_by_key","product","rposition","copied","fold","min_by_key","collect_into","rev","flatten","any","peekable","chain","max","count","skip","__iterator_get_unchecked","cmp_by","find","unzip","max_by","reduce","partition","le","map_windows","skip_while","intersperse","lt","last","enumerate","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","min","fuse","take_while","intersperse_with","next_chunk","take","eq_by","cycle","find_map","is_partitioned","collect","inspect","gt","map_while","for_each","ge","advance_by","zip","is_sorted","array_chunks","try_find","size_hint","try_fold","cmp","by_ref","map","scan"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:488:172","0:489:1166","0:491:2261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:192":{"id":"0:192","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[272,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:193:1152","0:194:2207"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5597":{"id":"5:5597","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5598:35592","5:5599:9882","5:5602:35593","5:5605:35594","5:5613:35595","5:5614:35596","5:5615:9254","5:5616:32591","5:5617:32592"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2887-0:1166:2279":{"id":"b:1:2887-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3145:9739-0:1158:2267":{"id":"a:1:3145:9739-0:1158:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2902-0:1145:2246":{"id":"b:1:2902-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:353:953":{"id":"0:353:953","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[838,4],"end":[840,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13149:2927":{"id":"1:13149:2927","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13151:31449","str::split_at_mut":"1:13150:31446"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2887-0:1187:2292":{"id":"b:1:2887-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:130:1152":{"id":"0:130:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[45,4],"end":[47,5]},"visibility":"public","docs":"Create a new prefilter that reports possible locations where the given\nneedle matches.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13225:34889":{"id":"1:13225:34889","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372:1152":{"id":"0:372:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[912,4],"end":[919,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:9306-0:999:2350":{"id":"a:1:32044:9306-0:999:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:597:1950":{"id":"0:597:1950","crate_id":0,"name":"memchr2","span":{"filename":"src/memchr.rs","begin":[92,0],"end":[100,1]},"visibility":"public","docs":"Search for the first occurrence of two possible bytes in a haystack.\n\nThis returns the index corresponding to the first occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle1 || b == needle2)`, this routine\nwill attempt to use highly optimized vector operations that can be an order\nof magnitude faster (or more).\n\n# Example\n\nThis shows how to find the first position of one of two possible bytes in a\nhaystack.\n\n```\nuse memchr::memchr2;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr2(b'k', b'q', haystack), Some(4));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:617":{"id":"0:617","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[308,0],"end":[339,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter","nth","ne","eq","is_sorted_by","sum","position","min_by","try_for_each","try_collect","flat_map","filter_map","step_by","all","partial_cmp","is_sorted_by_key","product","rposition","copied","fold","min_by_key","collect_into","rev","flatten","any","peekable","chain","max","count","skip","__iterator_get_unchecked","cmp_by","find","unzip","max_by","reduce","partition","le","map_windows","skip_while","intersperse","lt","last","enumerate","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","min","fuse","take_while","intersperse_with","next_chunk","take","eq_by","cycle","find_map","is_partitioned","collect","inspect","gt","map_while","for_each","ge","advance_by","zip","is_sorted","array_chunks","try_find","size_hint","try_fold","cmp","by_ref","map","scan"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:619:172","0:620:1166","0:622:557","0:624:2261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41603:3525-0:1545:3557":{"id":"a:1:41603:3525-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3720-0:1158:2267":{"id":"b:1:3720-0:1158:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41603:3525-0:1158:2267":{"id":"a:1:41603:3525-0:1158:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1171":{"id":"0:1171","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,9],"end":[854,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1174:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:778:2203":{"id":"0:778:2203","crate_id":0,"name":"find","span":{"filename":"src/memmem/mod.rs","begin":[424,4],"end":[428,5]},"visibility":"public","docs":"Returns the index of the first occurrence of this needle in the given\nhaystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::Finder;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), Finder::new(\"foo\").find(haystack));\nassert_eq!(Some(4), Finder::new(\"bar\").find(haystack));\nassert_eq!(None, Finder::new(\"quux\").find(haystack));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:971:2737":{"id":"a:1:31987:236-0:971:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31987:236-0:999:2350":{"id":"a:1:31987:236-0:999:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3145:9739-0:1137:2187":{"id":"a:1:3145:9739-0:1137:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:84:172":{"id":"0:84:172","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[576,4],"end":[576,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:753":{"id":"0:753","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[244,0],"end":[271,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:757:3428"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2887-0:1145:2246":{"id":"b:1:2887-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[182,0],"end":[274,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:159:1152","0:160:2207","0:161:2208"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41602:3526-0:947:2350":{"id":"a:1:41602:3526-0:947:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:362:2261":{"id":"0:362:2261","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[872,4],"end":[874,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13206:3805":{"id":"1:13206:3805","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12817:9705","`DoubleEndedIterator`":"1:8204:129","prim@char":"4:12295:458","str::rmatches":"1:13209:34882"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43574:13566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:1187:2292":{"id":"b:1:3720-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41603:3525-0:964:2350":{"id":"a:1:41603:3525-0:964:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:977:779":{"id":"0:977:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,16],"end":[179,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:2203":{"id":"0:68:2203","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[387,4],"end":[395,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:1007:2737":{"id":"a:1:31987:236-0:1007:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3720-0:922:2287":{"id":"b:1:3720-0:922:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3145:9739-0:1258:2292":{"id":"a:1:3145:9739-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:1200:2350":{"id":"b:5:725-0:1200:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:932":{"id":"0:932","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,22],"end":[607,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:933:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41603:3525-0:956:2352":{"id":"a:1:41603:3525-0:956:2352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:595:1955":{"id":"0:595:1955","crate_id":0,"name":"memrchr","span":{"filename":"src/memchr.rs","begin":[59,0],"end":[67,1]},"visibility":"public","docs":"Search for the last occurrence of a byte in a slice.\n\nThis returns the index corresponding to the last occurrence of `needle` in\n`haystack`, or `None` if one is not found. If an index is returned, it is\nguaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle)`, this routine will attempt to\nuse highly optimized vector operations that can be an order of magnitude\nfaster (or more).\n\n# Example\n\nThis shows how to find the last position of a byte in a byte string.\n\n```\nuse memchr::memrchr;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr(b'o', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:882:462":{"id":"0:882:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:172":{"id":"0:111:172","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[844,4],"end":[844,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"a:1:41603:3525-0:1237:2279":{"id":"a:1:41603:3525-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2902-0:1258:2292":{"id":"b:1:2902-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2887-0:1530:3552":{"id":"b:1:2887-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:39:2207":{"id":"0:39:2207","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[81,4],"end":[89,5]},"visibility":"public","docs":"Return the last occurrence of the needle in the given haystack. If no\nsuch occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:999:2350":{"id":"b:1:3720-0:999:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:1158:2267":{"id":"b:1:2615-0:1158:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:608:1951":{"id":"0:608:1951","crate_id":0,"name":"memchr2_iter","span":{"filename":"src/memchr.rs","begin":[232,0],"end":[238,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1498":{"id":"0:1498","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,22],"end":[542,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1499:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8170-0:1145:2246":{"id":"b:1:8170-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8172:172","1:8173:9780","1:8174:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:3110:246-0:1271:2350":{"id":"a:1:3110:246-0:1271:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:510:2208":{"id":"0:510:2208","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[879,4],"end":[902,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:9306-0:1216:2246":{"id":"a:1:32044:9306-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:341:2203":{"id":"0:341:2203","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[604,4],"end":[612,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2897-0:1200:2350":{"id":"b:1:2897-0:1200:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1246":{"id":"0:1246","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,16],"end":[661,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1249:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[592,0],"end":[600,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8204:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:91:2262"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[575,0],"end":[590,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter","nth","ne","eq","is_sorted_by","sum","position","min_by","try_for_each","try_collect","flat_map","filter_map","step_by","all","partial_cmp","is_sorted_by_key","product","rposition","copied","fold","min_by_key","collect_into","rev","flatten","any","peekable","chain","max","count","skip","__iterator_get_unchecked","cmp_by","find","unzip","max_by","reduce","partition","le","map_windows","skip_while","intersperse","lt","last","enumerate","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","min","fuse","take_while","intersperse_with","next_chunk","take","eq_by","cycle","find_map","is_partitioned","collect","inspect","gt","map_while","for_each","ge","advance_by","zip","is_sorted","array_chunks","try_find","size_hint","try_fold","cmp","by_ref","map","scan"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:84:172","0:85:1166","0:87:2261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:652:1166":{"id":"0:652:1166","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[465,4],"end":[474,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1581":{"id":"0:1581","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,9],"end":[653,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1582:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5602:35593":{"id":"5:5602:35593","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1143":{"id":"0:1143","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1144:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:613:1959":{"id":"0:613:1959","crate_id":0,"name":"memrchr3_iter","span":{"filename":"src/memchr.rs","begin":[268,0],"end":[275,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:40323:3446","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:931":{"id":"0:931","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,16],"end":[607,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32044:9306-0:1415:1961":{"id":"a:1:32044:9306-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:340:3236":{"id":"0:340:3236","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[573,4],"end":[596,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Two::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Two::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Two::new`":"0:338:1152"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:1200:2350":{"id":"a:1:41602:3526-0:1200:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:909:2279":{"id":"0:909:2279","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/all/memchr.rs","begin":[568,0],"end":[573,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:899:2267","`Two::iter`":"0:76:953"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:41603:3525-0:909:2279","a:1:3110:246-0:909:2279","a:1:32044:9306-0:909:2279","a:1:31987:236-0:909:2279","a:1:41602:3526-0:909:2279","a:1:3145:9739-0:909:2279","b:1:8170-0:909:2279","b:1:2891-0:909:2279","b:1:2612-0:909:2279","b:1:2887-0:909:2279","b:1:2902-0:909:2279","b:1:2897-0:909:2279","b:1:3720-0:909:2279","b:1:2615-0:909:2279","b:5:725-0:909:2279","0:88","0:81","0:918","0:914"]}}},"a:1:32044:9306-0:1250:2287":{"id":"a:1:32044:9306-0:1250:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41603:3525-0:1258:2292":{"id":"a:1:41603:3525-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:527:2262":{"id":"0:527:2262","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[991,4],"end":[996,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:1436:1963":{"id":"b:1:2891-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2897-0:1258:2292":{"id":"b:1:2897-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1493:3803":{"id":"0:1493:3803","crate_id":0,"name":"Auto","span":{"filename":"src/memmem/searcher.rs","begin":[550,4],"end":[550,8]},"visibility":"default","docs":"Automatically detect whether a heuristic prefilter should be used. If\nit is used, then heuristics will be used to dynamically disable the\nprefilter if it is believed to not be carrying its weight.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1013":{"id":"0:1013","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,22],"end":[40,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1014:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1141:462":{"id":"0:1141:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2897-0:1490:3529":{"id":"b:1:2897-0:1490:3529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:1579:3600":{"id":"b:5:725-0:1579:3600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:334":{"id":"0:334","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[508,0],"end":[508,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1579:3600":{"id":"0:1579:3600","crate_id":0,"name":"FinderBuilder","span":{"filename":"src/memmem/mod.rs","begin":[654,0],"end":[656,1]},"visibility":"public","docs":"A builder for constructing non-default forward or reverse memmem finders.\n\nA builder is primarily useful for configuring a substring searcher.\nCurrently, the only configuration exposed is the ability to disable\nheuristic prefilters used to speed up certain searches.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:797","a:1:41603:3525-0:1579:3600","a:1:3110:246-0:1579:3600","a:1:32044:9306-0:1579:3600","a:1:31987:236-0:1579:3600","a:1:41602:3526-0:1579:3600","a:1:3145:9739-0:1579:3600","b:1:2891-0:1579:3600","b:1:2612-0:1579:3600","b:1:2887-0:1579:3600","b:1:2902-0:1579:3600","b:1:2897-0:1579:3600","b:1:3720-0:1579:3600","b:1:2615-0:1579:3600","b:5:725-0:1579:3600","0:1583","0:1585","0:1581"]}}},"1:13135:2332":{"id":"1:13135:2332","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12365:3003"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:488:172":{"id":"0:488:172","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[668,4],"end":[668,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"1:13158:27863":{"id":"1:13158:27863","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13157:27859"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43653:13571","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13218:34885":{"id":"1:13218:34885","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13220:34886":{"id":"1:13220:34886","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13224:34888":{"id":"1:13224:34888","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:624:2261":{"id":"0:624:2261","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[336,4],"end":[338,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:1007:2737":{"id":"a:1:41602:3526-0:1007:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32044:9306-0:1545:3557":{"id":"a:1:32044:9306-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:895":{"id":"0:895","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[302,16],"end":[302,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:898:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:179:2093":{"id":"0:179:2093","crate_id":0,"name":"twoway","span":{"filename":"src/arch/all/twoway.rs","begin":[1,0],"end":[877,1]},"visibility":"public","docs":"An implementation of the [Two-Way substring search algorithm][two-way].\n\n[`Finder`] can be built for forward searches, while [`FinderRev`] can be built\nfor reverse searches.\n\nTwo-Way makes for a nice general purpose substring search algorithm because of\nits time and space complexity properties. It also performs well in practice.\nNamely, with `m = len(needle)` and `n = len(haystack)`, Two-Way takes `O(m)`\ntime to create a finder, `O(1)` space and `O(n)` search time. In other words,\nthe preprocessing step is quick, doesn't require any heap memory and the worst\ncase search time is guaranteed to be linear in the haystack regardless of the\nsize of the needle.\n\nWhile vector algorithms will usually beat Two-Way handedly, vector algorithms\nalso usually have pathological or edge cases that are better handled by Two-Way.\nMoreover, not all targets support vector algorithms or implementations for them\nsimply may not exist yet.\n\nTwo-Way can be found in the `memmem` implementations in at least [GNU libc] and\n[musl].\n\n[two-way]: https://en.wikipedia.org/wiki/Two-way_string-matching_algorithm\n[GNU libc]: https://www.gnu.org/software/libc/\n[musl]: https://www.musl-libc.org/","links":{"`FinderRev`":"0:1007:2737","`Finder`":"0:999:2350"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:999:2350","0:1007:2737"],"is_stripped":false}}},"0:1163":{"id":"0:1163","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,16],"end":[515,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:1258:2292":{"id":"b:1:2615-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:543:2367":{"id":"0:543:2367","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[114,4],"end":[117,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:547:3161"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13191:34881":{"id":"1:13191:34881","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12817:9705","str::split":"1:13179:31451","prim@char":"4:12295:458","str::split_terminator":"1:13188:34880"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43438:13558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:15462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13257:34896":{"id":"1:13257:34896","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4903:34896"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43669:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2362":{"id":"0:140:2362","crate_id":0,"name":"index1","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[238,4],"end":[240,5]},"visibility":"public","docs":"Returns the first offset of the pair.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:1425:1962":{"id":"b:1:2612-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1537":{"id":"0:1537","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[236,9],"end":[236,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1540:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31987:236-0:947:2350":{"id":"a:1:31987:236-0:947:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:768:3428":{"id":"0:768:3428","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[341,4],"end":[347,5]},"visibility":"public","docs":"Convert this iterator into its owned variant, such that it no longer\nborrows the finder and needle.\n\nIf this is already an owned iterator, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12-0:605:1954":{"id":"0:12-0:605:1954","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,58],"end":[204,69]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr_iter","name":"memchr_iter","id":"0:605:1954","glob":false}}},"1:13162:2886":{"id":"1:13162:2886","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:9705"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1162:462":{"id":"0:1162:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,9],"end":[515,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1425:1962":{"id":"b:1:2615-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:797":{"id":"0:797","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[658,0],"end":[713,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:798:1152","0:799:3601","0:802:3651","0:806:3632","0:809:3647"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13247:34895":{"id":"1:13247:34895","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12778:135","`FromStr`":"1:12777:15186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12777:15186","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12777:15186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:9739-0:1545:3557":{"id":"a:1:3145:9739-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5614:35596":{"id":"5:5614:35596","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:2774","`String`":"5:7616:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2774","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:953":{"id":"0:76:953","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[541,4],"end":[543,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of one of the needle bytes in\nthe given haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:463:2262":{"id":"0:463:2262","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[389,4],"end":[394,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:974":{"id":"0:974","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,9],"end":[179,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:975:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:728:27275":{"id":"5:728:27275","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:971:2737":{"id":"a:1:41602:3526-0:971:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:883":{"id":"0:883","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,16],"end":[34,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2902-0:1208:2187":{"id":"b:1:2902-0:1208:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2897-0:1436:1963":{"id":"b:1:2897-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8170-0:1258:2292":{"id":"b:1:8170-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8172:172","1:8173:9780","1:8174:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1274":{"id":"0:1274","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1275:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13182:27854":{"id":"1:13182:27854","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:9705"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12633:13216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:1137:2187":{"id":"b:1:2891-0:1137:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:521:1166":{"id":"0:521:1166","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[976,4],"end":[981,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:659":{"id":"0:659","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[496,0],"end":[496,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2612-0:947:2350":{"id":"b:1:2612-0:947:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:785":{"id":"0:785","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[529,0],"end":[646,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:787:1152","0:789:2207","0:791:3556","0:794:3428","0:795:335","0:796:2103"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13259:15380":{"id":"1:13259:15380","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4904:15380"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43678:10001","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:976":{"id":"0:976","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,16],"end":[179,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:977:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:434:2203":{"id":"0:434:2203","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[94,4],"end":[102,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41603:3525-0:1559:2350":{"id":"a:1:41603:3525-0:1559:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3145:9739-0:1436:1963":{"id":"a:1:3145:9739-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3110:246-0:1258:2292":{"id":"a:1:3110:246-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:881":{"id":"0:881","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:882:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1005":{"id":"0:1005","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,22],"end":[36,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1006:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1530:3552":{"id":"0:1530:3552","crate_id":0,"name":"FindIter","span":{"filename":"src/memmem/mod.rs","begin":[237,0],"end":[242,1]},"visibility":"public","docs":"An iterator over non-overlapping substring matches.\n\nMatches are reported by the byte offset at which they begin.\n\n`'h` is the lifetime of the haystack while `'n` is the lifetime of the\nneedle.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:753","a:1:41603:3525-0:1530:3552","a:1:3110:246-0:1530:3552","a:1:32044:9306-0:1530:3552","a:1:31987:236-0:1530:3552","a:1:41602:3526-0:1530:3552","a:1:3145:9739-0:1530:3552","b:1:8170-0:1530:3552","b:1:2891-0:1530:3552","b:1:2612-0:1530:3552","b:1:2887-0:1530:3552","b:1:2902-0:1530:3552","b:1:2897-0:1530:3552","b:1:3720-0:1530:3552","b:1:2615-0:1530:3552","b:5:725-0:1530:3552","0:758","0:1537","0:1541"]}}},"0:114:2261":{"id":"0:114:2261","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[855,4],"end":[857,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:961":{"id":"0:961","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,16],"end":[134,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:9-0:608:1951":{"id":"0:9-0:608:1951","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,21],"end":[204,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr2_iter","name":"memchr2_iter","id":"0:608:1951","glob":false}}},"a:1:32044:9306-0:947:2350":{"id":"a:1:32044:9306-0:947:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:1158:2267":{"id":"b:1:2887-0:1158:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:657:2262":{"id":"0:657:2262","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[484,4],"end":[493,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:783:335":{"id":"0:783:335","crate_id":0,"name":"as_ref","span":{"filename":"src/memmem/mod.rs","begin":[491,4],"end":[496,5]},"visibility":"public","docs":"Convert this finder into its borrowed variant.\n\nThis is primarily useful if your finder is owned and you'd like to\nstore its borrowed variant in some intermediate data structure.\n\nNote that the lifetime parameter of the returned finder is tied to the\nlifetime of `self`, and may be shorter than the `'n` lifetime of the\nneedle itself. Namely, a finder's needle can be either borrowed or\nowned, so the lifetime of the needle returned must necessarily be the\nshorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3110:246-0:999:2350":{"id":"a:1:3110:246-0:999:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:993:2350":{"id":"b:1:2887-0:993:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32044:9306-0:1200:2350":{"id":"a:1:32044:9306-0:1200:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41602:3526-0:1415:1961":{"id":"a:1:41602:3526-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:956:2352":{"id":"b:5:725-0:956:2352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:194:2207":{"id":"0:194:2207","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/twoway.rs","begin":[301,4],"end":[314,5]},"visibility":"public","docs":"Returns the last occurrence of `needle` in the given `haystack`, or\n`None` if no such occurrence could be found.\n\nThe `needle` given must be the same as the `needle` provided to\n[`FinderRev::new`].\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{"`FinderRev::new`":"0:193:1152"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13255:31366":{"id":"1:13255:31366","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:980:39899"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41603:3525-0:1490:3529":{"id":"a:1:41603:3525-0:1490:3529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3720-0:1007:2737":{"id":"b:1:3720-0:1007:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:151:2413":{"id":"0:151:2413","crate_id":0,"name":"rank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[335,4],"end":[337,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41603:3525-0:1137:2187":{"id":"a:1:41603:3525-0:1137:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2612-0:1237:2279":{"id":"b:1:2612-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:1530:3552":{"id":"b:1:3720-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:210:2106":{"id":"0:210:2106","crate_id":0,"name":"is_suffix","span":{"filename":"src/arch/all/mod.rs","begin":[42,0],"end":[45,1]},"visibility":"public","docs":"Returns true if and only if `needle` is a suffix of `haystack`.\n\nThis uses a latency optimized variant of `memcmp` internally which *might*\nmake this faster for very short strings.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:332:2262":{"id":"0:332:2262","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[500,4],"end":[505,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:474:2207":{"id":"0:474:2207","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[486,4],"end":[494,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:637:1166":{"id":"0:637:1166","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[390,4],"end":[397,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:1258:2292":{"id":"b:1:3720-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8170-0:1545:3557":{"id":"b:1:8170-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:8172:172","1:8173:9780","1:8174:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:13229:34891":{"id":"1:13229:34891","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:9705"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1166":{"id":"0:56:1166","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[314,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:993:2350":{"id":"b:1:2891-0:993:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[140,0],"end":[247,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:1152","0:137:2401","0:139:2429","0:140:2362","0:141:2363"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2612-0:1545:3557":{"id":"b:1:2612-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2612-0:999:2350":{"id":"b:1:2612-0:999:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:649":{"id":"0:649","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[461,0],"end":[480,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter","nth","ne","eq","is_sorted_by","sum","position","min_by","try_for_each","try_collect","flat_map","filter_map","step_by","all","partial_cmp","is_sorted_by_key","product","rposition","copied","fold","min_by_key","collect_into","rev","flatten","any","peekable","chain","max","count","skip","__iterator_get_unchecked","cmp_by","find","unzip","max_by","reduce","partition","le","map_windows","skip_while","intersperse","lt","last","enumerate","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","min","fuse","take_while","intersperse_with","next_chunk","take","eq_by","cycle","find_map","is_partitioned","collect","inspect","gt","map_while","for_each","ge","advance_by","zip","is_sorted","array_chunks","try_find","size_hint","try_fold","cmp","by_ref","map","scan"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:651:172","0:652:1166","0:654:2261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1445":{"id":"0:1445","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[431,16],"end":[431,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1447:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13253:31363":{"id":"1:13253:31363","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19-0:1415:1961":{"id":"0:19-0:1415:1961","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,4],"end":[206,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr","name":"Memchr","id":"0:1415:1961","glob":false}}},"0:1182":{"id":"0:1182","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,9],"end":[894,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1183:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:605:1954":{"id":"0:605:1954","crate_id":0,"name":"memchr_iter","span":{"filename":"src/memchr.rs","begin":[216,0],"end":[218,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:1216:2246":{"id":"b:1:2891-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:8-0:597:1950":{"id":"0:8-0:597:1950","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,12],"end":[204,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr2","name":"memchr2","id":"0:597:1950","glob":false}}},"0:646":{"id":"0:646","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[439,0],"end":[459,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:648:1152"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:669-0:1490:3529":{"id":"0:669-0:1490:3529","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[69,0],"end":[69,62]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memmem::searcher::PrefilterConfig","name":"Prefilter","id":"0:1490:3529","glob":false}}},"a:1:41603:3525-0:999:2350":{"id":"a:1:41603:3525-0:999:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[361,0],"end":[385,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter","nth","ne","eq","is_sorted_by","sum","position","min_by","try_for_each","try_collect","flat_map","filter_map","step_by","all","partial_cmp","is_sorted_by_key","product","rposition","copied","fold","min_by_key","collect_into","rev","flatten","any","peekable","chain","max","count","skip","__iterator_get_unchecked","cmp_by","find","unzip","max_by","reduce","partition","le","map_windows","skip_while","intersperse","lt","last","enumerate","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","min","fuse","take_while","intersperse_with","next_chunk","take","eq_by","cycle","find_map","is_partitioned","collect","inspect","gt","map_while","for_each","ge","advance_by","zip","is_sorted","array_chunks","try_find","size_hint","try_fold","cmp","by_ref","map","scan"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:454:172","0:455:1166","0:457:557","0:459:2261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:894:462":{"id":"0:894:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[302,9],"end":[302,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:412":{"id":"0:412","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[28,0],"end":[213,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:413:1152","0:414:2357","0:416:3236","0:417:2203","0:418:2367","0:421:2351","0:422:3161"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2887-0:1425:1962":{"id":"b:1:2887-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:782:3428":{"id":"0:782:3428","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[473,4],"end":[478,5]},"visibility":"public","docs":"Convert this finder into its owned variant, such that it no longer\nborrows the needle.\n\nIf this is already an owned finder, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `alloc` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:9306-0:1258:2292":{"id":"a:1:32044:9306-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:500":{"id":"0:500","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[704,0],"end":[953,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:501:1152","0:502:1161","0:503:3236","0:504:2203","0:506:2207","0:508:2205","0:510:2208","0:514:953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:368":{"id":"0:368","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[887,0],"end":[887,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:651:172":{"id":"0:651:172","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[462,4],"end":[462,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"5:5616:32591":{"id":"5:5616:32591","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13252:31362"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1586:60":{"id":"0:1586:60","crate_id":0,"name":"default","span":{"filename":"src/memmem/mod.rs","begin":[653,23],"end":[653,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:1425:1962":{"id":"a:1:41602:3526-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:644":{"id":"0:644","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[419,0],"end":[419,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2906:1754":{"id":"1:2906:1754","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:934:2292":{"id":"a:1:41602:3526-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5605:35594":{"id":"5:5605:35594","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[41,0],"end":[110,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:130:1152","0:131:2357","0:132:2367","0:134:2351"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:402":{"id":"0:402","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1274,0],"end":[1274,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:791:3556":{"id":"0:791:3556","crate_id":0,"name":"rfind_iter","span":{"filename":"src/memmem/mod.rs","begin":[595,4],"end":[600,5]},"visibility":"public","docs":"Returns a reverse iterator over all occurrences of a substring in a\nhaystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::FinderRev;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet finder = FinderRev::new(b\"foo\");\nlet mut it = finder.rfind_iter(haystack);\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:789:2207":{"id":"0:789:2207","crate_id":0,"name":"rfind","span":{"filename":"src/memmem/mod.rs","begin":[563,4],"end":[565,5]},"visibility":"public","docs":"Returns the index of the last occurrence of this needle in the given\nhaystack.\n\nThe haystack may be any type that can be cheaply converted into a\n`&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::FinderRev;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), FinderRev::new(\"foo\").rfind(haystack));\nassert_eq!(Some(4), FinderRev::new(\"bar\").rfind(haystack));\nassert_eq!(None, FinderRev::new(\"quux\").rfind(haystack));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"generic":"B"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2855:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:421:2351":{"id":"0:421:2351","crate_id":0,"name":"pair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:964:2350":{"id":"b:1:3720-0:964:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2891-0:934:2292":{"id":"b:1:2891-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3110:246-0:1237:2279":{"id":"a:1:3110:246-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2902-0:964:2350":{"id":"b:1:2902-0:964:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:1415:1961":{"id":"b:1:3720-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:42:2205":{"id":"0:42:2205","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[127,4],"end":[171,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:899:2267":{"id":"a:1:41602:3526-0:899:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:302:2207":{"id":"0:302:2207","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[133,4],"end":[141,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:1216:2246":{"id":"b:5:725-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1257:779":{"id":"0:1257:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,22],"end":[701,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:593:1949":{"id":"0:593:1949","crate_id":0,"name":"memchr","span":{"filename":"src/memchr.rs","begin":[27,0],"end":[35,1]},"visibility":"public","docs":"Search for the first occurrence of a byte in a slice.\n\nThis returns the index corresponding to the first occurrence of `needle` in\n`haystack`, or `None` if one is not found. If an index is returned, it is\nguaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle)`, this routine will attempt to\nuse highly optimized vector operations that can be an order of magnitude\nfaster (or more).\n\n# Example\n\nThis shows how to find the first position of a byte in a byte string.\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr(b'k', haystack), Some(8));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1192":{"id":"0:1192","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,9],"end":[1241,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1195:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2887-0:1200:2350":{"id":"b:1:2887-0:1200:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70:2207":{"id":"0:70:2207","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[403,4],"end":[411,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356":{"id":"0:356","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[860,0],"end":[875,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter","nth","ne","eq","is_sorted_by","sum","position","min_by","try_for_each","try_collect","flat_map","filter_map","step_by","all","partial_cmp","is_sorted_by_key","product","rposition","copied","fold","min_by_key","collect_into","rev","flatten","any","peekable","chain","max","count","skip","__iterator_get_unchecked","cmp_by","find","unzip","max_by","reduce","partition","le","map_windows","skip_while","intersperse","lt","last","enumerate","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","min","fuse","take_while","intersperse_with","next_chunk","take","eq_by","cycle","find_map","is_partitioned","collect","inspect","gt","map_while","for_each","ge","advance_by","zip","is_sorted","array_chunks","try_find","size_hint","try_fold","cmp","by_ref","map","scan"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:359:172","0:360:1166","0:362:2261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:541:3236":{"id":"0:541:3236","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[83,4],"end":[92,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Finder::with_pair`] will\nreturn a `Some` value. Similarly, when it is false, it is guaranteed\nthat `Finder::with_pair` will return a `None` value. Notice that this\ndoes not guarantee that [`Finder::new`] will return a `Finder`. Namely,\neven when `Finder::is_available` is true, it is not guaranteed that a\nvalid [`Pair`] can be found from the needle given.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Pair`":"0:956:2352","`Finder::new`":"0:538:1152","`Finder::with_pair`":"0:539:2357"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:1530:3552":{"id":"b:1:2891-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2612-0:971:2737":{"id":"b:1:2612-0:971:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:297:1152":{"id":"0:297:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[46,4],"end":[53,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle byte given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:922:2287":{"id":"b:1:2612-0:922:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:956:2352":{"id":"b:1:3720-0:956:2352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1014:779":{"id":"0:1014:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/twoway.rs","begin":[40,22],"end":[40,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:546:2351":{"id":"0:546:2351","crate_id":0,"name":"pair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[161,4],"end":[163,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:363":{"id":"0:363","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[877,0],"end":[885,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8204:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:366:2262"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1497":{"id":"0:1497","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,16],"end":[542,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32044:9306-0:971:2737":{"id":"a:1:32044:9306-0:971:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:520:172":{"id":"0:520:172","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[973,4],"end":[973,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:8170-0:934:2292":{"id":"b:1:8170-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8172:172","1:8173:9780","1:8174:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2887-0:1490:3529":{"id":"b:1:2887-0:1490:3529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:324:1166":{"id":"0:324:1166","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[476,4],"end":[481,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:909:2279":{"id":"a:1:41602:3526-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:1187:2292":{"id":"b:1:2615-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:794:3428":{"id":"0:794:3428","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[611,4],"end":[616,5]},"visibility":"public","docs":"Convert this finder into its owned variant, such that it no longer\nborrows the needle.\n\nIf this is already an owned finder, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:9306-0:1559:2350":{"id":"a:1:32044:9306-0:1559:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41602:3526-0:1187:2292":{"id":"a:1:41602:3526-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31987:236-0:993:2350":{"id":"a:1:31987:236-0:993:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2897-0:1158:2267":{"id":"b:1:2897-0:1158:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1203":{"id":"0:1203","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1204:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31987:236-0:1271:2350":{"id":"a:1:31987:236-0:1271:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2891-0:971:2737":{"id":"b:1:2891-0:971:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32044:9306-0:1158:2267":{"id":"a:1:32044:9306-0:1158:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41603:3525-0:993:2350":{"id":"a:1:41603:3525-0:993:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1140":{"id":"0:1140","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1141:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2617:27274":{"id":"1:2617:27274","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3110:246-0:1007:2737":{"id":"a:1:3110:246-0:1007:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2902-0:1229:2267":{"id":"b:1:2902-0:1229:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:423:1942":{"id":"0:423:1942","crate_id":0,"name":"sse2","span":{"filename":"src/arch/x86_64/sse2/mod.rs","begin":[1,0],"end":[6,19]},"visibility":"public","docs":"Algorithms for the `x86_64` target using 128-bit vectors via SSE2.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:424:1949","0:532:2090"],"is_stripped":false}}},"b:1:2612-0:1569:2737":{"id":"b:1:2612-0:1569:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:1545:3557":{"id":"b:1:3720-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13141:15013":{"id":"1:13141:15013","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41510:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:934:2292":{"id":"b:5:725-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2897-0:1137:2187":{"id":"b:1:2897-0:1137:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2902-0:1187:2292":{"id":"b:1:2902-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1267":{"id":"0:1267","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,16],"end":[966,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1270:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1221":{"id":"0:1221","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,9],"end":[355,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1224:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1010":{"id":"0:1010","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1011:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:1187:2292":{"id":"b:5:725-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3110:246-0:993:2350":{"id":"a:1:3110:246-0:993:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:492":{"id":"0:492","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[684,0],"end":[692,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8204:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:495:2262"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2902-0:1237:2279":{"id":"b:1:2902-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3110:246-0:947:2350":{"id":"a:1:3110:246-0:947:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1249:779":{"id":"0:1249:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,16],"end":[661,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2887-0:1436:1963":{"id":"b:1:2887-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32044:9306-0:1187:2292":{"id":"a:1:32044:9306-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:642:2262":{"id":"0:642:2262","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[407,4],"end":[416,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3110:246-0:1179:2287":{"id":"a:1:3110:246-0:1179:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13215:34884":{"id":"1:13215:34884","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12817:9705","`DoubleEndedIterator`":"1:8204:129","prim@char":"4:12295:458","str::match_indices":"1:13212:34883"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43538:13564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:15462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:9739-0:1216:2246":{"id":"a:1:3145:9739-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:772:172":{"id":"0:772:172","crate_id":0,"name":"Item","span":{"filename":"src/memmem/mod.rs","begin":[351,4],"end":[351,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:952:462":{"id":"0:952:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:497":{"id":"0:497","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[694,0],"end":[694,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1253":{"id":"0:1253","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,9],"end":[701,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1254:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31987:236-0:1545:3557":{"id":"a:1:31987:236-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:390":{"id":"0:390","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1247,0],"end":[1262,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter","nth","ne","eq","is_sorted_by","sum","position","min_by","try_for_each","try_collect","flat_map","filter_map","step_by","all","partial_cmp","is_sorted_by_key","product","rposition","copied","fold","min_by_key","collect_into","rev","flatten","any","peekable","chain","max","count","skip","__iterator_get_unchecked","cmp_by","find","unzip","max_by","reduce","partition","le","map_windows","skip_while","intersperse","lt","last","enumerate","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","min","fuse","take_while","intersperse_with","next_chunk","take","eq_by","cycle","find_map","is_partitioned","collect","inspect","gt","map_while","for_each","ge","advance_by","zip","is_sorted","array_chunks","try_find","size_hint","try_fold","cmp","by_ref","map","scan"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:393:172","0:394:1166","0:396:2261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1545:3557":{"id":"0:1545:3557","crate_id":0,"name":"FindRevIter","span":{"filename":"src/memmem/mod.rs","begin":[314,0],"end":[320,1]},"visibility":"public","docs":"An iterator over non-overlapping substring matches in reverse.\n\nMatches are reported by the byte offset at which they begin.\n\n`'h` is the lifetime of the haystack while `'n` is the lifetime of the\nneedle.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:764","a:1:41603:3525-0:1545:3557","a:1:3110:246-0:1545:3557","a:1:32044:9306-0:1545:3557","a:1:31987:236-0:1545:3557","a:1:41602:3526-0:1545:3557","a:1:3145:9739-0:1545:3557","b:1:8170-0:1545:3557","b:1:2891-0:1545:3557","b:1:2612-0:1545:3557","b:1:2887-0:1545:3557","b:1:2902-0:1545:3557","b:1:2897-0:1545:3557","b:1:3720-0:1545:3557","b:1:2615-0:1545:3557","b:5:725-0:1545:3557","0:1555","0:769","0:1551"]}}},"a:1:32044:9306-0:1569:2737":{"id":"a:1:32044:9306-0:1569:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1144:779":{"id":"0:1144:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2897-0:922:2287":{"id":"b:1:2897-0:922:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:999:2350":{"id":"0:999:2350","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/twoway.rs","begin":[37,0],"end":[37,26]},"visibility":"public","docs":"A forward substring searcher that uses the Two-Way algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:186","a:1:41603:3525-0:999:2350","a:1:3110:246-0:999:2350","a:1:32044:9306-0:999:2350","a:1:31987:236-0:999:2350","a:1:41602:3526-0:999:2350","a:1:3145:9739-0:999:2350","b:1:2891-0:999:2350","b:1:2612-0:999:2350","b:1:2887-0:999:2350","b:1:2902-0:999:2350","b:1:2897-0:999:2350","b:1:3720-0:999:2350","b:1:2615-0:999:2350","b:5:725-0:999:2350","0:1002","0:1004","0:1005"]}}},"0:438:557":{"id":"0:438:557","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[122,4],"end":[130,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:1271:2350":{"id":"b:1:2902-0:1271:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2902-0:1436:1963":{"id":"b:1:2902-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:1208:2187":{"id":"b:1:3720-0:1208:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:953":{"id":"0:953","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,16],"end":[34,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1490:3529":{"id":"0:1490:3529","crate_id":0,"name":"PrefilterConfig","span":{"filename":"src/memmem/searcher.rs","begin":[544,0],"end":[551,1]},"visibility":"public","docs":"Prefilter controls whether heuristics are used to accelerate searching.\n\nA prefilter refers to the idea of detecting candidate matches very quickly,\nand then confirming whether those candidates are full matches. This\nidea can be quite effective since it's often the case that looking for\ncandidates can be a lot faster than running a complete substring search\nover the entire input. Namely, looking for candidates can be done with\nextremely fast vectorized code.\n\nThe downside of a prefilter is that it assumes false positives (which are\ncandidates generated by a prefilter that aren't matches) are somewhat rare\nrelative to the frequency of full matches. That is, if a lot of false\npositives are generated, then it's possible for search time to be worse\nthan if the prefilter wasn't enabled in the first place.\n\nAnother downside of a prefilter is that it can result in highly variable\nperformance, where some cases are extraordinarily fast and others aren't.\nTypically, variable performance isn't a problem, but it may be for your use\ncase.\n\nThe use of prefilters in this implementation does use a heuristic to detect\nwhen a prefilter might not be carrying its weight, and will dynamically\ndisable its use. Nevertheless, this configuration option gives callers\nthe ability to disable prefilters if you have knowledge that they won't be\nuseful.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1491:190","0:1493:3803"],"impls":["a:1:41603:3525-0:1490:3529","a:1:3110:246-0:1490:3529","a:1:32044:9306-0:1490:3529","a:1:31987:236-0:1490:3529","a:1:41602:3526-0:1490:3529","a:1:3145:9739-0:1490:3529","b:1:2891-0:1490:3529","b:1:2612-0:1490:3529","b:1:2887-0:1490:3529","b:1:2902-0:1490:3529","b:1:2897-0:1490:3529","b:1:3720-0:1490:3529","b:1:2615-0:1490:3529","b:5:725-0:1490:3529","0:709","0:1498","0:1495","0:1497"]}}},"0:37:2203":{"id":"0:37:2203","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[65,4],"end":[73,5]},"visibility":"public","docs":"Return the first occurrence of the needle in the given haystack. If no\nsuch occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:455:1166":{"id":"0:455:1166","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[365,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:9306-0:1007:2737":{"id":"a:1:32044:9306-0:1007:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2891-0:1158:2267":{"id":"b:1:2891-0:1158:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2891-0:909:2279":{"id":"b:1:2891-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3110:246-0:1137:2187":{"id":"a:1:3110:246-0:1137:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2612-0:1216:2246":{"id":"b:1:2612-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:366:2262":{"id":"0:366:2262","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[879,4],"end":[884,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1002":{"id":"0:1002","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1003:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3720-0:1145:2246":{"id":"b:1:3720-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:611:1953":{"id":"0:611:1953","crate_id":0,"name":"memchr3_iter","span":{"filename":"src/memchr.rs","begin":[256,0],"end":[263,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13152:31450":{"id":"1:13152:31450","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13151:31449"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1195:462":{"id":"0:1195:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,9],"end":[1241,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:997":{"id":"0:997","crate_id":0,"name":null,"span":{"filename":"src/arch/all/shiftor.rs","begin":[19,9],"end":[19,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:998:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31987:236-0:1208:2187":{"id":"a:1:31987:236-0:1208:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2897-0:1250:2287":{"id":"b:1:2897-0:1250:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32044:9306-0:1436:1963":{"id":"a:1:32044:9306-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:951":{"id":"0:951","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:952:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2614:4121":{"id":"1:2614:4121","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:9306-0:993:2350":{"id":"a:1:32044:9306-0:993:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31987:236-0:956:2352":{"id":"a:1:31987:236-0:956:2352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1576":{"id":"0:1576","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[523,16],"end":[523,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1578:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:476:2205":{"id":"0:476:2205","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[520,4],"end":[550,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:904":{"id":"0:904","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,9],"end":[351,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:905:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:156:2203":{"id":"0:156:2203","crate_id":0,"name":"find","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[111,4],"end":[120,5]},"visibility":"public","docs":"Return the first occurrence of the `needle` in the `haystack`\ngiven. If no such occurrence exists, then `None` is returned.\n\nThe `needle` provided must match the needle given to this finder at\nconstruction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:905:462":{"id":"0:905:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[351,9],"end":[351,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:968:462":{"id":"0:968:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:472:2203":{"id":"0:472:2203","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[470,4],"end":[478,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2901:1756":{"id":"1:2901:1756","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:757:3428":{"id":"0:757:3428","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[263,4],"end":[270,5]},"visibility":"public","docs":"Convert this iterator into its owned variant, such that it no longer\nborrows the finder and needle.\n\nIf this is already an owned iterator, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `alloc` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:769":{"id":"0:769","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[350,0],"end":[371,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter","nth","ne","eq","is_sorted_by","sum","position","min_by","try_for_each","try_collect","flat_map","filter_map","step_by","all","partial_cmp","is_sorted_by_key","product","rposition","copied","fold","min_by_key","collect_into","rev","flatten","any","peekable","chain","max","count","skip","__iterator_get_unchecked","cmp_by","find","unzip","max_by","reduce","partition","le","map_windows","skip_while","intersperse","lt","last","enumerate","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","min","fuse","take_while","intersperse_with","next_chunk","take","eq_by","cycle","find_map","is_partitioned","collect","inspect","gt","map_while","for_each","ge","advance_by","zip","is_sorted","array_chunks","try_find","size_hint","try_fold","cmp","by_ref","map","scan"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:772:172","0:773:1166"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:993:2350":{"id":"b:1:2615-0:993:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:345:2205":{"id":"0:345:2205","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[654,4],"end":[694,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2887-0:1216:2246":{"id":"b:1:2887-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1199:779":{"id":"0:1199:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,16],"end":[1241,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:1545:3557":{"id":"b:1:2902-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[25,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:538:1152","0:539:2357","0:541:3236","0:542:2203","0:543:2367","0:546:2351","0:547:3161"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2891-0:899:2267":{"id":"b:1:2891-0:899:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3145:9739-0:956:2352":{"id":"a:1:3145:9739-0:956:2352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3110:246-0:1166:2279":{"id":"a:1:3110:246-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:532:2090":{"id":"0:532:2090","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[1,0],"end":[232,1]},"visibility":"public","docs":"A 128-bit vector implementation of the \"packed pair\" SIMD algorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1271:2350"],"is_stripped":false}}},"0:413:1152":{"id":"0:413:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[37,4],"end":[39,5]},"visibility":"public","docs":"Create a new pair searcher. The searcher returned can either report\nexact matches of `needle` or act as a prefilter and report candidate\npositions of `needle`.\n\nIf AVX2 is unavailable in the current environment or if a [`Pair`]\ncould not be constructed from the needle given, then `None` is\nreturned.","links":{"`Pair`":"0:956:2352"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:1425:1962":{"id":"a:1:31987:236-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2891-0:886:2246":{"id":"b:1:2891-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:1545:3557":{"id":"b:1:2615-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13157:27859":{"id":"1:13157:27859","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13158:27863"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43644:13570","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13256:31367":{"id":"1:13256:31367","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:980:39899"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1258:2292":{"id":"0:1258:2292","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[967,0],"end":[970,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:514:953","`Three`":"0:1250:2287"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:41603:3525-0:1258:2292","a:1:3110:246-0:1258:2292","a:1:32044:9306-0:1258:2292","a:1:31987:236-0:1258:2292","a:1:41602:3526-0:1258:2292","a:1:3145:9739-0:1258:2292","b:1:8170-0:1258:2292","b:1:2891-0:1258:2292","b:1:2612-0:1258:2292","b:1:2887-0:1258:2292","b:1:2902-0:1258:2292","b:1:2897-0:1258:2292","b:1:3720-0:1258:2292","b:1:2615-0:1258:2292","b:5:725-0:1258:2292","0:517","0:524","0:529","0:1263","0:1267"]}}},"b:1:2612-0:1271:2350":{"id":"b:1:2612-0:1271:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:1949":{"id":"0:0:1949","crate_id":0,"name":"memchr","span":{"filename":"src/lib.rs","begin":[1,0],"end":[221,11]},"visibility":"public","docs":"This library provides heavily optimized routines for string search primitives.\n\n# Overview\n\nThis section gives a brief high level overview of what this crate offers.\n\n* The top-level module provides routines for searching for 1, 2 or 3 bytes\n  in the forward or reverse direction. When searching for more than one byte,\n  positions are considered a match if the byte at that position matches any\n  of the bytes.\n* The [`memmem`] sub-module provides forward and reverse substring search\n  routines.\n\nIn all such cases, routines operate on `&[u8]` without regard to encoding. This\nis exactly what you want when searching either UTF-8 or arbitrary bytes.\n\n# Example: using `memchr`\n\nThis example shows how to use `memchr` to find the first occurrence of `z` in\na haystack:\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"foo bar baz quuz\";\nassert_eq!(Some(10), memchr(b'z', haystack));\n```\n\n# Example: matching one of three possible bytes\n\nThis examples shows how to use `memrchr3` to find occurrences of `a`, `b` or\n`c`, starting at the end of the haystack.\n\n```\nuse memchr::memchr3_iter;\n\nlet haystack = b\"xyzaxyzbxyzc\";\n\nlet mut it = memchr3_iter(b'a', b'b', b'c', haystack).rev();\nassert_eq!(Some(11), it.next());\nassert_eq!(Some(7), it.next());\nassert_eq!(Some(3), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches\n\nThis example shows how to use the [`memmem`] sub-module to find occurrences of\na substring in a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`memmem::Finder`]:\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```\n\n# Why use this crate?\n\nAt first glance, the APIs provided by this crate might seem weird. Why provide\na dedicated routine like `memchr` for something that could be implemented\nclearly and trivially in one line:\n\n```\nfn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().position(|&b| b == needle)\n}\n```\n\nOr similarly, why does this crate provide substring search routines when Rust's\ncore library already provides them?\n\n```\nfn search(haystack: &str, needle: &str) -> Option<usize> {\n    haystack.find(needle)\n}\n```\n\nThe primary reason for both of them to exist is performance. When it comes to\nperformance, at a high level at least, there are two primary ways to look at\nit:\n\n* **Throughput**: For this, think about it as, \"given some very large haystack\n  and a byte that never occurs in that haystack, how long does it take to\n  search through it and determine that it, in fact, does not occur?\"\n* **Latency**: For this, think about it as, \"given a tiny haystack---just a\n  few bytes---how long does it take to determine if a byte is in it?\"\n\nThe `memchr` routine in this crate has _slightly_ worse latency than the\nsolution presented above, however, its throughput can easily be over an\norder of magnitude faster. This is a good general purpose trade off to make.\nYou rarely lose, but often gain big.\n\n**NOTE:** The name `memchr` comes from the corresponding routine in `libc`. A\nkey advantage of using this library is that its performance is not tied to its\nquality of implementation in the `libc` you happen to be using, which can vary\ngreatly from platform to platform.\n\nBut what about substring search? This one is a bit more complicated. The\nprimary reason for its existence is still indeed performance, but it's also\nuseful because Rust's core library doesn't actually expose any substring\nsearch routine on arbitrary bytes. The only substring search routine that\nexists works exclusively on valid UTF-8.\n\nSo if you have valid UTF-8, is there a reason to use this over the standard\nlibrary substring search routine? Yes. This routine is faster on almost every\nmetric, including latency. The natural question then, is why isn't this\nimplementation in the standard library, even if only for searching on UTF-8?\nThe reason is that the implementation details for using SIMD in the standard\nlibrary haven't quite been worked out yet.\n\n**NOTE:** Currently, only `x86_64`, `wasm32` and `aarch64` targets have vector\naccelerated implementations of `memchr` (and friends) and `memmem`.\n\n# Crate features\n\n* **std** - When enabled (the default), this will permit features specific to\nthe standard library. Currently, the only thing used from the standard library\nis runtime SIMD CPU feature detection. This means that this feature must be\nenabled to get AVX2 accelerated routines on `x86_64` targets without enabling\nthe `avx2` feature at compile time, for example. When `std` is not enabled,\nthis crate will still attempt to use SSE2 accelerated routines on `x86_64`. It\nwill also use AVX2 accelerated routines when the `avx2` feature is enabled at\ncompile time. In general, enable this feature if you can.\n* **alloc** - When enabled (the default), APIs in this crate requiring some\nkind of allocation will become available. For example, the\n[`memmem::Finder::into_owned`](crate::memmem::Finder::into_owned) API and the\n[`arch::all::shiftor`](crate::arch::all::shiftor) substring search\nimplementation. Otherwise, this crate is designed from the ground up to be\nusable in core-only contexts, so the `alloc` feature doesn't add much\ncurrently. Notably, disabling `std` but enabling `alloc` will **not** result\nin the use of AVX2 on `x86_64` targets unless the `avx2` feature is enabled\nat compile time. (With `std` enabled, AVX2 can be used even without the `avx2`\nfeature enabled at compile time by way of runtime CPU feature detection.)\n* **logging** - When enabled (disabled by default), the `log` crate is used\nto emit log messages about what kinds of `memchr` and `memmem` algorithms\nare used. Namely, both `memchr` and `memmem` have a number of different\nimplementation choices depending on the target and CPU, and the log messages\ncan help show what specific implementations are being used. Generally, this is\nuseful for debugging performance issues.\n* **libc** - **DEPRECATED**. Previously, this enabled the use of the target's\n`memchr` function from whatever `libc` was linked into the program. This\nfeature is now a no-op because this crate's implementation of `memchr` should\nnow be sufficiently fast on a number of platforms that `libc` should no longer\nbe needed. (This feature is somewhat of a holdover from this crate's origins.\nOriginally, this crate was literally just a safe wrapper function around the\n`memchr` function from `libc`.)","links":{"crate::arch::all::shiftor":"0:171:2092","crate::memmem::Finder::into_owned":"0:782:3428","`memmem`":"0:668:1969","`memmem::Finder`":"0:1559:2350"},"attrs":["#![deny(missing_docs)]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:26:1966","0:668:1969","0:7-0:593:1949","0:8-0:597:1950","0:9-0:608:1951","0:10-0:601:1952","0:11-0:611:1953","0:12-0:605:1954","0:13-0:595:1955","0:14-0:599:1956","0:15-0:610:1957","0:16-0:603:1958","0:17-0:613:1959","0:18-0:607:1960","0:19-0:1415:1961","0:20-0:1425:1962","0:21-0:1436:1963"],"is_stripped":false}}},"b:1:3720-0:1237:2279":{"id":"b:1:3720-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:139:2429":{"id":"0:139:2429","crate_id":0,"name":"with_indices","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[214,4],"end":[234,5]},"visibility":"public","docs":"Create a new pair using the offsets given for the needle given.\n\nThis bypasses any sort of heuristic process for choosing the offsets\nand permits the caller to choose the offsets themselves.\n\nIndices are limited to valid `u8` values so that a `Pair` uses less\nmemory. It is not possible to create a `Pair` with offsets bigger than\n`u8::MAX`. It's likely that such a thing is not needed, but if it is,\nit's suggested to build your own bespoke algorithm because you're\nlikely working on a very niche case. (File an issue if this suggestion\ndoes not make sense to you.)\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["index1",{"primitive":"u8"}],["index2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:1258:2292":{"id":"a:1:41602:3526-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:922:2287":{"id":"b:1:2887-0:922:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:28:1949":{"id":"0:28:1949","crate_id":0,"name":"memchr","span":{"filename":"src/arch/all/memchr.rs","begin":[1,0],"end":[996,1]},"visibility":"public","docs":"Provides architecture independent implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers\nare typically slower than hand-coded vector routines accomplishing the same\ntask, but are also typically faster than naive scalar code. These routines\neffectively work by treating a `usize` as a vector of 8-bit lanes, and thus\nachieves some level of data parallelism even without explicit vector support.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:922:2287","`One::count`":"0:41:557","`One`":"0:878:2187","`Two`":"0:899:2267","`One::find`":"0:37:2203","`OneIter`":"0:886:2246"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:878:2187","0:886:2246","0:899:2267","0:909:2279","0:922:2287","0:934:2292"],"is_stripped":false}}},"b:1:3720-0:971:2737":{"id":"b:1:3720-0:971:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31987:236-0:1137:2187":{"id":"a:1:31987:236-0:1137:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:1216:2246":{"id":"b:1:2615-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:960:462":{"id":"0:960:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,9],"end":[134,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:470:1161":{"id":"0:470:1161","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[439,4],"end":[441,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1415:1961":{"id":"0:1415:1961","crate_id":0,"name":"Memchr","span":{"filename":"src/memchr.rs","begin":[288,0],"end":[291,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr_iter`] or `[memrchr_iter`]\nfunctions. It can also be created with the [`Memchr::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`memchr_iter`":"0:605:1954","`Memchr::new`":"0:616:1152"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:614","a:1:41603:3525-0:1415:1961","a:1:3110:246-0:1415:1961","a:1:32044:9306-0:1415:1961","a:1:31987:236-0:1415:1961","a:1:41602:3526-0:1415:1961","a:1:3145:9739-0:1415:1961","b:1:8170-0:1415:1961","b:1:2891-0:1415:1961","b:1:2612-0:1415:1961","b:1:2887-0:1415:1961","b:1:2902-0:1415:1961","b:1:2897-0:1415:1961","b:1:3720-0:1415:1961","b:1:2615-0:1415:1961","b:5:725-0:1415:1961","0:629","0:1419","0:1422","0:617","0:625"]}}},"b:1:2897-0:1545:3557":{"id":"b:1:2897-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3145:9739-0:1187:2292":{"id":"a:1:3145:9739-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:16-0:603:1958":{"id":"0:16-0:603:1958","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,38],"end":[205,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr3","name":"memrchr3","id":"0:603:1958","glob":false}}},"a:1:41602:3526-0:1579:3600":{"id":"a:1:41602:3526-0:1579:3600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8170-0:1530:3552":{"id":"b:1:8170-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:8172:172","1:8173:9780","1:8174:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:31987:236-0:1187:2292":{"id":"a:1:31987:236-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3145:9739-0:1559:2350":{"id":"a:1:3145:9739-0:1559:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:616:1152":{"id":"0:616:1152","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[300,4],"end":[305,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:1490:3529":{"id":"b:1:3720-0:1490:3529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2902-0:922:2287":{"id":"b:1:2902-0:922:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:317:953":{"id":"0:317:953","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[450,4],"end":[452,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3110:246-0:1229:2267":{"id":"a:1:3110:246-0:1229:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2891-0:1187:2292":{"id":"b:1:2891-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2891-0:1200:2350":{"id":"b:1:2891-0:1200:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:799:3601":{"id":"0:799:3601","crate_id":0,"name":"build_forward","span":{"filename":"src/memmem/mod.rs","begin":[666,4],"end":[671,5]},"visibility":"public","docs":"Build a forward finder using the given needle from the current\nsettings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2855:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359:172":{"id":"0:359:172","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[861,4],"end":[861,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"1:13232:31175":{"id":"1:13232:31175","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:9705"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:2090":{"id":"0:124:2090","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[1,0],"end":[359,1]},"visibility":"public","docs":"Provides an architecture independent implementation of the \"packed pair\"\nalgorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for. Note that\nthis module provides an architecture independent version that doesn't do as\ngood of a job keeping the search for candidates inside a SIMD hot path. It\nhowever can be good enough in many circumstances.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:947:2350","0:956:2352","0:142:2409"],"is_stripped":false}}},"b:1:3720-0:1179:2287":{"id":"b:1:3720-0:1179:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:478:2208":{"id":"0:478:2208","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[576,4],"end":[597,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13128:3026":{"id":"1:13128:3026","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:418:2367":{"id":"0:418:2367","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[132,4],"end":[135,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:422:3161"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:909:2279":{"id":"b:1:2902-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:15-0:610:1957":{"id":"0:15-0:610:1957","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,23],"end":[205,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr2_iter","name":"memrchr2_iter","id":"0:610:1957","glob":false}}},"0:655":{"id":"0:655","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[482,0],"end":[494,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8204:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:657:2262"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13127:973":{"id":"1:13127:973","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12295:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2210":{"id":"0:46:2210","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[256,4],"end":[269,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:1579:3600":{"id":"a:1:31987:236-0:1579:3600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32044:9306-0:1237:2279":{"id":"a:1:32044:9306-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2897-0:964:2350":{"id":"b:1:2897-0:964:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:416:3236":{"id":"0:416:3236","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[87,4],"end":[110,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Finder::with_pair`] will\nreturn a `Some` value. Similarly, when it is false, it is guaranteed\nthat `Finder::with_pair` will return a `None` value. Notice that this\ndoes not guarantee that [`Finder::new`] will return a `Finder`. Namely,\neven when `Finder::is_available` is true, it is not guaranteed that a\nvalid [`Pair`] can be found from the needle given.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Pair`":"0:956:2352","`Finder::new`":"0:413:1152","`Finder::with_pair`":"0:414:2357"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:439:2205":{"id":"0:439:2205","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[156,4],"end":[186,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:727:3416":{"id":"5:727:3416","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:743:3550":{"id":"0:743:3550","crate_id":0,"name":"find_iter","span":{"filename":"src/memmem/mod.rs","begin":[116,0],"end":[121,1]},"visibility":"public","docs":"Returns an iterator over all non-overlapping occurrences of a substring in\na haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet mut it = memmem::find_iter(haystack, b\"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"N"}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"type":{"bounds":[{"outlives":"'n"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2855:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:809:3647":{"id":"0:809:3647","crate_id":0,"name":"prefilter","span":{"filename":"src/memmem/mod.rs","begin":[709,4],"end":[712,5]},"visibility":"public","docs":"Configure the prefilter setting for the finder.\n\nSee the documentation for [`Prefilter`] for more discussion on why\nyou might want to configure this.","links":{"`Prefilter`":"0:1490:3529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["prefilter",{"resolved_path":{"name":"Prefilter","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:891":{"id":"0:891","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[302,9],"end":[302,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:894:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41602:3526-0:1166:2279":{"id":"a:1:41602:3526-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3720-0:1425:1962":{"id":"b:1:3720-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2612-0:1579:3600":{"id":"b:1:2612-0:1579:3600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32044:9306-0:1166:2279":{"id":"a:1:32044:9306-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:751:2203":{"id":"0:751:2203","crate_id":0,"name":"find","span":{"filename":"src/memmem/mod.rs","begin":[185,0],"end":[191,1]},"visibility":"public","docs":"Returns the index of the first occurrence of the given needle.\n\nNote that if you're are searching for the same needle in many different\nsmall haystacks, it may be faster to initialize a [`Finder`] once,\nand reuse it for each search.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), memmem::find(haystack, b\"foo\"));\nassert_eq!(Some(4), memmem::find(haystack, b\"bar\"));\nassert_eq!(None, memmem::find(haystack, b\"quux\"));\n```","links":{"`Finder`":"0:1559:2350"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:1579:3600":{"id":"b:1:2902-0:1579:3600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2897-0:1579:3600":{"id":"b:1:2897-0:1579:3600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3145:9739-0:1415:1961":{"id":"a:1:3145:9739-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41603:3525-0:1007:2737":{"id":"a:1:41603:3525-0:1007:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:287:3223":{"id":"0:287:3223","crate_id":0,"name":"avx2","span":{"filename":"src/arch/x86_64/avx2/mod.rs","begin":[1,0],"end":[6,19]},"visibility":"public","docs":"Algorithms for the `x86_64` target using 256-bit vectors via AVX2.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:288:1949","0:405:2090"],"is_stripped":false}}},"0:1214":{"id":"0:1214","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1215:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:1579:3600":{"id":"b:1:2615-0:1579:3600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31987:236-0:1166:2279":{"id":"a:1:31987:236-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13175:2207":{"id":"1:13175:2207","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41510:190","prim@char":"4:12295:458","self::pattern":"1:12817:9705"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:15462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1208:2187":{"id":"b:1:2615-0:1208:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1421:462":{"id":"0:1421:462","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[287,9],"end":[287,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:9306-0:964:2350":{"id":"a:1:32044:9306-0:964:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2891-0:1425:1962":{"id":"b:1:2891-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31987:236-0:909:2279":{"id":"a:1:31987:236-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31987:236-0:922:2287":{"id":"a:1:31987:236-0:922:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:956:2352":{"id":"0:956:2352","crate_id":0,"name":"Pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[135,0],"end":[138,1]},"visibility":"public","docs":"A pair of byte offsets into a needle to use as a predicate.\n\nThis pair is used as a predicate to quickly filter out positions in a\nhaystack in which a needle cannot match. In some cases, this pair can even\nbe used in vector algorithms such that the vector algorithm only switches\nover to scalar code once this pair has been found.\n\nA pair of offsets can be used in both substring search implementations and\nin prefilters. The former will report matches of a needle in a haystack\nwhere as the latter will only report possible matches of a needle.\n\nThe offsets are limited each to a maximum of 255 to keep memory usage low.\nMoreover, it's rarely advantageous to create a predicate using offsets\ngreater than 255 anyway.\n\nThe only guarantee enforced on the pair of offsets is that they are not\nequivalent. It is not necessarily the case that `index1 < index2` for\nexample. By convention, `index1` corresponds to the byte in the needle\nthat is believed to be most the predictive. Note also that because of the\nrequirement that the indices be both valid for the needle used to build\nthe pair and not equal, it follows that a pair can only be constructed for\nneedles with length at least 2.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:135","a:1:41603:3525-0:956:2352","a:1:3110:246-0:956:2352","a:1:32044:9306-0:956:2352","a:1:31987:236-0:956:2352","a:1:41602:3526-0:956:2352","a:1:3145:9739-0:956:2352","b:1:2891-0:956:2352","b:1:2612-0:956:2352","b:1:2887-0:956:2352","b:1:2902-0:956:2352","b:1:2897-0:956:2352","b:1:3720-0:956:2352","b:1:2615-0:956:2352","b:5:725-0:956:2352","0:961","0:962","0:959"]}}},"b:1:2897-0:999:2350":{"id":"b:1:2897-0:999:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:95:2203":{"id":"0:95:2203","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[651,4],"end":[659,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1212:462":{"id":"0:1212:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:431:1152":{"id":"0:431:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[40,4],"end":[47,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle byte given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:668:1969":{"id":"0:668:1969","crate_id":0,"name":"memmem","span":{"filename":"src/memmem/mod.rs","begin":[1,0],"end":[737,1]},"visibility":"public","docs":"This module provides forward and reverse substring search routines.\n\nUnlike the standard library's substring search routines, these work on\narbitrary bytes. For all non-empty needles, these routines will report exactly\nthe same values as the corresponding routines in the standard library. For\nthe empty needle, the standard library reports matches only at valid UTF-8\nboundaries, where as these routines will report matches at every position.\n\nOther than being able to work on arbitrary bytes, the primary reason to prefer\nthese routines over the standard library routines is that these will generally\nbe faster. In some cases, significantly so.\n\n# Example: iterating over substring matches\n\nThis example shows how to use [`find_iter`] to find occurrences of a substring\nin a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches in reverse\n\nThis example shows how to use [`rfind_iter`] to find occurrences of a substring\nin a haystack starting from the end of the haystack.\n\n**NOTE:** This module does not implement double ended iterators, so reverse\nsearches aren't done by calling `rev` on a forward iterator.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::rfind_iter(haystack, \"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`Finder`] (or a [`FinderRev`] for\nreverse searches).\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```","links":{"`rfind_iter`":"0:747:3556","`FinderRev`":"0:1569:2737","`find_iter`":"0:743:3550","`Finder`":"0:1559:2350"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:669-0:1490:3529","0:743:3550","0:747:3556","0:751:2203","0:752:2207","0:1530:3552","0:1545:3557","0:1559:2350","0:1569:2737","0:1579:3600"],"is_stripped":false}}},"0:159:1152":{"id":"0:159:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[185,4],"end":[197,5]},"visibility":"public","docs":"Create a new Rabin-Karp reverse searcher for the given `needle`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:787:1152":{"id":"0:787:1152","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[532,4],"end":[534,5]},"visibility":"public","docs":"Create a new reverse finder for the given needle.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2855:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:956:2352":{"id":"a:1:41602:3526-0:956:2352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:917:462":{"id":"0:917:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[567,9],"end":[567,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1234":{"id":"0:1234","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,16],"end":[404,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41603:3525-0:1436:1963":{"id":"a:1:41603:3525-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3145:9739-0:1490:3529":{"id":"a:1:3145:9739-0:1490:3529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3110:246-0:971:2737":{"id":"a:1:3110:246-0:971:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31987:236-0:1216:2246":{"id":"a:1:31987:236-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:143:2413":{"id":"0:143:2413","crate_id":0,"name":"rank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[317,4],"end":[317,35]},"visibility":"default","docs":"Return the heuristic frequency rank of the given byte. A lower rank\nmeans the byte is believed to occur less frequently in the haystack.\n\nSome uses of this heuristic may treat arbitrary absolute rank values as\nsignificant. For example, an implementation detail in this crate may\ndetermine that heuristic prefilters are inappropriate if every byte in\nthe needle has a \"high\" rank.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2897-0:886:2246":{"id":"b:1:2897-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2887-0:1237:2279":{"id":"b:1:2887-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3110:246-0:1490:3529":{"id":"a:1:3110:246-0:1490:3529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:761:172":{"id":"0:761:172","crate_id":0,"name":"Item","span":{"filename":"src/memmem/mod.rs","begin":[274,4],"end":[274,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:1563":{"id":"0:1563","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[386,9],"end":[386,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1565:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2887-0:1229:2267":{"id":"b:1:2887-0:1229:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:963:779":{"id":"0:963:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,22],"end":[134,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:9739-0:1179:2287":{"id":"a:1:3145:9739-0:1179:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3110:246-0:934:2292":{"id":"a:1:3110:246-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3110:246-0:1545:3557":{"id":"a:1:3110:246-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3110:246-0:1569:2737":{"id":"a:1:3110:246-0:1569:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:1179:2287":{"id":"b:1:2887-0:1179:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:489:1166":{"id":"0:489:1166","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[671,4],"end":[676,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1161":{"id":"0:1161","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,9],"end":[515,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1162:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2897-0:1166:2279":{"id":"b:1:2897-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2893:809":{"id":"1:2893:809","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1174:462":{"id":"0:1174:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,9],"end":[854,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3110:246-0:899:2267":{"id":"a:1:3110:246-0:899:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8170-0:1187:2292":{"id":"b:1:8170-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8172:172","1:8173:9780","1:8174:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:934:2292":{"id":"0:934:2292","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/all/memchr.rs","begin":[836,0],"end":[841,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:103:953","`Three`":"0:922:2287"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:41603:3525-0:934:2292","a:1:3110:246-0:934:2292","a:1:32044:9306-0:934:2292","a:1:31987:236-0:934:2292","a:1:41602:3526-0:934:2292","a:1:3145:9739-0:934:2292","b:1:8170-0:934:2292","b:1:2891-0:934:2292","b:1:2612-0:934:2292","b:1:2887-0:934:2292","b:1:2902-0:934:2292","b:1:2897-0:934:2292","b:1:3720-0:934:2292","b:1:2615-0:934:2292","b:5:725-0:934:2292","0:943","0:108","0:939","0:115"]}}},"b:5:725-0:1545:3557":{"id":"b:5:725-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1206":{"id":"0:1206","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1207:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1208:2187":{"id":"0:1208:2187","crate_id":0,"name":"One","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[29,0],"end":[29,38]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:430","a:1:41603:3525-0:1208:2187","a:1:3110:246-0:1208:2187","a:1:32044:9306-0:1208:2187","a:1:31987:236-0:1208:2187","a:1:41602:3526-0:1208:2187","a:1:3145:9739-0:1208:2187","b:1:2891-0:1208:2187","b:1:2612-0:1208:2187","b:1:2887-0:1208:2187","b:1:2902-0:1208:2187","b:1:2897-0:1208:2187","b:1:3720-0:1208:2187","b:1:2615-0:1208:2187","b:5:725-0:1208:2187","0:1211","0:1213","0:1214"]}}},"0:155:1152":{"id":"0:155:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[87,4],"end":[99,5]},"visibility":"public","docs":"Create a new Rabin-Karp forward searcher for the given `needle`.\n\nThe needle may be empty. The empty needle matches at every byte offset.\n\nNote that callers must pass the same needle to all search calls using\nthis `Finder`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:1949":{"id":"0:288:1949","crate_id":0,"name":"memchr","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1,0],"end":[1352,1]},"visibility":"public","docs":"This module defines 256-bit vector implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers are\ntypically much faster than scalar routines accomplishing the same task.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:1179:2287","`One::count`":"0:304:557","`One`":"0:1137:2187","`Two`":"0:1158:2267","`One::find`":"0:300:2203","`OneIter`":"0:1145:2246"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1137:2187","0:1145:2246","0:1158:2267","0:1166:2279","0:1179:2287","0:1187:2292"],"is_stripped":false}}},"0:1585":{"id":"0:1585","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,23],"end":[653,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2939:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1586:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3145:9739-0:899:2267":{"id":"a:1:3145:9739-0:899:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2612-0:1229:2267":{"id":"b:1:2612-0:1229:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:41:557":{"id":"0:41:557","crate_id":0,"name":"count","span":{"filename":"src/arch/all/memchr.rs","begin":[93,4],"end":[101,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41603:3525-0:886:2246":{"id":"a:1:41603:3525-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:468":{"id":"0:468","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[407,0],"end":[648,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:469:1152","0:470:1161","0:471:3236","0:472:2203","0:474:2207","0:476:2205","0:478:2208","0:482:953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2891-0:1007:2737":{"id":"b:1:2891-0:1007:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:1145:2246":{"id":"b:5:725-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3110:246-0:1415:1961":{"id":"a:1:3110:246-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:424:1949":{"id":"0:424:1949","crate_id":0,"name":"memchr","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[1,0],"end":[1077,1]},"visibility":"public","docs":"This module defines 128-bit vector implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers are\ntypically much faster than scalar routines accomplishing the same task.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:1250:2287","`One::count`":"0:438:557","`One`":"0:1208:2187","`Two`":"0:1229:2267","`One::find`":"0:434:2203","`OneIter`":"0:1216:2246"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1208:2187","0:1216:2246","0:1229:2267","0:1237:2279","0:1250:2287","0:1258:2292"],"is_stripped":false}}},"b:1:8170-0:1436:1963":{"id":"b:1:8170-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8172:172","1:8173:9780","1:8174:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:176:1152":{"id":"0:176:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/all/shiftor.rs","begin":[32,4],"end":[46,5]},"visibility":"public","docs":"Create a new Shift-Or forward searcher for the given `needle`.\n\nThe needle may be empty. The empty needle matches at every byte offset.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:469:1152":{"id":"0:469:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[416,4],"end":[423,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13249:3445":{"id":"1:13249:3445","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1137:2187":{"id":"b:1:2615-0:1137:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:379:2205":{"id":"0:379:2205","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1037,4],"end":[1079,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:1152":{"id":"0:94:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[621,4],"end":[630,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the three needle bytes\ngiven.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1499:779":{"id":"0:1499:779","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/searcher.rs","begin":[542,22],"end":[542,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21-0:1436:1963":{"id":"0:21-0:1436:1963","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,21],"end":[206,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr3","name":"Memchr3","id":"0:1436:1963","glob":false}}},"b:1:2612-0:964:2350":{"id":"b:1:2612-0:964:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:993:2350":{"id":"0:993:2350","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/shiftor.rs","begin":[20,0],"end":[23,1]},"visibility":"public","docs":"A forward substring searcher using the Shift-Or algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:174","a:1:41603:3525-0:993:2350","a:1:3110:246-0:993:2350","a:1:32044:9306-0:993:2350","a:1:31987:236-0:993:2350","a:1:41602:3526-0:993:2350","a:1:3145:9739-0:993:2350","b:1:2891-0:993:2350","b:1:2612-0:993:2350","b:1:2887-0:993:2350","b:1:2902-0:993:2350","b:1:2897-0:993:2350","b:1:3720-0:993:2350","b:1:2615-0:993:2350","0:997"]}}},"b:1:2612-0:1559:2350":{"id":"b:1:2612-0:1559:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1256":{"id":"0:1256","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,22],"end":[701,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1257:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3720-0:1137:2187":{"id":"b:1:3720-0:1137:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3145:9739-0:1145:2246":{"id":"a:1:3145:9739-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41603:3525-0:1229:2267":{"id":"a:1:41603:3525-0:1229:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2897-0:993:2350":{"id":"b:1:2897-0:993:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:422:3161":{"id":"0:422:3161","crate_id":0,"name":"min_haystack_len","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[199,4],"end":[212,5]},"visibility":"public","docs":"Returns the minimum haystack length that this `Finder` can search.\n\nUsing a haystack with length smaller than this in a search will result\nin a panic. The reason for this restriction is that this finder is\nmeant to be a low-level component that is part of a larger substring\nstrategy. In that sense, it avoids trying to handle all cases and\ninstead only handles the cases that it can handle very well.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1233:462":{"id":"0:1233:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,9],"end":[404,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:495:2262":{"id":"0:495:2262","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[686,4],"end":[691,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:1258:2292":{"id":"b:1:2891-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:1166:2279":{"id":"b:1:3720-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:542:2203":{"id":"0:542:2203","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[100,4],"end":[103,5]},"visibility":"public","docs":"Execute a search using SSE2 vectors and routines.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:547:3161"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1558:779":{"id":"0:1558:779","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[313,16],"end":[313,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:465":{"id":"0:465","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[397,0],"end":[397,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:886:2246":{"id":"b:1:2615-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1204:462":{"id":"0:1204:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[617,0],"end":[822,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:94:1152","0:95:2203","0:97:2207","0:99:2205","0:101:2208","0:103:953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2612-0:956:2352":{"id":"b:1:2612-0:956:2352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2887-0:999:2350":{"id":"b:1:2887-0:999:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2902-0:1158:2267":{"id":"b:1:2902-0:1158:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:433:3236":{"id":"0:433:3236","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[77,4],"end":[86,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`One::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`One::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`One::new`":"0:431:1152"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2897-0:947:2350":{"id":"b:1:2897-0:947:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:457:557":{"id":"0:457:557","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[373,4],"end":[379,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:506:2207":{"id":"0:506:2207","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[787,4],"end":[795,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:460":{"id":"0:460","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[387,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8204:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:463:2262"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:1425:1962":{"id":"b:5:725-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13203:31461":{"id":"1:13203:31461","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:15462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:619:172":{"id":"0:619:172","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[309,4],"end":[309,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:2902-0:1166:2279":{"id":"b:1:2902-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:909:2279":{"id":"b:1:3720-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41602:3526-0:1179:2287":{"id":"a:1:41602:3526-0:1179:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:1271:2350":{"id":"b:1:2887-0:1271:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2902-0:1530:3552":{"id":"b:1:2902-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2900:136":{"id":"1:2900:136","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:1:3145:9739-0:1569:2737":{"id":"a:1:3145:9739-0:1569:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:947:2350":{"id":"b:1:2887-0:947:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41603:3525-0:1187:2292":{"id":"a:1:41603:3525-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:922:2287":{"id":"0:922:2287","crate_id":0,"name":"Three","span":{"filename":"src/arch/all/memchr.rs","begin":[608,0],"end":[615,1]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:93","a:1:41603:3525-0:922:2287","a:1:3110:246-0:922:2287","a:1:32044:9306-0:922:2287","a:1:31987:236-0:922:2287","a:1:41602:3526-0:922:2287","a:1:3145:9739-0:922:2287","b:1:2891-0:922:2287","b:1:2612-0:922:2287","b:1:2887-0:922:2287","b:1:2902-0:922:2287","b:1:2897-0:922:2287","b:1:3720-0:922:2287","b:1:2615-0:922:2287","b:5:725-0:922:2287","0:929","0:931","0:932"]}}},"0:373:1161":{"id":"0:373:1161","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[935,4],"end":[944,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2208":{"id":"0:44:2208","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[197,4],"end":[232,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:884":{"id":"0:884","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:885:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32044:9306-0:1208:2187":{"id":"a:1:32044:9306-0:1208:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13139:2323":{"id":"1:13139:2323","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41510:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:620:1166":{"id":"0:620:1166","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[312,4],"end":[324,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2897-0:1559:2350":{"id":"b:1:2897-0:1559:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1275:462":{"id":"0:1275:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:1250:2287":{"id":"b:1:2891-0:1250:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3110:246-0:922:2287":{"id":"a:1:3110:246-0:922:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31987:236-0:1530:3552":{"id":"a:1:31987:236-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41602:3526-0:993:2350":{"id":"a:1:41602:3526-0:993:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13222:34887":{"id":"1:13222:34887","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:1250:2287":{"id":"a:1:41602:3526-0:1250:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41602:3526-0:1545:3557":{"id":"a:1:41602:3526-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1433":{"id":"0:1433","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[363,16],"end":[363,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1435:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:393:172":{"id":"0:393:172","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1248,4],"end":[1248,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:2891-0:964:2350":{"id":"b:1:2891-0:964:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5615:9254":{"id":"5:5615:9254","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:1569:2737":{"id":"a:1:41602:3526-0:1569:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41602:3526-0:878:2187":{"id":"a:1:41602:3526-0:878:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:517":{"id":"0:517","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[972,0],"end":[987,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter","nth","ne","eq","is_sorted_by","sum","position","min_by","try_for_each","try_collect","flat_map","filter_map","step_by","all","partial_cmp","is_sorted_by_key","product","rposition","copied","fold","min_by_key","collect_into","rev","flatten","any","peekable","chain","max","count","skip","__iterator_get_unchecked","cmp_by","find","unzip","max_by","reduce","partition","le","map_windows","skip_while","intersperse","lt","last","enumerate","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","min","fuse","take_while","intersperse_with","next_chunk","take","eq_by","cycle","find_map","is_partitioned","collect","inspect","gt","map_while","for_each","ge","advance_by","zip","is_sorted","array_chunks","try_find","size_hint","try_fold","cmp","by_ref","map","scan"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:520:172","0:521:1166","0:523:2261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:11-0:611:1953":{"id":"0:11-0:611:1953","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,44],"end":[204,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr3_iter","name":"memchr3_iter","id":"0:611:1953","glob":false}}},"1:13159:14474":{"id":"1:13159:14474","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43624:13568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5598:35592":{"id":"5:5598:35592","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2774","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:2774","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13151:31449":{"id":"1:13151:31449","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13152:31450"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:1436:1963":{"id":"a:1:41602:3526-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3110:246-0:1425:1962":{"id":"a:1:3110:246-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2891-0:1166:2279":{"id":"b:1:2891-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2891-0:1179:2287":{"id":"b:1:2891-0:1179:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[498,0],"end":[506,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8204:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:332:2262"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41603:3525-0:1425:1962":{"id":"a:1:41603:3525-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:967":{"id":"0:967","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:968:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:654:2261":{"id":"0:654:2261","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[477,4],"end":[479,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1166:2279":{"id":"b:1:2615-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:8172:172":{"id":"1:8172:172","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:1568:779":{"id":"0:1568:779","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[386,16],"end":[386,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:2363":{"id":"0:141:2363","crate_id":0,"name":"index2","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[244,4],"end":[246,5]},"visibility":"public","docs":"Returns the second offset of the pair.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:964:2350":{"id":"a:1:41602:3526-0:964:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:136:1152":{"id":"0:136:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[149,4],"end":[151,5]},"visibility":"public","docs":"Create a new pair of offsets from the given needle.\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.\n\nThis chooses the pair in the needle that is believed to be as\npredictive of an overall match of the needle as possible.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:953":{"id":"0:103:953","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[805,4],"end":[807,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of one of the needle bytes in\nthe given haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3110:246-0:1250:2287":{"id":"a:1:3110:246-0:1250:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:947:2350":{"id":"b:5:725-0:947:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:798:1152":{"id":"0:798:1152","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[660,4],"end":[662,5]},"visibility":"public","docs":"Create a new finder builder with default settings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:1137:2187":{"id":"a:1:41602:3526-0:1137:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2897-0:1415:1961":{"id":"b:1:2897-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13161:27864":{"id":"1:13161:27864","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43662:13572","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:999:2350":{"id":"b:5:725-0:999:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3110:246-0:909:2279":{"id":"a:1:3110:246-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:886:2246":{"id":"0:886:2246","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/all/memchr.rs","begin":[303,0],"end":[308,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:878:2187","`One::iter`":"0:47:953"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:41603:3525-0:886:2246","a:1:3110:246-0:886:2246","a:1:32044:9306-0:886:2246","a:1:31987:236-0:886:2246","a:1:41602:3526-0:886:2246","a:1:3145:9739-0:886:2246","b:1:8170-0:886:2246","b:1:2891-0:886:2246","b:1:2612-0:886:2246","b:1:2887-0:886:2246","b:1:2902-0:886:2246","b:1:2897-0:886:2246","b:1:3720-0:886:2246","b:1:2615-0:886:2246","b:5:725-0:886:2246","0:52","0:895","0:61","0:891"]}}},"b:1:2612-0:934:2292":{"id":"b:1:2612-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:1208:2187":{"id":"b:5:725-0:1208:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41603:3525-0:1415:1961":{"id":"a:1:41603:3525-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:1569:2737":{"id":"b:5:725-0:1569:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1154":{"id":"0:1154","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,16],"end":[466,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1157:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:286:1933":{"id":"0:286:1933","crate_id":0,"name":"x86_64","span":{"filename":"src/arch/x86_64/mod.rs","begin":[1,0],"end":[8,22]},"visibility":"public","docs":"Vector algorithms for the `x86_64` target.","links":{},"attrs":["#[cfg(target_arch = \"x86_64\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:287:3223","0:423:1942"],"is_stripped":false}}},"0:161:2208":{"id":"0:161:2208","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[248,4],"end":[273,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `<= end`. The pointer returned is only ever equivalent\nto `end` when both the needle and haystack are empty. (That is, the\nempty string matches the empty string.)\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\nNote that `start` and `end` below refer to both pairs of pointers given\nto this routine. That is, the conditions apply to both `hstart`/`hend`\nand `nstart`/`nend`.\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n* It must be the case that `start <= end`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["hend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:993:2350":{"id":"b:1:2612-0:993:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5599:9882":{"id":"5:5599:9882","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:1258:2292":{"id":"b:1:2612-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2902-0:1490:3529":{"id":"b:1:2902-0:1490:3529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:908:779":{"id":"0:908:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[351,22],"end":[351,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:9739-0:1229:2267":{"id":"a:1:3145:9739-0:1229:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:14-0:599:1956":{"id":"0:14-0:599:1956","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,13],"end":[205,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr2","name":"memrchr2","id":"0:599:1956","glob":false}}},"b:5:725-0:971:2737":{"id":"b:5:725-0:971:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1495":{"id":"0:1495","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,9],"end":[542,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1496:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:157:2205":{"id":"0:157:2205","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[150,4],"end":[175,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `<= end`. The pointer returned is only ever equivalent\nto `end` when both the needle and haystack are empty. (That is, the\nempty string matches the empty string.)\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\nNote that `start` and `end` below refer to both pairs of pointers given\nto this routine. That is, the conditions apply to both `hstart`/`hend`\nand `nstart`/`nend`.\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n* It must be the case that `start <= end`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["hend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:1237:2279":{"id":"b:1:2891-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41603:3525-0:1250:2287":{"id":"a:1:41603:3525-0:1250:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13154:13573":{"id":"1:13154:13573","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12295:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43340:13551","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2262":{"id":"0:118:2262","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[862,4],"end":[867,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1166:2279":{"id":"0:1166:2279","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[855,0],"end":[858,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:1158:2267","`Two::iter`":"0:353:953"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:41603:3525-0:1166:2279","a:1:3110:246-0:1166:2279","a:1:32044:9306-0:1166:2279","a:1:31987:236-0:1166:2279","a:1:41602:3526-0:1166:2279","a:1:3145:9739-0:1166:2279","b:1:8170-0:1166:2279","b:1:2891-0:1166:2279","b:1:2612-0:1166:2279","b:1:2887-0:1166:2279","b:1:2902-0:1166:2279","b:1:2897-0:1166:2279","b:1:3720-0:1166:2279","b:1:2615-0:1166:2279","b:5:725-0:1166:2279","0:356","0:1171","0:368","0:363","0:1175"]}}},"0:1435:779":{"id":"0:1435:779","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[363,16],"end":[363,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:9306-0:934:2292":{"id":"a:1:32044:9306-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1186:779":{"id":"0:1186:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,22],"end":[894,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:631":{"id":"0:631","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[370,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:633:1152"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:898:779":{"id":"0:898:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[302,16],"end":[302,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1554:462":{"id":"0:1554:462","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[313,9],"end":[313,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1559:2350":{"id":"b:1:2615-0:1559:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41603:3525-0:1579:3600":{"id":"a:1:41603:3525-0:1579:3600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13136:34876":{"id":"1:13136:34876","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:648:1152":{"id":"0:648:1152","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[446,4],"end":[458,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:1569:2737":{"id":"a:1:31987:236-0:1569:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:878:2187":{"id":"0:878:2187","crate_id":0,"name":"One","span":{"filename":"src/arch/all/memchr.rs","begin":[35,0],"end":[38,1]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:34","a:1:41603:3525-0:878:2187","a:1:3110:246-0:878:2187","a:1:32044:9306-0:878:2187","a:1:31987:236-0:878:2187","a:1:41602:3526-0:878:2187","a:1:3145:9739-0:878:2187","b:1:2891-0:878:2187","b:1:2612-0:878:2187","b:1:2887-0:878:2187","b:1:2902-0:878:2187","b:1:2897-0:878:2187","b:1:3720-0:878:2187","b:1:2615-0:878:2187","b:5:725-0:878:2187","0:883","0:884","0:881"]}}},"0:1200:2350":{"id":"0:1200:2350","crate_id":0,"name":"Finder","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[23,0],"end":[26,1]},"visibility":"public","docs":"A \"packed pair\" finder that uses 256-bit vector operations.\n\nThis finder picks two bytes that it believes have high predictive power\nfor indicating an overall match of a needle. Depending on whether\n`Finder::find` or `Finder::find_prefilter` is used, it reports offsets\nwhere the needle matches or could match. In the prefilter case, candidates\nare reported whenever the [`Pair`] of bytes given matches.","links":{"`Pair`":"0:956:2352"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:412","a:1:41603:3525-0:1200:2350","a:1:3110:246-0:1200:2350","a:1:32044:9306-0:1200:2350","a:1:31987:236-0:1200:2350","a:1:41602:3526-0:1200:2350","a:1:3145:9739-0:1200:2350","b:1:2891-0:1200:2350","b:1:2612-0:1200:2350","b:1:2887-0:1200:2350","b:1:2902-0:1200:2350","b:1:2897-0:1200:2350","b:1:3720-0:1200:2350","b:1:2615-0:1200:2350","b:5:725-0:1200:2350","0:1206","0:1205","0:1203"]}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[336,0],"end":[344,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8204:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:64:2262"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:710:60":{"id":"0:710:60","crate_id":0,"name":"default","span":{"filename":"src/memmem/searcher.rs","begin":[554,4],"end":[556,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:2203":{"id":"0:188:2203","crate_id":0,"name":"find","span":{"filename":"src/arch/all/twoway.rs","begin":[137,4],"end":[139,5]},"visibility":"public","docs":"Returns the first occurrence of `needle` in the given `haystack`, or\n`None` if no such occurrence could be found.\n\nThe `needle` given must be the same as the `needle` provided to\n[`Finder::new`].\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{"`Finder::new`":"0:187:1152"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:599:1956":{"id":"0:599:1956","crate_id":0,"name":"memrchr2","span":{"filename":"src/memchr.rs","begin":[125,0],"end":[133,1]},"visibility":"public","docs":"Search for the last occurrence of two possible bytes in a haystack.\n\nThis returns the index corresponding to the last occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle1 || b == needle2)`, this\nroutine will attempt to use highly optimized vector operations that can be\nan order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the last position of one of two possible bytes in a\nhaystack.\n\n```\nuse memchr::memrchr2;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr2(b'k', b'o', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:634":{"id":"0:634","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[386,0],"end":[403,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter","nth","ne","eq","is_sorted_by","sum","position","min_by","try_for_each","try_collect","flat_map","filter_map","step_by","all","partial_cmp","is_sorted_by_key","product","rposition","copied","fold","min_by_key","collect_into","rev","flatten","any","peekable","chain","max","count","skip","__iterator_get_unchecked","cmp_by","find","unzip","max_by","reduce","partition","le","map_windows","skip_while","intersperse","lt","last","enumerate","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","min","fuse","take_while","intersperse_with","next_chunk","take","eq_by","cycle","find_map","is_partitioned","collect","inspect","gt","map_while","for_each","ge","advance_by","zip","is_sorted","array_chunks","try_find","size_hint","try_fold","cmp","by_ref","map","scan"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:636:172","0:637:1166","0:639:2261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3110:246-0:964:2350":{"id":"a:1:3110:246-0:964:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13171:2203":{"id":"1:13171:2203","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41510:190","prim@char":"4:12295:458","self::pattern":"1:12817:9705"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:35595":{"id":"5:5613:35595","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1235":{"id":"0:1235","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,22],"end":[404,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1236:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2887-0:1250:2287":{"id":"b:1:2887-0:1250:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41602:3526-0:1229:2267":{"id":"a:1:41602:3526-0:1229:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1165:779":{"id":"0:1165:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,22],"end":[515,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:947:2350":{"id":"b:1:2891-0:947:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:1258:2292":{"id":"b:5:725-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13235:31464":{"id":"1:13235:31464","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:9705"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:15462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:9306-0:899:2267":{"id":"a:1:32044:9306-0:899:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:1569:2737":{"id":"b:1:2887-0:1569:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1496:462":{"id":"0:1496:462","crate_id":0,"name":"clone","span":{"filename":"src/memmem/searcher.rs","begin":[542,9],"end":[542,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:9739-0:971:2737":{"id":"a:1:3145:9739-0:971:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1236:779":{"id":"0:1236:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,22],"end":[404,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3110:246-0:1436:1963":{"id":"a:1:3110:246-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:1237:2279":{"id":"b:5:725-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/arch/all/shiftor.rs","begin":[25,0],"end":[75,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:176:1152","0:178:2203"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:178:2203":{"id":"0:178:2203","crate_id":0,"name":"find","span":{"filename":"src/arch/all/shiftor.rs","begin":[61,4],"end":[74,5]},"visibility":"public","docs":"Return the first occurrence of the needle given to `Finder::new` in\nthe `haystack` given. If no such occurrence exists, then `None` is\nreturned.\n\nUnlike most other substring search implementations in this crate, this\nfinder does not require passing the needle at search time. A match can\nbe determined without the needle at all since the required information\nis already encoded into this finder at construction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:1166":{"id":"0:360:1166","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[864,4],"end":[869,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:1200:2350":{"id":"b:1:3720-0:1200:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3110:246-0:1579:3600":{"id":"a:1:3110:246-0:1579:3600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3110:246-0:1145:2246":{"id":"a:1:3110:246-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3110:246-0:1187:2292":{"id":"a:1:3110:246-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2902-0:1200:2350":{"id":"b:1:2902-0:1200:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13185:31454":{"id":"1:13185:31454","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12817:9705","`DoubleEndedIterator`":"1:8204:129","prim@char":"4:12295:458","str::split":"1:13179:31451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43388:13217","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:15462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:501:1152":{"id":"0:501:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[713,4],"end":[720,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1436:1963":{"id":"b:1:2615-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2612-0:1490:3529":{"id":"b:1:2612-0:1490:3529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:639:2261":{"id":"0:639:2261","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[400,4],"end":[402,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:802:3651":{"id":"0:802:3651","crate_id":0,"name":"build_forward_with_ranker","span":{"filename":"src/memmem/mod.rs","begin":[676,4],"end":[690,5]},"visibility":"public","docs":"Build a forward finder using the given needle and a custom heuristic for\ndetermining the frequency of a given byte in the dataset.\nSee [`HeuristicFrequencyRank`] for more details.","links":{"`HeuristicFrequencyRank`":"0:142:2409"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ranker",{"generic":"R"}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2855:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13126":{"id":"1:13126","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13127:973","1:13128:3026","1:13129:34873","1:13130:34874","1:13132:34875","1:13135:2332","1:13136:34876","1:13137:334","1:13138:31427","1:13139:2323","1:13141:15013","1:13143:30194","1:13145:30195","1:13147:34877","1:13148:34878","1:13149:2927","1:13150:31446","1:13151:31449","1:13152:31450","1:13154:13573","1:13155:13582","1:13156:2987","1:13157:27859","1:13158:27863","1:13159:14474","1:13160:34879","1:13161:27864","1:13162:2886","1:13165:31462","1:13168:31463","1:13171:2203","1:13175:2207","1:13179:31451","1:13182:27854","1:13185:31454","1:13188:34880","1:13191:34881","1:13194:31456","1:13197:31458","1:13200:31460","1:13203:31461","1:13206:3805","1:13209:34882","1:13212:34883","1:13215:34884","1:13218:34885","1:13220:34886","1:13222:34887","1:13224:34888","1:13225:34889","1:13226:34890","1:13229:34891","1:13232:31175","1:13235:31464","1:13238:34892","1:13241:34893","1:13244:34894","1:13247:34895","1:13249:3445","1:13250:31359","1:13251:31361","1:13252:31362","1:13253:31363","1:13254:31365","1:13255:31366","1:13256:31367","1:13257:34896","1:13259:15380","1:13260:34897"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2887-0:899:2267":{"id":"b:1:2887-0:899:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13137:334":{"id":"1:13137:334","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13138:31427","`u8`":"4:12312:1799"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:953":{"id":"0:47:953","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[276,4],"end":[278,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:956:2352":{"id":"b:1:2615-0:956:2352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:1271:2350":{"id":"b:5:725-0:1271:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2887-0:1545:3557":{"id":"b:1:2887-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:1569:2737":{"id":"b:1:2615-0:1569:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2902-0:899:2267":{"id":"b:1:2902-0:899:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:1166:2279":{"id":"b:5:725-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2612-0:1187:2292":{"id":"b:1:2612-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2902-0:1569:2737":{"id":"b:1:2902-0:1569:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:878:2187":{"id":"b:5:725-0:878:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:1007:2737":{"id":"b:1:2615-0:1007:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:774":{"id":"0:774","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[392,0],"end":[508,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:776:1152","0:778:2203","0:779:3550","0:782:3428","0:783:335","0:784:2103"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13241:34893":{"id":"1:13241:34893","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:9705"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:993:2350":{"id":"b:1:2902-0:993:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2902-0:1425:1962":{"id":"b:1:2902-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13165:31462":{"id":"1:13165:31462","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:9705"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2887-0:878:2187":{"id":"b:1:2887-0:878:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:970:779":{"id":"0:970:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,16],"end":[68,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8173:9780":{"id":"1:8173:9780","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1264,0],"end":[1272,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8204:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:400:2262"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41603:3525-0:899:2267":{"id":"a:1:41603:3525-0:899:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1575:462":{"id":"0:1575:462","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[523,9],"end":[523,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:764":{"id":"0:764","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[322,0],"end":[348,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:768:3428"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:13-0:595:1955":{"id":"0:13-0:595:1955","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,4],"end":[205,11]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr","name":"memrchr","id":"0:595:1955","glob":false}}},"0:627:2262":{"id":"0:627:2262","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[343,4],"end":[348,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13179:31451":{"id":"1:13179:31451","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12817:9705","`DoubleEndedIterator`":"1:8204:129","prim@char":"4:12295:458","str::split_whitespace":"1:13157:27859","str::rsplit":"1:13185:31454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43370:13212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13251:31361":{"id":"1:13251:31361","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:947:2350":{"id":"b:1:2902-0:947:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41603:3525-0:1179:2287":{"id":"a:1:41603:3525-0:1179:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:1559:2350":{"id":"b:1:2887-0:1559:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13188:34880":{"id":"1:13188:34880","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12817:9705","str::split":"1:13179:31451","prim@char":"4:12295:458","`DoubleEndedIterator`":"1:8204:129","str::rsplit_terminator":"1:13191:34881"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43420:13557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13250:31359":{"id":"1:13250:31359","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39472:9744","Self::is_ascii":"1:13249:3445"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39472:9744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:1007:2737":{"id":"b:1:2902-0:1007:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:922:2287":{"id":"b:5:725-0:922:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:942:462":{"id":"0:942:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[835,9],"end":[835,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:377:2207":{"id":"0:377:2207","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1003,4],"end":[1011,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13200:31460":{"id":"1:13200:31460","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:921:779":{"id":"0:921:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[567,16],"end":[567,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:1158:2267":{"id":"a:1:31987:236-0:1158:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:1490:3529":{"id":"b:1:2615-0:1490:3529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:1271:2350":{"id":"b:1:3720-0:1271:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2891-0:922:2287":{"id":"b:1:2891-0:922:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13129:34873":{"id":"1:13129:34873","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187:1152":{"id":"0:187:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/all/twoway.rs","begin":[114,4],"end":[126,5]},"visibility":"public","docs":"Create a searcher that finds occurrences of the given `needle`.\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:909:2279":{"id":"b:1:2615-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:414:2357":{"id":"0:414:2357","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[49,4],"end":[58,5]},"visibility":"public","docs":"Create a new \"packed pair\" finder using the pair of bytes given.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.\n\nIf AVX2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13132:34875":{"id":"1:13132:34875","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13130:34874"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:906":{"id":"0:906","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,16],"end":[351,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2887-0:1007:2737":{"id":"b:1:2887-0:1007:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:914":{"id":"0:914","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[567,9],"end":[567,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:917:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31987:236-0:1490:3529":{"id":"a:1:31987:236-0:1490:3529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2897-0:971:2737":{"id":"b:1:2897-0:971:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3145:9739-0:1200:2350":{"id":"a:1:3145:9739-0:1200:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32044:9306-0:1579:3600":{"id":"a:1:32044:9306-0:1579:3600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:607:1960":{"id":"0:607:1960","crate_id":0,"name":"memrchr_iter","span":{"filename":"src/memchr.rs","begin":[223,0],"end":[225,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:40323:3446","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2262":{"id":"0:91:2262","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[594,4],"end":[599,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:443:2210":{"id":"0:443:2210","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[257,4],"end":[271,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8170-0:1166:2279":{"id":"b:1:8170-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8172:172","1:8173:9780","1:8174:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:3720-0:947:2350":{"id":"b:1:3720-0:947:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:1237:2279":{"id":"b:1:2615-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:448:953":{"id":"0:448:953","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[339,4],"end":[341,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:539:2357":{"id":"0:539:2357","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[46,4],"end":[55,5]},"visibility":"public","docs":"Create a new \"packed pair\" finder using the pair of bytes given.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:1158:2267":{"id":"b:5:725-0:1158:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:417:2203":{"id":"0:417:2203","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[118,4],"end":[121,5]},"visibility":"public","docs":"Execute a search using AVX2 vectors and routines.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:422:3161"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1430":{"id":"0:1430","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[363,9],"end":[363,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1432:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:307:2208":{"id":"0:307:2208","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[245,4],"end":[275,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:9739-0:1271:2350":{"id":"a:1:3145:9739-0:1271:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41602:3526-0:1237:2279":{"id":"a:1:41602:3526-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:112:1166":{"id":"0:112:1166","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[847,4],"end":[852,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2887-0:934:2292":{"id":"b:1:2887-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:899:2267":{"id":"b:1:3720-0:899:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:943":{"id":"0:943","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[835,16],"end":[835,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:946:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2612-0:1200:2350":{"id":"b:1:2612-0:1200:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:209:2101":{"id":"0:209:2101","crate_id":0,"name":"is_prefix","span":{"filename":"src/arch/all/mod.rs","begin":[26,0],"end":[29,1]},"visibility":"public","docs":"Returns true if and only if `needle` is a prefix of `haystack`.\n\nThis uses a latency optimized variant of `memcmp` internally which *might*\nmake this faster for very short strings.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1157:779":{"id":"0:1157:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,16],"end":[466,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:1258:2292":{"id":"a:1:31987:236-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:614":{"id":"0:614","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[293,0],"end":[306,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:616:1152"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3145:9739-0:934:2292":{"id":"a:1:3145:9739-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:67:1152":{"id":"0:67:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[363,4],"end":[370,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the two needle bytes\ngiven.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13226:34890":{"id":"1:13226:34890","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:9705"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12843:15461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13138:31427":{"id":"1:13138:31427","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12312:1799"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13156:2987":{"id":"1:13156:2987","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43356:10342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:886:2246":{"id":"b:1:2902-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13260:34897":{"id":"1:13260:34897","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4901:34897"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43687:10000","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1250:2287":{"id":"b:1:2615-0:1250:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:524":{"id":"0:524","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[989,0],"end":[997,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8204:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:527:2262"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41603:3525-0:934:2292":{"id":"a:1:41603:3525-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1565:462":{"id":"0:1565:462","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[386,9],"end":[386,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1530:3552":{"id":"b:1:2615-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2897-0:909:2279":{"id":"b:1:2897-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:323:172":{"id":"0:323:172","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[473,4],"end":[473,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"a:1:32044:9306-0:1145:2246":{"id":"a:1:32044:9306-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:58:557":{"id":"0:58:557","crate_id":0,"name":"count","span":{"filename":"src/arch/all/memchr.rs","begin":[322,4],"end":[328,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:1490:3529":{"id":"a:1:41602:3526-0:1490:3529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1153:462":{"id":"0:1153:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,9],"end":[466,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[79,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:155:1152","0:156:2203","0:157:2205"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3145:9739-0:1007:2737":{"id":"a:1:3145:9739-0:1007:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1178:779":{"id":"0:1178:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,16],"end":[854,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1224:462":{"id":"0:1224:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,9],"end":[355,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:503:3236":{"id":"0:503:3236","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[754,4],"end":[763,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Three::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Three::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Three::new`":"0:501:1152"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:9739-0:886:2246":{"id":"a:1:3145:9739-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:622:557":{"id":"0:622:557","crate_id":0,"name":"count","span":{"filename":"src/memchr.rs","begin":[327,4],"end":[333,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:779:3550":{"id":"0:779:3550","crate_id":0,"name":"find_iter","span":{"filename":"src/memmem/mod.rs","begin":[457,4],"end":[462,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of a substring in a haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::Finder;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet finder = Finder::new(b\"foo\");\nlet mut it = finder.find_iter(haystack);\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41603:3525-0:971:2737":{"id":"a:1:41603:3525-0:971:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:1258:2292":{"id":"b:1:2887-0:1258:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:17-0:613:1959":{"id":"0:17-0:613:1959","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,48],"end":[205,61]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr3_iter","name":"memrchr3_iter","id":"0:613:1959","glob":false}}},"a:1:31987:236-0:1237:2279":{"id":"a:1:31987:236-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31987:236-0:1415:1961":{"id":"a:1:31987:236-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:1490:3529":{"id":"b:5:725-0:1490:3529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:603:1958":{"id":"0:603:1958","crate_id":0,"name":"memrchr3","span":{"filename":"src/memchr.rs","begin":[196,0],"end":[209,1]},"visibility":"public","docs":"Search for the last occurrence of three possible bytes in a haystack.\n\nThis returns the index corresponding to the last occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle1 || b == needle2 || b == needle3)`,\nthis routine will attempt to use highly optimized vector operations that\ncan be an order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the last position of one of three possible bytes in\na haystack.\n\n```\nuse memchr::memrchr3;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr3(b'k', b'o', b'n', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:878:2187":{"id":"b:1:2612-0:878:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:955:779":{"id":"0:955:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:933:779":{"id":"0:933:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[607,22],"end":[607,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:899:2267":{"id":"b:1:2612-0:899:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3145:9739-0:909:2279":{"id":"a:1:3145:9739-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3145:9739-0:964:2350":{"id":"a:1:3145:9739-0:964:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1179:2287":{"id":"0:1179:2287","crate_id":0,"name":"Three","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[895,0],"end":[900,1]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:371","a:1:41603:3525-0:1179:2287","a:1:3110:246-0:1179:2287","a:1:32044:9306-0:1179:2287","a:1:31987:236-0:1179:2287","a:1:41602:3526-0:1179:2287","a:1:3145:9739-0:1179:2287","b:1:2891-0:1179:2287","b:1:2612-0:1179:2287","b:1:2887-0:1179:2287","b:1:2902-0:1179:2287","b:1:2897-0:1179:2287","b:1:3720-0:1179:2287","b:1:2615-0:1179:2287","b:5:725-0:1179:2287","0:1184","0:1182","0:1185"]}}},"b:1:2897-0:1187:2292":{"id":"b:1:2897-0:1187:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3110:246-0:1559:2350":{"id":"a:1:3110:246-0:1559:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1228:779":{"id":"0:1228:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,16],"end":[355,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:1166":{"id":"0:394:1166","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1251,4],"end":[1256,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:886:2246":{"id":"a:1:31987:236-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2897-0:956:2352":{"id":"b:1:2897-0:956:2352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1578:779":{"id":"0:1578:779","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[523,16],"end":[523,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1175":{"id":"0:1175","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,16],"end":[854,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1178:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:454:172":{"id":"0:454:172","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[362,4],"end":[362,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:1491:190":{"id":"0:1491:190","crate_id":0,"name":"None","span":{"filename":"src/memmem/searcher.rs","begin":[546,4],"end":[546,8]},"visibility":"default","docs":"Never used a prefilter in substring search.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:1:2891-0:1208:2187":{"id":"b:1:2891-0:1208:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1242":{"id":"0:1242","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,9],"end":[661,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1245:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:939":{"id":"0:939","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[835,9],"end":[835,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:942:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2897-0:1425:1962":{"id":"b:1:2897-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13168:31463":{"id":"1:13168:31463","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:9705"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:15462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1541":{"id":"0:1541","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[236,16],"end":[236,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1544:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2612-0:1137:2187":{"id":"b:1:2612-0:1137:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2905:136":{"id":"1:2905:136","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31915:11860","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1232":{"id":"0:1232","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,9],"end":[404,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1233:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32044:9306-0:1179:2287":{"id":"a:1:32044:9306-0:1179:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:1530:3552":{"id":"b:5:725-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41602:3526-0:922:2287":{"id":"a:1:41602:3526-0:922:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41603:3525-0:1271:2350":{"id":"a:1:41603:3525-0:1271:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:1579:3600":{"id":"b:1:2887-0:1579:3600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:211:2104":{"id":"0:211:2104","crate_id":0,"name":"is_equal","span":{"filename":"src/arch/all/mod.rs","begin":[65,0],"end":[73,1]},"visibility":"public","docs":"Compare corresponding bytes in `x` and `y` for equality.\n\nThat is, this returns true if and only if `x.len() == y.len()` and\n`x[i] == y[i]` for all `0 <= i < x.len()`.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.\n\n# Motivation\n\nWhy not use slice equality instead? Well, slice equality usually results in\na call out to the current platform's `libc` which might not be inlineable\nor have other overhead. This routine isn't guaranteed to be a win, but it\nmight be in some cases.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["y",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:747:3556":{"id":"0:747:3556","crate_id":0,"name":"rfind_iter","span":{"filename":"src/memmem/mod.rs","begin":[150,0],"end":[155,1]},"visibility":"public","docs":"Returns a reverse iterator over all non-overlapping occurrences of a\nsubstring in a haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet mut it = memmem::rfind_iter(haystack, b\"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"N"}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"type":{"bounds":[{"outlives":"'n"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2855:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:1216:2246":{"id":"b:1:3720-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13130:34874":{"id":"1:13130:34874","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:1436:1963":{"id":"a:1:31987:236-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3720-0:878:2187":{"id":"b:1:3720-0:878:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:471:3236":{"id":"0:471:3236","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[453,4],"end":[462,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Two::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Two::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Two::new`":"0:469:1152"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:1559:2350":{"id":"a:1:31987:236-0:1559:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3145:9739-0:922:2287":{"id":"a:1:3145:9739-0:922:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3145:9739-0:999:2350":{"id":"a:1:3145:9739-0:999:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[902,0],"end":[1228,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:372:1152","0:373:1161","0:374:3236","0:375:2203","0:377:2207","0:379:2205","0:381:2208","0:387:953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41602:3526-0:1271:2350":{"id":"a:1:41602:3526-0:1271:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1436:1963":{"id":"0:1436:1963","crate_id":0,"name":"Memchr3","span":{"filename":"src/memchr.rs","begin":[432,0],"end":[437,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr2_iter`] or `[memrchr2_iter`]\nfunctions. It can also be created with the [`Memchr3::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`Memchr3::new`":"0:648:1152","`memchr2_iter`":"0:608:1951"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:646","a:1:41603:3525-0:1436:1963","a:1:3110:246-0:1436:1963","a:1:32044:9306-0:1436:1963","a:1:31987:236-0:1436:1963","a:1:41602:3526-0:1436:1963","a:1:3145:9739-0:1436:1963","b:1:8170-0:1436:1963","b:1:2891-0:1436:1963","b:1:2612-0:1436:1963","b:1:2887-0:1436:1963","b:1:2902-0:1436:1963","b:1:2897-0:1436:1963","b:1:3720-0:1436:1963","b:1:2615-0:1436:1963","b:5:725-0:1436:1963","0:1442","0:1445","0:655","0:649","0:659"]}}},"b:5:725-0:1415:1961":{"id":"b:5:725-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2902-0:971:2737":{"id":"b:1:2902-0:971:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:752:2207":{"id":"0:752:2207","crate_id":0,"name":"rfind","span":{"filename":"src/memmem/mod.rs","begin":[222,0],"end":[228,1]},"visibility":"public","docs":"Returns the index of the last occurrence of the given needle.\n\nNote that if you're are searching for the same needle in many different\nsmall haystacks, it may be faster to initialize a [`FinderRev`] once,\nand reuse it for each search.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), memmem::rfind(haystack, b\"foo\"));\nassert_eq!(Some(4), memmem::rfind(haystack, b\"bar\"));\nassert_eq!(Some(8), memmem::rfind(haystack, b\"ba\"));\nassert_eq!(None, memmem::rfind(haystack, b\"quux\"));\n```","links":{"`FinderRev`":"0:1569:2737"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:1545:3557":{"id":"b:1:2891-0:1545:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:1179:2287":{"id":"b:5:725-0:1179:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41602:3526-0:1530:3552":{"id":"a:1:41602:3526-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2612-0:1179:2287":{"id":"b:1:2612-0:1179:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41603:3525-0:1200:2350":{"id":"a:1:41603:3525-0:1200:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:999:2350":{"id":"b:1:2615-0:999:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1237:2279":{"id":"0:1237:2279","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[662,0],"end":[665,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:1229:2267","`Two::iter`":"0:482:953"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:41603:3525-0:1237:2279","a:1:3110:246-0:1237:2279","a:1:32044:9306-0:1237:2279","a:1:31987:236-0:1237:2279","a:1:41602:3526-0:1237:2279","a:1:3145:9739-0:1237:2279","b:1:8170-0:1237:2279","b:1:2891-0:1237:2279","b:1:2612-0:1237:2279","b:1:2887-0:1237:2279","b:1:2902-0:1237:2279","b:1:2897-0:1237:2279","b:1:3720-0:1237:2279","b:1:2615-0:1237:2279","b:5:725-0:1237:2279","0:1242","0:492","0:485","0:1246","0:497"]}}},"b:1:2891-0:1569:2737":{"id":"b:1:2891-0:1569:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1583":{"id":"0:1583","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,16],"end":[653,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1584:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3145:9739-0:1250:2287":{"id":"a:1:3145:9739-0:1250:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[359,0],"end":[554,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1152","0:68:2203","0:70:2207","0:72:2205","0:74:2208","0:76:953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1254:462":{"id":"0:1254:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,9],"end":[701,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:1137:2187":{"id":"b:5:725-0:1137:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:347:2208":{"id":"0:347:2208","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[720,4],"end":[750,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3110:246-0:886:2246":{"id":"a:1:3110:246-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1425:1962":{"id":"0:1425:1962","crate_id":0,"name":"Memchr2","span":{"filename":"src/memchr.rs","begin":[364,0],"end":[368,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr2_iter`] or `[memrchr2_iter`]\nfunctions. It can also be created with the [`Memchr2::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`Memchr2::new`":"0:633:1152","`memchr2_iter`":"0:608:1951"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:631","a:1:41603:3525-0:1425:1962","a:1:3110:246-0:1425:1962","a:1:32044:9306-0:1425:1962","a:1:31987:236-0:1425:1962","a:1:41602:3526-0:1425:1962","a:1:3145:9739-0:1425:1962","b:1:8170-0:1425:1962","b:1:2891-0:1425:1962","b:1:2612-0:1425:1962","b:1:2887-0:1425:1962","b:1:2902-0:1425:1962","b:1:2897-0:1425:1962","b:1:3720-0:1425:1962","b:1:2615-0:1425:1962","b:5:725-0:1425:1962","0:644","0:640","0:634","0:1433","0:1430"]}}},"0:1551":{"id":"0:1551","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[313,9],"end":[313,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1554:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1158:2267":{"id":"0:1158:2267","crate_id":0,"name":"Two","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[516,0],"end":[521,1]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:337","a:1:41603:3525-0:1158:2267","a:1:3110:246-0:1158:2267","a:1:32044:9306-0:1158:2267","a:1:31987:236-0:1158:2267","a:1:41602:3526-0:1158:2267","a:1:3145:9739-0:1158:2267","b:1:2891-0:1158:2267","b:1:2612-0:1158:2267","b:1:2887-0:1158:2267","b:1:2902-0:1158:2267","b:1:2897-0:1158:2267","b:1:3720-0:1158:2267","b:1:2615-0:1158:2267","b:5:725-0:1158:2267","0:1164","0:1161","0:1163"]}}},"0:72:2205":{"id":"0:72:2205","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[437,4],"end":[477,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:1250:2287":{"id":"b:5:725-0:1250:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2902-0:1415:1961":{"id":"b:1:2902-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[523,0],"end":[841,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:338:1152","0:339:1161","0:340:3236","0:341:2203","0:343:2207","0:345:2205","0:347:2208","0:353:953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1555":{"id":"0:1555","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[313,16],"end":[313,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1545:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1558:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:947:2350":{"id":"b:1:2615-0:947:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:375:2203":{"id":"0:375:2203","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[987,4],"end":[995,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:432:1161":{"id":"0:432:1161","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[63,4],"end":[65,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1271:2350":{"id":"0:1271:2350","crate_id":0,"name":"Finder","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[23,0],"end":[23,47]},"visibility":"public","docs":"A \"packed pair\" finder that uses 128-bit vector operations.\n\nThis finder picks two bytes that it believes have high predictive power\nfor indicating an overall match of a needle. Depending on whether\n`Finder::find` or `Finder::find_prefilter` is used, it reports offsets\nwhere the needle matches or could match. In the prefilter case, candidates\nare reported whenever the [`Pair`] of bytes given matches.","links":{"`Pair`":"0:956:2352"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:537","a:1:41603:3525-0:1271:2350","a:1:3110:246-0:1271:2350","a:1:32044:9306-0:1271:2350","a:1:31987:236-0:1271:2350","a:1:41602:3526-0:1271:2350","a:1:3145:9739-0:1271:2350","b:1:2891-0:1271:2350","b:1:2612-0:1271:2350","b:1:2887-0:1271:2350","b:1:2902-0:1271:2350","b:1:2897-0:1271:2350","b:1:3720-0:1271:2350","b:1:2615-0:1271:2350","b:5:725-0:1271:2350","0:1277","0:1274","0:1276"]}}},"b:1:2897-0:1145:2246":{"id":"b:1:2897-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:212:2117":{"id":"0:212:2117","crate_id":0,"name":"is_equal_raw","span":{"filename":"src/arch/all/mod.rs","begin":[108,0],"end":[158,1]},"visibility":"public","docs":"Compare `n` bytes at the given pointers for equality.\n\nThis returns true if and only if `*x.add(i) == *y.add(i)` for all\n`0 <= i < n`.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.\n\n# Motivation\n\nWhy not use slice equality instead? Well, slice equality usually results in\na call out to the current platform's `libc` which might not be inlineable\nor have other overhead. This routine isn't guaranteed to be a win, but it\nmight be in some cases.\n\n# Safety\n\n* Both `x` and `y` must be valid for reads of up to `n` bytes.\n* Both `x` and `y` must point to an initialized value.\n* Both `x` and `y` must each point to an allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object. `x` and `y` do not need to point to the same allocated\nobject, but they may.\n* Both `x` and `y` must be _derived from_ a pointer to their respective\nallocated objects.\n* The distance between `x` and `x+n` must not overflow `isize`. Similarly\nfor `y` and `y+n`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["y",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["n",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41603:3525-0:878:2187":{"id":"a:1:41603:3525-0:878:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3145:9739-0:1166:2279":{"id":"a:1:3145:9739-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:1200:2350":{"id":"b:1:2615-0:1200:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2902-0:1216:2246":{"id":"b:1:2902-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:610:1957":{"id":"0:610:1957","crate_id":0,"name":"memrchr2_iter","span":{"filename":"src/memchr.rs","begin":[243,0],"end":[249,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:40323:3446","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:1559:2350":{"id":"b:1:2891-0:1559:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:934:2292":{"id":"b:1:3720-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:947:2350":{"id":"0:947:2350","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[35,0],"end":[39,1]},"visibility":"public","docs":"An architecture independent \"packed pair\" finder.\n\nThis finder picks two bytes that it believes have high predictive power for\nindicating an overall match of a needle. At search time, it reports offsets\nwhere the needle could match based on whether the pair of bytes it chose\nmatch.\n\nThis is architecture independent because it utilizes `memchr` to find the\noccurrence of one of the bytes in the pair, and then checks whether the\nsecond byte matches. If it does, in the case of [`Finder::find_prefilter`],\nthe location at which the needle could match is returned.\n\nIt is generally preferred to use architecture specific routines for a\n\"packed pair\" prefilter, but this can be a useful fallback when the\narchitecture independent routines are unavailable.","links":{"`Finder::find_prefilter`":"0:132:2367"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:129","a:1:41603:3525-0:947:2350","a:1:3110:246-0:947:2350","a:1:32044:9306-0:947:2350","a:1:31987:236-0:947:2350","a:1:41602:3526-0:947:2350","a:1:3145:9739-0:947:2350","b:1:2891-0:947:2350","b:1:2612-0:947:2350","b:1:2887-0:947:2350","b:1:2902-0:947:2350","b:1:2897-0:947:2350","b:1:3720-0:947:2350","b:1:2615-0:947:2350","b:5:725-0:947:2350","0:953","0:951","0:954"]}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[331,0],"end":[338,1]},"visibility":"default","docs":"This permits passing any implementation of `HeuristicFrequencyRank` as a\nborrowed version of itself.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"R"}}},"items":["0:151:2413"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[843,0],"end":[858,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter","nth","ne","eq","is_sorted_by","sum","position","min_by","try_for_each","try_collect","flat_map","filter_map","step_by","all","partial_cmp","is_sorted_by_key","product","rposition","copied","fold","min_by_key","collect_into","rev","flatten","any","peekable","chain","max","count","skip","__iterator_get_unchecked","cmp_by","find","unzip","max_by","reduce","partition","le","map_windows","skip_while","intersperse","lt","last","enumerate","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","min","fuse","take_while","intersperse_with","next_chunk","take","eq_by","cycle","find_map","is_partitioned","collect","inspect","gt","map_while","for_each","ge","advance_by","zip","is_sorted","array_chunks","try_find","size_hint","try_fold","cmp","by_ref","map","scan"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:111:172","0:112:1166","0:114:2261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1011:462":{"id":"0:1011:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/twoway.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300:2203":{"id":"0:300:2203","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[117,4],"end":[125,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:3236":{"id":"0:374:3236","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[956,4],"end":[979,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Three::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Three::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Three::new`":"0:372:1152"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400:2262":{"id":"0:400:2262","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1266,4],"end":[1271,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320":{"id":"0:320","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[472,0],"end":[496,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter","nth","ne","eq","is_sorted_by","sum","position","min_by","try_for_each","try_collect","flat_map","filter_map","step_by","all","partial_cmp","is_sorted_by_key","product","rposition","copied","fold","min_by_key","collect_into","rev","flatten","any","peekable","chain","max","count","skip","__iterator_get_unchecked","cmp_by","find","unzip","max_by","reduce","partition","le","map_windows","skip_while","intersperse","lt","last","enumerate","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","min","fuse","take_while","intersperse_with","next_chunk","take","eq_by","cycle","find_map","is_partitioned","collect","inspect","gt","map_while","for_each","ge","advance_by","zip","is_sorted","array_chunks","try_find","size_hint","try_fold","cmp","by_ref","map","scan"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:323:172","0:324:1166","0:326:557","0:328:2261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1447:779":{"id":"0:1447:779","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[431,16],"end":[431,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1573":{"id":"0:1573","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[523,9],"end":[523,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1575:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41603:3525-0:1208:2187":{"id":"a:1:41603:3525-0:1208:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:709":{"id":"0:709","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[553,0],"end":[557,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2939:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:710:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1145:2246":{"id":"0:1145:2246","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[467,0],"end":[470,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:1137:2187","`One::iter`":"0:317:953"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:41603:3525-0:1145:2246","a:1:3110:246-0:1145:2246","a:1:32044:9306-0:1145:2246","a:1:31987:236-0:1145:2246","a:1:41602:3526-0:1145:2246","a:1:3145:9739-0:1145:2246","b:1:8170-0:1145:2246","b:1:2891-0:1145:2246","b:1:2612-0:1145:2246","b:1:2887-0:1145:2246","b:1:2902-0:1145:2246","b:1:2897-0:1145:2246","b:1:3720-0:1145:2246","b:1:2615-0:1145:2246","b:5:725-0:1145:2246","0:1154","0:1150","0:320","0:329","0:334"]}}},"0:975:462":{"id":"0:975:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,9],"end":[179,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:2367":{"id":"0:132:2367","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[69,4],"end":[101,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1179:2287":{"id":"b:1:2615-0:1179:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1250:2287":{"id":"0:1250:2287","crate_id":0,"name":"Three","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[702,0],"end":[702,42]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:500","a:1:41603:3525-0:1250:2287","a:1:3110:246-0:1250:2287","a:1:32044:9306-0:1250:2287","a:1:31987:236-0:1250:2287","a:1:41602:3526-0:1250:2287","a:1:3145:9739-0:1250:2287","b:1:2891-0:1250:2287","b:1:2612-0:1250:2287","b:1:2887-0:1250:2287","b:1:2902-0:1250:2287","b:1:2897-0:1250:2287","b:1:3720-0:1250:2287","b:1:2615-0:1250:2287","b:5:725-0:1250:2287","0:1256","0:1253","0:1255"]}}},"b:1:2891-0:1145:2246":{"id":"b:1:2891-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41602:3526-0:1216:2246":{"id":"a:1:41602:3526-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13147:34877":{"id":"1:13147:34877","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12301:1671","str::slice_mut_unchecked":"1:13148:34878","crate::ops::Index":"1:39117:9976"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2887-0:1208:2187":{"id":"b:1:2887-0:1208:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:886:2246":{"id":"b:5:725-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:929":{"id":"0:929","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,9],"end":[607,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:930:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32044:9306-0:1271:2350":{"id":"a:1:32044:9306-0:1271:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1276":{"id":"0:1276","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,16],"end":[22,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2902-0:1559:2350":{"id":"b:1:2902-0:1559:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2897-0:878:2187":{"id":"b:1:2897-0:878:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:1579:3600":{"id":"b:1:3720-0:1579:3600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7-0:593:1949":{"id":"0:7-0:593:1949","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr","name":"memchr","id":"0:593:1949","glob":false}}},"b:1:3720-0:1229:2267":{"id":"b:1:3720-0:1229:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3145:9739-0:947:2350":{"id":"a:1:3145:9739-0:947:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:441:2208":{"id":"0:441:2208","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[212,4],"end":[233,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:304:557":{"id":"0:304:557","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[145,4],"end":[153,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:1250:2287":{"id":"b:1:2612-0:1250:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3110:246-0:1530:3552":{"id":"a:1:3110:246-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1559:2350":{"id":"0:1559:2350","crate_id":0,"name":"Finder","span":{"filename":"src/memmem/mod.rs","begin":[387,0],"end":[390,1]},"visibility":"public","docs":"A single substring searcher fixed to a particular needle.\n\nThe purpose of this type is to permit callers to construct a substring\nsearcher that can be used to search haystacks without the overhead of\nconstructing the searcher in the first place. This is a somewhat niche\nconcern when it's necessary to re-use the same needle to search multiple\ndifferent haystacks with as little overhead as possible. In general, using\n[`find`] is good enough, but `Finder` is useful when you can meaningfully\nobserve searcher construction time in a profile.\n\nWhen the `std` feature is enabled, then this type has an `into_owned`\nversion which permits building a `Finder` that is not connected to\nthe lifetime of its needle.","links":{"`find`":"0:751:2203"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:774","a:1:41603:3525-0:1559:2350","a:1:3110:246-0:1559:2350","a:1:32044:9306-0:1559:2350","a:1:31987:236-0:1559:2350","a:1:41602:3526-0:1559:2350","a:1:3145:9739-0:1559:2350","b:1:2891-0:1559:2350","b:1:2612-0:1559:2350","b:1:2887-0:1559:2350","b:1:2902-0:1559:2350","b:1:2897-0:1559:2350","b:1:3720-0:1559:2350","b:1:2615-0:1559:2350","b:5:725-0:1559:2350","0:1566","0:1563"]}}},"1:13148:34878":{"id":"1:13148:34878","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12301:1671","crate::ops::IndexMut":"1:3381:9977","str::slice_unchecked":"1:13147:34877"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:538:1152":{"id":"0:538:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[34,4],"end":[36,5]},"visibility":"public","docs":"Create a new pair searcher. The searcher returned can either report\nexact matches of `needle` or act as a prefilter and report candidate\npositions of `needle`.\n\nIf SSE2 is unavailable in the current environment or if a [`Pair`]\ncould not be constructed from the needle given, then `None` is\nreturned.","links":{"`Pair`":"0:956:2352"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:806:3632":{"id":"0:806:3632","crate_id":0,"name":"build_reverse","span":{"filename":"src/memmem/mod.rs","begin":[694,4],"end":[703,5]},"visibility":"public","docs":"Build a reverse finder using the given needle from the current\nsettings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2855:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13209:34882":{"id":"1:13209:34882","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12817:9705","`DoubleEndedIterator`":"1:8204:129","prim@char":"4:12295:458","str::matches":"1:13206:3805"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43592:13567","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:15462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:1530:3552":{"id":"b:1:2612-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3110:246-0:1200:2350":{"id":"a:1:3110:246-0:1200:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41603:3525-0:922:2287":{"id":"a:1:41603:3525-0:922:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:998:779":{"id":"0:998:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/shiftor.rs","begin":[19,9],"end":[19,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:2205":{"id":"0:99:2205","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[701,4],"end":[741,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:9306-0:909:2279":{"id":"a:1:32044:9306-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:971:2737":{"id":"b:1:2887-0:971:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3110:246-0:1216:2246":{"id":"a:1:3110:246-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:763:2261":{"id":"0:763:2261","crate_id":0,"name":"size_hint","span":{"filename":"src/memmem/mod.rs","begin":[288,4],"end":[304,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:776:1152":{"id":"0:776:1152","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[395,4],"end":[397,5]},"visibility":"public","docs":"Create a new finder for the given needle.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2855:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3110:246-0:956:2352":{"id":"a:1:3110:246-0:956:2352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13145:30195":{"id":"1:13145:30195","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:1007:2737":{"id":"b:5:725-0:1007:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:547:3161":{"id":"0:547:3161","crate_id":0,"name":"min_haystack_len","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[173,4],"end":[175,5]},"visibility":"public","docs":"Returns the minimum haystack length that this `Finder` can search.\n\nUsing a haystack with length smaller than this in a search will result\nin a panic. The reason for this restriction is that this finder is\nmeant to be a low-level component that is part of a larger substring\nstrategy. In that sense, it avoids trying to handle all cases and\ninstead only handles the cases that it can handle very well.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41603:3525-0:1530:3552":{"id":"a:1:41603:3525-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1229:2267":{"id":"0:1229:2267","crate_id":0,"name":"Two","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[405,0],"end":[405,38]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:468","a:1:41603:3525-0:1229:2267","a:1:3110:246-0:1229:2267","a:1:32044:9306-0:1229:2267","a:1:31987:236-0:1229:2267","a:1:41602:3526-0:1229:2267","a:1:3145:9739-0:1229:2267","b:1:2891-0:1229:2267","b:1:2612-0:1229:2267","b:1:2887-0:1229:2267","b:1:2902-0:1229:2267","b:1:2897-0:1229:2267","b:1:3720-0:1229:2267","b:1:2615-0:1229:2267","b:5:725-0:1229:2267","0:1235","0:1234","0:1232"]}}},"0:969":{"id":"0:969","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,16],"end":[68,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:970:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:343:2207":{"id":"0:343:2207","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[620,4],"end":[628,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1415:1961":{"id":"b:1:2615-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2887-0:956:2352":{"id":"b:1:2887-0:956:2352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:142:2409":{"id":"0:142:2409","crate_id":0,"name":"HeuristicFrequencyRank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[309,0],"end":[318,1]},"visibility":"public","docs":"This trait allows the user to customize the heuristic used to determine the\nrelative frequency of a given byte in the dataset being searched.\n\nThe use of this trait can have a dramatic impact on performance depending\non the type of data being searched. The details of why are explained in the\ndocs of [`crate::memmem::Prefilter`]. To summarize, the core algorithm uses\na prefilter to quickly identify candidate matches that are later verified\nmore slowly. This prefilter is implemented in terms of trying to find\n`rare` bytes at specific offsets that will occur less frequently in the\ndataset. While the concept of a `rare` byte is similar for most datasets,\nthere are some specific datasets (like binary executables) that have\ndramatically different byte distributions. For these datasets customizing\nthe byte frequency heuristic can have a massive impact on performance, and\nmight even need to be done at runtime.\n\nThe default implementation of `HeuristicFrequencyRank` reads from the\nstatic frequency table defined in `src/memmem/byte_frequencies.rs`. This\nis optimal for most inputs, so if you are unsure of the impact of using a\ncustom `HeuristicFrequencyRank` you should probably just use the default.\n\n# Example\n\n```\nuse memchr::{\n    arch::all::packedpair::HeuristicFrequencyRank,\n    memmem::FinderBuilder,\n};\n\n/// A byte-frequency table that is good for scanning binary executables.\nstruct Binary;\n\nimpl HeuristicFrequencyRank for Binary {\n    fn rank(&self, byte: u8) -> u8 {\n        const TABLE: [u8; 256] = [\n            255, 128, 61, 43, 50, 41, 27, 28, 57, 15, 21, 13, 24, 17, 17,\n            89, 58, 16, 11, 7, 14, 23, 7, 6, 24, 9, 6, 5, 9, 4, 7, 16,\n            68, 11, 9, 6, 88, 7, 4, 4, 23, 9, 4, 8, 8, 5, 10, 4, 30, 11,\n            9, 24, 11, 5, 5, 5, 19, 11, 6, 17, 9, 9, 6, 8,\n            48, 58, 11, 14, 53, 40, 9, 9, 254, 35, 3, 6, 52, 23, 6, 6, 27,\n            4, 7, 11, 14, 13, 10, 11, 11, 5, 2, 10, 16, 12, 6, 19,\n            19, 20, 5, 14, 16, 31, 19, 7, 14, 20, 4, 4, 19, 8, 18, 20, 24,\n            1, 25, 19, 58, 29, 10, 5, 15, 20, 2, 2, 9, 4, 3, 5,\n            51, 11, 4, 53, 23, 39, 6, 4, 13, 81, 4, 186, 5, 67, 3, 2, 15,\n            0, 0, 1, 3, 2, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0,\n            12, 2, 1, 1, 3, 1, 1, 1, 6, 1, 2, 1, 3, 1, 1, 2, 9, 1, 1, 0,\n            2, 2, 4, 4, 11, 6, 7, 3, 6, 9, 4, 5,\n            46, 18, 8, 18, 17, 3, 8, 20, 16, 10, 3, 7, 175, 4, 6, 7, 13,\n            3, 7, 3, 3, 1, 3, 3, 10, 3, 1, 5, 2, 0, 1, 2,\n            16, 3, 5, 1, 6, 1, 1, 2, 58, 20, 3, 14, 12, 2, 1, 3, 16, 3, 5,\n            8, 3, 1, 8, 6, 17, 6, 5, 3, 8, 6, 13, 175,\n        ];\n        TABLE[byte as usize]\n    }\n}\n// Create a new finder with the custom heuristic.\nlet finder = FinderBuilder::new()\n    .build_forward_with_ranker(Binary, b\"\\x00\\x00\\xdd\\xdd\");\n// Find needle with custom heuristic.\nassert!(finder.find(b\"\\x00\\x00\\x00\\xdd\\xdd\").is_some());\n```","links":{"`crate::memmem::Prefilter`":"0:1490:3529"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:143:2413"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:148"]}}},"0:784:2103":{"id":"0:784:2103","crate_id":0,"name":"needle","span":{"filename":"src/memmem/mod.rs","begin":[505,4],"end":[507,5]},"visibility":"public","docs":"Returns the needle that this finder searches for.\n\nNote that the lifetime of the needle returned is tied to the lifetime\nof the finder, and may be shorter than the `'n` lifetime. Namely, a\nfinder's needle can be either borrowed or owned, so the lifetime of the\nneedle returned must necessarily be the shorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:2401":{"id":"0:137:2401","crate_id":0,"name":"with_ranker","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[163,4],"end":[197,5]},"visibility":"public","docs":"Create a new pair of offsets from the given needle and ranker.\n\nThis permits the caller to choose a background frequency distribution\nwith which bytes are selected. The idea is to select a pair of bytes\nthat is believed to strongly predict a match in the haystack. This\nusually means selecting bytes that occur rarely in a haystack.\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["ranker",{"generic":"R"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:514:953":{"id":"0:514:953","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[950,4],"end":[952,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13254:31365":{"id":"1:13254:31365","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:980:39899"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:9306-0:1490:3529":{"id":"a:1:32044:9306-0:1490:3529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:773:1166":{"id":"0:773:1166","crate_id":0,"name":"next","span":{"filename":"src/memmem/mod.rs","begin":[353,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:459:2261":{"id":"0:459:2261","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[382,4],"end":[384,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1271:2350":{"id":"b:1:2615-0:1271:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3110:246-0:1158:2267":{"id":"a:1:3110:246-0:1158:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:309:2210":{"id":"0:309:2210","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[299,4],"end":[322,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:1229:2267":{"id":"a:1:31987:236-0:1229:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:633:1152":{"id":"0:633:1152","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[377,4],"end":[383,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328:2261":{"id":"0:328:2261","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[493,4],"end":[495,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1215:779":{"id":"0:1215:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1432:462":{"id":"0:1432:462","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[363,9],"end":[363,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:387:953":{"id":"0:387:953","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1225,4],"end":[1227,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1183:462":{"id":"0:1183:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,9],"end":[894,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523:2261":{"id":"0:523:2261","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[984,4],"end":[986,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:326:557":{"id":"0:326:557","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[484,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10-0:601:1952":{"id":"0:10-0:601:1952","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,35],"end":[204,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr3","name":"memchr3","id":"0:601:1952","glob":false}}},"a:1:3110:246-0:1208:2187":{"id":"a:1:3110:246-0:1208:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31987:236-0:899:2267":{"id":"a:1:31987:236-0:899:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:909:2279":{"id":"b:1:2887-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2897-0:899:2267":{"id":"b:1:2897-0:899:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1184":{"id":"0:1184","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,16],"end":[894,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:601:1952":{"id":"0:601:1952","crate_id":0,"name":"memchr3","span":{"filename":"src/memchr.rs","begin":[158,0],"end":[171,1]},"visibility":"public","docs":"Search for the first occurrence of three possible bytes in a haystack.\n\nThis returns the index corresponding to the first occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle1 || b == needle2 || b == needle3)`,\nthis routine will attempt to use highly optimized vector operations that\ncan be an order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the first position of one of three possible bytes in\na haystack.\n\n```\nuse memchr::memchr3;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr3(b'k', b'q', b'u', haystack), Some(4));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:934:2292":{"id":"b:1:2615-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2891-0:1415:1961":{"id":"b:1:2891-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2612-0:1436:1963":{"id":"b:1:2612-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[40,0],"end":[289,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:36:1152","0:37:2203","0:39:2207","0:41:557","0:42:2205","0:44:2208","0:46:2210","0:47:953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:55:172":{"id":"0:55:172","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[311,4],"end":[311,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:8170-0:1415:1961":{"id":"b:1:8170-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8172:172","1:8173:9780","1:8174:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2891-0:878:2187":{"id":"b:1:2891-0:878:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:729:27276":{"id":"5:729:27276","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:1250:2287":{"id":"b:1:3720-0:1250:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:1436:1963":{"id":"b:1:3720-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:8174:932":{"id":"1:8174:932","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:396:2261":{"id":"0:396:2261","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1259,4],"end":[1261,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:885:779":{"id":"0:885:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:962":{"id":"0:962","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,22],"end":[134,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:963:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:338:1152":{"id":"0:338:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[533,4],"end":[540,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:1145:2246":{"id":"a:1:41602:3526-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1150":{"id":"0:1150","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,9],"end":[466,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1153:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32044:9306-0:878:2187":{"id":"a:1:32044:9306-0:878:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31987:236-0:1145:2246":{"id":"a:1:31987:236-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2902-0:1179:2287":{"id":"b:1:2902-0:1179:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41603:3525-0:1145:2246":{"id":"a:1:41603:3525-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:1559:2350":{"id":"b:5:725-0:1559:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31987:236-0:1200:2350":{"id":"a:1:31987:236-0:1200:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1211":{"id":"0:1211","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1212:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1213":{"id":"0:1213","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,16],"end":[28,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1419":{"id":"0:1419","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[287,9],"end":[287,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1421:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:85:1166":{"id":"0:85:1166","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[579,4],"end":[584,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[108,0],"end":[270,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:187:1152","0:188:2203"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1187:2292":{"id":"0:1187:2292","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1242,0],"end":[1245,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:387:953","`Three`":"0:1179:2287"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:41603:3525-0:1187:2292","a:1:3110:246-0:1187:2292","a:1:32044:9306-0:1187:2292","a:1:31987:236-0:1187:2292","a:1:41602:3526-0:1187:2292","a:1:3145:9739-0:1187:2292","b:1:8170-0:1187:2292","b:1:2891-0:1187:2292","b:1:2612-0:1187:2292","b:1:2887-0:1187:2292","b:1:2902-0:1187:2292","b:1:2897-0:1187:2292","b:1:3720-0:1187:2292","b:1:2615-0:1187:2292","b:5:725-0:1187:2292","0:390","0:1196","0:1192","0:397","0:402"]}}},"0:482:953":{"id":"0:482:953","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[645,4],"end":[647,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2897-0:1216:2246":{"id":"b:1:2897-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1424:779":{"id":"0:1424:779","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[287,16],"end":[287,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:886:2246":{"id":"a:1:41602:3526-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2891-0:956:2352":{"id":"b:1:2891-0:956:2352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:964:2350":{"id":"0:964:2350","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[69,0],"end":[77,1]},"visibility":"public","docs":"A forward substring searcher using the Rabin-Karp algorithm.\n\nNote that, as a lower level API, a `Finder` does not have access to the\nneedle it was constructed with. For this reason, executing a search\nwith a `Finder` requires passing both the needle and the haystack,\nwhere the needle is exactly equivalent to the one given to the `Finder`\nat construction time. This design was chosen so that callers can have\nmore precise control over where and how many times a needle is stored.\nFor example, in cases where Rabin-Karp is just one of several possible\nsubstring search algorithms.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:154","a:1:41603:3525-0:964:2350","a:1:3110:246-0:964:2350","a:1:32044:9306-0:964:2350","a:1:31987:236-0:964:2350","a:1:41602:3526-0:964:2350","a:1:3145:9739-0:964:2350","b:1:2891-0:964:2350","b:1:2612-0:964:2350","b:1:2887-0:964:2350","b:1:2902-0:964:2350","b:1:2897-0:964:2350","b:1:3720-0:964:2350","b:1:2615-0:964:2350","b:5:725-0:964:2350","0:967","0:969"]}}},"a:1:31987:236-0:1179:2287":{"id":"a:1:31987:236-0:1179:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2897-0:1179:2287":{"id":"b:1:2897-0:1179:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13244:34894":{"id":"1:13244:34894","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:9705"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:15462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1145:2246":{"id":"b:1:2615-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2897-0:1208:2187":{"id":"b:1:2897-0:1208:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:18-0:607:1960":{"id":"0:18-0:607:1960","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,63],"end":[205,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr_iter","name":"memrchr_iter","id":"0:607:1960","glob":false}}},"b:1:8170-0:886:2246":{"id":"b:1:8170-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8172:172","1:8173:9780","1:8174:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2615-0:899:2267":{"id":"b:1:2615-0:899:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:152:2091":{"id":"0:152:2091","crate_id":0,"name":"rabinkarp","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[1,0],"end":[390,1]},"visibility":"public","docs":"An implementation of the [Rabin-Karp substring search algorithm][rabinkarp].\n\nRabin-Karp works by creating a hash of the needle provided and then computing\na rolling hash for each needle sized window in the haystack. When the rolling\nhash matches the hash of the needle, a byte-wise comparison is done to check\nif a match exists. The worst case time complexity of Rabin-Karp is `O(m *\nn)` where `m ~ len(needle)` and `n ~ len(haystack)`. Its worst case space\ncomplexity is constant.\n\nThe main utility of Rabin-Karp is that the searcher can be constructed very\nquickly with very little memory. This makes it especially useful when searching\nfor small needles in small haystacks, as it might finish its search before a\nbeefier algorithm (like Two-Way) even starts.\n\n[rabinkarp]: https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:964:2350","0:971:2737"],"is_stripped":false}}},"a:1:32044:9306-0:1530:3552":{"id":"a:1:32044:9306-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1569:2737":{"id":"0:1569:2737","crate_id":0,"name":"FinderRev","span":{"filename":"src/memmem/mod.rs","begin":[524,0],"end":[527,1]},"visibility":"public","docs":"A single substring reverse searcher fixed to a particular needle.\n\nThe purpose of this type is to permit callers to construct a substring\nsearcher that can be used to search haystacks without the overhead of\nconstructing the searcher in the first place. This is a somewhat niche\nconcern when it's necessary to re-use the same needle to search multiple\ndifferent haystacks with as little overhead as possible. In general,\nusing [`rfind`] is good enough, but `FinderRev` is useful when you can\nmeaningfully observe searcher construction time in a profile.\n\nWhen the `std` feature is enabled, then this type has an `into_owned`\nversion which permits building a `FinderRev` that is not connected to\nthe lifetime of its needle.","links":{"`rfind`":"0:752:2207"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:785","a:1:41603:3525-0:1569:2737","a:1:3110:246-0:1569:2737","a:1:32044:9306-0:1569:2737","a:1:31987:236-0:1569:2737","a:1:41602:3526-0:1569:2737","a:1:3145:9739-0:1569:2737","b:1:2891-0:1569:2737","b:1:2612-0:1569:2737","b:1:2887-0:1569:2737","b:1:2902-0:1569:2737","b:1:2897-0:1569:2737","b:1:3720-0:1569:2737","b:1:2615-0:1569:2737","b:5:725-0:1569:2737","0:1576","0:1573"]}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[310,0],"end":[334,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter","nth","ne","eq","is_sorted_by","sum","position","min_by","try_for_each","try_collect","flat_map","filter_map","step_by","all","partial_cmp","is_sorted_by_key","product","rposition","copied","fold","min_by_key","collect_into","rev","flatten","any","peekable","chain","max","count","skip","__iterator_get_unchecked","cmp_by","find","unzip","max_by","reduce","partition","le","map_windows","skip_while","intersperse","lt","last","enumerate","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","min","fuse","take_while","intersperse_with","next_chunk","take","eq_by","cycle","find_map","is_partitioned","collect","inspect","gt","map_while","for_each","ge","advance_by","zip","is_sorted","array_chunks","try_find","size_hint","try_fold","cmp","by_ref","map","scan"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:55:172","0:56:1166","0:58:557","0:60:2261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:20-0:1425:1962":{"id":"0:20-0:1425:1962","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,12],"end":[206,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr2","name":"Memchr2","id":"0:1425:1962","glob":false}}},"b:1:2887-0:886:2246":{"id":"b:1:2887-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32044:9306-0:1137:2187":{"id":"a:1:32044:9306-0:1137:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1196":{"id":"0:1196","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,16],"end":[1241,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1187:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1199:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3145:9739-0:878:2187":{"id":"a:1:3145:9739-0:878:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1003:462":{"id":"0:1003:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/twoway.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:1250:2287":{"id":"b:1:2902-0:1250:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:131:2357":{"id":"0:131:2357","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[56,4],"end":[62,5]},"visibility":"public","docs":"Create a new prefilter using the pair given.\n\nIf the prefilter could not be constructed, then `None` is returned.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:491:2261":{"id":"0:491:2261","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[679,4],"end":[681,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41603:3525-0:1216:2246":{"id":"a:1:41603:3525-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13197:31458":{"id":"1:13197:31458","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12295:458","str::splitn":"1:13194:31456","self::pattern":"1:12817:9705"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43492:13561","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:15462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:1579:3600":{"id":"b:1:2891-0:1579:3600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:1229:2267":{"id":"b:1:2615-0:1229:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32044:9306-0:1229:2267":{"id":"a:1:32044:9306-0:1229:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32044:9306-0:922:2287":{"id":"a:1:32044:9306-0:922:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:964:2350":{"id":"b:5:725-0:964:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:101:2208":{"id":"0:101:2208","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[767,4],"end":[798,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1263":{"id":"0:1263","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,9],"end":[966,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1266:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1584:779":{"id":"0:1584:779","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[653,16],"end":[653,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:918":{"id":"0:918","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[567,16],"end":[567,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:921:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41603:3525-0:909:2279":{"id":"a:1:41603:3525-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2612-0:1145:2246":{"id":"b:1:2612-0:1145:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1145:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2612-0:1166:2279":{"id":"b:1:2612-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41602:3526-0:1208:2187":{"id":"a:1:41602:3526-0:1208:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2897-0:1237:2279":{"id":"b:1:2897-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:36:1152":{"id":"0:36:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[46,4],"end":[48,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the byte given.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:922:2287":{"id":"b:1:2615-0:922:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:508:2205":{"id":"0:508:2205","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[821,4],"end":[853,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2897-0:1530:3552":{"id":"b:1:2897-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2897-0:934:2292":{"id":"b:1:2897-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41603:3525-0:1569:2737":{"id":"a:1:41603:3525-0:1569:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8170-0:909:2279":{"id":"b:1:8170-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8172:172","1:8173:9780","1:8174:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:640":{"id":"0:640","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[405,0],"end":[417,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8204:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:642:2262"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13150:31446":{"id":"1:13150:31446","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13149:2927","str::split_at_mut_checked":"1:13152:31450"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2261":{"id":"0:87:2261","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[587,4],"end":[589,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3722:1769":{"id":"1:3722:1769","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39286:13348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:1208:2187":{"id":"b:1:2612-0:1208:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2612-0:1415:1961":{"id":"b:1:2612-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3145:9739-0:1579:3600":{"id":"a:1:3145:9739-0:1579:3600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1205":{"id":"0:1205","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,16],"end":[22,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1200:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2891-0:1490:3529":{"id":"b:1:2891-0:1490:3529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1490:3529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41602:3526-0:999:2350":{"id":"a:1:41602:3526-0:999:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2891-0:999:2350":{"id":"b:1:2891-0:999:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13238:34892":{"id":"1:13238:34892","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:9705"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:15462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41602:3526-0:1559:2350":{"id":"a:1:41602:3526-0:1559:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:60:2261":{"id":"0:60:2261","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[331,4],"end":[333,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:878:2187":{"id":"b:1:2902-0:878:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1142":{"id":"0:1142","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,16],"end":[28,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:796:2103":{"id":"0:796:2103","crate_id":0,"name":"needle","span":{"filename":"src/memmem/mod.rs","begin":[643,4],"end":[645,5]},"visibility":"public","docs":"Returns the needle that this finder searches for.\n\nNote that the lifetime of the needle returned is tied to the lifetime\nof the finder, and may be shorter than the `'n` lifetime. Namely, a\nfinder's needle can be either borrowed or owned, so the lifetime of the\nneedle returned must necessarily be the shorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:971:2737":{"id":"b:1:2615-0:971:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:971:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:193:1152":{"id":"0:193:1152","crate_id":0,"name":"new","span":{"filename":"src/arch/all/twoway.rs","begin":[278,4],"end":[290,5]},"visibility":"public","docs":"Create a searcher that finds occurrences of the given `needle`.\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:795:335":{"id":"0:795:335","crate_id":0,"name":"as_ref","span":{"filename":"src/memmem/mod.rs","begin":[629,4],"end":[634,5]},"visibility":"public","docs":"Convert this finder into its borrowed variant.\n\nThis is primarily useful if your finder is owned and you'd like to\nstore its borrowed variant in some intermediate data structure.\n\nNote that the lifetime parameter of the returned finder is tied to the\nlifetime of `self`, and may be shorter than the `'n` lifetime of the\nneedle itself. Namely, a finder's needle can be either borrowed or\nowned, so the lifetime of the needle returned must necessarily be the\nshorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:9739-0:993:2350":{"id":"a:1:3145:9739-0:993:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1225":{"id":"0:1225","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,16],"end":[355,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1228:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1012":{"id":"0:1012","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,16],"end":[40,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1540:779":{"id":"0:1540:779","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[236,9],"end":[236,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:1436:1963":{"id":"b:5:725-0:1436:1963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1566":{"id":"0:1566","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[386,16],"end":[386,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1568:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:930:462":{"id":"0:930:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[607,9],"end":[607,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:922:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8170-0:1237:2279":{"id":"b:1:8170-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8172:172","1:8173:9780","1:8174:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:3145:9739-0:1237:2279":{"id":"a:1:3145:9739-0:1237:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2902-0:956:2352":{"id":"b:1:2902-0:956:2352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:959":{"id":"0:959","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,9],"end":[134,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:960:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:636:172":{"id":"0:636:172","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[387,4],"end":[387,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:381:2208":{"id":"0:381:2208","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1105,4],"end":[1137,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1278:779":{"id":"0:1278:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1164":{"id":"0:1164","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,22],"end":[515,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1165:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2897-0:1007:2737":{"id":"b:1:2897-0:1007:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32044:9306-0:1425:1962":{"id":"a:1:32044:9306-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1255":{"id":"0:1255","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,16],"end":[701,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13252:31362":{"id":"1:13252:31362","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2891-0:1229:2267":{"id":"b:1:2891-0:1229:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:339:1161":{"id":"0:339:1161","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[556,4],"end":[561,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13160:34879":{"id":"1:13160:34879","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43634:13569","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:886:2246":{"id":"b:1:2612-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41603:3525-0:1166:2279":{"id":"a:1:41603:3525-0:1166:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41603:3525","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1166:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:405:2090":{"id":"0:405:2090","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[1,0],"end":[272,1]},"visibility":"public","docs":"A 256-bit vector implementation of the \"packed pair\" SIMD algorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1200:2350"],"is_stripped":false}}},"0:171:2092":{"id":"0:171:2092","crate_id":0,"name":"shiftor","span":{"filename":"src/arch/all/shiftor.rs","begin":[1,0],"end":[89,1]},"visibility":"public","docs":"An implementation of the [Shift-Or substring search algorithm][shiftor].\n\n[shiftor]: https://en.wikipedia.org/wiki/Bitap_algorithm","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:993:2350"],"is_stripped":false}}},"0:629":{"id":"0:629","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[351,0],"end":[351,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:625":{"id":"0:625","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[341,0],"end":[349,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8204:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:627:2262"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1544:462":{"id":"0:1544:462","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[236,16],"end":[236,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32044:9306-0:956:2352":{"id":"a:1:32044:9306-0:956:2352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:907":{"id":"0:907","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,22],"end":[351,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:908:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1422":{"id":"0:1422","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[287,16],"end":[287,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1424:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32044:9306-0:886:2246":{"id":"a:1:32044:9306-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32044:9306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:762:1166":{"id":"0:762:1166","crate_id":0,"name":"next","span":{"filename":"src/memmem/mod.rs","begin":[276,4],"end":[286,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13143:30194":{"id":"1:13143:30194","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1270:779":{"id":"0:1270:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,16],"end":[966,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:9739-0:1530:3552":{"id":"a:1:3145:9739-0:1530:3552","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:899:2267":{"id":"b:5:725-0:899:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:899:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1277":{"id":"0:1277","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1278:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1582:462":{"id":"0:1582:462","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[653,9],"end":[653,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1579:3600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:1966":{"id":"0:26:1966","crate_id":0,"name":"arch","span":{"filename":"src/arch/mod.rs","begin":[1,0],"end":[16,15]},"visibility":"public","docs":"A module with low-level architecture dependent routines.\n\nThese routines are useful as primitives for tasks not covered by the higher\nlevel crate API.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:27:306","0:286:1933"],"is_stripped":false}}},"0:954":{"id":"0:954","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:947:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:955:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:946:779":{"id":"0:946:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[835,16],"end":[835,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:964:2350":{"id":"b:1:2615-0:964:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:305:2205":{"id":"0:305:2205","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[179,4],"end":[219,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1444:462":{"id":"0:1444:462","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[431,9],"end":[431,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13194:31456":{"id":"1:13194:31456","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:9705","str::rsplitn":"1:13197:31458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43474:13560","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2897-0:1229:2267":{"id":"b:1:2897-0:1229:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:502:1161":{"id":"0:502:1161","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[736,4],"end":[742,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1004":{"id":"0:1004","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,16],"end":[36,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3105:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:504:2203":{"id":"0:504:2203","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[771,4],"end":[779,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2897-0:1271:2350":{"id":"b:1:2897-0:1271:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:909:2279":{"id":"b:5:725-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1007:2737":{"id":"0:1007:2737","crate_id":0,"name":"FinderRev","span":{"filename":"src/arch/all/twoway.rs","begin":[41,0],"end":[41,29]},"visibility":"public","docs":"A reverse substring searcher that uses the Two-Way algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:192","a:1:41603:3525-0:1007:2737","a:1:3110:246-0:1007:2737","a:1:32044:9306-0:1007:2737","a:1:31987:236-0:1007:2737","a:1:41602:3526-0:1007:2737","a:1:3145:9739-0:1007:2737","b:1:2891-0:1007:2737","b:1:2612-0:1007:2737","b:1:2887-0:1007:2737","b:1:2902-0:1007:2737","b:1:2897-0:1007:2737","b:1:3720-0:1007:2737","b:1:2615-0:1007:2737","b:5:725-0:1007:2737","0:1013","0:1010","0:1012"]}}},"b:1:2897-0:1569:2737":{"id":"b:1:2897-0:1569:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2867:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2900:136","1:2901:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31987:236-0:878:2187":{"id":"a:1:31987:236-0:878:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1207:779":{"id":"0:1207:779","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10226:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10207:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:9739-0:1425:1962":{"id":"a:1:3145:9739-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3110:246-0:878:2187":{"id":"a:1:3110:246-0:878:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3110:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13212:34883":{"id":"1:13212:34883","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12817:9705","`DoubleEndedIterator`":"1:8204:129","prim@char":"4:12295:458","str::rmatch_indices":"1:13215:34884"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43520:13563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:14312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1216:2246":{"id":"0:1216:2246","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[356,0],"end":[359,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:1208:2187","`One::iter`":"0:448:953"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:41603:3525-0:1216:2246","a:1:3110:246-0:1216:2246","a:1:32044:9306-0:1216:2246","a:1:31987:236-0:1216:2246","a:1:41602:3526-0:1216:2246","a:1:3145:9739-0:1216:2246","b:1:8170-0:1216:2246","b:1:2891-0:1216:2246","b:1:2612-0:1216:2246","b:1:2887-0:1216:2246","b:1:2902-0:1216:2246","b:1:2897-0:1216:2246","b:1:3720-0:1216:2246","b:1:2615-0:1216:2246","b:5:725-0:1216:2246","0:460","0:1225","0:1221","0:451","0:465"]}}},"a:1:31987:236-0:934:2292":{"id":"a:1:31987:236-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2887-0:1137:2187":{"id":"b:1:2887-0:1137:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:430":{"id":"0:430","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[31,0],"end":[342,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:431:1152","0:432:1161","0:433:3236","0:434:2203","0:436:2207","0:438:557","0:439:2205","0:441:2208","0:443:2210","0:448:953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13155:13582":{"id":"1:13155:13582","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12295:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43346:13552","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:934:2292":{"id":"b:1:2902-0:934:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2902-0:1137:2187":{"id":"b:1:2902-0:1137:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:134:2351":{"id":"0:134:2351","crate_id":0,"name":"pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[107,4],"end":[109,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:956:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:1161":{"id":"0:298:1161","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[69,4],"end":[74,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2612-0:909:2279":{"id":"b:1:2612-0:909:2279","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:909:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:64:2262":{"id":"0:64:2262","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[338,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:9739-0:1208:2187":{"id":"a:1:3145:9739-0:1208:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3145:9739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1208:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1245:462":{"id":"0:1245:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,9],"end":[661,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1237:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3720-0:993:2350":{"id":"b:1:3720-0:993:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:993:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2887-0:1415:1961":{"id":"b:1:2887-0:1415:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1415:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[860,0],"end":[868,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8204:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:934:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:118:2262"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:878:2187":{"id":"b:1:2615-0:878:2187","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2609:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:878:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:27274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74:2208":{"id":"0:74:2208","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[503,4],"end":[534,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2902-0:999:2350":{"id":"b:1:2902-0:999:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2871:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:999:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2905:136","1:2906:1754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:436:2207":{"id":"0:436:2207","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[110,4],"end":[118,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:971:2737":{"id":"0:971:2737","crate_id":0,"name":"FinderRev","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[180,0],"end":[180,29]},"visibility":"public","docs":"A reverse substring searcher using the Rabin-Karp algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:158","a:1:41603:3525-0:971:2737","a:1:3110:246-0:971:2737","a:1:32044:9306-0:971:2737","a:1:31987:236-0:971:2737","a:1:41602:3526-0:971:2737","a:1:3145:9739-0:971:2737","b:1:2891-0:971:2737","b:1:2612-0:971:2737","b:1:2887-0:971:2737","b:1:2902-0:971:2737","b:1:2897-0:971:2737","b:1:3720-0:971:2737","b:1:2615-0:971:2737","b:5:725-0:971:2737","0:976","0:974"]}}},"b:5:725-0:1229:2267":{"id":"b:5:725-0:1229:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1229:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3416","5:728:27275","5:729:27276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:758":{"id":"0:758","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[273,0],"end":[305,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter","nth","ne","eq","is_sorted_by","sum","position","min_by","try_for_each","try_collect","flat_map","filter_map","step_by","all","partial_cmp","is_sorted_by_key","product","rposition","copied","fold","min_by_key","collect_into","rev","flatten","any","peekable","chain","max","count","skip","__iterator_get_unchecked","cmp_by","find","unzip","max_by","reduce","partition","le","map_windows","skip_while","intersperse","lt","last","enumerate","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","min","fuse","take_while","intersperse_with","next_chunk","take","eq_by","cycle","find_map","is_partitioned","collect","inspect","gt","map_while","for_each","ge","advance_by","zip","is_sorted","array_chunks","try_find","size_hint","try_fold","cmp","by_ref","map","scan"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1530:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:761:172","0:762:1166","0:763:2261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2612-0:1007:2737":{"id":"b:1:2612-0:1007:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1007:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:299:3236":{"id":"0:299:3236","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[86,4],"end":[109,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`One::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`One::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`One::new`":"0:297:1152"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1442":{"id":"0:1442","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[431,9],"end":[431,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2628:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1436:1963","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1444:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2887-0:964:2350":{"id":"b:1:2887-0:964:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2861:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:4112"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1266:462":{"id":"0:1266:462","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,9],"end":[966,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8170-0:1216:2246":{"id":"b:1:8170-0:1216:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1216:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8172:172","1:8173:9780","1:8174:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1185":{"id":"0:1185","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,22],"end":[894,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10252:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1179:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1186:779"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3720-0:1559:2350":{"id":"b:1:3720-0:1559:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1559:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2891-0:1271:2350":{"id":"b:1:2891-0:1271:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2864:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1271:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97:2207":{"id":"0:97:2207","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[667,4],"end":[675,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31987:236-0:964:2350":{"id":"a:1:31987:236-0:964:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:964:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1137:2187":{"id":"0:1137:2187","crate_id":0,"name":"One","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[29,0],"end":[34,1]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:296","a:1:41603:3525-0:1137:2187","a:1:3110:246-0:1137:2187","a:1:32044:9306-0:1137:2187","a:1:31987:236-0:1137:2187","a:1:41602:3526-0:1137:2187","a:1:3145:9739-0:1137:2187","b:1:2891-0:1137:2187","b:1:2612-0:1137:2187","b:1:2887-0:1137:2187","b:1:2902-0:1137:2187","b:1:2897-0:1137:2187","b:1:3720-0:1137:2187","b:1:2615-0:1137:2187","b:5:725-0:1137:2187","0:1143","0:1142","0:1140"]}}},"0:27:306":{"id":"0:27:306","crate_id":0,"name":"all","span":{"filename":"src/arch/all/mod.rs","begin":[1,0],"end":[234,1]},"visibility":"public","docs":"Contains architecture independent routines.\n\nThese routines are often used as a \"fallback\" implementation when the more\nspecialized architecture dependent routines are unavailable.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:28:1949","0:124:2090","0:152:2091","0:171:2092","0:179:2093","0:209:2101","0:210:2106","0:211:2104","0:212:2117"],"is_stripped":false}}},"b:1:2612-0:1158:2267":{"id":"b:1:2612-0:1158:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2606:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2614:4121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31987:236-0:1250:2287":{"id":"a:1:31987:236-0:1250:2287","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31987:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1250:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:899:2267":{"id":"0:899:2267","crate_id":0,"name":"Two","span":{"filename":"src/arch/all/memchr.rs","begin":[352,0],"end":[357,1]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:66","a:1:41603:3525-0:899:2267","a:1:3110:246-0:899:2267","a:1:32044:9306-0:899:2267","a:1:31987:236-0:899:2267","a:1:41602:3526-0:899:2267","a:1:3145:9739-0:899:2267","b:1:2891-0:899:2267","b:1:2612-0:899:2267","b:1:2887-0:899:2267","b:1:2902-0:899:2267","b:1:2897-0:899:2267","b:1:3720-0:899:2267","b:1:2615-0:899:2267","b:5:725-0:899:2267","0:907","0:904","0:906"]}}},"0:160:2207":{"id":"0:160:2207","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[209,4],"end":[218,5]},"visibility":"public","docs":"Return the last occurrence of the `needle` in the `haystack`\ngiven. If no such occurrence exists, then `None` is returned.\n\nThe `needle` provided must match the needle given to this finder at\nconstruction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:529":{"id":"0:529","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[999,0],"end":[999,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1258:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5617:32592":{"id":"5:5617:32592","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13253:31363"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8170-0:1425:1962":{"id":"b:1:8170-0:1425:1962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8166:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1425:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8172:172","1:8173:9780","1:8174:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:3720-0:1569:2737":{"id":"b:1:3720-0:1569:2737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1569:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3720-0:886:2246":{"id":"b:1:3720-0:886:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31988:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3718:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:886:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3722:1769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41602:3526-0:1158:2267":{"id":"a:1:41602:3526-0:1158:2267","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41602:3526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1158:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:296":{"id":"0:296","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[36,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:1137:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:297:1152","0:298:1161","0:299:3236","0:300:2203","0:302:2207","0:304:557","0:305:2205","0:307:2208","0:309:2210","0:317:953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2890:4112":{"id":"1:2890:4112","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2864:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:6491:12630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:3395:14142":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:13485:10596":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:6609:12698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:8301:11756":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:5700:11365":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:2998:11383":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:41488:13516":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:3593:4208":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:10251:10338":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12485:23215":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:4237:13142":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:46223:13726":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:3381:9977":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12851:10497":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:5181:12330":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:44104:13606":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:2458:11341":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5020:12298":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7769:11685":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:5352:12405":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"6:5329:12402":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:15324:11058":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6466:11517":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:1933:650":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:5381:202":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"5:4102:36231":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:22937:13265":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:7561:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:10265:9836":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:32045:9742":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:22959:13267":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:13972:10407":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"18:80:1961":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:2592:11347":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:5536:14213":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:12300:1637":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"6:5536:12495":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:33443:9965":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10068:23074":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"14:220:11836":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:13631:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:14855:10930":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:1825:14179":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:6794:14236":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"4:5784:13043":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:2478:11342":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:6629:12706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:2542:11857":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:7633:36308":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:5472:12477":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:1663:12136":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"4:5269:203":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:1207:13940":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:4502:11398":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:8351:13004":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5489:12482":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:40046:13481":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:5742:11422":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"0:1579:3600":{"crate_id":0,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"11:2383:2249":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"4:4822:15928":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"11:1066:22092":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:44120:13158":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:16223:11307":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:45742:13663":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:7509:14095":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:4830:11408":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:10639:14198":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:4496:13192":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:7386:14160":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:10476:156":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:33247:9961":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"0:179:2093":{"crate_id":0,"path":["memchr","arch","all","twoway"],"kind":"module"},"1:10908:238":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:8620:12851":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:1582:14129":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:3282:35675":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"11:856:14118":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13116:10519":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:16032:10550":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:14986:10979":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6342:36315":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:7941:9250":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:2430:13187":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"4:9665:14246":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:12832:3532":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:10898:15862":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"9:238:13538":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:4757:12866":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"4:5034:15948":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:12516:14020":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:14066:10716":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:5037:11415":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:43966:13593":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11063:13961":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11574:11855":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:2902:22158":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:4917:14209":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:7629:13041":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:2195:15775":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:40745:9257":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:10688:27715":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:32650:9955":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:5671:12557":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:10612:13952":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:9244:14264":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6574:11381":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:22867:15862":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"4:9658:137":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:13866:1933":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"17:14414:10786":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:15281:11046":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:15521:11136":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:15190:11025":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:22773:27790":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"8:0:4182":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:40009:10006":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:15957:11227":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:44347:13615":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5457:12468":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:41270:13498":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:6895:11590":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:11688:10388":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"15:394:22122":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"18:726:10221":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:1325:14123":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:5361:12409":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:2050:13185":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:8591:14257":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:46514:9235":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:545:11994":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:14402:10784":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:15222:11032":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:4092:15903":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11595:10379":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:8778:15971":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"16:4424:11396":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:4859:15916":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6435:12604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:43687:10000":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:1073:14127":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"0:210:2106":{"crate_id":0,"path":["memchr","arch","all","is_suffix"],"kind":"function"},"5:1169:14783":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:43894:13587":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:15569:11137":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:44096:13604":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:33962:9969":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:45366:13630":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:15333:11061":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:3597:13948":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:7813:11687":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:12843:15461":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:9095:13130":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"17:14847:10927":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:8282:12989":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:42961:13544":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:22948:13266":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:14386:10780":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:9303:13138":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:5347:11419":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:10684:10405":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:45792:13665":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:3035:14785":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:3335:14198":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:403:13937":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12724:23093":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:15376:11075":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:0:543":{"crate_id":1,"path":["core"],"kind":"module"},"4:4279:15926":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:39911:27781":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13325:10567":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"14:202:16025":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6335:14068":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:16105:11278":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"4:4292:14496":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:1544:14113":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:45936:13687":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5581:12514":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:44173:15486":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:8499:10342":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:10887:36322":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:10285:14275":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:14212:10758":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:5385:10333":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:46268:13727":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7570:11376":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:5415:12438":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:5677:12560":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12647:14024":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:7144:23027":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:32044:9306":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:9145:9780":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:12595:13565":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"9:447:22013":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:8216:11749":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"4:8482:9282":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"16:5781:11366":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:724:153":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:689:2737":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:1463:2249":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:43370:13212":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:13089:10513":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:14587:10815":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:6689:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:6098:23020":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:10622:15439":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"4:10877:13050":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:7085:11614":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:7412:12870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:12262:14596":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:8328:12998":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"4:8692:13116":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:15426:11086":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:6589:36231":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12201:14012":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:910:14128":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:11222:14315":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"0:423:1942":{"crate_id":0,"path":["memchr","arch","x86_64","sse2"],"kind":"module"},"4:3616:15880":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:39983:10003":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:7359:12847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:4641:11403":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:5200:12342":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:2323:22157":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"4:8294:14250":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:6543:14129":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"18:507:10209":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11702:10389":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:4743:11405":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:8118:11740":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:4897:12237":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:5483:12480":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:6655:9298":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:44162:13612":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:13235:10547":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12443:10467":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:7037:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:5202:14309":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:8288:12990":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:31915:11860":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:44138:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"5:824:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:40507:9295":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:3870:14142":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:2864:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:1490:12022":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:2234:13945":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12464:23214":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:2203:13942":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"4:8174:138":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"17:14575:10465":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:40362:9293":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:13064:10512":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:6738:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:40755:9259":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:5122:12324":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:1593:12082":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6976:11598":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"0:999:2350":{"crate_id":0,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"17:13553:10615":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:5336:12403":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:13568:10621":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:43346:13552":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11647:10385":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:44385:13618":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:32074:4202":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"11:2369:14134":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"4:10264:14181":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"4:7831:10330":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:872:13936":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:2667:133":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:5528:12490":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:14311:10768":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:3475:11387":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:43420:13557":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:6813:11575":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4837:12202":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:43752:15475":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5260:12371":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:15206:11028":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7006:14072":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:5915:14129":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:40521:9296":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:45771:13664":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:14372:10778":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:22650:13230":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:41602:3526":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:6648:11537":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:40041:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:3207:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:3473:13947":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13211:10546":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:45486:13641":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:2438:11340":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:7437:14497":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:42542:9843":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:5083:12321":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:12294:1148":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"5:1340:14122":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13814:10679":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:5711:16040":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:40122:14328":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:10468:152":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:45869:13684":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11042:13959":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:2612:11348":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:43574:13566":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13424:10583":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:21447:27491":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:42467:27803":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:13173:10531":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:43931:13588":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:39134:212":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"0:532:2090":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","packedpair"],"kind":"module"},"1:43492:13561":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:21435:27491":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:12823:14312":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"11:430:14485":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:6505:12641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:589:15788":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:6391:15998":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:1970:1311":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"6:578:12012":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"4:9255:14266":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:41527:172":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:8577:15927":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:1575:14141":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"0:0:1949":{"crate_id":0,"path":["memchr"],"kind":"module"},"0:1258:2292":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"1:45334:13628":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"10:0:4184":{"crate_id":10,"path":["adler"],"kind":"module"},"6:7339:12841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:22373:15602":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:3947:14205":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:4613:14305":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:7841:14295":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:39884:10001":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:43268:13221":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:7461:12882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"4:8429:3767":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:6505:185":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:3171:9957":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:15313:11054":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:6160:22130":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:7364:13030":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:4819:15950":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:23477:235":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:1724:36231":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:5244:953":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:46146:13725":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:521:3530":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:4802:11407":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"11:396:14483":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:6519:12642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:21689:15513":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:8642:13105":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"11:102:11839":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:9359:186":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:9180:15994":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:30473:9842":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:12308:868":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:8818:13124":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"18:481:3413":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11825:13998":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"18:613:2858":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:1940:9884":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:5587:113":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:33188:9962":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:7348:12842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:3352:141":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:0:4190":{"crate_id":17,"path":["object"],"kind":"module"},"5:3277:11851":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:894:14129":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:2536:11856":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12213:14013":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"13:226:11838":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:2609:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:3633:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13774:10671":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:2112:14144":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"4:929:15806":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:11467:10378":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:46563:9238":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:39968:10001":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10954:23102":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11026:23104":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:12300:23213":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:3186:4206":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:4307:2249":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:1671:12137":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:11324:13970":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"0:287:3223":{"crate_id":0,"path":["memchr","arch","x86_64","avx2"],"kind":"module"},"6:6915:12811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:43356:10342":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"11:1883:2249":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11524:13980":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11896:14320":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"4:5025:15947":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:3500:13142":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"16:7695:11683":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"18:659:3552":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:11257:13217":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:11166:10357":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"0:956:2352":{"crate_id":0,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"1:45678:13659":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:4531:11399":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:742:14114":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:3300:4209":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:5859:13142":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:4737:15389":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:15473:11099":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"11:1566:22093":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"11:364:14481":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:5283:12385":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:10577:34593":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:3027:13014":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13986:10705":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:11184:14314":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:39286:13348":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:30854:9754":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:4891:12234":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:8125:9269":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6588:11526":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:7061:11613":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:39171:211":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:9886:23087":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:7686:14104":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:7467:12884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:2748:11354":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:10137:23068":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:41552:9780":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"0:1208:2187":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"1:39472:9744":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:43438:13558":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:6756:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"4:534:14877":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:3103:4203":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"4:8030:15794":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:2548:11345":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:2653:469":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"6:6763:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:13785:10674":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:6447:12608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:5477:12479":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:14503:10804":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:6698:12734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:12388:10460":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:43669:10002":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:22926:13264":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"16:5846:11434":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7910:23031":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:219:4223":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:16093:11276":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:9938:23089":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"4:4154:15908":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:2125:188":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:45454:13639":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:4718:11404":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12478:10470":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:39900:10008":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:7900:34586":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:6532:11524":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:15456:11092":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4932:12254":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:45661:13658":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11336:13560":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:11743:10394":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:13855:10683":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6746:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:40261:9288":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1699:12150":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:7741:11380":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:5898:14221":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:15289:11047":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11313:10368":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:5014:12295":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:8152:13051":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:1810:674":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:558:14170":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:2636:11349":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:10948:34109":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:7755:11370":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:13473:10593":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:5320:12399":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:15720:11183":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:11780:14204":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:3588:9832":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:8226:13007":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:41470:13515":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:13437:10584":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:43277:14340":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:1888:14183":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"4:10939:34107":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"4:6651:13045":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:7799:11368":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:12556:13559":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:7464:9780":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:3031:14784":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:44339:14342":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:11563:31196":{"crate_id":4,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:2834:15148":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:21691:2781":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10185:10335":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:11635:14240":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12900:10501":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:5502:12488":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:2871:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:10092:23092":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:23003:13271":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"11:1087:36296":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:811:14142":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:6031:13028":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:6417:12591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:44360:14344":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:3718:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"16:8073:11736":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:5191:12337":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:13507:14323":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:42727:156":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:33070:9960":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:42521:136":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:15039:10989":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:9129:2249":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:4787:12165":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11937:15359":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:13766:10669":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:11621:13172":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:523:11981":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11674:10387":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"0:886:2246":{"crate_id":0,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"1:3565:9984":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:22970:13268":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"0:286:1933":{"crate_id":0,"path":["memchr","arch","x86_64"],"kind":"module"},"1:40736:9255":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:6398:11361":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:39121:9978":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:5598:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:15944:10546":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"18:735:3676":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12225:14014":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:4267:13142":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"4:5522:14211":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"0:1166:2279":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"17:10350:10341":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:5064:12320":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:11102:13212":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"9:392:22014":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:9915:14598":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"11:1903:11851":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:9417:13143":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"11:328:11844":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:6872:11589":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:41661:2249":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:7429:12871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6532:12648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12494:10471":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:12399:10461":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:37714:9971":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:12076:14006":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:8210:14248":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:6291:13224":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:7605:14161":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:12777:15186":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:41248:169":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"11:1007:11624":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:3156:9954":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:553:11999":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:5445:12459":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10018:23071":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:5112:12323":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11443:10376":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:2858:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:6782:23025":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:45419:13637":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:5556:14214":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"16:4976:11413":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6650:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:2246:4215":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"11:700:9780":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"11:844:15806":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:6962:11372":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:3780:15899":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11392:13975":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"14:31:14109":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:15023:10986":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6385:11506":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:1575:2249":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:11876:13179":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:43474:13560":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8622:148":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:10705:27755":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:13375:10576":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"13:109:9940":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:39949:10010":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:4271:14495":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:651:10209":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:43773:13575":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:5403:36231":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:44088:13602":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:14189:10749":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:10920:127":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"4:11315:14289":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:39229:215":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:45433:13638":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:5146:12326":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:3241:9968":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:9372:13142":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:3630:4212":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12695:14028":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:23025:13273":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:13146:10523":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"4:11607:13171":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:40323:3446":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:4100:15904":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"9:482:22012":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:8162:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:45809:13666":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:22915:13263":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"4:8299:14251":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"16:5995:11456":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"14:160:14109":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:7988:10405":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"16:7539:11375":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"11:1160:14127":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:14968:10974":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11715:10390":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"4:11168:13131":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"15:0:4188":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:3269:11853":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:1582:14130":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12408:10462":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12278:14018":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:16187:11300":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:16151:11291":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:2708:11352":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:7616:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:4078:15902":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:497:11961":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:12246:14298":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:41508:193":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:4:1230":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"16:8226:23032":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:4499:14208":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:9295:14272":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:837:14115":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:4150:15907":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:23014:13272":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:10226:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:22003:27496":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11915:23189":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:4856:11409":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"18:635:2840":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"4:10642:14200":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:14752:10844":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:2037:13941":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:9195:15993":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7648:14103":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:22815:13254":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:9168:13134":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:15582:11143":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:39117:9976":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:1559:12061":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:40270:9289":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:7537:13034":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:9283:14270":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:10671:36321":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:3110:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"17:15010:10981":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:608:2857":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:9376:233":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:2678:27755":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:1976:762":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"4:11205:13143":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:868:15807":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:11364:14317":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:43520:13563":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:3810:11390":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:3154:3406":{"crate_id":1,"path":["core","ops"],"kind":"module"},"18:765:3756":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:2418:11339":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:1098:13939":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"11:2231:11855":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"4:2700:14190":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:22835:13258":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:45404:13636":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:16212:11305":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:6433:11510":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:22320:15601":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:10905:13957":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"0:1179:2287":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"17:597:10330":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:3024:3416":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5557:12507":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11877:10399":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:11884:13179":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"11:299:11841":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:6047:14035":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:14012:10708":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:10848:14284":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:14147:10727":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:7602:12960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:44108:13607":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:589:2797":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:10524:13951":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:43819:13584":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:6850:13207":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"4:11270:13160":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"0:747:3556":{"crate_id":0,"path":["memchr","memmem","rfind_iter"],"kind":"function"},"4:8140:14246":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13292:10561":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"18:754:3533":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:6634:11369":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:5031:12303":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:21566:15512":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:14177:10746":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:5955:13142":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:2606:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10769:36326":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:6855:13205":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:2808:11357":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"0:752:2207":{"crate_id":0,"path":["memchr","memmem","rfind"],"kind":"function"},"17:16176:11299":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"4:9078:14262":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:11367:10355":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:3346:139":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:3264:13946":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"0:1237:2279":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"17:11128:10323":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"11:2304:11624":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:5546:12501":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:43945:15476":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:40209:9283":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"18:718:10218":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:774:11849":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:4985:12279":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:7428:23028":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12342:10454":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:8175:14105":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13606:10629":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:5039:12307":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:6636:12707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14091:10718":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:3549:14202":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:12315:1793":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"17:11621:10382":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:6231:11496":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:1426:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:5415:11420":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12362:10459":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:4048:15900":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:44284:163":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:14489:10801":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:10283:14276":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:12572:10371":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:21584:2781":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:0:4189":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:1910:11852":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:5048:15949":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"18:573:10209":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:5223:14210":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:1887:9780":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:12633:13216":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:7575:12954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:21462:27500":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:14271:10764":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:837:2249":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:437:10282":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"4:9391:14239":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"4:7682:33654":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:12993:23095":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:4940:11412":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:5831:11432":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12251:14016":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:2867:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:11115:13965":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:15608:11152":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:11187:13158":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:15151:11014":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:16050:10560":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:43624:13568":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"5:1828:14142":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"9:357:22028":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:40313:9291":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:3578:29622":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:415:184":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"11:883:14121":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:10044:23091":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"11:2443:14129":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:5367:23017":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4924:12252":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:6775:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:46468:9232":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:357:14166":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:3597:33219":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:42479:11714":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:3115:3116":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:21513:15516":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:473:11950":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5314:12398":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:919:14114":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:5006:11414":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:11077:9864":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12949:10447":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:41302:15418":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:46313:13728":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:698:3600":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:40707:13493":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:4876:12228":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:4609:220":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:15992:11257":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"4:6116:13042":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:12314:1787":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:737:189":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:2838:11358":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11102:13964":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11341:13973":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:14356:10777":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"0:1229:2267":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"4:2448:15852":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"5:1189:14492":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:15301:11053":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:22704:13239":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11764:10398":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:5400:10334":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"0:142:2409":{"crate_id":0,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"17:11405:13976":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:12817:9705":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:5160:12327":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:10982:31209":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"11:351:14478":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:42221:9836":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"3:0:4180":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:12659:14025":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"4:7944:15862":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:42102:9709":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:5845:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:12306:732":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:39073:4210":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:4942:12260":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:1597:11852":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:734:15187":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"4:2446:15851":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:5192:14210":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11227:13968":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:15266:11044":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:8265:12984":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:5863:23019":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:42450:9842":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"4:2458:15857":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"5:3243:11852":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:1591:11851":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:12302:1759":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:15445:11091":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:867:13935":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:5722:11367":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11256:10361":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:12768:23072":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:8597:13104":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"4:2987:14195":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:6729:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:21991:13227":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:1603:11853":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:9290:14271":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"0:1187:2292":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"4:8016:15793":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:15463:11094":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:9406:14312":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:14235:10759":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:6441:12607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:9781:23085":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6442:11511":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13344:10572":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:8616:14261":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:3899:11392":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:46479:9233":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:41788:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:14912:10968":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:6615:14229":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:6480:11363":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:14545:10808":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:860:9780":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11557:13982":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:2664:14191":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:1517:12033":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:504:15775":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:7452:12878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4870:12226":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:40348:2945":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:10155:10333":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:42207:9833":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:22992:13270":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"4:8675:15958":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:4979:12276":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:31987:236":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"5:7511:13033":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:5102:12322":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6880:12786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:5134:12325":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:2628:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"11:1603:14131":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:12278:31207":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:2509:15350":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:6844:9277":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:5436:12453":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:45981:13688":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:2039:197":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:5643:12547":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13526:10606":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11145:13216":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:6079:11321":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:40247:13486":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"11:2326:14122":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:10399:10342":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"18:680:2350":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11242:13969":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:5960:11453":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:46010:13689":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:22432:15594":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:2704:201":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:41827:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11583:13988":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:1680:12143":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:4352:11395":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:22460:15595":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:12056:10434":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:11541:14290":{"crate_id":4,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"1:37879:9974":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:6927:11594":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:43242:9271":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:15168:11019":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"11:710:14113":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:3559:9982":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"0:171:2092":{"crate_id":0,"path":["memchr","arch","all","shiftor"],"kind":"module"},"4:12318:1860":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:9984:23090":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:5174:12328":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:22334:15349":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"5:1494:9780":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:46593:9240":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:22306:15862":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:12707:14029":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"4:10967:14216":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:1516:11849":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:42214:9835":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10720:36323":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:7366:12851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"0:26:1966":{"crate_id":0,"path":["memchr","arch"],"kind":"module"},"1:7592:9280":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:15616:11155":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"11:123:11840":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5002:12289":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:7485:12895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7497:11672":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:15390:11077":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:41983:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:45500:13642":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:940:14118":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:479:11953":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:11740:14203":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:41604:9391":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:7639:14162":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:12863:10498":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"11:1025:14122":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:2660:11350":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:40149:9271":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:3022:136":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"0:1216:2246":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"17:12328:10449":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:8669:28253":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:8093:11737":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:42063:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:14994:10980":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13387:10577":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:13669:13226":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:1628:12111":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:3248:35676":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:46342:13729":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:43678:10001":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:6132:219":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:22544:13228":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:8828:2249":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:42710:13536":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:10267:205":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"11:832:14128":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:5630:12541":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:6657:12719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:12319:1370":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:43340:13551":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"16:7052:14073":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:5914:11445":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:43662:13572":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:42739:13538":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:8518:14257":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:6032:9287":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:11661:10386":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13399:10580":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:491:11958":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"0:27:306":{"crate_id":0,"path":["memchr","arch","all"],"kind":"module"},"1:4255:13142":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:42504:9842":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"15:306:14473":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:2493:651":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:40229:9285":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:14449:10798":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"0:899:2267":{"crate_id":0,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"4:3378:14200":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:46540:9237":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:1653:12130":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"11:2423:9780":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5052:12311":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:46616:9241":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:22981:13269":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:44116:13609":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:40763:9261":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"11:2469:14142":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:3183:4205":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"4:2432:15847":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:22113:15862":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11788:13993":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:2287:15844":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:8253:12982":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:5769:11427":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:45387:13635":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:4425:14207":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12969:10504":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:42200:9834":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:5143:423":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:1723:12159":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6849:11588":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11419:10371":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:261:13936":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:12310:880":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:5891:14217":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:4863:15919":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:2205:13008":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:10252:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:40169:9272":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:2991:14301":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:7881:34580":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:2936:22159":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:46499:9234":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:6780:14232":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:42749:13540":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:40279:9297":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:45529:13644":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:6802:11574":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:7945:13046":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:10271:9838":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:150:11316":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:13482:204":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13252:10550":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:4140:15906":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:3606:15860":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"17:14868:10937":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:6215:34600":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:8051:14245":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11730:10393":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:22597:13229":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:22332:30280":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:11510:13979":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:96:1962":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:21572:15515":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"11:1891:14129":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:4344:14206":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:6156:13142":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"4:12296:1821":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:9916:23088":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:2572:11346":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12127:10439":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:15058:10990":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6758:11562":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:7330:12835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:10982:23103":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:10661:13953":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11075:10355":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:12349:14321":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"13:0:4181":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:4608:15928":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:13455:30566":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:12365:3003":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:6606:11533":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:6263:11501":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:6307:34585":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:4263:14494":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:923:14115":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:5225:12353":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"0:909:2279":{"crate_id":0,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"1:4398:15381":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:5107:11417":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"4:11222:13159":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"4:8492:9294":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:45302:13624":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:39149:209":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:21425:9754":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:39279:9981":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:4922:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"4:11652:13175":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:10930:13097":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:586:12016":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:46371:13730":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:3842:14203":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:1510:12030":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:4614:11402":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:8438:13096":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:44369:179":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:14341:10773":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:22:794":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:7331:15132":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:3145:9739":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"16:7618:11679":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:2059:13188":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:39890:13477":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:5046:12309":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:15931:10532":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:14788:10875":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:9497:14182":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:3303:11854":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:6768:12757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:15635:11161":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6120:23021":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:39299:13349":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:44298:226":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:3427:15888":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:46069:13692":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:7397:36312":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12175:14007":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:43788:13580":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:2788:11356":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"11:787:11850":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4952:12263":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:43195:13220":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:21967:15518":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:32836:9958":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:8306:12993":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12353:10458":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"0:1530:3552":{"crate_id":0,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:7356:9780":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:12671:14026":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:7306:36314":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:16235:11310":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:7446:12876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:363:14168":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"4:5709:12772":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"6:4992:12282":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13497:10597":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:1153:14491":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:828:14136":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:7347:4220":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:5075:11416":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:43653:13571":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:25877:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:8006:12967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:6478:12621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:8188:14108":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:11350:13561":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:41286:13500":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:3020:225":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"1:21493:27502":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:8155:11746":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:9671:23070":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:3342:9305":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:7456:9780":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:5164:27769":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:15734:11185":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7888:11699":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:15400:11080":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:12316:1775":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:15368:11072":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:11378:14318":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:9151:13133":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:44084:13601":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"16:5817:11429":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:14876:10938":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:46578:9239":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:43329:13550":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:12543:14023":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:8271:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:904:14142":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:16259:10577":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:2508:11343":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"11:2548:11858":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:9386:14238":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:13509:10598":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12621:10477":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:12891:15469":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:3475:210":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:15814:11204":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11812:13996":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:7709:9247":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:517:11978":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:6621:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:5390:12425":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"14:0:4187":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:11646:13174":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6562:12671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:13363:10573":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:41544:9864":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:1496:12025":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:21479:27497":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:40112:13194":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:2504:4127":{"crate_id":4,"path":["std","io"],"kind":"module"},"17:11773:10481":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11634:10384":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:5777:13042":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:6940:11596":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:31988:3420":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:570:12007":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:30201:15149":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:9755:23067":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:21511:15862":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"4:9210:15995":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12454:10468":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"4:9108:13131":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:14723:10824":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:6146:9275":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:641:14174":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13844:10682":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:15383:11076":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"4:4162:15910":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:15078:10998":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:3318:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6412:23022":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:43176:13219":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:2374:11337":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13538:10609":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:15356:11069":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:296:2774":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:5588:12516":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:3961:9780":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:44092:13603":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13899:10691":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:12317:942":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:22665:13231":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6317:14060":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:1447:155":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:4436:36271":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:22465:15593":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:13649:13224":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:22715:27877":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:1547:12053":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:10351:15978":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"11:1896:14142":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:15197:11027":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:6752:36231":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:12333:15426":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"18:0:1949":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:46655:9242":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:5636:12544":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:7111:11621":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:11467:34588":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"5:6670:9780":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:8313:177":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:3337:14199":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:30452:9887":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:10867:13145":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"4:2042:196":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:3548:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:43255:14339":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:11295:14316":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:46488:3227":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:10207:225":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"16:860:14032":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:4793:9847":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:15126:11005":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7379:36316":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:6379:12564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:9296:9416":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12530:14022":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:13046:10509":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:43538:13564":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:11580:14292":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:3196:11328":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:14475:10800":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:41592:9415":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:952:14121":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:8294:12991":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:6913:16040":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:2036:15361":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:5370:12415":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:5572:14215":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:15138:11008":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:9399:161":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:43634:13569":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:2278:137":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"6:5290:12387":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12318:10447":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:30827:195":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:5756:14033":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:7657:14500":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"0:1545:3557":{"crate_id":0,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:40730:9253":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:1940:14184":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"6:465:11945":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:2855:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:1580:12075":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:30458:9888":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:4618:14306":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:6665:23024":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"4:10425:113":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:8317:12997":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"9:502:11926":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:8505:13212":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:11717:14499":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:5897:11440":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"15:288:14469":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:14463:10799":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:45710:13661":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11089:13963":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:15822:11207":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:15116:11004":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:44408:13619":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:11142:10371":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:6543:11525":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:8162:13052":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"18:598:2852":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:21680:15862":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12107:10371":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:8631:9265":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:1639:12119":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"11:2352:14123":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:12557:10355":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:13024:23096":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:12289:10442":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:5665:12555":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6494:11520":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:5344:12404":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"11:1107:14125":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:12307:886":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:40002:10005":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11214:13967":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:11493:13977":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:11155:13130":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:4468:11397":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:6991:36306":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:9737:23069":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"5:7406:34645":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:3191:4207":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:41448:13102":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:12683:14027":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:2698:194":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"11:2554:36295":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:9137:14263":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:850:9864":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:43997:13599":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:6471:12617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13797:10676":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:2197:128":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:7559:11677":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:12422:10463":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:7604:11378":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:14560:10812":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:15836:11210":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:33306:9963":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:706:3532":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:1478:9864":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:6611:9251":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:8625:9264":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:8202:11382":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"0:28:1949":{"crate_id":0,"path":["memchr","arch","all","memchr"],"kind":"module"},"4:10901:13051":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:15273:11045":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:15596:11149":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:8166:164":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:15760:11194":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:7546:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:6670:12723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5624:12538":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:6849:232":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:45611:13656":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"18:515:10212":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:22904:13262":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13999:10706":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13946:10697":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:22753:27805":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:7314:12823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:4465:14304":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:35838:9970":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:13706:151":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:3925:11393":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"0:124:2090":{"crate_id":0,"path":["memchr","arch","all","packedpair"],"kind":"module"},"5:7698:14142":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:6821:12774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:7077:15997":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:10997:10352":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:12295:458":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:14051:10713":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:6706:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:5423:12443":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:22737:13242":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:1863:14181":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:41603:3525":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:40497:9294":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:234:225":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:15342:11062":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:7968:13047":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13412:10582":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:8197:12980":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:22418:15862":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:10208:9832":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:10710:13954":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:5686:11362":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"0:743:3550":{"crate_id":0,"path":["memchr","memmem","find_iter"],"kind":"function"},"4:8834:13126":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"6:6664:12720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:3790:13007":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:7593:13040":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:11240:161":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"0:751:2203":{"crate_id":0,"path":["memchr","memmem","find"],"kind":"function"},"14:40:10547":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:4241:14493":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:3470:9255":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:42757:13541":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11153:13955":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:10534:14262":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10828:36327":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:11863:14319":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"5:6946:16042":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:42702:13534":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"0:668:1969":{"crate_id":0,"path":["memchr","memmem"],"kind":"module"},"4:4753:12862":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:22729:13241":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:40072:13482":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:11051:13960":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:4062:11394":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7727:11379":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:2287:34642":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:7108:36240":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:5382:12420":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:4147:9864":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:14325:10771":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:3646:2249":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:5447:16019":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:3827:14129":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:2878:11360":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:40142:14329":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:5296:12390":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:8247:12981":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:5451:16020":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:10915:36325":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"0:934:2292":{"crate_id":0,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"4:646:15790":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:4692:9845":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:2950:136":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:22822:13257":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:6504:11521":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:13581:10625":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"0:288:1949":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr"],"kind":"module"},"4:4630:15929":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:3105:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:46031:13690":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:1566:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:0:485":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"11:1923:11854":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:6936:16041":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:43867:13586":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:7321:9414":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:1586:14142":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"4:12298:1268":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"0:424:1949":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr"],"kind":"module"},"17:16121:11283":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:12584:13955":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:43287:13222":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"4:1064:14123":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:10516:13209":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:491:3414":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:40178:9282":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:37769:9972":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:4970:9993":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:5306:12394":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:15249:11036":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:12929:10502":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"0:993:2350":{"crate_id":0,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"1:46400:13731":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:40084:10342":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:6409:12589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:2854:11359":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"11:2124:11624":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"4:10872:13147":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"4:2596:14189":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:1692:12147":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:10259:9833":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:4746:9846":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:45319:13627":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:16198:11301":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:6678:12725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:6542:12655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:42957:13543":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:8259:12983":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:1686:12146":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:6723:14230":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"4:10157:13511":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:41669:9864":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:40219:9284":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12264:14017":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"11:1917:11853":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:15102:11003":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:3242:34020":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:39939:10009":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:2338:11329":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:9364:14226":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"5:6052:14786":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:43297:14341":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"0:922:2287":{"crate_id":0,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"17:13723:10658":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:12311:861":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"6:1503:12028":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:7522:15805":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:11801:14205":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:11293:23122":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"4:1608:11854":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:22681:13235":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:8450:13097":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"5:1534:14128":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:4682:13193":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:30484:27786":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"5:1309:11624":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:8036:15832":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:11189:10359":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:581:9754":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:33616:9966":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5244:12363":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:3842:11391":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:15701:11178":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:4560:11400":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:2833:15862":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:4743:15905":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:1555:14114":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:1535:12044":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:4466:13142":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:7168:13138":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:7566:15412":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11853:14001":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13455:10592":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:7516:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:31964:14327":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:13187:10532":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:14599:10822":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:46442:13733":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:3152:9741":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:9262:31173":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:39995:10004":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"6:559:12002":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:15655:11164":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:43316:13547":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:1354:14127":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"11:2140:14122":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:9336:13141":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:256:13935":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:9231:13137":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:31978:13339":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:31989:243":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:45640:13657":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:11574:13167":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:32076:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:4821:13949":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:14025:10709":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:22846:15200":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:8583:14260":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:10636:14196":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:14038:10711":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:3331:4211":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:22115:15514":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:15176:11022":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:669:14135":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:564:12004":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13922:10696":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:40057:15412":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:45898:13685":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13753:10667":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:2861:162":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"16:6456:23023":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:9381:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:538:11990":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:14298:10767":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"4:12299:333":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:43205:14338":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:5641:14216":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:31953:14326":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:4800:12174":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"4:8524:14259":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"4:8565:13102":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"0:878:2187":{"crate_id":0,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"0:1200:2350":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"1:43388:13217":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:21564:15862":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:21481:27504":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"7:31:21999":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11755:10397":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:14111:10721":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:12579:13562":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:6788:12765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:10263:9835":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:43956:13589":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:14933:10973":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:8512:13568":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:12313:1781":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:13051:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:16079:11272":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:7355:11654":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:22244:15599":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:46048:13691":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:8136:11743":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:5466:12474":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:6721:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:15799:11203":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:41686:195":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:12305:716":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"6:6900:12800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:14246:10761":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10284:10339":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:15624:11156":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:5712:15976":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"5:7376:14129":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:2939:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:11269:23121":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:687:9864":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:45515:13643":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:10419:10344":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:1485:12020":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:13761:4219":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:5617:12535":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11841:14000":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:39926:10007":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:7857:11695":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:45579:13654":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:7584:12957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:2507:15349":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"11:673:2249":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:6278:14042":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:10877:13956":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"4:12320:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:8740:13538":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:7487:9270":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10818:13955":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:4356:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"5:7428:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:2394:11338":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5236:12360":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"9:53:14577":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:6726:15989":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:44281:149":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:7593:9281":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13877:10690":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:15748:11192":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"12:0:4186":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:8341:13002":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:7132:11623":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:532:11987":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:8135:10275":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"11:434:14486":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:1526:12038":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:3014:22160":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:12301:1671":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:10257:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:15:4161":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:4332:14302":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:11053:2249":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:4916:12250":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:12312:1799":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"17:11537:13981":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:2524:13018":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:7083:36257":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:1525:11850":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7823:23030":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:45558:13653":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:43592:13567":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"11:2151:14123":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"4:1886:14182":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"16:6749:11561":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:10959:14245":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:44112:13608":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:15214:11030":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:10911:138":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:10317:10340":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:4965:12268":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4885:12233":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4811:12182":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:12309:874":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:12267:15795":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:44396:4218":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"5:3025:36108":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11898:10401":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:13015:10465":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:43644:13570":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:8763:13119":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:10269:9837":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:7396:13031":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"4:915:14113":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"11:2403:9864":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:41621:225":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:2662:200":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:40191:9273":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:542:11318":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:15678:11177":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6300:14057":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:5999:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:15778:11200":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:4766:9732":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:11062:34584":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:4940:15915":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:16249:11311":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"0:209:2101":{"crate_id":0,"path":["memchr","arch","all","is_prefix"],"kind":"function"},"5:40:4221":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:4708:15946":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:43116:14336":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:2728:11353":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11799:13994":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"14:214:11834":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:15434:11087":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:41944:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:622:14171":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:8012:12969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:4344:14303":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:41749:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:4824:12192":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:3245:34483":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:7963:14241":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:39976:10002":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:12293:405":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:6394:13042":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:3739:36231":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3538:9980":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:39037:9865":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:9249:115":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"11:800:14129":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:40714:9249":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:4771:11406":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:4986:13950":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:40721:9251":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4864:12225":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:8201:13056":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:7581:13038":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:40238:9286":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:2234:13011":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13674:10633":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:7528:11673":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"11:2498:22088":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:5515:12489":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:3349:140":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:8462:15861":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"16:7580:11678":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:7553:13035":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:41905:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:4500:36271":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12189:14011":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:8845:13127":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:12238:14015":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:9723:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:7259:34591":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:7288:34358":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:8529:15898":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"9:0:4183":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:39209:213":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:10218:10337":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:33789:9967":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:485:11956":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:6560:11364":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:12508:10474":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:3669:10231":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:40332:9292":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:21962:15862":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:16069:11271":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"4:11857:13178":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"11:1051:14123":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:8300:12992":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:6620:11535":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"0:211:2104":{"crate_id":0,"path":["memchr","arch","all","is_equal"],"kind":"function"},"1:42495:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:3236:2249":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"10:44:11866":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:3029:10226":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:12597:10476":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:14977:10978":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:43802:13583":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:875:14120":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:45596:13655":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6353:11503":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:45824:13667":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:9807:23075":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:15646:11162":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:1055:14122":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:3161:9959":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:42718:13537":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11354:13974":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:5061:13142":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:14436:10797":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"4:881:11850":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:11045:34598":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:6026:11462":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"18:563:10214":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:1579:9780":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:31971:9845":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"14:165:22095":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6066:11466":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:7656:23029":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:3248:34481":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:45471:13640":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:16269:10582":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"4:0:1663":{"crate_id":4,"path":["std"],"kind":"module"},"1:40372:9279":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:11056:34595":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12043:14004":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:10170:10334":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"0:1158:2267":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"16:7473:11470":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:6811:12771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:46459:3226":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:6524:12643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"4:10890:13153":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"0:1271:2350":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"16:4587:11401":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:1565:12063":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12150:10440":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"0:212:2117":{"crate_id":0,"path":["memchr","arch","all","is_equal_raw"],"kind":"function"},"16:6427:14071":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"4:5970:14223":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:8304:15891":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:1827:14180":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"0:947:2350":{"crate_id":0,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"1:31957:11671":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:9858:23086":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:7306:12818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5277:12382":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:41866:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"0:1145:2246":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"17:14516:10805":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"0:1250:2287":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"5:924:15808":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:482:34602":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"11:0:4185":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:41436:13514":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:45351:13629":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:40028:9999":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:15092:11002":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:22387:15349":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:41536:2249":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"16:3614:11388":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:7714:14163":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:12433:10465":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:22282:15600":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:14284:10766":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"4:11869:33399":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:45725:13662":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:2087:13007":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"0:1559:2350":{"crate_id":0,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:2684:11351":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:7098:11618":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:8145:13050":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:5307:11418":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:5376:12417":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:7984:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:22200:15598":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:46525:9236":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:2768:11355":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"9:424:22015":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:8218:14249":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10573:36324":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:11567:13983":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"4:11377:11923":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"7:78:22006":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:2307:13017":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:8259:11671":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:11605:10380":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"18:623:2943":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:1707:12154":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:7420:9780":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:4861:15918":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:10055:9854":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"4:4106:15905":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:45287:13623":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:5212:12349":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:5400:12432":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:7537:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:39249:9979":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:2755:13021":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"15:327:14574":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:33129:9964":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:5927:11446":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:4379:4201":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:40291:9290":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"4:3531:13100":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:1041:11624":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:2355:11331":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:5219:12350":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:8204:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:43216:13545":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"18:670:3557":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:40200:9274":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:41561:9414":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:0:978":{"crate_id":6,"path":["libc"],"kind":"module"},"16:7590:11377":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:3329:11386":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13832:10680":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:6410:15999":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:10439:10345":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:6874:12785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:4913:11411":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"11:1676:15130":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:638:14172":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:1857:13142":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"5:4072:14129":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5565:12509":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:8190:127":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:5802:23018":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:10261:9834":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:5925:14222":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:513:13938":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"11:1142:14126":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"18:113:1963":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:1621:12107":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:41414:27875":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:15418:11084":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:9435:13144":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"0:964:2350":{"crate_id":0,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"17:16165:11294":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"4:3285:14196":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:14529:10806":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:3805:14143":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"11:2562:11861":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:16138:11285":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"4:5104:15954":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"0:152:2091":{"crate_id":0,"path":["memchr","arch","all","rabinkarp"],"kind":"module"},"5:1062:36231":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"0:1569:2737":{"crate_id":0,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:46421:13732":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:40300:9276":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:45919:13686":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"19:0:1247":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:22788:27794":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11547:10274":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"7:0:1850":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:8029:12979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:2101:14143":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"9:178:14587":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:2569:13033":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:5770:219":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"4:4755:12864":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:12089:10437":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:43167:13218":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:946:14120":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:9728:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:4539:9844":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:5266:12374":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:2739:14194":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:9670:14789":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:13308:10565":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:8196:13053":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:2303:22131":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:40094:15398":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:11497:13978":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:37824:9973":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"14:7:14109":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:10622:36319":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6714:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"4:8572:13103":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6948:11371":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:15410:11083":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:3845:14204":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:12887:10499":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5407:1217":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:12371:10502":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:10999:13132":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"5:4421:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:4909:12246":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:15769:11198":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:9316:31201":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:14131:10722":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:21464:27494":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:42440:13523":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:9084:198":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:12838:15462":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8257:9266":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:12519:13554":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:2280:14188":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7549:11676":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:42942:13542":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:10720:27748":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:1585:12077":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:14260:10763":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:44288:218":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"9:330:11903":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:7881:3767":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"0:405:2090":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","packedpair"],"kind":"module"},"4:1969:15842":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"14:187:22102":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:3778:11389":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:6460:12609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:38458:9975":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:44100:13605":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:41677:9780":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:730:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13738:10662":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:9910:28254":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:868:11849":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:43979:13597":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"4:10442:14790":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:2528:11344":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:14079:10717":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:7436:13032":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"0:1007:2737":{"crate_id":0,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"4:4042:15901":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:10759:10371":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:531:3531":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5653:12548":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"4:9121:13132":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:44306:206":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:5250:12365":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"18:538:10213":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11865:14002":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:4882:11410":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:11179:34110":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:11016:13958":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:3380:14201":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:941:2249":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:5211:13028":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"4:5449:128":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:43185:14337":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"0:971:2737":{"crate_id":0,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"1:45693:13660":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:13959:10700":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:6339:14224":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:2175:23147":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"18:643:10209":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"10:36:11865":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:41710:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:42024:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:281:36231":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:32464:9956":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:3287:14197":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:39189:214":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:41613:4213":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:6442:219":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12824:23094":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"0:1137:2187":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"17:12030:14003":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:45272:13620":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:8129:9268":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:10511:15420":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:30420:9886":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:4971:12271":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:7389:12869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12808:10495":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:10534:36320":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:13594:10626":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7014:23026":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:8175:9267":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"4:2283:2139":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:12081:15133":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:41330:13507":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:3659:9864":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:6597:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4959:12266":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:13272:10560":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:3553:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:12792:10296":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:39960:10000":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}