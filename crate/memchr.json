{"root":"0:0:1683","crate_version":"2.5.0","includes_private":false,"index":{"2:12315:32657":{"id":"2:12315:32657","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11937:14405","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::matches":"2:12312:3506"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43938:12633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15-0:217:1694":{"id":"0:15-0:217:1694","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,63],"end":[173,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr_iter","name":"memrchr_iter","id":"0:217:1694","glob":false}}},"a:2:8471:8890-0:638:2089":{"id":"a:2:8471:8890-0:638:2089","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:8890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:823:60":{"id":"0:823:60","crate_id":0,"name":"default","span":{"filename":"src/memmem/mod.rs","begin":[698,23],"end":[698,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:97:1696":{"id":"b:2:2253-0:97:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2255:3497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2253-0:777:2154":{"id":"b:2:2253-0:777:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2255:3497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:511:960":{"id":"0:511:960","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[705,4],"end":[707,5]},"visibility":"public","docs":"Create a new finder builder with default settings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12246:320":{"id":"2:12246:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12247:319","`u8`":"1:12050:1544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12285:27479":{"id":"2:12285:27479","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11937:14405","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::split_whitespace":"2:12263:30846","str::rsplit":"2:12291:27483"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43716:9212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2755:223-0:777:2154":{"id":"a:2:2755:223-0:777:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:481:1836":{"id":"0:481:1836","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[403,4],"end":[409,5]},"visibility":"public","docs":"Convert this iterator into its owned variant, such that it no longer\nborrows the finder and needle.\n\nIf this is already an owned iterator, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:810":{"id":"0:810","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[575,9],"end":[575,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:812:431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12247:319":{"id":"2:12247:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12050:1544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2812:8630-0:638:2089":{"id":"a:2:2812:8630-0:638:2089","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:8630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12238:32646":{"id":"2:12238:32646","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12263:30846":{"id":"2:12263:30846","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12264:30840"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43990:12636","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12271:27489":{"id":"2:12271:27489","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:14405"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12318:32658":{"id":"2:12318:32658","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11937:14405","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::rmatch_indices":"2:12321:32659"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43866:12629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[81,0],"end":[92,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:105:960"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12358:25553":{"id":"2:12358:25553","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2556-0:81:1695":{"id":"b:2:2556-0:81:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:815:685":{"id":"0:815:685","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[575,16],"end":[575,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110:1979":{"id":"0:110:1979","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr/iter.rs","begin":[103,4],"end":[105,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2772:231-0:97:1696":{"id":"a:2:2772:231-0:97:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8471:8890-0:81:1695":{"id":"a:2:8471:8890-0:81:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:8890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[64,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"2:7388:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:96:1980"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5525:33331":{"id":"5:5525:33331","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12306:32655":{"id":"2:12306:32655","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2812:8630-0:97:1696":{"id":"a:2:2812:8630-0:97:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:8630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2755:223-0:81:1695":{"id":"a:2:2755:223-0:81:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8471:8890-0:788:2160":{"id":"a:2:8471:8890-0:788:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:8890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12303:27487":{"id":"2:12303:27487","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12033:427","str::splitn":"2:12300:27485","self::pattern":"2:11937:14405"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43838:9210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2772:231-0:798:2155":{"id":"a:2:2772:231-0:798:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8471:8890-0:97:1696":{"id":"a:2:8471:8890-0:97:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:8890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3391-0:114:1697":{"id":"b:2:3391-0:114:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:127:974":{"id":"0:127:974","crate_id":0,"name":"next","span":{"filename":"src/memchr/iter.rs","begin":[152,4],"end":[157,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:226:1689":{"id":"0:226:1689","crate_id":0,"name":"memrchr","span":{"filename":"src/memchr/mod.rs","begin":[260,0],"end":[299,1]},"visibility":"public","docs":"Search for the last occurrence of a byte in a slice.\n\nThis returns the index corresponding to the last occurrence of `needle` in\n`haystack`, or `None` if one is not found. If an index is returned, it is\nguaranteed to be less than `usize::MAX`.\n\nWhile this is operationally the same as something like\n`haystack.iter().rposition(|&b| b == needle)`, `memrchr` will use a highly\noptimized routine that can be up to an order of magnitude faster in some\ncases.\n\n# Example\n\nThis shows how to find the last position of a byte in a byte string.\n\n```\nuse memchr::memrchr;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr(b'o', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:638:2089":{"id":"b:2:2256-0:638:2089","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:25316"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:233-0:638:2089":{"id":"0:233-0:638:2089","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[69,0],"end":[69,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::prefilter::Prefilter","name":"Prefilter","id":"0:638:2089","glob":false}}},"b:2:2561-0:114:1697":{"id":"b:2:2561-0:114:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:645":{"id":"0:645","crate_id":0,"name":null,"span":{"filename":"src/memmem/prefilter/mod.rs","begin":[168,16],"end":[168,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2767:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3391-0:788:2160":{"id":"b:2:3391-0:788:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:467":{"id":"0:467","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[318,0],"end":[345,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:471:1836"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:797:685":{"id":"0:797:685","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[375,9],"end":[375,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:497:1845":{"id":"0:497:1845","crate_id":0,"name":"needle","span":{"filename":"src/memmem/mod.rs","begin":[557,4],"end":[559,5]},"visibility":"public","docs":"Returns the needle that this finder searches for.\n\nNote that the lifetime of the needle returned is tied to the lifetime\nof the finder, and may be shorter than the `'n` lifetime. Namely, a\nfinder's needle can be either borrowed or owned, so the lifetime of the\nneedle returned must necessarily be the shorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:486:974":{"id":"0:486:974","crate_id":0,"name":"next","span":{"filename":"src/memmem/mod.rs","begin":[415,4],"end":[432,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:806:685":{"id":"0:806:685","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[448,16],"end":[448,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:500:960":{"id":"0:500:960","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[583,4],"end":[585,5]},"visibility":"public","docs":"Create a new reverse finder for the given needle.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:807:2161":{"id":"b:5:680-0:807:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:682:1822","5:683:9057","5:684:9058"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:819:431":{"id":"0:819:431","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[698,9],"end":[698,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12291:27483":{"id":"2:12291:27483","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11937:14405","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::split":"2:12285:27479"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43734:9216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12250:13443":{"id":"2:12250:13443","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41757:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12360:32671":{"id":"2:12360:32671","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4523:32671"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44015:12544","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:33328","5:5511:8620","5:5514:33329","5:5517:33330","5:5525:33331","5:5526:33332","5:5527:3543","5:5528:25550","5:5529:25551"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12294:32653":{"id":"2:12294:32653","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11937:14405","str::split":"2:12285:27479","prim@char":"1:12033:427","`DoubleEndedIterator`":"2:7388:121","str::rsplit_terminator":"2:12297:32654"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43766:12625","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:803:431":{"id":"0:803:431","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[448,9],"end":[448,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2755:223-0:816:2210":{"id":"a:2:2755:223-0:816:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12260:12639":{"id":"2:12260:12639","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12033:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43686:12619","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12332:32665":{"id":"2:12332:32665","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:14405"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11962:14402","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:807:2161":{"id":"b:2:2256-0:807:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2258:25316"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5526:33332":{"id":"5:5526:33332","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:1823","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1823","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9314","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:816:2210":{"id":"b:2:2253-0:816:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:3497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5527:3543":{"id":"5:5527:3543","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:97:1696":{"id":"b:2:2256-0:97:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2258:25316"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:128:1979":{"id":"0:128:1979","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr/iter.rs","begin":[160,4],"end":[162,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12268:3177":{"id":"2:12268:3177","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:14405"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10-0:226:1689":{"id":"0:10-0:226:1689","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,4],"end":[173,11]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr","name":"memrchr","id":"0:226:1689","glob":false}}},"0:123:960":{"id":"0:123:960","crate_id":0,"name":"new","span":{"filename":"src/memchr/iter.rs","begin":[132,4],"end":[145,5]},"visibility":"public","docs":"Create a new `Memchr3` that's initialized to zero with a haystack","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12265:13400":{"id":"2:12265:13400","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43970:12634","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:232:1699":{"id":"0:232:1699","crate_id":0,"name":"memmem","span":{"filename":"src/memmem/mod.rs","begin":[1,0],"end":[1321,1]},"visibility":"public","docs":"This module provides forward and reverse substring search routines.\n\nUnlike the standard library's substring search routines, these work on\narbitrary bytes. For all non-empty needles, these routines will report exactly\nthe same values as the corresponding routines in the standard library. For\nthe empty needle, the standard library reports matches only at valid UTF-8\nboundaries, where as these routines will report matches at every position.\n\nOther than being able to work on arbitrary bytes, the primary reason to prefer\nthese routines over the standard library routines is that these will generally\nbe faster. In some cases, significantly so.\n\n# Example: iterating over substring matches\n\nThis example shows how to use [`find_iter`] to find occurrences of a substring\nin a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches in reverse\n\nThis example shows how to use [`rfind_iter`] to find occurrences of a substring\nin a haystack starting from the end of the haystack.\n\n**NOTE:** This module does not implement double ended iterators, so reverse\nsearches aren't done by calling `rev` on a forward iterator.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::rfind_iter(haystack, \"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`Finder`] (or a [`FinderRev`] for\nreverse searches).\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```","links":{"`rfind_iter`":"0:461:2159","`FinderRev`":"0:807:2161","`find_iter`":"0:457:2151","`Finder`":"0:798:2155"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:233-0:638:2089","0:457:2151","0:461:2159","0:465:2170","0:466:2177","0:777:2154","0:788:2160","0:798:2155","0:807:2161","0:816:2210"],"is_stripped":false}}},"0:7-0:224:1686":{"id":"0:7-0:224:1686","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,35],"end":[172,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr3","name":"memchr3","id":"0:224:1686","glob":false}}},"2:12355:25548":{"id":"2:12355:25548","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:471:1836":{"id":"0:471:1836","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[337,4],"end":[344,5]},"visibility":"public","docs":"Convert this iterator into its owned variant, such that it no longer\nborrows the finder and needle.\n\nIf this is already an owned iterator, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:81:1695":{"id":"b:2:2546-0:81:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2549:3374"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:466:2177":{"id":"0:466:2177","crate_id":0,"name":"rfind","span":{"filename":"src/memmem/mod.rs","begin":[296,0],"end":[302,1]},"visibility":"public","docs":"Returns the index of the last occurrence of the given needle.\n\nNote that if you're are searching for the same needle in many different\nsmall haystacks, it may be faster to initialize a [`FinderRev`] once,\nand reuse it for each search.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), memmem::rfind(haystack, b\"foo\"));\nassert_eq!(Some(4), memmem::rfind(haystack, b\"bar\"));\nassert_eq!(Some(8), memmem::rfind(haystack, b\"ba\"));\nassert_eq!(None, memmem::rfind(haystack, b\"quux\"));\n```","links":{"`FinderRev`":"0:807:2161"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18-0:114:1697":{"id":"0:18-0:114:1697","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[174,21],"end":[174,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr3","name":"Memchr3","id":"0:114:1697","glob":false}}},"a:2:2812:8630-0:807:2161":{"id":"a:2:2812:8630-0:807:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:8630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:461:2159":{"id":"0:461:2159","crate_id":0,"name":"rfind_iter","span":{"filename":"src/memmem/mod.rs","begin":[224,0],"end":[229,1]},"visibility":"public","docs":"Returns a reverse iterator over all non-overlapping occurrences of a\nsubstring in a haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet mut it = memmem::rfind_iter(haystack, b\"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"N"}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"type":{"bounds":[{"outlives":"'n"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2772:231-0:788:2160":{"id":"a:2:2772:231-0:788:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:0:1683":{"id":"0:0:1683","crate_id":0,"name":"memchr","span":{"filename":"src/lib.rs","begin":[1,0],"end":[181,10]},"visibility":"public","docs":"This library provides heavily optimized routines for string search primitives.\n\n# Overview\n\nThis section gives a brief high level overview of what this crate offers.\n\n* The top-level module provides routines for searching for 1, 2 or 3 bytes\n  in the forward or reverse direction. When searching for more than one byte,\n  positions are considered a match if the byte at that position matches any\n  of the bytes.\n* The [`memmem`] sub-module provides forward and reverse substring search\n  routines.\n\nIn all such cases, routines operate on `&[u8]` without regard to encoding. This\nis exactly what you want when searching either UTF-8 or arbitrary bytes.\n\n# Example: using `memchr`\n\nThis example shows how to use `memchr` to find the first occurrence of `z` in\na haystack:\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"foo bar baz quuz\";\nassert_eq!(Some(10), memchr(b'z', haystack));\n```\n\n# Example: matching one of three possible bytes\n\nThis examples shows how to use `memrchr3` to find occurrences of `a`, `b` or\n`c`, starting at the end of the haystack.\n\n```\nuse memchr::memchr3_iter;\n\nlet haystack = b\"xyzaxyzbxyzc\";\n\nlet mut it = memchr3_iter(b'a', b'b', b'c', haystack).rev();\nassert_eq!(Some(11), it.next());\nassert_eq!(Some(7), it.next());\nassert_eq!(Some(3), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches\n\nThis example shows how to use the [`memmem`] sub-module to find occurrences of\na substring in a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`memmem::Finder`]:\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```\n\n# Why use this crate?\n\nAt first glance, the APIs provided by this crate might seem weird. Why provide\na dedicated routine like `memchr` for something that could be implemented\nclearly and trivially in one line:\n\n```\nfn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().position(|&b| b == needle)\n}\n```\n\nOr similarly, why does this crate provide substring search routines when Rust's\ncore library already provides them?\n\n```\nfn search(haystack: &str, needle: &str) -> Option<usize> {\n    haystack.find(needle)\n}\n```\n\nThe primary reason for both of them to exist is performance. When it comes to\nperformance, at a high level at least, there are two primary ways to look at\nit:\n\n* **Throughput**: For this, think about it as, \"given some very large haystack\n  and a byte that never occurs in that haystack, how long does it take to\n  search through it and determine that it, in fact, does not occur?\"\n* **Latency**: For this, think about it as, \"given a tiny haystack---just a\n  few bytes---how long does it take to determine if a byte is in it?\"\n\nThe `memchr` routine in this crate has _slightly_ worse latency than the\nsolution presented above, however, its throughput can easily be over an\norder of magnitude faster. This is a good general purpose trade off to make.\nYou rarely lose, but often gain big.\n\n**NOTE:** The name `memchr` comes from the corresponding routine in libc. A key\nadvantage of using this library is that its performance is not tied to its\nquality of implementation in the libc you happen to be using, which can vary\ngreatly from platform to platform.\n\nBut what about substring search? This one is a bit more complicated. The\nprimary reason for its existence is still indeed performance, but it's also\nuseful because Rust's core library doesn't actually expose any substring\nsearch routine on arbitrary bytes. The only substring search routine that\nexists works exclusively on valid UTF-8.\n\nSo if you have valid UTF-8, is there a reason to use this over the standard\nlibrary substring search routine? Yes. This routine is faster on almost every\nmetric, including latency. The natural question then, is why isn't this\nimplementation in the standard library, even if only for searching on UTF-8?\nThe reason is that the implementation details for using SIMD in the standard\nlibrary haven't quite been worked out yet.\n\n**NOTE:** Currently, only `x86_64` targets have highly accelerated\nimplementations of substring search. For `memchr`, all targets have\nsomewhat-accelerated implementations, while only `x86_64` targets have highly\naccelerated implementations. This limitation is expected to be lifted once the\nstandard library exposes a platform independent SIMD API.\n\n# Crate features\n\n* **std** - When enabled (the default), this will permit this crate to use\n  features specific to the standard library. Currently, the only thing used\n  from the standard library is runtime SIMD CPU feature detection. This means\n  that this feature must be enabled to get AVX accelerated routines. When\n  `std` is not enabled, this crate will still attempt to use SSE2 accelerated\n  routines on `x86_64`.\n* **libc** - When enabled (**not** the default), this library will use your\n  platform's libc implementation of `memchr` (and `memrchr` on Linux). This\n  can be useful on non-`x86_64` targets where the fallback implementation in\n  this crate is not as good as the one found in your libc. All other routines\n  (e.g., `memchr[23]` and substring search) unconditionally use the\n  implementation in this crate.","links":{"`memmem`":"0:232:1699","`memmem::Finder`":"0:798:2155"},"attrs":["#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:232:1699","0:4-0:220:1683","0:5-0:222:1684","0:6-0:215:1685","0:7-0:224:1686","0:8-0:216:1687","0:9-0:214:1688","0:10-0:226:1689","0:11-0:228:1690","0:12-0:218:1691","0:13-0:230:1692","0:14-0:219:1693","0:15-0:217:1694","0:16-0:81:1695","0:17-0:97:1696","0:18-0:114:1697"],"is_stripped":false}}},"b:5:680-0:638:2089":{"id":"b:5:680-0:638:2089","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:1822","5:683:9057","5:684:9058"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2556-0:97:1696":{"id":"b:2:2556-0:97:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:496:321":{"id":"0:496:321","crate_id":0,"name":"as_ref","span":{"filename":"src/memmem/mod.rs","begin":[546,4],"end":[548,5]},"visibility":"public","docs":"Convert this finder into its borrowed variant.\n\nThis is primarily useful if your finder is owned and you'd like to\nstore its borrowed variant in some intermediate data structure.\n\nNote that the lifetime parameter of the returned finder is tied to the\nlifetime of `self`, and may be shorter than the `'n` lifetime of the\nneedle itself. Namely, a finder's needle can be either borrowed or\nowned, so the lifetime of the needle returned must necessarily be the\nshorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2556-0:816:2210":{"id":"b:2:2556-0:816:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12267:30863":{"id":"2:12267:30863","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44008:12638","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2550-0:638:2089":{"id":"b:2:2550-0:638:2089","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2772:231-0:638:2089":{"id":"a:2:2772:231-0:638:2089","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2772:231-0:777:2154":{"id":"a:2:2772:231-0:777:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:784":{"id":"0:784","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[310,9],"end":[310,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:787:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2546-0:638:2089":{"id":"b:2:2546-0:638:2089","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:3374"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:487":{"id":"0:487","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[453,0],"end":[560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:489:960","0:491:2170","0:492:2151","0:495:1836","0:496:321","0:497:1845"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[129,0],"end":[146,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:123:960"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:507:1836":{"id":"0:507:1836","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[662,4],"end":[664,5]},"visibility":"public","docs":"Convert this finder into its owned variant, such that it no longer\nborrows the needle.\n\nIf this is already an owned finder, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:816:2210":{"id":"b:2:2546-0:816:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:3374"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:12-0:218:1691":{"id":"0:12-0:218:1691","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,23],"end":[173,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr2_iter","name":"memrchr2_iter","id":"0:218:1691","glob":false}}},"a:2:2755:223-0:97:1696":{"id":"a:2:2755:223-0:97:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:16-0:81:1695":{"id":"0:16-0:81:1695","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[174,4],"end":[174,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr","name":"Memchr","id":"0:81:1695","glob":false}}},"b:2:3391-0:798:2155":{"id":"b:2:3391-0:798:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:13-0:230:1692":{"id":"0:13-0:230:1692","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,38],"end":[173,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr3","name":"memrchr3","id":"0:230:1692","glob":false}}},"2:12241:32648":{"id":"2:12241:32648","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12239:32647"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[42,0],"end":[48,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:88:960"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:230:1692":{"id":"0:230:1692","crate_id":0,"name":"memrchr3","span":{"filename":"src/memchr/mod.rs","begin":[378,0],"end":[410,1]},"visibility":"public","docs":"Like `memrchr`, but searches for any of three bytes instead of just one.\n\nThis returns the index corresponding to the last occurrence of `needle1`,\nthe last occurrence of `needle2`, or the last occurrence of `needle3` in\n`haystack` (whichever occurs later), or `None` if none are found. If an\nindex is returned, it is guaranteed to be less than `usize::MAX`.\n\nWhile this is operationally the same as something like\n`haystack.iter().rposition(|&b| b == needle1 || b == needle2 ||\nb == needle3)`, `memrchr3` will use a highly optimized routine that can be\nup to an order of magnitude faster in some cases.\n\n# Example\n\nThis shows how to find the last position of any of three bytes in a byte\nstring.\n\n```\nuse memchr::memrchr3;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr3(b'k', b'q', b'e', haystack), Some(8));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2550-0:777:2154":{"id":"b:2:2550-0:777:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:492:2151":{"id":"0:492:2151","crate_id":0,"name":"find_iter","span":{"filename":"src/memmem/mod.rs","begin":[515,4],"end":[520,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of a substring in a haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::Finder;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet finder = Finder::new(b\"foo\");\nlet mut it = finder.find_iter(haystack);\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[148,0],"end":[163,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["enumerate","peekable","find","step_by","take","eq_by","cycle","try_reduce","partition_in_place","zip","fuse","skip_while","intersperse","ne","is_sorted","array_chunks","find_map","is_partitioned","inspect","count","take_while","skip","intersperse_with","le","next_chunk","map","min_by","partial_cmp","is_sorted_by","sum","try_find","try_fold","by_ref","map_while","rposition","for_each","last","position","flat_map","all","min_by_key","is_sorted_by_key","product","unzip","max","try_for_each","try_collect","scan","size_hint","filter","advance_by","any","max_by","__iterator_get_unchecked","cmp_by","copied","fold","collect_into","flatten","filter_map","rev","nth","cmp","eq","chain","max_by_key","lt","gt","partial_cmp_by","min","collect","cloned","reduce","ge","partition","map_windows"],"trait":{"name":"Iterator","id":"2:7497:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:126:1978","0:127:974","0:128:1979"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2546-0:798:2155":{"id":"b:2:2546-0:798:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2549:3374"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:17-0:97:1696":{"id":"0:17-0:97:1696","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[174,12],"end":[174,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr2","name":"Memchr2","id":"0:97:1696","glob":false}}},"a:2:8472:8889-0:114:1697":{"id":"a:2:8472:8889-0:114:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:8889","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2561-0:81:1695":{"id":"b:2:2561-0:81:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2561-0:97:1696":{"id":"b:2:2561-0:97:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2256-0:81:1695":{"id":"b:2:2256-0:81:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2258:25316"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:502:2177":{"id":"0:502:2177","crate_id":0,"name":"rfind","span":{"filename":"src/memmem/mod.rs","begin":[614,4],"end":[616,5]},"visibility":"public","docs":"Returns the index of the last occurrence of this needle in the given\nhaystack.\n\nThe haystack may be any type that can be cheaply converted into a\n`&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::FinderRev;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), FinderRev::new(\"foo\").rfind(haystack));\nassert_eq!(Some(4), FinderRev::new(\"bar\").rfind(haystack));\nassert_eq!(None, FinderRev::new(\"quux\").rfind(haystack));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"generic":"B"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:508:321":{"id":"0:508:321","crate_id":0,"name":"as_ref","span":{"filename":"src/memmem/mod.rs","begin":[677,4],"end":[679,5]},"visibility":"public","docs":"Convert this finder into its borrowed variant.\n\nThis is primarily useful if your finder is owned and you'd like to\nstore its borrowed variant in some intermediate data structure.\n\nNote that the lifetime parameter of the returned finder is tied to the\nlifetime of `self`, and may be shorter than the `'n` lifetime of the\nneedle itself. Namely, a finder's needle can be either borrowed or\nowned, so the lifetime of the needle returned must necessarily be the\nshorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:777:2154":{"id":"b:2:2546-0:777:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2549:3374"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3391-0:807:2161":{"id":"b:2:3391-0:807:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12277:2170":{"id":"2:12277:2170","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41757:181","prim@char":"1:12033:427","self::pattern":"2:11937:14405"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:1980":{"id":"0:131:1980","crate_id":0,"name":"next_back","span":{"filename":"src/memchr/iter.rs","begin":[167,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7497:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:641:2814":{"id":"0:641:2814","crate_id":0,"name":"Auto","span":{"filename":"src/memmem/prefilter/mod.rs","begin":[176,4],"end":[176,8]},"visibility":"default","docs":"Automatically detect whether a heuristic prefilter should be used. If\nit is used, then heuristics will be used to dynamically disable the\nprefilter if it is believed to not be carrying its weight.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2556-0:638:2089":{"id":"b:2:2556-0:638:2089","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12350:32669":{"id":"2:12350:32669","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:14405"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:7354-0:777:2154":{"id":"b:2:7354-0:777:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7497:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:7356:1978","2:7357:9010","2:7358:803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:216:1687":{"id":"0:216:1687","crate_id":0,"name":"memchr3_iter","span":{"filename":"src/memchr/mod.rs","begin":[29,0],"end":[36,1]},"visibility":"public","docs":"An iterator over all occurrences of the needles in a haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2550-0:807:2161":{"id":"b:2:2550-0:807:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:491:2170":{"id":"0:491:2170","crate_id":0,"name":"find","span":{"filename":"src/memmem/mod.rs","begin":[484,4],"end":[486,5]},"visibility":"public","docs":"Returns the index of the first occurrence of this needle in the given\nhaystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::Finder;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), Finder::new(\"foo\").find(haystack));\nassert_eq!(Some(4), Finder::new(\"bar\").find(haystack));\nassert_eq!(None, Finder::new(\"quux\").find(haystack));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:960":{"id":"0:105:960","crate_id":0,"name":"new","span":{"filename":"src/memchr/iter.rs","begin":[84,4],"end":[91,5]},"visibility":"public","docs":"Creates a new iterator that yields all positions of needle in haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2812:8630-0:114:1697":{"id":"a:2:2812:8630-0:114:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:8630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:7354-0:114:1697":{"id":"b:2:7354-0:114:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7497:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7356:1978","2:7357:9010","2:7358:803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:812:431":{"id":"0:812:431","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[575,9],"end":[575,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2556-0:777:2154":{"id":"b:2:2556-0:777:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12300:27485":{"id":"2:12300:27485","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:14405","str::rsplitn":"2:12303:27487"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43820:9214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2755:223-0:807:2161":{"id":"a:2:2755:223-0:807:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2552:711":{"id":"2:2552:711","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:682:1822":{"id":"5:682:1822","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:2:2561-0:816:2210":{"id":"b:2:2561-0:816:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12324:32660":{"id":"2:12324:32660","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:788:2160":{"id":"0:788:2160","crate_id":0,"name":"FindRevIter","span":{"filename":"src/memmem/mod.rs","begin":[376,0],"end":[382,1]},"visibility":"public","docs":"An iterator over non-overlapping substring matches in reverse.\n\nMatches are reported by the byte offset at which they begin.\n\n`'h` is the lifetime of the haystack while `'n` is the lifetime of the\nneedle.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:477","a:2:8472:8889-0:788:2160","a:2:2755:223-0:788:2160","a:2:2812:8630-0:788:2160","a:2:8471:8890-0:788:2160","a:2:2772:231-0:788:2160","b:2:2253-0:788:2160","b:2:2561-0:788:2160","b:2:2256-0:788:2160","b:2:3391-0:788:2160","b:2:2550-0:788:2160","b:2:2546-0:788:2160","b:2:7354-0:788:2160","b:2:2556-0:788:2160","0:794","0:482"]}}},"2:12262:1828":{"id":"2:12262:1828","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43702:9756","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[94,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["enumerate","peekable","find","step_by","take","eq_by","cycle","try_reduce","partition_in_place","zip","fuse","skip_while","intersperse","ne","is_sorted","array_chunks","find_map","is_partitioned","inspect","count","take_while","skip","intersperse_with","le","next_chunk","map","min_by","partial_cmp","is_sorted_by","sum","try_find","try_fold","by_ref","map_while","rposition","for_each","last","position","flat_map","all","min_by_key","is_sorted_by_key","product","unzip","max","try_for_each","try_collect","scan","size_hint","filter","advance_by","any","max_by","__iterator_get_unchecked","cmp_by","copied","fold","collect_into","flatten","filter_map","rev","nth","cmp","eq","chain","max_by_key","lt","gt","partial_cmp_by","min","collect","cloned","reduce","ge","partition","map_windows"],"trait":{"name":"Iterator","id":"2:7497:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:108:1978","0:109:974","0:110:1979"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2256-0:798:2155":{"id":"b:2:2256-0:798:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2258:25316"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:7354-0:97:1696":{"id":"b:2:7354-0:97:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7497:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7356:1978","2:7357:9010","2:7358:803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:2:2256-0:114:1697":{"id":"b:2:2256-0:114:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2258:25316"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:489:960":{"id":"0:489:960","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[456,4],"end":[458,5]},"visibility":"public","docs":"Create a new finder for the given needle.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12274:27490":{"id":"2:12274:27490","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:14405"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:498":{"id":"0:498","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[580,0],"end":[691,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:500:960","0:502:2177","0:504:2159","0:507:1836","0:508:321","0:509:1845"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:91:1978":{"id":"0:91:1978","crate_id":0,"name":"Item","span":{"filename":"src/memchr/iter.rs","begin":[51,4],"end":[51,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"a:2:8471:8890-0:114:1697":{"id":"a:2:8471:8890-0:114:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:8890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5511:8620":{"id":"5:5511:8620","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:33329":{"id":"5:5514:33329","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1696":{"id":"0:97:1696","crate_id":0,"name":"Memchr2","span":{"filename":"src/memchr/iter.rs","begin":[72,0],"end":[79,1]},"visibility":"public","docs":"An iterator for `memchr2`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:103","a:2:8472:8889-0:97:1696","a:2:2755:223-0:97:1696","a:2:2812:8630-0:97:1696","a:2:8471:8890-0:97:1696","a:2:2772:231-0:97:1696","b:2:2253-0:97:1696","b:2:2561-0:97:1696","b:2:2256-0:97:1696","b:2:3391-0:97:1696","b:2:2550-0:97:1696","b:2:2546-0:97:1696","b:2:7354-0:97:1696","b:2:2556-0:97:1696","0:106","0:111"]}}},"0:813":{"id":"0:813","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[575,16],"end":[575,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:815:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:92:974":{"id":"0:92:974","crate_id":0,"name":"next","span":{"filename":"src/memchr/iter.rs","begin":[54,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:33328":{"id":"5:5510:33328","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1823","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9314","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:1823","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9314","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:512:2211":{"id":"0:512:2211","crate_id":0,"name":"build_forward","span":{"filename":"src/memmem/mod.rs","begin":[711,4],"end":[716,5]},"visibility":"public","docs":"Build a forward finder using the given needle from the current\nsettings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2772:231-0:81:1695":{"id":"a:2:2772:231-0:81:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2550-0:97:1696":{"id":"b:2:2550-0:97:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2561-0:638:2089":{"id":"b:2:2561-0:638:2089","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:818":{"id":"0:818","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[698,9],"end":[698,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:819:431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2812:8630-0:816:2210":{"id":"a:2:2812:8630-0:816:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:8630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5-0:222:1684":{"id":"0:5-0:222:1684","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,12],"end":[172,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr2","name":"memchr2","id":"0:222:1684","glob":false}}},"2:12309:32656":{"id":"2:12309:32656","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12261:12649":{"id":"2:12261:12649","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12033:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43692:12620","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:7354-0:81:1695":{"id":"b:2:7354-0:81:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7497:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7356:1978","2:7357:9010","2:7358:803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:2:8471:8890-0:807:2161":{"id":"a:2:8471:8890-0:807:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:8890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12254:27450":{"id":"2:12254:27450","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2772:231-0:114:1697":{"id":"a:2:2772:231-0:114:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8471:8890-0:777:2154":{"id":"a:2:8471:8890-0:777:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:8890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:509:1845":{"id":"0:509:1845","crate_id":0,"name":"needle","span":{"filename":"src/memmem/mod.rs","begin":[688,4],"end":[690,5]},"visibility":"public","docs":"Returns the needle that this finder searches for.\n\nNote that the lifetime of the needle returned is tied to the lifetime\nof the finder, and may be shorter than the `'n` lifetime. Namely, a\nfinder's needle can be either borrowed or owned, so the lifetime of the\nneedle returned must necessarily be the shorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:788:2160":{"id":"b:2:2256-0:788:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2258:25316"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12330:32663":{"id":"2:12330:32663","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2812:8630-0:798:2155":{"id":"a:2:2812:8630-0:798:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:8630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8472:8889-0:97:1696":{"id":"a:2:8472:8889-0:97:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:8889","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3391-0:638:2089":{"id":"b:2:3391-0:638:2089","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:804":{"id":"0:804","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[448,16],"end":[448,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:806:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8471:8890-0:816:2210":{"id":"a:2:8471:8890-0:816:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:8890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2255:3497":{"id":"2:2255:3497","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:647:685":{"id":"0:647:685","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/prefilter/mod.rs","begin":[168,22],"end":[168,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:7354-0:788:2160":{"id":"b:2:7354-0:788:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7497:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:7356:1978","2:7357:9010","2:7358:803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:2:2256-0:777:2154":{"id":"b:2:2256-0:777:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2258:25316"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12237:1870":{"id":"2:12237:1870","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214:1688":{"id":"0:214:1688","crate_id":0,"name":"memchr_iter","span":{"filename":"src/memchr/mod.rs","begin":[17,0],"end":[19,1]},"visibility":"public","docs":"An iterator over all occurrences of the needle in a haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8472:8889-0:798:2155":{"id":"a:2:8472:8889-0:798:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:8889","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12244:2426":{"id":"2:12244:2426","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11497:2903"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12248:2932":{"id":"2:12248:2932","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41757:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:7358:803":{"id":"2:7358:803","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12338:25345":{"id":"2:12338:25345","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:14405"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2812:8630-0:777:2154":{"id":"a:2:2812:8630-0:777:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:8630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2812:8630-0:788:2160":{"id":"a:2:2812:8630-0:788:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:8630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2812:8630-0:81:1695":{"id":"a:2:2812:8630-0:81:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:8630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:132:1842":{"id":"0:132:1842","crate_id":0,"name":"naive","span":{"filename":"src/memchr/naive.rs","begin":[1,0],"end":[25,1]},"visibility":"public","docs":null,"links":{},"attrs":["#![allow(dead_code)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"0:794":{"id":"0:794","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[375,9],"end":[375,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:797:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3391-0:81:1695":{"id":"b:2:3391-0:81:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2556-0:807:2161":{"id":"b:2:2556-0:807:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3391-0:97:1696":{"id":"b:2:3391-0:97:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3393:1535":{"id":"2:3393:1535","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39599:12406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41-0:114:1697":{"id":"0:41-0:114:1697","crate_id":0,"name":null,"span":{"filename":"src/memchr/mod.rs","begin":[3,38],"end":[3,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::iter::Memchr3","name":"Memchr3","id":"0:114:1697","glob":false}}},"a:2:2755:223-0:788:2160":{"id":"a:2:2755:223-0:788:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:646":{"id":"0:646","crate_id":0,"name":null,"span":{"filename":"src/memmem/prefilter/mod.rs","begin":[168,22],"end":[168,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:647:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:510":{"id":"0:510","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[703,0],"end":[735,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:511:960","0:512:2211","0:515:2244","0:518:2088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:7357:9010":{"id":"2:7357:9010","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"b:2:2256-0:816:2210":{"id":"b:2:2256-0:816:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:25316"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3391-0:816:2210":{"id":"b:2:3391-0:816:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12236:832":{"id":"2:12236:832","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12033:427"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12257:32651":{"id":"2:12257:32651","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12039:1441","crate::ops::IndexMut":"2:3056:9111","str::slice_unchecked":"2:12256:32650"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12297:32654":{"id":"2:12297:32654","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11937:14405","str::split":"2:12285:27479","prim@char":"1:12033:427","str::split_terminator":"2:12294:32653"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43784:12626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12335:32666":{"id":"2:12335:32666","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:14405"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:1980":{"id":"0:113:1980","crate_id":0,"name":"next_back","span":{"filename":"src/memchr/iter.rs","begin":[110,4],"end":[115,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7497:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:822":{"id":"0:822","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[698,23],"end":[698,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2597:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:823:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8472:8889-0:638:2089":{"id":"a:2:8472:8889-0:638:2089","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:8889","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12363:32672":{"id":"2:12363:32672","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4521:32672"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44033:12543","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:798:2155":{"id":"0:798:2155","crate_id":0,"name":"Finder","span":{"filename":"src/memmem/mod.rs","begin":[449,0],"end":[451,1]},"visibility":"public","docs":"A single substring searcher fixed to a particular needle.\n\nThe purpose of this type is to permit callers to construct a substring\nsearcher that can be used to search haystacks without the overhead of\nconstructing the searcher in the first place. This is a somewhat niche\nconcern when it's necessary to re-use the same needle to search multiple\ndifferent haystacks with as little overhead as possible. In general, using\n[`find`] is good enough, but `Finder` is useful when you can meaningfully\nobserve searcher construction time in a profile.\n\nWhen the `std` feature is enabled, then this type has an `into_owned`\nversion which permits building a `Finder` that is not connected to\nthe lifetime of its needle.","links":{"`find`":"0:465:2170"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:487","a:2:8472:8889-0:798:2155","a:2:2755:223-0:798:2155","a:2:2812:8630-0:798:2155","a:2:8471:8890-0:798:2155","a:2:2772:231-0:798:2155","b:2:2253-0:798:2155","b:2:2561-0:798:2155","b:2:2256-0:798:2155","b:2:3391-0:798:2155","b:2:2550-0:798:2155","b:2:2546-0:798:2155","b:2:2556-0:798:2155","b:5:680-0:798:2155","0:801","0:804"]}}},"2:12235":{"id":"2:12235","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12236:832","2:12237:1870","2:12238:32646","2:12239:32647","2:12241:32648","2:12244:2426","2:12245:32649","2:12246:320","2:12247:319","2:12248:2932","2:12250:13443","2:12252:27449","2:12254:27450","2:12256:32650","2:12257:32651","2:12258:1973","2:12259:27472","2:12260:12639","2:12261:12649","2:12262:1828","2:12263:30846","2:12264:30840","2:12265:13400","2:12266:32652","2:12267:30863","2:12268:3177","2:12271:27489","2:12274:27490","2:12277:2170","2:12281:2177","2:12285:27479","2:12288:27481","2:12291:27483","2:12294:32653","2:12297:32654","2:12300:27485","2:12303:27487","2:12306:32655","2:12309:32656","2:12312:3506","2:12315:32657","2:12318:32658","2:12321:32659","2:12324:32660","2:12326:32661","2:12328:32662","2:12330:32663","2:12331:32664","2:12332:32665","2:12335:32666","2:12338:25345","2:12341:27491","2:12344:32667","2:12347:32668","2:12350:32669","2:12353:32670","2:12355:25548","2:12356:28585","2:12357:25552","2:12358:25553","2:12359:25554","2:12360:32671","2:12362:14068","2:12363:32672"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81:1695":{"id":"0:81:1695","crate_id":0,"name":"Memchr","span":{"filename":"src/memchr/iter.rs","begin":[34,0],"end":[40,1]},"visibility":"public","docs":"An iterator for `memchr`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:86","a:2:8472:8889-0:81:1695","a:2:2755:223-0:81:1695","a:2:2812:8630-0:81:1695","a:2:8471:8890-0:81:1695","a:2:2772:231-0:81:1695","b:2:2253-0:81:1695","b:2:2561-0:81:1695","b:2:2256-0:81:1695","b:2:3391-0:81:1695","b:2:2550-0:81:1695","b:2:2546-0:81:1695","b:2:7354-0:81:1695","b:2:2556-0:81:1695","0:94","0:89"]}}},"2:12357:25552":{"id":"2:12357:25552","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2560:1522":{"id":"2:2560:1522","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12266:32652":{"id":"2:12266:32652","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43980:12635","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:801":{"id":"0:801","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[448,9],"end":[448,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:803:431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12288:27481":{"id":"2:12288:27481","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:14405"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11753:9228","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2561-0:807:2161":{"id":"b:2:2561-0:807:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:798:2155":{"id":"b:5:680-0:798:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:682:1822","5:683:9057","5:684:9058"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8472:8889-0:807:2161":{"id":"a:2:8472:8889-0:807:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:8889","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:465:2170":{"id":"0:465:2170","crate_id":0,"name":"find","span":{"filename":"src/memmem/mod.rs","begin":[259,0],"end":[265,1]},"visibility":"public","docs":"Returns the index of the first occurrence of the given needle.\n\nNote that if you're are searching for the same needle in many different\nsmall haystacks, it may be faster to initialize a [`Finder`] once,\nand reuse it for each search.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), memmem::find(haystack, b\"foo\"));\nassert_eq!(Some(4), memmem::find(haystack, b\"bar\"));\nassert_eq!(None, memmem::find(haystack, b\"quux\"));\n```","links":{"`Finder`":"0:798:2155"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8472:8889-0:81:1695":{"id":"a:2:8472:8889-0:81:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:8889","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:330:60":{"id":"0:330:60","crate_id":0,"name":"default","span":{"filename":"src/memmem/prefilter/mod.rs","begin":[180,4],"end":[182,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:821:685":{"id":"0:821:685","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[698,16],"end":[698,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12281:2177":{"id":"2:12281:2177","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41757:181","prim@char":"1:12033:427","self::pattern":"2:11937:14405"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12326:32661":{"id":"2:12326:32661","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1841":{"id":"0:42:1841","crate_id":0,"name":"fallback","span":{"filename":"src/memchr/fallback.rs","begin":[5,0],"end":[329,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(dead_code)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[165,0],"end":[173,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"2:7388:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:131:1980"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2772:231-0:807:2161":{"id":"a:2:2772:231-0:807:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:485:1978":{"id":"0:485:1978","crate_id":0,"name":"Item","span":{"filename":"src/memmem/mod.rs","begin":[413,4],"end":[413,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"a:2:8472:8889-0:816:2210":{"id":"a:2:8472:8889-0:816:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:8889","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:220:1683":{"id":"0:220:1683","crate_id":0,"name":"memchr","span":{"filename":"src/memchr/mod.rs","begin":[87,0],"end":[125,1]},"visibility":"public","docs":"Search for the first occurrence of a byte in a slice.\n\nThis returns the index corresponding to the first occurrence of `needle` in\n`haystack`, or `None` if one is not found. If an index is returned, it is\nguaranteed to be less than `usize::MAX`.\n\nWhile this is operationally the same as something like\n`haystack.iter().position(|&b| b == needle)`, `memchr` will use a highly\noptimized routine that can be up to an order of magnitude faster in some\ncases.\n\n# Example\n\nThis shows how to find the first position of a byte in a byte string.\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr(b'k', haystack), Some(8));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:638:2089":{"id":"b:2:2253-0:638:2089","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:3497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:88:960":{"id":"0:88:960","crate_id":0,"name":"new","span":{"filename":"src/memchr/iter.rs","begin":[45,4],"end":[47,5]},"visibility":"public","docs":"Creates a new iterator that yields all positions of needle in haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:788:2160":{"id":"b:2:2253-0:788:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2255:3497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96:1980":{"id":"0:96:1980","crate_id":0,"name":"next_back","span":{"filename":"src/memchr/iter.rs","begin":[66,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7497:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2561-0:788:2160":{"id":"b:2:2561-0:788:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2253-0:807:2161":{"id":"b:2:2253-0:807:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2255:3497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4-0:220:1683":{"id":"0:4-0:220:1683","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,4],"end":[172,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr","name":"memchr","id":"0:220:1683","glob":false}}},"0:639:181":{"id":"0:639:181","crate_id":0,"name":"None","span":{"filename":"src/memmem/prefilter/mod.rs","begin":[172,4],"end":[172,8]},"visibility":"default","docs":"Never used a prefilter in substring search.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2550-0:81:1695":{"id":"b:2:2550-0:81:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:219:1693":{"id":"0:219:1693","crate_id":0,"name":"memrchr3_iter","span":{"filename":"src/memchr/mod.rs","begin":[56,0],"end":[63,1]},"visibility":"public","docs":"An iterator over all occurrences of the needles in a haystack, in reverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"2:40633:1839","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2755:223-0:114:1697":{"id":"a:2:2755:223-0:114:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2546-0:114:1697":{"id":"b:2:2546-0:114:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2549:3374"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12321:32659":{"id":"2:12321:32659","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11937:14405","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::match_indices":"2:12318:32658"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43884:12630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:7356:1978":{"id":"2:7356:1978","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"2:7497:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:495:1836":{"id":"0:495:1836","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[531,4],"end":[533,5]},"visibility":"public","docs":"Convert this finder into its owned variant, such that it no longer\nborrows the needle.\n\nIf this is already an owned finder, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:816:2210":{"id":"0:816:2210","crate_id":0,"name":"FinderBuilder","span":{"filename":"src/memmem/mod.rs","begin":[699,0],"end":[701,1]},"visibility":"public","docs":"A builder for constructing non-default forward or reverse memmem finders.\n\nA builder is primarily useful for configuring a substring searcher.\nCurrently, the only configuration exposed is the ability to disable\nheuristic prefilters used to speed up certain searches.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:510","a:2:8472:8889-0:816:2210","a:2:2755:223-0:816:2210","a:2:2812:8630-0:816:2210","a:2:8471:8890-0:816:2210","a:2:2772:231-0:816:2210","b:2:2253-0:816:2210","b:2:2561-0:816:2210","b:2:2256-0:816:2210","b:2:3391-0:816:2210","b:2:2550-0:816:2210","b:2:2546-0:816:2210","b:2:2556-0:816:2210","b:5:680-0:816:2210","0:822","0:820","0:818"]}}},"5:5528:25550":{"id":"5:5528:25550","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12358:25553"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:114:1697":{"id":"b:2:2253-0:114:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2255:3497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12258:1973":{"id":"2:12258:1973","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12259:27472"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2561-0:777:2154":{"id":"b:2:2561-0:777:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2556-0:788:2160":{"id":"b:2:2556-0:788:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12328:32662":{"id":"2:12328:32662","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8472:8889-0:788:2160":{"id":"a:2:8472:8889-0:788:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:8889","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2755:223-0:798:2155":{"id":"a:2:2755:223-0:798:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2550-0:816:2210":{"id":"b:2:2550-0:816:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:215:1685":{"id":"0:215:1685","crate_id":0,"name":"memchr2_iter","span":{"filename":"src/memchr/mod.rs","begin":[23,0],"end":[25,1]},"visibility":"public","docs":"An iterator over all occurrences of the needles in a haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:1979":{"id":"0:93:1979","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr/iter.rs","begin":[59,4],"end":[61,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:807:2161":{"id":"b:2:2546-0:807:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2549:3374"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2546-0:788:2160":{"id":"b:2:2546-0:788:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2549:3374"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:218:1691":{"id":"0:218:1691","crate_id":0,"name":"memrchr2_iter","span":{"filename":"src/memchr/mod.rs","begin":[46,0],"end":[52,1]},"visibility":"public","docs":"An iterator over all occurrences of the needles in a haystack, in reverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"2:40633:1839","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12347:32668":{"id":"2:12347:32668","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:14405"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8471:8890-0:798:2155":{"id":"a:2:8471:8890-0:798:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:8890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:40-0:97:1696":{"id":"0:40-0:97:1696","crate_id":0,"name":null,"span":{"filename":"src/memchr/mod.rs","begin":[3,29],"end":[3,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::iter::Memchr2","name":"Memchr2","id":"0:97:1696","glob":false}}},"5:5529:25551":{"id":"5:5529:25551","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12359:25554"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:638:2089":{"id":"0:638:2089","crate_id":0,"name":"Prefilter","span":{"filename":"src/memmem/prefilter/mod.rs","begin":[170,0],"end":[177,1]},"visibility":"public","docs":"Prefilter controls whether heuristics are used to accelerate searching.\n\nA prefilter refers to the idea of detecting candidate matches very quickly,\nand then confirming whether those candidates are full matches. This\nidea can be quite effective since it's often the case that looking for\ncandidates can be a lot faster than running a complete substring search\nover the entire input. Namely, looking for candidates can be done with\nextremely fast vectorized code.\n\nThe downside of a prefilter is that it assumes false positives (which are\ncandidates generated by a prefilter that aren't matches) are somewhat rare\nrelative to the frequency of full matches. That is, if a lot of false\npositives are generated, then it's possible for search time to be worse\nthan if the prefilter wasn't enabled in the first place.\n\nAnother downside of a prefilter is that it can result in highly variable\nperformance, where some cases are extraordinarily fast and others aren't.\nTypically, variable performance isn't a problem, but it may be for your use\ncase.\n\nThe use of prefilters in this implementation does use a heuristic to detect\nwhen a prefilter might not be carrying its weight, and will dynamically\ndisable its use. Nevertheless, this configuration option gives callers\nthe ability to disable prefilters if you have knowledge that they won't be\nuseful.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:639:181","0:641:2814"],"impls":["a:2:8472:8889-0:638:2089","a:2:2755:223-0:638:2089","a:2:2812:8630-0:638:2089","a:2:8471:8890-0:638:2089","a:2:2772:231-0:638:2089","b:2:2253-0:638:2089","b:2:2561-0:638:2089","b:2:2256-0:638:2089","b:2:3391-0:638:2089","b:2:2550-0:638:2089","b:2:2546-0:638:2089","b:2:2556-0:638:2089","b:5:680-0:638:2089","0:643","0:645","0:646","0:329"]}}},"0:475:1978":{"id":"0:475:1978","crate_id":0,"name":"Item","span":{"filename":"src/memmem/mod.rs","begin":[348,4],"end":[348,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"2:12362:14068":{"id":"2:12362:14068","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4524:14068"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44024:12535","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:33330":{"id":"5:5517:33330","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12252:27449":{"id":"2:12252:27449","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:974":{"id":"0:109:974","crate_id":0,"name":"next","span":{"filename":"src/memchr/iter.rs","begin":[98,4],"end":[100,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2556-0:114:1697":{"id":"b:2:2556-0:114:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[50,0],"end":[62,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["enumerate","peekable","find","step_by","take","eq_by","cycle","try_reduce","partition_in_place","zip","fuse","skip_while","intersperse","ne","is_sorted","array_chunks","find_map","is_partitioned","inspect","count","take_while","skip","intersperse_with","le","next_chunk","map","min_by","partial_cmp","is_sorted_by","sum","try_find","try_fold","by_ref","map_while","rposition","for_each","last","position","flat_map","all","min_by_key","is_sorted_by_key","product","unzip","max","try_for_each","try_collect","scan","size_hint","filter","advance_by","any","max_by","__iterator_get_unchecked","cmp_by","copied","fold","collect_into","flatten","filter_map","rev","nth","cmp","eq","chain","max_by_key","lt","gt","partial_cmp_by","min","collect","cloned","reduce","ge","partition","map_windows"],"trait":{"name":"Iterator","id":"2:7497:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:91:1978","0:92:974","0:93:1979"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:644:431":{"id":"0:644:431","crate_id":0,"name":"clone","span":{"filename":"src/memmem/prefilter/mod.rs","begin":[168,9],"end":[168,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:787:685":{"id":"0:787:685","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[310,9],"end":[310,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2755:223-0:638:2089":{"id":"a:2:2755:223-0:638:2089","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:684:9058":{"id":"5:684:9058","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9-0:214:1688":{"id":"0:9-0:214:1688","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,58],"end":[172,69]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr_iter","name":"memchr_iter","id":"0:214:1688","glob":false}}},"b:2:2556-0:798:2155":{"id":"b:2:2556-0:798:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:126:1978":{"id":"0:126:1978","crate_id":0,"name":"Item","span":{"filename":"src/memchr/iter.rs","begin":[149,4],"end":[149,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:482":{"id":"0:482","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[412,0],"end":[433,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["enumerate","peekable","find","step_by","take","eq_by","cycle","try_reduce","partition_in_place","zip","fuse","skip_while","intersperse","ne","is_sorted","array_chunks","find_map","is_partitioned","inspect","count","take_while","skip","intersperse_with","le","next_chunk","map","min_by","partial_cmp","is_sorted_by","sum","try_find","try_fold","by_ref","map_while","rposition","for_each","last","position","flat_map","all","min_by_key","is_sorted_by_key","product","unzip","max","try_for_each","try_collect","scan","size_hint","filter","advance_by","any","max_by","__iterator_get_unchecked","cmp_by","copied","fold","collect_into","flatten","filter_map","rev","nth","cmp","eq","chain","max_by_key","lt","gt","partial_cmp_by","min","collect","cloned","reduce","ge","partition","map_windows"],"trait":{"name":"Iterator","id":"2:7497:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:485:1978","0:486:974"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12239:32647":{"id":"2:12239:32647","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2561-0:798:2155":{"id":"b:2:2561-0:798:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2549:3374":{"id":"2:2549:3374","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2523:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12256:32650":{"id":"2:12256:32650","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12039:1441","str::slice_mut_unchecked":"2:12257:32651","crate::ops::Index":"2:3052:9110"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8472:8889-0:777:2154":{"id":"a:2:8472:8889-0:777:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:8889","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12259:27472":{"id":"2:12259:27472","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12258:1973"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14-0:219:1693":{"id":"0:14-0:219:1693","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,48],"end":[173,61]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr3_iter","name":"memrchr3_iter","id":"0:219:1693","glob":false}}},"a:2:2772:231-0:816:2210":{"id":"a:2:2772:231-0:816:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2550-0:798:2155":{"id":"b:2:2550-0:798:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:224:1686":{"id":"0:224:1686","crate_id":0,"name":"memchr3","span":{"filename":"src/memchr/mod.rs","begin":[204,0],"end":[236,1]},"visibility":"public","docs":"Like `memchr`, but searches for any of three bytes instead of just one.\n\nThis returns the index corresponding to the first occurrence of `needle1`,\nthe first occurrence of `needle2`, or the first occurrence of `needle3` in\n`haystack` (whichever occurs earliest), or `None` if none are found. If an\nindex is returned, it is guaranteed to be less than `usize::MAX`.\n\nWhile this is operationally the same as something like\n`haystack.iter().position(|&b| b == needle1 || b == needle2 ||\nb == needle3)`, `memchr3` will use a highly optimized routine that can be\nup to an order of magnitude faster in some cases.\n\n# Example\n\nThis shows how to find the first position of any of three bytes in a byte\nstring.\n\n```\nuse memchr::memchr3;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr3(b'k', b'q', b'e', haystack), Some(2));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2564:128":{"id":"2:2564:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32257:11164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2565:1521":{"id":"2:2565:1521","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:1684":{"id":"0:222:1684","crate_id":0,"name":"memchr2","span":{"filename":"src/memchr/mod.rs","begin":[151,0],"end":[178,1]},"visibility":"public","docs":"Like `memchr`, but searches for either of two bytes instead of just one.\n\nThis returns the index corresponding to the first occurrence of `needle1`\nor the first occurrence of `needle2` in `haystack` (whichever occurs\nearlier), or `None` if neither one is found. If an index is returned, it is\nguaranteed to be less than `usize::MAX`.\n\nWhile this is operationally the same as something like\n`haystack.iter().position(|&b| b == needle1 || b == needle2)`, `memchr2`\nwill use a highly optimized routine that can be up to an order of magnitude\nfaster in some cases.\n\n# Example\n\nThis shows how to find the first position of either of two bytes in a byte\nstring.\n\n```\nuse memchr::memchr2;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr2(b'k', b'q', haystack), Some(4));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:807:2161":{"id":"0:807:2161","crate_id":0,"name":"FinderRev","span":{"filename":"src/memmem/mod.rs","begin":[576,0],"end":[578,1]},"visibility":"public","docs":"A single substring reverse searcher fixed to a particular needle.\n\nThe purpose of this type is to permit callers to construct a substring\nsearcher that can be used to search haystacks without the overhead of\nconstructing the searcher in the first place. This is a somewhat niche\nconcern when it's necessary to re-use the same needle to search multiple\ndifferent haystacks with as little overhead as possible. In general,\nusing [`rfind`] is good enough, but `FinderRev` is useful when you can\nmeaningfully observe searcher construction time in a profile.\n\nWhen the `std` feature is enabled, then this type has an `into_owned`\nversion which permits building a `FinderRev` that is not connected to\nthe lifetime of its needle.","links":{"`rfind`":"0:466:2177"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:498","a:2:8472:8889-0:807:2161","a:2:2755:223-0:807:2161","a:2:2812:8630-0:807:2161","a:2:8471:8890-0:807:2161","a:2:2772:231-0:807:2161","b:2:2253-0:807:2161","b:2:2561-0:807:2161","b:2:2256-0:807:2161","b:2:3391-0:807:2161","b:2:2550-0:807:2161","b:2:2546-0:807:2161","b:2:2556-0:807:2161","b:5:680-0:807:2161","0:810","0:813"]}}},"b:5:680-0:816:2210":{"id":"b:5:680-0:816:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:1822","5:683:9057","5:684:9058"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12331:32664":{"id":"2:12331:32664","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8-0:216:1687":{"id":"0:8-0:216:1687","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,44],"end":[172,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr3_iter","name":"memchr3_iter","id":"0:216:1687","glob":false}}},"2:2559:128":{"id":"2:2559:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:472":{"id":"0:472","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[347,0],"end":[367,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["enumerate","peekable","find","step_by","take","eq_by","cycle","try_reduce","partition_in_place","zip","fuse","skip_while","intersperse","ne","is_sorted","array_chunks","find_map","is_partitioned","inspect","count","take_while","skip","intersperse_with","le","next_chunk","map","min_by","partial_cmp","is_sorted_by","sum","try_find","try_fold","by_ref","map_while","rposition","for_each","last","position","flat_map","all","min_by_key","is_sorted_by_key","product","unzip","max","try_for_each","try_collect","scan","size_hint","filter","advance_by","any","max_by","__iterator_get_unchecked","cmp_by","copied","fold","collect_into","flatten","filter_map","rev","nth","cmp","eq","chain","max_by_key","lt","gt","partial_cmp_by","min","collect","cloned","reduce","ge","partition","map_windows"],"trait":{"name":"Iterator","id":"2:7497:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:475:1978","0:476:974"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:777:2154":{"id":"0:777:2154","crate_id":0,"name":"FindIter","span":{"filename":"src/memmem/mod.rs","begin":[311,0],"end":[316,1]},"visibility":"public","docs":"An iterator over non-overlapping substring matches.\n\nMatches are reported by the byte offset at which they begin.\n\n`'h` is the lifetime of the haystack while `'n` is the lifetime of the\nneedle.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:467","a:2:8472:8889-0:777:2154","a:2:2755:223-0:777:2154","a:2:2812:8630-0:777:2154","a:2:8471:8890-0:777:2154","a:2:2772:231-0:777:2154","b:2:2253-0:777:2154","b:2:2561-0:777:2154","b:2:2256-0:777:2154","b:2:3391-0:777:2154","b:2:2550-0:777:2154","b:2:2546-0:777:2154","b:2:7354-0:777:2154","b:2:2556-0:777:2154","0:784","0:472"]}}},"0:217:1694":{"id":"0:217:1694","crate_id":0,"name":"memrchr_iter","span":{"filename":"src/memchr/mod.rs","begin":[40,0],"end":[42,1]},"visibility":"public","docs":"An iterator over all occurrences of the needle in a haystack, in reverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"2:40633:1839","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-0:215:1685":{"id":"0:6-0:215:1685","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,21],"end":[172,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr2_iter","name":"memchr2_iter","id":"0:215:1685","glob":false}}},"2:12245:32649":{"id":"2:12245:32649","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12356:28585":{"id":"2:12356:28585","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39786:27396","Self::is_ascii":"2:12355:25548"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39786:27396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:25554":{"id":"2:12359:25554","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114:1697":{"id":"0:114:1697","crate_id":0,"name":"Memchr3","span":{"filename":"src/memchr/iter.rs","begin":[119,0],"end":[127,1]},"visibility":"public","docs":"An iterator for `memchr3`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:121","a:2:8472:8889-0:114:1697","a:2:2755:223-0:114:1697","a:2:2812:8630-0:114:1697","a:2:8471:8890-0:114:1697","a:2:2772:231-0:114:1697","b:2:2253-0:114:1697","b:2:2561-0:114:1697","b:2:2256-0:114:1697","b:2:3391-0:114:1697","b:2:2550-0:114:1697","b:2:2546-0:114:1697","b:2:7354-0:114:1697","b:2:2556-0:114:1697","0:124","0:129"]}}},"0:643":{"id":"0:643","crate_id":0,"name":null,"span":{"filename":"src/memmem/prefilter/mod.rs","begin":[168,9],"end":[168,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:644:431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/memmem/prefilter/mod.rs","begin":[179,0],"end":[183,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2597:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:330:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:476:974":{"id":"0:476:974","crate_id":0,"name":"next","span":{"filename":"src/memmem/mod.rs","begin":[350,4],"end":[366,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:504:2159":{"id":"0:504:2159","crate_id":0,"name":"rfind_iter","span":{"filename":"src/memmem/mod.rs","begin":[646,4],"end":[651,5]},"visibility":"public","docs":"Returns a reverse iterator over all occurrences of a substring in a\nhaystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::FinderRev;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet finder = FinderRev::new(b\"foo\");\nlet mut it = finder.rfind_iter(haystack);\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:515:2244":{"id":"0:515:2244","crate_id":0,"name":"build_reverse","span":{"filename":"src/memmem/mod.rs","begin":[720,4],"end":[725,5]},"visibility":"public","docs":"Build a reverse finder using the given needle from the current\nsettings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:807:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12353:32670":{"id":"2:12353:32670","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11898:127","`FromStr`":"2:11897:14260"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11897:14260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11897:14260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:477":{"id":"0:477","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[384,0],"end":[410,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:481:1836"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:457:2151":{"id":"0:457:2151","crate_id":0,"name":"find_iter","span":{"filename":"src/memmem/mod.rs","begin":[190,0],"end":[195,1]},"visibility":"public","docs":"Returns an iterator over all non-overlapping occurrences of a substring in\na haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet mut it = memmem::find_iter(haystack, b\"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"N"}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"type":{"bounds":[{"outlives":"'n"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:97:1696":{"id":"b:2:2546-0:97:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2549:3374"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:39-0:81:1695":{"id":"0:39-0:81:1695","crate_id":0,"name":null,"span":{"filename":"src/memchr/mod.rs","begin":[3,21],"end":[3,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::iter::Memchr","name":"Memchr","id":"0:81:1695","glob":false}}},"b:2:2550-0:114:1697":{"id":"b:2:2550-0:114:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:114:1697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12344:32667":{"id":"2:12344:32667","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:14405"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:81:1695":{"id":"b:2:2253-0:81:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:81:1695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2255:3497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3391-0:777:2154":{"id":"b:2:3391-0:777:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:777:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:11-0:228:1690":{"id":"0:11-0:228:1690","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,13],"end":[173,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr2","name":"memrchr2","id":"0:228:1690","glob":false}}},"b:2:2253-0:798:2155":{"id":"b:2:2253-0:798:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:798:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2255:3497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:820":{"id":"0:820","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[698,16],"end":[698,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:821:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12264:30840":{"id":"2:12264:30840","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12263:30846"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43999:12637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:9057":{"id":"5:683:9057","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[108,0],"end":[116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"2:7388:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:97:1696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:113:1980"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12312:3506":{"id":"2:12312:3506","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11937:14405","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::rmatches":"2:12315:32657"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43920:12632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:1978":{"id":"0:108:1978","crate_id":0,"name":"Item","span":{"filename":"src/memchr/iter.rs","begin":[95,4],"end":[95,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:2:2550-0:788:2160":{"id":"b:2:2550-0:788:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:788:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2258:25316":{"id":"2:2258:25316","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:228:1690":{"id":"0:228:1690","crate_id":0,"name":"memrchr2","span":{"filename":"src/memchr/mod.rs","begin":[325,0],"end":[352,1]},"visibility":"public","docs":"Like `memrchr`, but searches for either of two bytes instead of just one.\n\nThis returns the index corresponding to the last occurrence of `needle1` or\nthe last occurrence of `needle2` in `haystack` (whichever occurs later), or\n`None` if neither one is found. If an index is returned, it is guaranteed\nto be less than `usize::MAX`.\n\nWhile this is operationally the same as something like\n`haystack.iter().rposition(|&b| b == needle1 || b == needle2)`, `memrchr2`\nwill use a highly optimized routine that can be up to an order of magnitude\nfaster in some cases.\n\n# Example\n\nThis shows how to find the last position of either of two bytes in a byte\nstring.\n\n```\nuse memchr::memrchr2;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr2(b'k', b'q', haystack), Some(8));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12341:27491":{"id":"2:12341:27491","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:14405"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:13165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:518:2088":{"id":"0:518:2088","crate_id":0,"name":"prefilter","span":{"filename":"src/memmem/mod.rs","begin":[731,4],"end":[734,5]},"visibility":"public","docs":"Configure the prefilter setting for the finder.\n\nSee the documentation for [`Prefilter`] for more discussion on why\nyou might want to configure this.","links":{"`Prefilter`":"0:638:2089"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["prefilter",{"resolved_path":{"name":"Prefilter","id":"0:638:2089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"FinderBuilder","id":"0:816:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:21618:14291":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:5979:11976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"11:968:10932":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:7529:12221":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:41670:31117":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:39560:9113":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:11022:9227":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:532:11285":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:45902:12696":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:32304:13170":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:22546:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:9650:9786":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6361:10820":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"18:766:2359":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13802:10411":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13826:10413":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11742:9918":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:41604:12572":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:6968:21298":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:11761:9921":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:4374:11530":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:1778:13192":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"18:599:3147":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:5574:10673":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:11281:9875":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:7545:9504":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:4862:11720":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:1587:11159":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:1709:11454":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4389:11537":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13949:10444":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:9998:9737":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:6067:12006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:9746:9532":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:3000:2371":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:43522:9218":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:3114:13202":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:2478:14469":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:22252:12327":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:10310:9213":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:2772:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:3178:11157":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:3228:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:10714:13022":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:11358:21485":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:7564:12229":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:4705:14221":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:4129:12280":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:8200:3570":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:2450:10652":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:895:9141":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:4748:11666":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:20809:32377":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"0:0:1683":{"crate_id":0,"path":["memchr"],"kind":"module"},"2:2839:9088":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:4167:13416":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:21364:14156":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:4966:8878":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:500:11262":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:22231:12323":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:43266:12613":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:4641:10714":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:8794:21354":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:7599:9573":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:12015:25699":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:43820:9214":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:2574:10657":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:4986:10724":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:6431:3540":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:44447:12671":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:48106:8604":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:7853:9693":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:40440:13171":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:39419:9112":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:10903:13025":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:0:837":{"crate_id":6,"path":["libc"],"kind":"module"},"2:30539:31152":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:10478:9795":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:5008:11798":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11327:9881":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:12039:1441":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:2353:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:14401:10586":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10097:12988":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:48159:8607":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:8579:13165":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13148:10206":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:5712:10739":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:6075:9560":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:12576:10099":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:595:11320":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:536:10629":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10383:12999":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:21100:14290":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:8486:12838":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:1565:9501":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:1733:11463":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13055:10185":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:4036:14200":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:11179:12677":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:10561:9803":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:946:13130":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:4955:11774":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:97:11147":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:32257:11164":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:7199:12260":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6171:12046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:46349:12717":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:44328:12664":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:13101:10192":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:41693:12586":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:9079:12859":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:3988:14197":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:40480:3560":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11934:9956":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13914:10438":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:12775:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:1545:11348":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:2982:9109":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:40246:12541":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:45920:12697":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:4002:9484":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:23323:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:9196:29651":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"11:793:13139":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:21388:14156":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:5900:11927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:2962:12248":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12888:10157":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:9172:9752":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:44463:12675":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:10847:29409":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:4394:8978":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:504:12960":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:7359:3556":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:43838:9210":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:2520:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"0:798:2155":{"crate_id":0,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:12046:760":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:2997:1967":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:7462:10981":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:11661:9913":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:9381:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:21397:12295":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13758:10398":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"14:187:20375":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4543:11610":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:21613:14283":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"18:521:2089":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:2809:8986":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:13215:10213":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:14145:10499":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:3223:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:5830:10756":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:3390:3544":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:12045:763":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:4984:11791":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:8953:21359":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:44632:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:47011:12740":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:11086:13035":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:555:13182":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:2596:10658":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:43604:9223":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:9867:9767":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10494:9797":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11586:9910":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:8686:21351":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:10764:12870":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:5621:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:2959:1822":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:8195:11057":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:10536:13206":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:3594:9142":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:8147:2311":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:7722:10681":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:43048:12606":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:7425:12268":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:8217:9756":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:44455:12673":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:491:1820":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:7802:3551":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:8239:10979":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:12208:10007":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12876:10155":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:80:1695":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11788:9922":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"18:736:2285":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:3183:33944":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11507:21364":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:30525:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:4248:13162":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"18:96:1696":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:6648:12104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:11718:12631":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:2406:10650":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"0:777:2154":{"crate_id":0,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:6306:14367":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:2767:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:14024:10466":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4475:11575":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:41023:3538":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:12055:808":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:2829:9092":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:4585:10712":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12267:10030":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:12598:10100":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"18:681:2155":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:8825:21355":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:10769:12872":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:48129:8605":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:9812:9535":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:48054:2023":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:22645:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:1595:11381":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:149:9449":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:1911:16318":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:39592:9116":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8876:9010":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"9:450:20285":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:7388:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4848:11712":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:2863:9095":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"11:657:9010":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:2898:9102":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:5839:9484":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:4477:14221":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11845:9932":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:9701:12975":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:9051:21339":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:21147:14609":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:12086:9986":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"14:40:9956":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6041:21294":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:5384:21290":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:1527:11337":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:41650:12579":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:6850:12193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:2461:12252":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:1821:12278":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:7910:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:41873:8887":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:8926:21358":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:47931:12759":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11448:21363":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:20811:32382":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:2788:10666":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:7463:12216":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:9762:34002":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:564:2096":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:5882:11915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:2859:9097":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:4393:9489":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:3720:12242":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:3995:13159":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:3740:13211":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:12484:10083":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:9086:9748":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:2130:20359":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:11617:9911":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6017:21293":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:4319:13215":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:12044:659":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:1064:13134":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"11:836:13130":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:3735:13146":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:7749:14110":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:14:3509":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:22148:12311":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:11679:12627":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:868:11154":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4723:11653":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:40204:12537":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:690:2161":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:46181:12712":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:3065:9647":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:3171:9141":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:1464:11154":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:10031:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:6625:12086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:4239:13214":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:261:9465":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5987:11977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:7667:12769":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:11308:12884":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:10534:9801":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:3238:11159":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:538:2094":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:7250:12202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:40520:3571":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:1690:11447":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"15:288:13395":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13778:10406":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13010:10176":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:6376:21295":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:47041:12741":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:3632:9010":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:5805:11880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"9:507:11230":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:41823:9142":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:7643:12768":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:8471:8890":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:2365:14141":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:7716:14073":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:6077:12009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:12051:1541":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:10343:25724":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11490:9904":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:10972:25694":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:6154:3565":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:11383:12891":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:22843:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:2755:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:11054:9580":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"9:52:13757":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:2141:12243":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:2893:9100":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:7349:14084":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:41882:8716":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:6930:9513":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:8463:12606":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:40397:14125":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:919:13124":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:1928:670":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:8362:12825":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"0:788:2160":{"crate_id":0,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:10186:9783":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:5310:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:4344:10706":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:6648:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:12038:1411":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:0:3407":{"crate_id":17,"path":["object"],"kind":"module"},"11:1538:13141":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:14126:10494":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:41899:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:6332:10672":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:10431:13252":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:4239:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:940:13128":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11971:9969":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:3581:9141":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:2359:10648":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:3464:13210":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:39333:9124":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:7523:12220":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:8914:14271":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:40310:12547":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8284:12822":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:44137:12647":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:20964:14282":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:42746:12593":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:0:3398":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:3263:13206":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:850:9142":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:4742:14210":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:8291:12823":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:1980:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4895:11737":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:904:9501":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:7828:11004":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:40317:14465":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:6471:8953":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4568:11623":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:4787:11688":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:2927:9108":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:4310:9521":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"18:590:2318":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:21722:32267":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:8659:21338":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11151:13040":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7391:21300":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:14056:10477":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:5863:11913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:4194:9489":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:10637:9812":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:1118:32442":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:2178:12964":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10240:9770":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:285:11148":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:12056:1599":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:22513:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:2817:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:43920:12632":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13567:10345":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:41840:8886":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:42851:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:45951:12698":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"15:394:20395":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:12778:10126":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:636:3135":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:8969:8945":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:40460:3559":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"18:481:1818":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:5448:13223":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:8838:12850":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:9564:12973":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:40232:12540":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:13876:10430":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:7552:12227":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:1073:13138":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10507:9799":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:7350:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:11244:9911":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:5318:9465":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:14316:10563":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:4921:10722":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4328:11496":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:43938:12633":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:13816:10412":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:6815:14274":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:2649:13157":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"11:644:9142":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:10397:13000":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12685:10114":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:3232:10639":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:6544:8949":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"15:0:3405":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:40511:3562":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11226:9871":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:14420:10591":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12945:10169":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5121:10728":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:4007:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:5799:11879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:30597:31151":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:2170:12245":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"18:707:2208":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:4770:30858":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4781:11685":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:2406:3414":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:9752:12976":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:2888:9099":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:10430:13003":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:9486:13236":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:4234:9141":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:8473:8888":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:43866:12629":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11137:13039":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"0:807:2161":{"crate_id":0,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7613:13114":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:1826:9484":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:12437:10071":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:46395:12719":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:5793:11876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:2477:14156":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:4420:11554":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:46105:12704":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:10165:21392":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"14:215:11142":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:41030:12564":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:4794:11690":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"11:1027:20364":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:2851:9090":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:5673:10677":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:638:13186":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:10126:9776":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:44024:12535":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:43999:12637":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"18:727:2260":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:21832:14156":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12790:10127":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:9328:9756":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:47885:12758":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"11:1501:20365":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:2150:21417":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:9912:12979":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10750:9813":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:9350:9758":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:22264:14193":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:2559:9552":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6742:10883":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:41071:3548":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:6268:33997":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7544:10987":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:9488:34001":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:4770:11677":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:2696:10662":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:7586:12234":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:4818:11701":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:41891:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:2380:10649":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:14355:10572":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:4499:14222":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:4046:14201":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10962:9850":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:76:1599":{"crate_id":2,"path":["core","usize"],"kind":"module"},"17:13202:10212":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:5051:11823":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:2526:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"11:2174:11161":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:12036:1073":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:42786:11023":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:6044:12000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:12936:1670":{"crate_id":2,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"5:2960:32449":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:7026:9569":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:8296:14220":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:4917:14247":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13792:10410":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:3032:10694":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:43011:12602":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:5242:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:11642:12622":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:44706:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:5567:14265":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:7182:9314":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:9521:12972":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:13546:10335":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:4030:14381":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:1672:9465":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:11518:13212":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:35:9461":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:7041:10923":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:3347:14178":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12554:10092":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"11:1103:13137":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:6558:9010":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13667:10382":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:6984:25348":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:4800:9556":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:6614:8955":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:44511:12680":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:400:12959":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:5634:10733":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:9445:12971":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:8156:12816":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:4164:9489":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:7278:12205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:40672:3581":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:1075:12961":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12724:10118":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:10326:13223":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:3389:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:9479:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:2810:10667":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13989:10455":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:5397:13220":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:42226:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4992:11793":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12422:10067":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:5775:11863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:41755:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:1506:11329":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:7568:10689":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:1068:13136":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11048:13029":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12983:10174":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:1257:10932":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:10819:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:3915:10704":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:4002:14199":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:44693:12683":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5836:11893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:13973:10453":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:20962:14156":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:11291:9581":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:3512:29930":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:6869:13413":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:7231:33553":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:7662:13231":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:1761:624":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:10628:9811":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:1554:9141":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:6960:13084":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10771:9815":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:40549:3574":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:11454:9583":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:14156:10500":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13693:10388":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:2914:9105":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:10829:12817":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:8930:14270":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:11753:9228":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:48221:8609":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:0:1433":{"crate_id":1,"path":["std"],"kind":"module"},"1:7858:13236":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:22073:12300":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:1442:9010":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:43595:9220":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:7337:12262":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:2922:9107":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:6769:9499":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:43543:9225":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12698:10115":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:40682:3567":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:7863:12774":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:1561:9484":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13286:10223":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:2269:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:2428:10651":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:1702:11451":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:14118:10492":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:22238:12326":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:14514:10612":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:4032:9465":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:3305:9123":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:2933:20431":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:2855:9093":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:11982:13287":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:44748:12687":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:4949:10723":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:22810:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:12184:10005":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:10646:9892":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:44008:12638":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10447:13007":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"14:0:3404":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:6352:10819":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:12048:762":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:4606:11625":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:41815:9141":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:3302:13208":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:2618:10659":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:44642:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:6499:10692":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:32311:9071":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:21012:30905":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:4638:11628":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12765:10125":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:9617:34006":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:6130:12020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:47761:12756":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:43058:12610":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:10340:9793":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:434:9700":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:12136:9993":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:44168:12651":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:9377:9063":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:14335:10569":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:629:13142":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:4754:11668":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:2530:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:40601:3578":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:44100:14416":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:5588:10676":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13085:10188":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"0:816:2210":{"crate_id":0,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:11467:9201":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"11:1831:9501":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:9383:9065":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"18:582:2360":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:22004:12298":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:9242:9754":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:5877:11914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10603:9807":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:39450:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:10579:9185":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:2969:20432":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:1892:13195":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"11:1838:11156":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4446:11564":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:782:9468":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:48091:8603":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:47075:12742":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:42187:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:46729:12735":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:39786:27396":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:12053:1543":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:878:9473":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:12008:14410":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4800:11693":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13851:10422":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:40284:12544":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:7934:12242":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:8988:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:4908:14246":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:2322:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:2573:9536":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:30279:14192":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:4456:11567":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10197:12990":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:502:9481":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:30469:8626":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:3190:30330":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:4833:11705":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10698:13020":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:7221:9475":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:6415:10828":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:5967:11969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4496:11586":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:4862:10720":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:7346:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:1673:11440":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:21710:9205":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:10989:9226":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:4137:13414":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:5417:13221":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:3265:13207":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4304:11478":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:7441:3555":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:43692:12620":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:21285:12295":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9574:34005":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:7272:12203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:14110:10491":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:9001:25341":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:12280:10034":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:20826:32379":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:5383:13218":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:3830:10702":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:22089:12304":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:10023:12975":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:42384:8941":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:41967:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:1520:11334":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6796:12168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:10370:12998":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:7809:3554":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:4175:14219":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:10490:9215":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:8983:13255":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6485:10675":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:7463:12269":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11098:13036":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:587:11315":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:5890:11920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11910:9955":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:41564:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:43036:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:44122:12642":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:2876:9101":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"12:0:3403":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:4417:10707":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:1011:9465":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:8310:13247":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:7731:14074":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:2670:10661":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:11389:12892":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:48182:8608":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:952:13131":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:44685:13178":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:11595:12894":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:4421:9073":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:2744:10664":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:5369:9489":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"11:749:9484":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:1747:12272":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:14324:10564":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:1822:9010":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:7396:31137":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:9379:9064":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:3418:9489":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"11:2033:10932":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:1302:13138":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:8318:12824":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11191:9860":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:4835:10719":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:12533:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:8895:21357":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:45850:12694":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"10:0:3401":{"crate_id":10,"path":["adler"],"kind":"module"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:39538:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:11477:13211":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:2243:12251":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:3187:30329":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10139:21391":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:40658:3241":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"0:232:1699":{"crate_id":0,"path":["memchr","memmem"],"kind":"module"},"1:1582:11158":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:14434:10593":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:276:1823":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:11145:12849":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:43660:12615":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:12123:9992":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:12034:1560":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:9277:9755":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:2762:1827":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:4:1035":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:46775:12736":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:42774:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:43443:13177":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:5767:11861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:44305:12656":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:1575:11367":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:2871:9096":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:10474:9576":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:5954:8940":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:9455:34000":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:14346:10570":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:14090:10485":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"11:2201:12262":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:1558:9010":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:44243:12654":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:44490:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:4744:14212":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:7880:12776":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:7599:12238":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4854:11715":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:1557:11357":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13024:10179":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:12057:1159":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:3565:12970":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:4678:11631":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:7191:9010":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:8413:12835":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"11:1845:11157":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:43734:9216":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:541:11291":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:7245:9010":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:14163:10502":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:40812:3582":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:46003:12700":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:7660:10992":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:12052:1542":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6467:10833":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:10799:12775":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:8336:13251":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:1696:11450":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:1121:13138":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:8236:13247":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:40826:3583":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:12810:10130":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:45772:12691":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"11:332:9455":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:2216:9517":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:2391:14151":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:3268:9122":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:837:9141":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:2765:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:47823:12757":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12225:10015":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:2012:12963":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"11:2180:11162":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:14308:10560":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:40336:12551":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:5433:13222":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:12737:10120":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:43614:9221":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:8281:11064":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:21014:14609":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:8154:13116":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:1756:12275":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:5955:11964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6834:12187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:5088:10727":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:14221:10544":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"18:113:1697":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:2295:438":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"18:614:3153":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:40840:3584":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:2186:33984":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13868:10427":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:46887:12738":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:9062:32406":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4938:11768":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:45796:12692":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:2211:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:7412:12266":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:6189:10812":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:4171:9070":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:4374:9072":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:1733:14619":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:6318:10817":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13228:10214":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:46151:12711":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:14469:10606":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"9:177:13768":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:8860:9141":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:6204:13054":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4842:11711":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6618:12082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"10:36:11169":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"0:465:2170":{"crate_id":0,"path":["memchr","memmem","find"],"kind":"function"},"6:1717:11458":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:10476:9210":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:3223:13204":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:42802:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:22579:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13113:10194":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11201:9862":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:6607:12077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:7540:12225":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:6261:13080":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:13487:10283":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:7128:12856":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:8806:13252":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12911:10166":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6687:10870":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:8179:14155":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:2824:9087":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:10059:9774":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:609:3152":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:11198:12861":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:0:3406":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4556:11614":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11306:9878":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:45706:12688":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"11:1611:9459":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11389:13042":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:3938:14195":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:4944:11771":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:10383:9216":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:9373:9061":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:21271:14280":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:7737:12770":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:46419:12720":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:4637:12097":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:43532:9219":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:14100:10488":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:40268:12543":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:2131:9481":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:5785:8944":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"9:330:11207":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12830:10131":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:7765:13235":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:10774:12774":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:12040:1525":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:4524:11602":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:1569:11365":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"11:119:9453":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:21395:14286":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:8167:12817":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:6036:11997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:40256:12542":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:1637:8622":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:46327:12716":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:1055:13132":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12543:10091":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:2526:10655":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:6726:12118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12007:9974":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:10107:13267":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:579:11310":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:30509:8628":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13575:10346":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12024:9976":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:44735:11168":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:3204:11158":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"14:202:14418":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:12830:14086":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:7067:10929":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:13422:10232":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:14269:10545":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:9137:9751":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:8503:14259":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:2763:8984":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"0:457:2151":{"crate_id":0,"path":["memchr","memmem","find_iter"],"kind":"function"},"2:32318:12397":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:13922:10440":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:624:3239":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:5727:10742":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:41046:3542":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:3996:14198":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:11607:30535":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:7382:12263":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4704:11645":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:43270:9236":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:41061:3546":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:4462:10708":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11215:9867":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:7582:10988":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"11:2060:13134":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:4535:11606":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:14522:10615":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:43569:3559":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:1663:11434":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:5053:13217":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2250:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:39474:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:3678:14191":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:40195:12536":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:881:11155":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:11719:21366":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:11942:13165":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5829:11889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:1570:11156":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:531:2092":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:43066:12611":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:44451:12672":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:1184:12962":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:7284:8886":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:40189:12535":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:5743:10744":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:6513:10834":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:43582:9224":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:10348:9229":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:6600:8954":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"14:221:11144":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:4716:11652":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:10504:9211":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:8181:10693":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12062:9982":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"0:461:2159":{"crate_id":0,"path":["memchr","memmem","rfind_iter"],"kind":"function"},"2:40572:3576":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:12738:9546":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:8946:14272":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:1102:13411":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:9024:13260":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:46548:12723":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:8115:11052":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6915:10683":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:6156:10807":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:46373:12718":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:41729:12587":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:10685:13018":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:5564:12007":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:3600:10699":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:2317:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:31073:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:5866:10763":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:46470:12721":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:2156:601":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:547:11294":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"9:0:3400":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:11897:14260":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:6841:12190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:10745:13277":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:5403:9747":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7708:10691":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:10021:14156":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11062:13033":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:9921:12980":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13040:10181":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13739:10397":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:4469:11572":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:14042:10470":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:2517:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:11111:13037":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4963:11779":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:43019:12604":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5068:11827":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:7054:10926":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6929:10907":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:11063:2723":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"11:1852:11158":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:9330:212":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:8545:12843":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:11341:12888":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:915:13123":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:22777:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:12711:10117":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:40558:12557":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:7534:10687":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:9031:13261":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:7554:10688":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:10012:9786":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:8561:12845":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:5982:10776":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6386:10825":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:4098:13160":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:43784:12626":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:2832:10668":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"9:237:12606":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:7015:10922":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6744:12129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:635:13184":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:3330:9501":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:574:2319":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8572:12846":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:22678:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"11:798:13125":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:8894:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:10838:29411":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:12037:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:9331:9060":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:21834:14279":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:21000:14284":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:41037:3540":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:1600:1407":{"crate_id":2,"path":["core","mem","size_of"],"kind":"function"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:46297:12715":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:7529:9744":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4550:11612":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:20768:2360":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:9711:34007":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:8472:8889":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:5362:14396":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:2777:8985":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:44348:12666":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10366:12997":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8882:12852":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6583:10846":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:8223:9212":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:5818:11881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:45818:12693":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:12496:10085":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:10468:9794":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"18:515:2091":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:2907:10671":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:11937:14405":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:4908:11747":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"14:31:13120":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"9:426:20287":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:6868:12196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:9119:12860":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:11048:9579":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"9:486:20284":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:5130:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:14536:10618":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:7580:9571":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:4050:14202":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:1630:600":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12970:10172":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:3743:13212":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:26133:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6720:12117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:1814:13193":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"11:667:13123":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:6015:11991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:1411:9141":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:42811:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:6805:12171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:910:13139":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:2970:32448":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:2820:8990":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:7609:12240":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"15:306:13399":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:923:13125":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:9206:12866":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"18:652:2319":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:46058:12703":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:9102:9749":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"7:32:20271":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:43624:9222":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"13:0:3397":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:9341:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:41079:3550":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:7575:12233":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:2305:20430":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:4823:14209":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:4796:814":{"crate_id":2,"path":["core","iter"],"kind":"module"},"8:0:3399":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:2595:13200":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:4557:10711":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:3184:29399":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:2363:12274":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:21263:14156":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:21951:12297":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"18:755:2242":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:42756:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"7:0:1589":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:44216:12653":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:11957:14403":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8555:9141":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8852:12851":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:7503:10686":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:4463:11570":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:40430:9523":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:44467:12676":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:4518:11599":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:2223:33556":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:2910:9104":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:8014:14181":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:14076:10483":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"11:1517:13140":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"10:44:11170":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:6362:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:3919:9489":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:5612:9499":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:7378:29526":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:8302:13250":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:9829:9536":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:7282:9010":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:1590:11379":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:48007:12761":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:44033:12543":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:7688:9185":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:2766:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:6589:12070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:8868:13254":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:4627:14199":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:2247:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4810:11697":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:14448:10600":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:14173:10507":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"11:630:9141":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"11:736:11155":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:1837:9319":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:13071:10186":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:9104:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12305:10038":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13162:10207":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:40383:12553":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:562:11302":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:44315:12660":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:7211:9484":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12934:10167":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:7884:21303":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:10278:12996":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:6560:9451":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:860:9010":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11000:9852":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"7:79:20278":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:4074:9142":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:7309:3558":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:6565:12053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:7846:32404":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:12033:427":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:10520:9800":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12473:10080":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:43990:12636":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:10809:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:9109:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13897:10435":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:12054:1540":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:9044:12856":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:2496:13199":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:10960:13224":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:4497:10709":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12154:10001":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:5976:3586":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:8765:21353":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:40303:12546":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:8205:21304":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:3441:12969":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:22140:12310":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:3056:9111":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:3503:9060":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:43674:12618":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11337:21484":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:9959:12983":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:46203:12713":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:50027:14293":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10036:9772":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:42031:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:6732:3335":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:42506:9062":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:14478:10608":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6279:10814":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"11:1048:33985":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:653:15327":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:7517:12219":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:4320:9071":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:4973:11785":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:20828:32381":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:3655:9652":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13259:10220":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"0:466:2177":{"crate_id":0,"path":["memchr","memmem","rfind"],"kind":"function"},"2:43702:9756":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:43686:12619":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:5049:10726":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:10255:14267":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"18:671:2160":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:4365:9522":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:44443:12670":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:1513:11332":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8901:12853":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:10084:12987":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4587:11624":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11316:9880":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:7529:9501":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:12582:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:5798:10750":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4341:11506":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:10271:9228":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:5849:11902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:10228:9212":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:14013:10462":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:1273:13134":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:40590:3585":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:1536:11342":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:9985:12985":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:10203:9142":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:4740:11663":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:22057:12299":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11535:9906":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13451:10252":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12237:10018":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:2168:14610":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:3888:10703":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4949:11773":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:9003:21361":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4428:11556":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:4571:14239":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:40610:3564":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:5025:11806":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:11037:9578":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:10165:13269":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:5995:10632":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:48144:8606":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:4641:12101":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:6569:10680":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:582:9744":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:12047:761":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:9630:12289":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:6637:9465":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10980:9786":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:356:13180":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:9138:12861":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:40502:3561":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:4159:13415":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:4058:14204":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11547:9907":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:30503:8627":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:14499:10611":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10214:12993":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:9375:9062":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:11621:12895":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:44280:12655":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:9625:14474":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:12452:10076":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:41806:1978":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:41741:12588":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:11356:12889":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:474:11249":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:6792:10897":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:4188:13417":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:8713:21352":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:9385:9066":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8230:12634":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:2213:13198":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:2766:10665":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:695:13124":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:5975:14889":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:22744:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:39494:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11173:21483":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:619:13183":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:6753:10884":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:2608:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:11710:9878":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:12032:957":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"18:660:2154":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:9174:13264":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:7065:2311":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:526:11282":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:2812:8630":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13611:10376":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:21186:14281":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:8050:11045":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:13244:10216":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:1681:11441":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:929:14085":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:41621:14190":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4413:11550":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:2381:14146":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:1041:10932":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:3528:14173":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:44151:12650":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:7768:10679":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:5751:8942":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:573:11307":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:4872:11726":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:1012:13134":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4650:11629":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:48034:8599":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10440:13004":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:4483:11580":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12531:10089":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:3234:9117":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10420:9692":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:256:12957":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:12520:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:3974:14196":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:3521:14154":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:7436:10780":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10949:13028":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:39599:12406":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"11:399:13404":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:7474:13107":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:482:11254":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:5612:10678":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:44723:12686":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:2918:9106":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:805:14085":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:4745:10716":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:42306:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12513:10088":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:12043:657":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:1500:11326":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:14378:10585":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:2284:20404":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:44459:12674":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:6254:9558":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:7621:21301":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:46021:12701":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"11:1858:11159":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"19:0:1053":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6696:10871":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:11483:9203":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:2321:10640":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:5976:9558":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:44015:12544":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:1649:11423":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:5322:10729":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:7102:21299":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:9286:9319":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:8119:13242":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:42109:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:10316:9791":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:4774:10717":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:43970:12634":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:6900:9568":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:6156:12035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:119:14969":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:7269:33998":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:22612:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"11:2168:11160":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:6302:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:9036:13262":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:7261:12261":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:3944:14194":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:6079:9489":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:8210:3582":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:6671:12105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:21265:14278":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:5816:10755":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:22113:12308":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:4719:10715":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11639:9860":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:3212:11156":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:5696:21291":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:6151:9546":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:44471:12677":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12252:10024":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:7313:3557":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:22165:31144":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:12645:10106":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:1544:9489":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:6879:10903":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:7290:9010":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:3052:9110":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:40367:31137":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6600:21296":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10456:13010":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:46965:12739":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:44294:14417":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:22711:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:1631:11411":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:40355:12552":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:6818:10898":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:7090:10931":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:3797:10701":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:554:11297":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:11497:2903":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:7642:14156":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:32405:8991":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:4985:9489":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:40581:3577":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:7792:21302":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12373:10042":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4616:11626":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:11314:13281":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9933:12981":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:12098:9989":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:8247:14189":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:41958:9010":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:12074:9985":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:62:14915":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:10462:9214":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:22202:31148":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12111:9991":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:9660:34004":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:5905:10766":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:43512:9208":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:3669:9465":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:12163:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:123:14970":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:5830:8952":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"9:393:20286":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:7523:10986":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:2359:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:6136:12021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6008:11989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5015:11801":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:12555:30802":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:6401:10674":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:43251:12612":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:12004:14075":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:7805:3553":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:20781:32268":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:9114:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:6199:13227":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:6901:10682":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13981:10454":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11886:9941":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:6456:10832":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:6485:9465":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:531:9549":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:4879:1022":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6226:13069":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:4929:11762":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4291:11469":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:12293:10035":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:40350:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:47573:12754":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12172:10002":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:47969:12760":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12621:10105":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:3240:9119":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:10533:13204":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:10787:12878":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:1603:11386":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:1426:9142":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10547:9802":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:9067:13777":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"3:0:452":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:3315:10697":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:12043:9981":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:5363:10730":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:10105:13268":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:6165:9529":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:12031:378":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"11:311:11151":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:31101:2360":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:40216:31149":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:9607:12974":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:43503:9207":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:7782:10996":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:42070:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:7513:10985":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:48025:2075":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4506:11593":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:9852:21373":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:44435:12668":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:7492:10982":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:1776:9501":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:3446:12820":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:10421:9217":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:9531:33999":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10086:13193":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:14296:10557":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"11:844:13131":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:22186:31125":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:43494:9209":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:8824:12849":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6531:10842":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:11074:13034":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:3461:10698":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:11124:13038":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:3764:10700":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:47225:12743":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:42265:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:13274:9878":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:7497:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:46251:12714":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:8134:11055":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:9780:12977":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:32297:10979":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:41992:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:10726:13023":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:362:13181":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:2690:12255":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:1473:11155":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:9886:12978":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:21369:14277":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:6547:8950":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:8004:13240":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:9371:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:4729:11656":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:13676:10386":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:9157:12862":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8009:13241":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:3845:13213":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6721:21297":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:4746:14213":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:2881:10670":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:43884:12630":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11367:9884":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:7474:13156":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:32293:13169":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:4368:11529":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:42520:9063":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"15:327:13754":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:5058:11826":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:4590:14458":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:48080:8602":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:11999:13779":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:5648:13045":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:10738:13024":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:3225:13205":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:11171:29412":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"11:723:11154":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:10539:13208":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:7918:13238":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:1918:12279":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:9844:9541":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:46805:12737":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:44439:12669":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13890:10433":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:6573:12058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:5920:11943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:41942:9141":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:44650:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:10179:9141":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:8242:13249":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:1776:13191":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:5737:11836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:6705:12111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:42513:9061":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:7006:13085":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4824:11702":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:9945:9770":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:0:507":{"crate_id":2,"path":["core"],"kind":"module"},"6:7511:12218":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:11962:14402":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:2644:10660":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:3232:12968":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:1523:13145":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:4695:11640":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:43027:12605":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11295:9876":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:46651:12725":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4380:11532":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:6944:33992":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11261:9873":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:45981:12699":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11407:21362":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10616:9808":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:11235:9872":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:13174:10208":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4917:11753":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:488:11257":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:21133:14285":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"18:699:2210":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:5992:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:8167:13119":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:5502:13224":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"9:357:20300":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:5661:10737":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:4613:10713":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:3034:9120":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:1638:11415":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:2523:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:4395:11538":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:41950:9142":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:2815:8988":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:6916:3536":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12658:10109":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:3304:13209":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6425:10829":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:11539:13213":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:9972:12984":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:8994:13257":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:506:11265":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:7862:11008":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:6160:12285":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:3049:20433":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"11:365:9457":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4315:11486":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:1138:13412":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:7926:13239":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:1983:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:4401:11541":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:21203:14156":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:40633:1839":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13632:10381":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:6083:20403":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:7342:33995":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:30703:31150":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:6711:12113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:5760:21292":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12750:10122":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:2969:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:42148:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"18:0:1683":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:7742:12771":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:6346:13083":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:7893:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:6598:12076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:5419:9748":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:21219:14276":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:40623:3579":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:8978:21360":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:10990:12851":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13723:10394":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13966:10452":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:43766:12625":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:3800:9501":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:47431:12753":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:6820:12178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:45750:12690":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:14033:10469":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"18:507:2319":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:13710:10389":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:2209:12967":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:3253:31116":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4664:11630":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:39516:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:40291:14464":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:10951:11227":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:40276:12535":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:2472:10653":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:6893:10905":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:9366:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:45880:12695":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:2548:10656":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:6798:9512":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:20796:32268":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:4363:9491":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:5575:3563":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:42829:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:14460:10602":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:7540:13284":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:11951:2208":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:6688:12106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13906:10436":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12196:10006":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:14282:10551":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:5457:9489":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:494:11260":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:48045:8600":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:39613:12407":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:10410:13001":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:13135:10205":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:5628:9558":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:42527:9064":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:11371:13230":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:4685:11633":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3003:8632":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:10947:13235":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:6844:10899":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:22125:31130":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:2035:12242":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:5517:3575":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:4426:9491":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:6775:12154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"13:110:9174":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:4527:10710":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:41587:12570":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:481:9548":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:5074:11829":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12997:10175":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:644:2319":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:41052:3544":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:7125:3539":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:48065:8601":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:11614:12895":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13188:10209":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:6788:9510":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:39434:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:10112:12989":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:7870:12775":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:4702:14248":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:4489:11583":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:14134:10495":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:1503:13124":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10929:9847":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:9207:9753":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:9372:9759":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:9058:25696":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:8340:12086":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:41831:9010":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:11272:9874":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:11381:9887":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:6821:3569":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:8848:21356":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:4806:10718":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13298:10230":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:12049:758":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:13838:10416":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:7736:10994":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10575:9804":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:7769:13169":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:3150:9114":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:41706:12822":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:822:9471":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:44523:14693":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:4764:11674":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6022:11992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:5635:9559":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:4749:396":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:5939:10772":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:3498:9484":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:11702:12628":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:2166:14609":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:4436:11558":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:8812:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:5080:11832":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:10292:9786":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:43980:12635":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:6955:9516":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13685:10387":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:12465:10078":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:11162:9855":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:760:9501":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:1921:14121":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:1667:1111":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11573:9908":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:8594:21340":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:43716:9212":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:10227:12994":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:9790:34003":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:894:9484":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11023:9853":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:10588:9805":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:40540:3573":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:9896:21374":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:3217:33945":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:2864:10669":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:21:698":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:12058:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:7694:10690":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:5017:10725":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:2886:9555":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:5963:13047":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:5994:11978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:2822:1017":{"crate_id":2,"path":["core","ops"],"kind":"module"},"17:10661:13015":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:40530:3572":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:7558:12228":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:10788:21459":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:5366:14397":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:986:13132":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"13:226:11146":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:1818:9141":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:12050:1544":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:6545:10844":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"14:160:13120":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:47683:12755":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12671:9820":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:7505:12217":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:21056:14289":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:11216:12883":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:1288:13132":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:1482:13139":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:12846:10136":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:9982:12583":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:14001:10461":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"11:0:3402":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:12727:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:42345:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"18:719:2279":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:2049:13132":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:5128:8940":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:2834:9089":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:586:14067":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:39372:9121":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:6435:8946":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:207:9463":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:10265:12995":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:14068:10480":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:2722:10663":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:2597:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:12607:13167":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:10916:13026":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:1839:13194":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:2379:14145":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:2049:13146":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:2339:10642":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:2220:14138":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:568:11305":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12959:10171":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5435:10731":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:6028:11995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:9590:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"14:165:20368":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:4889:10721":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:7546:12226":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11872:9940":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:11351:9883":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:11815:9928":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:4391:13216":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:3983:13158":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:4053:10705":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7360:33996":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:2504:10654":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:2883:9098":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10672:13016":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:11159:12850":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:817:13128":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9070:9747":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:22876:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:7295:12215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:6439:9484":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:11687:21365":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:11817:9587":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:2845:9091":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:1495:11324":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:14083:10484":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:4639:12099":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:7134:13418":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:7318:10962":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:9582:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:7651:13115":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:11235:12860":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:7597:33993":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:5758:8943":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:40642:3580":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:4887:11732":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:5044:11820":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:8072:11046":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:46040:12702":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:11473:9714":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:2635:13201":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:46571:12724":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:5084:13217":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9491:9575":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:261:12958":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:1492:13123":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:2867:9094":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:8395:8882":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:6167:9564":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:7438:9497":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"11:2194:11165":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:8899:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:46517:12722":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"14:7:13120":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:8097:11049":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:4243:13161":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:643:14070":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:2904:9103":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"11:403:13405":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:2514:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:6243:13072":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:1576:11157":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:2966:32441":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:13554:10338":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:40489:3570":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:9823:21372":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:4626:11627":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11951:9959":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:2993:8631":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11991:9970":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:3213:9115":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:45726:12689":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}