{"root":"0:0:2362","crate_version":"2.7.4","includes_private":false,"index":{"0:305:2620":{"id":"0:305:2620","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[179,4],"end":[219,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32827:9718-0:957:2771":{"id":"a:1:32827:9718-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:485":{"id":"0:485","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[667,0],"end":[682,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","map_windows","skip_while","size_hint","intersperse","count","partial_cmp_by","chain","max_by","try_reduce","cloned","partition_in_place","fuse","take_while","cmp","intersperse_with","ne","eq_by","zip","max_by_key","find_map","cycle","is_partitioned","inspect","map_while","copied","for_each","next_chunk","rev","last","max","array_chunks","eq","try_find","is_sorted","try_fold","by_ref","map","scan","filter","find","advance_by","min","is_sorted_by","enumerate","sum","position","try_for_each","try_collect","flat_map","filter_map","nth","partial_cmp","is_sorted_by_key","take","product","rposition","min_by","fold","skip","collect_into","flatten","all","peekable","le","step_by","ge","collect","lt","__iterator_get_unchecked","any","cmp_by","unzip","min_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:488:184","0:489:1222","0:491:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:192":{"id":"0:192","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[272,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:193:1208","0:194:2622"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8442-0:1180:2707":{"id":"b:1:8442-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:10156","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:3092-0:1159:2694":{"id":"b:1:3092-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:610":{"id":"0:610","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[293,0],"end":[306,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:612:1208"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1490":{"id":"0:1490","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,16],"end":[542,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32768:248-0:1230:2694":{"id":"a:1:32768:248-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:179:2509":{"id":"0:179:2509","crate_id":0,"name":"twoway","span":{"filename":"src/arch/all/twoway.rs","begin":[1,0],"end":[877,1]},"visibility":"public","docs":"An implementation of the [Two-Way substring search algorithm][two-way].\n\n[`Finder`] can be built for forward searches, while [`FinderRev`] can be built\nfor reverse searches.\n\nTwo-Way makes for a nice general purpose substring search algorithm because of\nits time and space complexity properties. It also performs well in practice.\nNamely, with `m = len(needle)` and `n = len(haystack)`, Two-Way takes `O(m)`\ntime to create a finder, `O(1)` space and `O(n)` search time. In other words,\nthe preprocessing step is quick, doesn't require any heap memory and the worst\ncase search time is guaranteed to be linear in the haystack regardless of the\nsize of the needle.\n\nWhile vector algorithms will usually beat Two-Way handedly, vector algorithms\nalso usually have pathological or edge cases that are better handled by Two-Way.\nMoreover, not all targets support vector algorithms or implementations for them\nsimply may not exist yet.\n\nTwo-Way can be found in the `memmem` implementations in at least [GNU libc] and\n[musl].\n\n[two-way]: https://en.wikipedia.org/wiki/Two-way_string-matching_algorithm\n[GNU libc]: https://www.gnu.org/software/libc/\n[musl]: https://www.musl-libc.org/","links":{"`FinderRev`":"0:1000:3157","`Finder`":"0:992:2771"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:992:2771","0:1000:3157"],"is_stripped":false}}},"1:3095:149":{"id":"1:3095:149","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32692:12668","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:769:1222":{"id":"0:769:1222","crate_id":0,"name":"next","span":{"filename":"src/memmem/mod.rs","begin":[353,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:747:2618":{"id":"0:747:2618","crate_id":0,"name":"find","span":{"filename":"src/memmem/mod.rs","begin":[185,0],"end":[191,1]},"visibility":"public","docs":"Returns the index of the first occurrence of the given needle.\n\nNote that if you're are searching for the same needle in many different\nsmall haystacks, it may be faster to initialize a [`Finder`] once,\nand reuse it for each search.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), memmem::find(haystack, b\"foo\"));\nassert_eq!(Some(4), memmem::find(haystack, b\"bar\"));\nassert_eq!(None, memmem::find(haystack, b\"quux\"));\n```","links":{"`Finder`":"0:1552:2771"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2804-0:1138:2661":{"id":"b:1:2804-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42629:3940-0:949:2773":{"id":"a:1:42629:3940-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:902:2694":{"id":"b:1:2772-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:64:2677":{"id":"0:64:2677","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[338,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42628:3941-0:949:2773":{"id":"a:1:42628:3941-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2804-0:1408:2374":{"id":"b:1:2804-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3335:10115-0:940:2771":{"id":"a:1:3335:10115-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[182,0],"end":[274,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:159:1208","0:160:2622","0:161:2623"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3943-0:1523:3967":{"id":"b:1:3943-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3087-0:1562:3157":{"id":"b:1:3087-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1157":{"id":"0:1157","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,22],"end":[515,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1158:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:14-0:595:2369":{"id":"0:14-0:595:2369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,13],"end":[205,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr2","name":"memrchr2","id":"0:595:2369","glob":false}}},"5:5723:36729":{"id":"5:5723:36729","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:3194","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:932":{"id":"0:932","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[835,9],"end":[835,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:935:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:416:3653":{"id":"0:416:3653","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[87,4],"end":[110,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Finder::with_pair`] will\nreturn a `Some` value. Similarly, when it is false, it is guaranteed\nthat `Finder::with_pair` will return a `None` value. Notice that this\ndoes not guarantee that [`Finder::new`] will return a `Finder`. Namely,\neven when `Finder::is_available` is true, it is not guaranteed that a\nvalid [`Pair`] can be found from the needle given.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Pair`":"0:949:2773","`Finder::new`":"0:413:1208","`Finder::with_pair`":"0:414:2778"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:1243:2702":{"id":"b:1:3081-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32827:9718-0:1429:2376":{"id":"a:1:32827:9718-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42628:3941-0:902:2694":{"id":"a:1:42628:3941-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:591:2368":{"id":"0:591:2368","crate_id":0,"name":"memrchr","span":{"filename":"src/memchr.rs","begin":[59,0],"end":[67,1]},"visibility":"public","docs":"Search for the last occurrence of a byte in a slice.\n\nThis returns the index corresponding to the last occurrence of `needle` in\n`haystack`, or `None` if one is not found. If an index is returned, it is\nguaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle)`, this routine will attempt to\nuse highly optimized vector operations that can be an order of magnitude\nfaster (or more).\n\n# Example\n\nThis shows how to find the last position of a byte in a byte string.\n\n```\nuse memchr::memrchr;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr(b'o', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13665:14402":{"id":"1:13665:14402","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12451:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44381:14372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32768:248-0:957:2771":{"id":"a:1:32768:248-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3087-0:1538:3972":{"id":"b:1:3087-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1551:827":{"id":"0:1551:827","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[313,16],"end":[313,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32827:9718-0:879:2661":{"id":"a:1:32827:9718-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:947":{"id":"0:947","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:948:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1218":{"id":"0:1218","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,16],"end":[355,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1221:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:653:2677":{"id":"0:653:2677","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[484,4],"end":[493,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3096:1850":{"id":"1:3096:1850","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42667:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2807-0:1130:2602":{"id":"b:1:2807-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13651:15581":{"id":"1:13651:15581","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42537:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:926:827":{"id":"0:926:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[607,22],"end":[607,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:961:494":{"id":"0:961:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32827:9718-0:1193:2771":{"id":"a:1:32827:9718-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2804-0:1193:2771":{"id":"b:1:2804-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32827:9718-0:1572:4015":{"id":"a:1:32827:9718-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1133":{"id":"0:1133","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1134:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:345:2620":{"id":"0:345:2620","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[654,4],"end":[694,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1246":{"id":"0:1246","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,9],"end":[701,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1247:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1248":{"id":"0:1248","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,16],"end":[701,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13636":{"id":"1:13636","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13637:1024","1:13638:3445","1:13639:36011","1:13640:36012","1:13642:36013","1:13645:2747","1:13646:36014","1:13647:350","1:13648:32717","1:13649:2738","1:13651:15581","1:13653:30323","1:13655:30324","1:13657:36015","1:13658:36016","1:13659:3346","1:13660:32736","1:13661:32739","1:13662:32740","1:13664:14393","1:13665:14402","1:13666:3406","1:13667:27877","1:13668:27964","1:13669:15227","1:13670:36017","1:13671:27959","1:13672:3306","1:13675:32752","1:13678:32753","1:13681:2618","1:13685:2622","1:13689:32741","1:13692:27955","1:13695:32744","1:13698:36018","1:13701:36019","1:13704:32746","1:13707:32748","1:13710:32750","1:13713:32751","1:13716:4219","1:13719:36020","1:13722:36021","1:13725:36022","1:13728:36023","1:13730:36024","1:13732:36025","1:13734:36026","1:13735:36027","1:13736:36028","1:13739:36029","1:13742:31665","1:13745:32754","1:13748:36030","1:13751:36031","1:13754:36032","1:13757:36033","1:13759:3860","1:13760:32664","1:13761:32413","1:13762:32414","1:13763:32415","1:13764:32667","1:13765:32668","1:13766:32669","1:13767:36034","1:13769:15863","1:13770:36035"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[592,0],"end":[600,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","nth_back","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:8476:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:91:2677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[575,0],"end":[590,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","map_windows","skip_while","size_hint","intersperse","count","partial_cmp_by","chain","max_by","try_reduce","cloned","partition_in_place","fuse","take_while","cmp","intersperse_with","ne","eq_by","zip","max_by_key","find_map","cycle","is_partitioned","inspect","map_while","copied","for_each","next_chunk","rev","last","max","array_chunks","eq","try_find","is_sorted","try_fold","by_ref","map","scan","filter","find","advance_by","min","is_sorted_by","enumerate","sum","position","try_for_each","try_collect","flat_map","filter_map","nth","partial_cmp","is_sorted_by_key","take","product","rposition","min_by","fold","skip","collect_into","flatten","all","peekable","le","step_by","ge","collect","lt","__iterator_get_unchecked","any","cmp_by","unzip","min_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:84:184","0:85:1222","0:87:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:784-0:1209:2661":{"id":"b:5:784-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3335:10115-0:1408:2374":{"id":"a:1:3335:10115-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1251:2707":{"id":"0:1251:2707","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[967,0],"end":[970,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:514:1004","`Three`":"0:1243:2702"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:32827:9718-0:1251:2707","a:1:32768:248-0:1251:2707","a:1:3335:10115-0:1251:2707","a:1:42628:3941-0:1251:2707","a:1:42629:3940-0:1251:2707","a:1:3300:260-0:1251:2707","b:1:2775-0:1251:2707","b:1:2772-0:1251:2707","b:1:3092-0:1251:2707","b:1:3943-0:1251:2707","b:1:2804-0:1251:2707","b:1:3087-0:1251:2707","b:1:8442-0:1251:2707","b:1:3081-0:1251:2707","b:1:3077-0:1251:2707","b:5:784-0:1251:2707","0:1256","0:1260","0:529","0:524","0:517"]}}},"0:151:2834":{"id":"0:151:2834","crate_id":0,"name":"rank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[335,4],"end":[337,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1143":{"id":"0:1143","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,9],"end":[466,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1146:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3081-0:1408:2374":{"id":"b:1:3081-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2809:27786":{"id":"1:2809:27786","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13655:30324":{"id":"1:13655:30324","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32827:9718-0:915:2702":{"id":"a:1:32827:9718-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2775-0:902:2694":{"id":"b:1:2775-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2775-0:1562:3157":{"id":"b:1:2775-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:1180:2707":{"id":"a:1:32768:248-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:651":{"id":"0:651","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[482,0],"end":[494,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","nth_back","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:8476:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:653:2677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:334":{"id":"0:334","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[508,0],"end":[508,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8891:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32827:9718-0:1418:2375":{"id":"a:1:32827:9718-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3077-0:1483:3944":{"id":"b:1:3077-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2772-0:871:2602":{"id":"b:1:2772-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3300:260-0:957:2771":{"id":"a:1:3300:260-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32768:248-0:986:2771":{"id":"a:1:32768:248-0:986:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:749":{"id":"0:749","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[244,0],"end":[271,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:753:3843"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:87:2676":{"id":"0:87:2676","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[587,4],"end":[589,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32827:9718-0:992:2771":{"id":"a:1:32827:9718-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1569":{"id":"0:1569","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[523,16],"end":[523,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1571:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2804-0:1209:2661":{"id":"b:1:2804-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:923:494":{"id":"0:923:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[607,9],"end":[607,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3335:10115-0:957:2771":{"id":"a:1:3335:10115-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32768:248-0:1429:2376":{"id":"a:1:32768:248-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:887:494":{"id":"0:887:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[302,9],"end":[302,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:2622":{"id":"0:70:2622","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[403,4],"end":[411,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:940:2771":{"id":"b:1:2772-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:795:4016":{"id":"0:795:4016","crate_id":0,"name":"build_forward","span":{"filename":"src/memmem/mod.rs","begin":[666,4],"end":[671,5]},"visibility":"public","docs":"Build a forward finder using the given needle from the current\nsettings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:3045:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5722":{"id":"5:5722","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5723:36729","5:5724:10256","5:5727:36730","5:5730:36731","5:5738:36732","5:5739:36733","5:5740:9664","5:5741:32411","5:5742:32412"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:60:2676":{"id":"0:60:2676","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[331,4],"end":[333,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:1552:2771":{"id":"b:5:784-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42629:3940-0:1418:2375":{"id":"a:1:42629:3940-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42628:3941-0:1193:2771":{"id":"a:1:42628:3941-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:26:2379":{"id":"0:26:2379","crate_id":0,"name":"arch","span":{"filename":"src/arch/mod.rs","begin":[1,0],"end":[16,15]},"visibility":"public","docs":"A module with low-level architecture dependent routines.\n\nThese routines are useful as primitives for tasks not covered by the higher\nlevel crate API.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:27:322","0:286:2032"],"is_stripped":false}}},"0:779:351":{"id":"0:779:351","crate_id":0,"name":"as_ref","span":{"filename":"src/memmem/mod.rs","begin":[491,4],"end":[496,5]},"visibility":"public","docs":"Convert this finder into its borrowed variant.\n\nThis is primarily useful if your finder is owned and you'd like to\nstore its borrowed variant in some intermediate data structure.\n\nNote that the lifetime parameter of the returned finder is tied to the\nlifetime of `self`, and may be shorter than the `'n` lifetime of the\nneedle itself. Namely, a finder's needle can be either borrowed or\nowned, so the lifetime of the needle returned must necessarily be the\nshorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:1151:2682":{"id":"b:1:3081-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3081-0:1572:4015":{"id":"b:1:3081-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:948:827":{"id":"0:948:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5738:36732":{"id":"5:5738:36732","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3300:260-0:1483:3944":{"id":"a:1:3300:260-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3092-0:1562:3157":{"id":"b:1:3092-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2362":{"id":"0:0:2362","crate_id":0,"name":"memchr","span":{"filename":"src/lib.rs","begin":[1,0],"end":[221,11]},"visibility":"public","docs":"This library provides heavily optimized routines for string search primitives.\n\n# Overview\n\nThis section gives a brief high level overview of what this crate offers.\n\n* The top-level module provides routines for searching for 1, 2 or 3 bytes\n  in the forward or reverse direction. When searching for more than one byte,\n  positions are considered a match if the byte at that position matches any\n  of the bytes.\n* The [`memmem`] sub-module provides forward and reverse substring search\n  routines.\n\nIn all such cases, routines operate on `&[u8]` without regard to encoding. This\nis exactly what you want when searching either UTF-8 or arbitrary bytes.\n\n# Example: using `memchr`\n\nThis example shows how to use `memchr` to find the first occurrence of `z` in\na haystack:\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"foo bar baz quuz\";\nassert_eq!(Some(10), memchr(b'z', haystack));\n```\n\n# Example: matching one of three possible bytes\n\nThis examples shows how to use `memrchr3` to find occurrences of `a`, `b` or\n`c`, starting at the end of the haystack.\n\n```\nuse memchr::memchr3_iter;\n\nlet haystack = b\"xyzaxyzbxyzc\";\n\nlet mut it = memchr3_iter(b'a', b'b', b'c', haystack).rev();\nassert_eq!(Some(11), it.next());\nassert_eq!(Some(7), it.next());\nassert_eq!(Some(3), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches\n\nThis example shows how to use the [`memmem`] sub-module to find occurrences of\na substring in a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`memmem::Finder`]:\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```\n\n# Why use this crate?\n\nAt first glance, the APIs provided by this crate might seem weird. Why provide\na dedicated routine like `memchr` for something that could be implemented\nclearly and trivially in one line:\n\n```\nfn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().position(|&b| b == needle)\n}\n```\n\nOr similarly, why does this crate provide substring search routines when Rust's\ncore library already provides them?\n\n```\nfn search(haystack: &str, needle: &str) -> Option<usize> {\n    haystack.find(needle)\n}\n```\n\nThe primary reason for both of them to exist is performance. When it comes to\nperformance, at a high level at least, there are two primary ways to look at\nit:\n\n* **Throughput**: For this, think about it as, \"given some very large haystack\n  and a byte that never occurs in that haystack, how long does it take to\n  search through it and determine that it, in fact, does not occur?\"\n* **Latency**: For this, think about it as, \"given a tiny haystack---just a\n  few bytes---how long does it take to determine if a byte is in it?\"\n\nThe `memchr` routine in this crate has _slightly_ worse latency than the\nsolution presented above, however, its throughput can easily be over an\norder of magnitude faster. This is a good general purpose trade off to make.\nYou rarely lose, but often gain big.\n\n**NOTE:** The name `memchr` comes from the corresponding routine in `libc`. A\nkey advantage of using this library is that its performance is not tied to its\nquality of implementation in the `libc` you happen to be using, which can vary\ngreatly from platform to platform.\n\nBut what about substring search? This one is a bit more complicated. The\nprimary reason for its existence is still indeed performance, but it's also\nuseful because Rust's core library doesn't actually expose any substring\nsearch routine on arbitrary bytes. The only substring search routine that\nexists works exclusively on valid UTF-8.\n\nSo if you have valid UTF-8, is there a reason to use this over the standard\nlibrary substring search routine? Yes. This routine is faster on almost every\nmetric, including latency. The natural question then, is why isn't this\nimplementation in the standard library, even if only for searching on UTF-8?\nThe reason is that the implementation details for using SIMD in the standard\nlibrary haven't quite been worked out yet.\n\n**NOTE:** Currently, only `x86_64`, `wasm32` and `aarch64` targets have vector\naccelerated implementations of `memchr` (and friends) and `memmem`.\n\n# Crate features\n\n* **std** - When enabled (the default), this will permit features specific to\nthe standard library. Currently, the only thing used from the standard library\nis runtime SIMD CPU feature detection. This means that this feature must be\nenabled to get AVX2 accelerated routines on `x86_64` targets without enabling\nthe `avx2` feature at compile time, for example. When `std` is not enabled,\nthis crate will still attempt to use SSE2 accelerated routines on `x86_64`. It\nwill also use AVX2 accelerated routines when the `avx2` feature is enabled at\ncompile time. In general, enable this feature if you can.\n* **alloc** - When enabled (the default), APIs in this crate requiring some\nkind of allocation will become available. For example, the\n[`memmem::Finder::into_owned`](crate::memmem::Finder::into_owned) API and the\n[`arch::all::shiftor`](crate::arch::all::shiftor) substring search\nimplementation. Otherwise, this crate is designed from the ground up to be\nusable in core-only contexts, so the `alloc` feature doesn't add much\ncurrently. Notably, disabling `std` but enabling `alloc` will **not** result\nin the use of AVX2 on `x86_64` targets unless the `avx2` feature is enabled\nat compile time. (With `std` enabled, AVX2 can be used even without the `avx2`\nfeature enabled at compile time by way of runtime CPU feature detection.)\n* **logging** - When enabled (disabled by default), the `log` crate is used\nto emit log messages about what kinds of `memchr` and `memmem` algorithms\nare used. Namely, both `memchr` and `memmem` have a number of different\nimplementation choices depending on the target and CPU, and the log messages\ncan help show what specific implementations are being used. Generally, this is\nuseful for debugging performance issues.\n* **libc** - **DEPRECATED**. Previously, this enabled the use of the target's\n`memchr` function from whatever `libc` was linked into the program. This\nfeature is now a no-op because this crate's implementation of `memchr` should\nnow be sufficiently fast on a number of platforms that `libc` should no longer\nbe needed. (This feature is somewhat of a holdover from this crate's origins.\nOriginally, this crate was literally just a safe wrapper function around the\n`memchr` function from `libc`.)","links":{"crate::arch::all::shiftor":"0:171:2508","crate::memmem::Finder::into_owned":"0:778:3843","`memmem`":"0:664:2382","`memmem::Finder`":"0:1552:2771"},"attrs":["#![deny(missing_docs)]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:26:2379","0:664:2382","0:7-0:589:2362","0:8-0:593:2363","0:9-0:604:2364","0:10-0:597:2365","0:11-0:607:2366","0:12-0:601:2367","0:13-0:591:2368","0:14-0:595:2369","0:15-0:606:2370","0:16-0:599:2371","0:17-0:609:2372","0:18-0:603:2373","0:19-0:1408:2374","0:20-0:1418:2375","0:21-0:1429:2376"],"is_stripped":false}}},"0:1423":{"id":"0:1423","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[363,9],"end":[363,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1425:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:784-0:1193:2771":{"id":"b:5:784-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:1138:2661":{"id":"a:1:32768:248-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1271:827":{"id":"0:1271:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:927:2707":{"id":"b:1:2772-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:784-0:1151:2682":{"id":"b:5:784-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2807-0:1193:2771":{"id":"b:1:2807-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1559":{"id":"0:1559","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[386,16],"end":[386,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1561:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3300:260-0:1130:2602":{"id":"a:1:3300:260-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13763:32415":{"id":"1:13763:32415","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:1483:3944":{"id":"b:1:2775-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13735:36027":{"id":"1:13735:36027","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:417:2618":{"id":"0:417:2618","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[118,4],"end":[121,5]},"visibility":"public","docs":"Execute a search using AVX2 vectors and routines.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:422:3580"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42628:3941-0:1562:3157":{"id":"a:1:42628:3941-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1005":{"id":"0:1005","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,16],"end":[40,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2772-0:1251:2707":{"id":"b:1:2772-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:413:1208":{"id":"0:413:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[37,4],"end":[39,5]},"visibility":"public","docs":"Create a new pair searcher. The searcher returned can either report\nexact matches of `needle` or act as a prefilter and report candidate\npositions of `needle`.\n\nIf AVX2 is unavailable in the current environment or if a [`Pair`]\ncould not be constructed from the needle given, then `None` is\nreturned.","links":{"`Pair`":"0:949:2773"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2783":{"id":"0:140:2783","crate_id":0,"name":"index1","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[238,4],"end":[240,5]},"visibility":"public","docs":"Returns the first offset of the pair.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:1208":{"id":"0:36:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[46,4],"end":[48,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the byte given.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:874":{"id":"0:874","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:875:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1568:494":{"id":"0:1568:494","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[523,9],"end":[523,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:2507":{"id":"0:152:2507","crate_id":0,"name":"rabinkarp","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[1,0],"end":[390,1]},"visibility":"public","docs":"An implementation of the [Rabin-Karp substring search algorithm][rabinkarp].\n\nRabin-Karp works by creating a hash of the needle provided and then computing\na rolling hash for each needle sized window in the haystack. When the rolling\nhash matches the hash of the needle, a byte-wise comparison is done to check\nif a match exists. The worst case time complexity of Rabin-Karp is `O(m *\nn)` where `m ~ len(needle)` and `n ~ len(haystack)`. Its worst case space\ncomplexity is constant.\n\nThe main utility of Rabin-Karp is that the searcher can be constructed very\nquickly with very little memory. This makes it especially useful when searching\nfor small needles in small haystacks, as it might finish its search before a\nbeefier algorithm (like Two-Way) even starts.\n\n[rabinkarp]: https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:957:2771","0:964:3157"],"is_stripped":false}}},"a:1:32827:9718-0:1151:2682":{"id":"a:1:32827:9718-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3077-0:1243:2702":{"id":"b:1:3077-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:56:1222":{"id":"0:56:1222","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[314,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32827:9718-0:986:2771":{"id":"a:1:32827:9718-0:986:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42629:3940-0:927:2707":{"id":"a:1:42629:3940-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:161:2623":{"id":"0:161:2623","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[248,4],"end":[273,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `<= end`. The pointer returned is only ever equivalent\nto `end` when both the needle and haystack are empty. (That is, the\nempty string matches the empty string.)\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\nNote that `start` and `end` below refer to both pairs of pointers given\nto this routine. That is, the conditions apply to both `hstart`/`hend`\nand `nstart`/`nend`.\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n* It must be the case that `start <= end`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["hend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:375:2618":{"id":"0:375:2618","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[987,4],"end":[995,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3300:260-0:1418:2375":{"id":"a:1:3300:260-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2775-0:1243:2702":{"id":"b:1:2775-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42629:3940-0:1251:2707":{"id":"a:1:42629:3940-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:394:1222":{"id":"0:394:1222","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1251,4],"end":[1256,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:514:1004":{"id":"0:514:1004","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[950,4],"end":[952,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:876":{"id":"0:876","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,16],"end":[34,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2775-0:940:2771":{"id":"b:1:2775-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32827:9718-0:1201:2602":{"id":"a:1:32827:9718-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2775-0:871:2602":{"id":"b:1:2775-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2804-0:1230:2694":{"id":"b:1:2804-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3081-0:927:2707":{"id":"b:1:3081-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:604:2364":{"id":"0:604:2364","crate_id":0,"name":"memchr2_iter","span":{"filename":"src/memchr.rs","begin":[232,0],"end":[238,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:927:2707":{"id":"b:1:2775-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3335:10115-0:1151:2682":{"id":"a:1:3335:10115-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:103:1004":{"id":"0:103:1004","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[805,4],"end":[807,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of one of the needle bytes in\nthe given haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13-0:591:2368":{"id":"0:13-0:591:2368","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,4],"end":[205,11]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr","name":"memrchr","id":"0:591:2368","glob":false}}},"b:1:3077-0:1538:3972":{"id":"b:1:3077-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[140,0],"end":[247,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:1208","0:137:2822","0:139:2850","0:140:2783","0:141:2784"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3087-0:1243:2702":{"id":"b:1:3087-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:589:2362":{"id":"0:589:2362","crate_id":0,"name":"memchr","span":{"filename":"src/memchr.rs","begin":[27,0],"end":[35,1]},"visibility":"public","docs":"Search for the first occurrence of a byte in a slice.\n\nThis returns the index corresponding to the first occurrence of `needle` in\n`haystack`, or `None` if one is not found. If an index is returned, it is\nguaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle)`, this routine will attempt to\nuse highly optimized vector operations that can be an order of magnitude\nfaster (or more).\n\n# Example\n\nThis shows how to find the first position of a byte in a byte string.\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr(b'k', haystack), Some(8));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:802:4047":{"id":"0:802:4047","crate_id":0,"name":"build_reverse","span":{"filename":"src/memmem/mod.rs","begin":[694,4],"end":[703,5]},"visibility":"public","docs":"Build a reverse finder using the given needle from the current\nsettings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:3045:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2807-0:1201:2602":{"id":"b:1:2807-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:302:2622":{"id":"0:302:2622","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[133,4],"end":[141,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:482:1004":{"id":"0:482:1004","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[645,4],"end":[647,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:1538:3972":{"id":"b:1:3081-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2775-0:1523:3967":{"id":"b:1:2775-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3335:10115-0:1159:2694":{"id":"a:1:3335:10115-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1435":{"id":"0:1435","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[431,9],"end":[431,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1437:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2804-0:902:2694":{"id":"b:1:2804-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:945:494":{"id":"0:945:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:956:827":{"id":"0:956:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,22],"end":[134,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1158:827":{"id":"0:1158:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,22],"end":[515,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:412":{"id":"0:412","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[28,0],"end":[213,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:413:1208","0:414:2778","0:416:3653","0:417:2618","0:418:2788","0:421:2772","0:422:3580"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[361,0],"end":[385,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","map_windows","skip_while","size_hint","intersperse","count","partial_cmp_by","chain","max_by","try_reduce","cloned","partition_in_place","fuse","take_while","cmp","intersperse_with","ne","eq_by","zip","max_by_key","find_map","cycle","is_partitioned","inspect","map_while","copied","for_each","next_chunk","rev","last","max","array_chunks","eq","try_find","is_sorted","try_fold","by_ref","map","scan","filter","find","advance_by","min","is_sorted_by","enumerate","sum","position","try_for_each","try_collect","flat_map","filter_map","nth","partial_cmp","is_sorted_by_key","take","product","rposition","min_by","fold","skip","collect_into","flatten","all","peekable","le","step_by","ge","collect","lt","__iterator_get_unchecked","any","cmp_by","unzip","min_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:454:184","0:455:1222","0:457:598","0:459:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2807-0:1222:2682":{"id":"b:1:2807-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3092-0:1538:3972":{"id":"b:1:3092-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3300:260-0:992:2771":{"id":"a:1:3300:260-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:157:2620":{"id":"0:157:2620","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[150,4],"end":[175,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `<= end`. The pointer returned is only ever equivalent\nto `end` when both the needle and haystack are empty. (That is, the\nempty string matches the empty string.)\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\nNote that `start` and `end` below refer to both pairs of pointers given\nto this routine. That is, the conditions apply to both `hstart`/`hend`\nand `nstart`/`nend`.\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n* It must be the case that `start <= end`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["hend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:15-0:606:2370":{"id":"0:15-0:606:2370","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,23],"end":[205,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr2_iter","name":"memrchr2_iter","id":"0:606:2370","glob":false}}},"0:488:184":{"id":"0:488:184","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[668,4],"end":[668,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:500":{"id":"0:500","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[704,0],"end":[953,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:501:1208","0:502:1217","0:503:3653","0:504:2618","0:506:2622","0:508:2620","0:510:2623","0:514:1004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:368":{"id":"0:368","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[887,0],"end":[887,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8891:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3300:260-0:1193:2771":{"id":"a:1:3300:260-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42629:3940-0:902:2694":{"id":"a:1:42629:3940-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:171:2508":{"id":"0:171:2508","crate_id":0,"name":"shiftor","span":{"filename":"src/arch/all/shiftor.rs","begin":[1,0],"end":[89,1]},"visibility":"public","docs":"An implementation of the [Shift-Or substring search algorithm][shiftor].\n\n[shiftor]: https://en.wikipedia.org/wiki/Bitap_algorithm","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:986:2771"],"is_stripped":false}}},"0:1415":{"id":"0:1415","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[287,16],"end":[287,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1417:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:935:494":{"id":"0:935:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[835,9],"end":[835,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:753:3843":{"id":"0:753:3843","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[263,4],"end":[270,5]},"visibility":"public","docs":"Convert this iterator into its owned variant, such that it no longer\nborrows the finder and needle.\n\nIf this is already an owned iterator, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `alloc` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1491":{"id":"0:1491","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,22],"end":[542,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1492:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[41,0],"end":[110,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:130:1208","0:131:2778","0:132:2788","0:134:2772"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:402":{"id":"0:402","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1274,0],"end":[1274,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8891:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3077-0:879:2661":{"id":"b:1:3077-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:136:1208":{"id":"0:136:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[149,4],"end":[151,5]},"visibility":"public","docs":"Create a new pair of offsets from the given needle.\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.\n\nThis chooses the pair in the needle that is believed to be as\npredictive of an overall match of the needle as possible.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:1000:3157":{"id":"b:1:3092-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1150:827":{"id":"0:1150:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,16],"end":[466,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32768:248-0:1172:2702":{"id":"a:1:32768:248-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:1172:2702":{"id":"b:1:2772-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:393:184":{"id":"0:393:184","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1248,4],"end":[1248,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:432:1217":{"id":"0:432:1217","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[63,4],"end":[65,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3077-0:1180:2707":{"id":"b:1:3077-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13659:3346":{"id":"1:13659:3346","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13661:32739","str::split_at_mut":"1:13660:32736"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13662:32740":{"id":"1:13662:32740","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13661:32739"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8442-0:1251:2707":{"id":"b:1:8442-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:10156","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:3087-0:940:2771":{"id":"b:1:3087-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:423:2041":{"id":"0:423:2041","crate_id":0,"name":"sse2","span":{"filename":"src/arch/x86_64/sse2/mod.rs","begin":[1,0],"end":[6,19]},"visibility":"public","docs":"Algorithms for the `x86_64` target using 128-bit vectors via SSE2.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:424:2362","0:532:2506"],"is_stripped":false}}},"a:1:32768:248-0:1159:2694":{"id":"a:1:32768:248-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13642:36013":{"id":"1:13642:36013","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13640:36012"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3335:10115-0:1230:2694":{"id":"a:1:3335:10115-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2804-0:1130:2602":{"id":"b:1:2804-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13667:27877":{"id":"1:13667:27877","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13668:27964"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44679:14390","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3943-0:1138:2661":{"id":"b:1:3943-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2772-0:1418:2375":{"id":"b:1:2772-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32827:9718-0:964:3157":{"id":"a:1:32827:9718-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:188:2618":{"id":"0:188:2618","crate_id":0,"name":"find","span":{"filename":"src/arch/all/twoway.rs","begin":[137,4],"end":[139,5]},"visibility":"public","docs":"Returns the first occurrence of `needle` in the given `haystack`, or\n`None` if no such occurrence could be found.\n\nThe `needle` given must be the same as the `needle` provided to\n[`Finder::new`].\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{"`Finder::new`":"0:187:1208"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356":{"id":"0:356","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[860,0],"end":[875,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","map_windows","skip_while","size_hint","intersperse","count","partial_cmp_by","chain","max_by","try_reduce","cloned","partition_in_place","fuse","take_while","cmp","intersperse_with","ne","eq_by","zip","max_by_key","find_map","cycle","is_partitioned","inspect","map_while","copied","for_each","next_chunk","rev","last","max","array_chunks","eq","try_find","is_sorted","try_fold","by_ref","map","scan","filter","find","advance_by","min","is_sorted_by","enumerate","sum","position","try_for_each","try_collect","flat_map","filter_map","nth","partial_cmp","is_sorted_by_key","take","product","rposition","min_by","fold","skip","collect_into","flatten","all","peekable","le","step_by","ge","collect","lt","__iterator_get_unchecked","any","cmp_by","unzip","min_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:359:184","0:360:1222","0:362:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8442-0:1408:2374":{"id":"b:1:8442-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:10156","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:3335:10115-0:1138:2661":{"id":"a:1:3335:10115-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1156":{"id":"0:1156","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,16],"end":[515,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13695:32744":{"id":"1:13695:32744","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13326:10079","`DoubleEndedIterator`":"1:8476:133","prim@char":"4:12451:490","str::split":"1:13689:32741"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44423:14023","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:15957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:1180:2707":{"id":"b:1:3092-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:1552:2771":{"id":"b:1:3077-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2775-0:1572:4015":{"id":"b:1:2775-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:915:2702":{"id":"a:1:32768:248-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42628:3941-0:1230:2694":{"id":"a:1:42628:3941-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32827:9718-0:927:2707":{"id":"a:1:32827:9718-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3087-0:964:3157":{"id":"b:1:3087-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:363":{"id":"0:363","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[877,0],"end":[885,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","nth_back","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:8476:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:366:2677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32768:248-0:1000:3157":{"id":"a:1:32768:248-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13657:36015":{"id":"1:13657:36015","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12457:1765","str::slice_mut_unchecked":"1:13658:36016","crate::ops::Index":"1:40083:10347"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13728:36023":{"id":"1:13728:36023","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:986:2771":{"id":"0:986:2771","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/shiftor.rs","begin":[20,0],"end":[23,1]},"visibility":"public","docs":"A forward substring searcher using the Shift-Or algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:174","a:1:32827:9718-0:986:2771","a:1:32768:248-0:986:2771","a:1:3335:10115-0:986:2771","a:1:42628:3941-0:986:2771","a:1:42629:3940-0:986:2771","a:1:3300:260-0:986:2771","b:1:2775-0:986:2771","b:1:2772-0:986:2771","b:1:3092-0:986:2771","b:1:3943-0:986:2771","b:1:3087-0:986:2771","b:1:3081-0:986:2771","b:1:3077-0:986:2771","0:990"]}}},"0:1533:827":{"id":"0:1533:827","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[236,9],"end":[236,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:607:2366":{"id":"0:607:2366","crate_id":0,"name":"memchr3_iter","span":{"filename":"src/memchr.rs","begin":[256,0],"end":[263,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1249":{"id":"0:1249","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,22],"end":[701,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1250:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67:1208":{"id":"0:67:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[363,4],"end":[370,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the two needle bytes\ngiven.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3300:260-0:927:2707":{"id":"a:1:3300:260-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:297:1208":{"id":"0:297:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[46,4],"end":[53,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle byte given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42628:3941-0:1138:2661":{"id":"a:1:42628:3941-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:491:2676":{"id":"0:491:2676","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[679,4],"end":[681,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:1523:3967":{"id":"b:5:784-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32827:9718-0:1172:2702":{"id":"a:1:32827:9718-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13669:15227":{"id":"1:13669:15227","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44659:14388","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1239":{"id":"0:1239","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,16],"end":[661,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1242:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:396:2676":{"id":"0:396:2676","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1259,4],"end":[1261,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:927:2707":{"id":"b:5:784-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3081-0:1130:2602":{"id":"b:1:3081-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:986:2771":{"id":"b:1:3077-0:986:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32827:9718-0:1251:2707":{"id":"a:1:32827:9718-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1269":{"id":"0:1269","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,16],"end":[22,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1267":{"id":"0:1267","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1268:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42628:3941-0:1483:3944":{"id":"a:1:42628:3941-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3335:10115-0:892:2682":{"id":"a:1:3335:10115-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:492":{"id":"0:492","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[684,0],"end":[692,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","nth_back","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:8476:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:495:2677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3335:10115-0:992:2771":{"id":"a:1:3335:10115-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42628:3941-0:892:2682":{"id":"a:1:42628:3941-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3335:10115-0:1538:3972":{"id":"a:1:3335:10115-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3335:10115-0:915:2702":{"id":"a:1:3335:10115-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:3080:4523":{"id":"1:3080:4523","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3054:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32768:248-0:1130:2602":{"id":"a:1:32768:248-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42629:3940-0:986:2771":{"id":"a:1:42629:3940-0:986:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3092-0:1130:2602":{"id":"b:1:3092-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:497":{"id":"0:497","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[694,0],"end":[694,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8891:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2775-0:879:2661":{"id":"b:1:2775-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:991:827":{"id":"0:991:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/shiftor.rs","begin":[19,9],"end":[19,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1534":{"id":"0:1534","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[236,16],"end":[236,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1537:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:118:2677":{"id":"0:118:2677","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[862,4],"end":[867,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:953:494":{"id":"0:953:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,9],"end":[134,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390":{"id":"0:390","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1247,0],"end":[1262,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","map_windows","skip_while","size_hint","intersperse","count","partial_cmp_by","chain","max_by","try_reduce","cloned","partition_in_place","fuse","take_while","cmp","intersperse_with","ne","eq_by","zip","max_by_key","find_map","cycle","is_partitioned","inspect","map_while","copied","for_each","next_chunk","rev","last","max","array_chunks","eq","try_find","is_sorted","try_fold","by_ref","map","scan","filter","find","advance_by","min","is_sorted_by","enumerate","sum","position","try_for_each","try_collect","flat_map","filter_map","nth","partial_cmp","is_sorted_by_key","take","product","rposition","min_by","fold","skip","collect_into","flatten","all","peekable","le","step_by","ge","collect","lt","__iterator_get_unchecked","any","cmp_by","unzip","min_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:393:184","0:394:1222","0:396:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1180:2707":{"id":"0:1180:2707","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1242,0],"end":[1245,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:387:1004","`Three`":"0:1172:2702"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:32827:9718-0:1180:2707","a:1:32768:248-0:1180:2707","a:1:3335:10115-0:1180:2707","a:1:42628:3941-0:1180:2707","a:1:42629:3940-0:1180:2707","a:1:3300:260-0:1180:2707","b:1:2775-0:1180:2707","b:1:2772-0:1180:2707","b:1:3092-0:1180:2707","b:1:3943-0:1180:2707","b:1:2804-0:1180:2707","b:1:3087-0:1180:2707","b:1:8442-0:1180:2707","b:1:3081-0:1180:2707","b:1:3077-0:1180:2707","b:5:784-0:1180:2707","0:1185","0:402","0:1189","0:397","0:390"]}}},"a:1:3300:260-0:1222:2682":{"id":"a:1:3300:260-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:606:2370":{"id":"0:606:2370","crate_id":0,"name":"memrchr2_iter","span":{"filename":"src/memchr.rs","begin":[243,0],"end":[249,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:41350:3861","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:785:2622":{"id":"0:785:2622","crate_id":0,"name":"rfind","span":{"filename":"src/memmem/mod.rs","begin":[563,4],"end":[565,5]},"visibility":"public","docs":"Returns the index of the last occurrence of this needle in the given\nhaystack.\n\nThe haystack may be any type that can be cheaply converted into a\n`&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::FinderRev;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), FinderRev::new(\"foo\").rfind(haystack));\nassert_eq!(Some(4), FinderRev::new(\"bar\").rfind(haystack));\nassert_eq!(None, FinderRev::new(\"quux\").rfind(haystack));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"generic":"B"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3045:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3335:10115-0:1562:3157":{"id":"a:1:3335:10115-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:784-0:940:2771":{"id":"b:5:784-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:58:598":{"id":"0:58:598","crate_id":0,"name":"count","span":{"filename":"src/arch/all/memchr.rs","begin":[322,4],"end":[328,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:900":{"id":"0:900","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,22],"end":[351,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:901:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2775-0:1180:2707":{"id":"b:1:2775-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42629:3940-0:1000:3157":{"id":"a:1:42629:3940-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1558:494":{"id":"0:1558:494","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[386,9],"end":[386,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42628:3941-0:1172:2702":{"id":"a:1:42628:3941-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3077-0:957:2771":{"id":"b:1:3077-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1492:827":{"id":"0:1492:827","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/searcher.rs","begin":[542,22],"end":[542,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13639:36011":{"id":"1:13639:36011","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:1159:2694":{"id":"b:1:2772-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1556":{"id":"0:1556","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[386,9],"end":[386,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1558:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32827:9718-0:1483:3944":{"id":"a:1:32827:9718-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:1483:3944":{"id":"b:1:2772-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42629:3940-0:915:2702":{"id":"a:1:42629:3940-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3943-0:871:2602":{"id":"b:1:3943-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:1180:2707":{"id":"b:1:3943-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:891:827":{"id":"0:891:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[302,16],"end":[302,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:999:827":{"id":"0:999:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/twoway.rs","begin":[36,22],"end":[36,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:1429:2376":{"id":"b:1:3081-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:627":{"id":"0:627","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[370,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:629:1208"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1151:2682":{"id":"0:1151:2682","crate_id":0,"name":"Two","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[516,0],"end":[521,1]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:337","a:1:32827:9718-0:1151:2682","a:1:32768:248-0:1151:2682","a:1:3335:10115-0:1151:2682","a:1:42628:3941-0:1151:2682","a:1:42629:3940-0:1151:2682","a:1:3300:260-0:1151:2682","b:1:2775-0:1151:2682","b:1:2772-0:1151:2682","b:1:3092-0:1151:2682","b:1:3943-0:1151:2682","b:1:2807-0:1151:2682","b:1:2804-0:1151:2682","b:1:3087-0:1151:2682","b:1:3081-0:1151:2682","b:1:3077-0:1151:2682","b:5:784-0:1151:2682","0:1157","0:1156","0:1154"]}}},"b:1:3092-0:1172:2702":{"id":"b:1:3092-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2775-0:1408:2374":{"id":"b:1:2775-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:508:2620":{"id":"0:508:2620","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[821,4],"end":[853,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1437:494":{"id":"0:1437:494","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[431,9],"end":[431,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2804-0:1538:3972":{"id":"b:1:2804-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:1562:3157":{"id":"a:1:32768:248-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1168":{"id":"0:1168","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,16],"end":[854,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1171:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:997":{"id":"0:997","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,16],"end":[36,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2804-0:1151:2682":{"id":"b:1:2804-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:902:2694":{"id":"0:902:2694","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/all/memchr.rs","begin":[568,0],"end":[573,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:892:2682","`Two::iter`":"0:76:1004"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:32827:9718-0:902:2694","a:1:32768:248-0:902:2694","a:1:3335:10115-0:902:2694","a:1:42628:3941-0:902:2694","a:1:42629:3940-0:902:2694","a:1:3300:260-0:902:2694","b:1:2775-0:902:2694","b:1:2772-0:902:2694","b:1:3092-0:902:2694","b:1:3943-0:902:2694","b:1:2804-0:902:2694","b:1:3087-0:902:2694","b:1:8442-0:902:2694","b:1:3081-0:902:2694","b:1:3077-0:902:2694","b:5:784-0:902:2694","0:911","0:88","0:81","0:907"]}}},"0:328:2676":{"id":"0:328:2676","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[493,4],"end":[495,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1217:494":{"id":"0:1217:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,9],"end":[355,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1576":{"id":"0:1576","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,16],"end":[653,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1577:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3077-0:992:2771":{"id":"b:1:3077-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:621":{"id":"0:621","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[341,0],"end":[349,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","nth_back","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:8476:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:623:2677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3081-0:1193:2771":{"id":"b:1:3081-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:595:2369":{"id":"0:595:2369","crate_id":0,"name":"memrchr2","span":{"filename":"src/memchr.rs","begin":[125,0],"end":[133,1]},"visibility":"public","docs":"Search for the last occurrence of two possible bytes in a haystack.\n\nThis returns the index corresponding to the last occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle1 || b == needle2)`, this\nroutine will attempt to use highly optimized vector operations that can be\nan order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the last position of one of two possible bytes in a\nhaystack.\n\n```\nuse memchr::memrchr2;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr2(b'k', b'o', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1222:2682":{"id":"0:1222:2682","crate_id":0,"name":"Two","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[405,0],"end":[405,38]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:468","a:1:32827:9718-0:1222:2682","a:1:32768:248-0:1222:2682","a:1:3335:10115-0:1222:2682","a:1:42628:3941-0:1222:2682","a:1:42629:3940-0:1222:2682","a:1:3300:260-0:1222:2682","b:1:2775-0:1222:2682","b:1:2772-0:1222:2682","b:1:3092-0:1222:2682","b:1:3943-0:1222:2682","b:1:2807-0:1222:2682","b:1:2804-0:1222:2682","b:1:3087-0:1222:2682","b:1:3081-0:1222:2682","b:1:3077-0:1222:2682","b:5:784-0:1222:2682","0:1227","0:1228","0:1225"]}}},"a:1:32827:9718-0:940:2771":{"id":"a:1:32827:9718-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32827:9718-0:1552:2771":{"id":"a:1:32827:9718-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3081-0:1562:3157":{"id":"b:1:3081-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:304:598":{"id":"0:304:598","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[145,4],"end":[153,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:765":{"id":"0:765","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[350,0],"end":[371,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","map_windows","skip_while","size_hint","intersperse","count","partial_cmp_by","chain","max_by","try_reduce","cloned","partition_in_place","fuse","take_while","cmp","intersperse_with","ne","eq_by","zip","max_by_key","find_map","cycle","is_partitioned","inspect","map_while","copied","for_each","next_chunk","rev","last","max","array_chunks","eq","try_find","is_sorted","try_fold","by_ref","map","scan","filter","find","advance_by","min","is_sorted_by","enumerate","sum","position","try_for_each","try_collect","flat_map","filter_map","nth","partial_cmp","is_sorted_by_key","take","product","rposition","min_by","fold","skip","collect_into","flatten","all","peekable","le","step_by","ge","collect","lt","__iterator_get_unchecked","any","cmp_by","unzip","min_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:768:184","0:769:1222"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32827:9718-0:1000:3157":{"id":"a:1:32827:9718-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1167:494":{"id":"0:1167:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,9],"end":[854,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3300:260-0:1151:2682":{"id":"a:1:3300:260-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:448:1004":{"id":"0:448:1004","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[339,4],"end":[341,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3300:260-0:1000:3157":{"id":"a:1:3300:260-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[25,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:538:1208","0:539:2778","0:541:3653","0:542:2618","0:543:2788","0:546:2772","0:547:3580"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13653:30323":{"id":"1:13653:30323","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:613":{"id":"0:613","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[308,0],"end":[339,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","map_windows","skip_while","size_hint","intersperse","count","partial_cmp_by","chain","max_by","try_reduce","cloned","partition_in_place","fuse","take_while","cmp","intersperse_with","ne","eq_by","zip","max_by_key","find_map","cycle","is_partitioned","inspect","map_while","copied","for_each","next_chunk","rev","last","max","array_chunks","eq","try_find","is_sorted","try_fold","by_ref","map","scan","filter","find","advance_by","min","is_sorted_by","enumerate","sum","position","try_for_each","try_collect","flat_map","filter_map","nth","partial_cmp","is_sorted_by_key","take","product","rposition","min_by","fold","skip","collect_into","flatten","all","peekable","le","step_by","ge","collect","lt","__iterator_get_unchecked","any","cmp_by","unzip","min_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:615:184","0:616:1222","0:618:598","0:620:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1197:494":{"id":"0:1197:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3077-0:1209:2661":{"id":"b:1:3077-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:927:2707":{"id":"b:1:3943-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:39:2622":{"id":"0:39:2622","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[81,4],"end":[89,5]},"visibility":"public","docs":"Return the last occurrence of the needle in the given haystack. If no\nsuch occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:1243:2702":{"id":"b:1:3092-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3945:1865":{"id":"1:3945:1865","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40252:14154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3077-0:1193:2771":{"id":"b:1:3077-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42628:3941-0:986:2771":{"id":"a:1:42628:3941-0:986:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:1523:3967":{"id":"b:1:2772-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:99:2620":{"id":"0:99:2620","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[701,4],"end":[741,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:457:598":{"id":"0:457:598","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[373,4],"end":[379,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3077-0:964:3157":{"id":"b:1:3077-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42629:3940-0:1230:2694":{"id":"a:1:42629:3940-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:955":{"id":"0:955","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,22],"end":[134,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:956:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:288:2362":{"id":"0:288:2362","crate_id":0,"name":"memchr","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1,0],"end":[1352,1]},"visibility":"public","docs":"This module defines 256-bit vector implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers are\ntypically much faster than scalar routines accomplishing the same task.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:1172:2702","`One::count`":"0:304:598","`One`":"0:1130:2602","`Two`":"0:1151:2682","`One::find`":"0:300:2618","`OneIter`":"0:1138:2661"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1130:2602","0:1138:2661","0:1151:2682","0:1159:2694","0:1172:2702","0:1180:2707"],"is_stripped":false}}},"a:1:32827:9718-0:1523:3967":{"id":"a:1:32827:9718-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3087-0:1523:3967":{"id":"b:1:3087-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:1562:3157":{"id":"b:1:3943-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:963:827":{"id":"0:963:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,16],"end":[68,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:1251:2707":{"id":"b:1:2775-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2772-0:1230:2694":{"id":"b:1:2772-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5724:10256":{"id":"5:5724:10256","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:2533":{"id":"0:212:2533","crate_id":0,"name":"is_equal_raw","span":{"filename":"src/arch/all/mod.rs","begin":[108,0],"end":[158,1]},"visibility":"public","docs":"Compare `n` bytes at the given pointers for equality.\n\nThis returns true if and only if `*x.add(i) == *y.add(i)` for all\n`0 <= i < n`.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.\n\n# Motivation\n\nWhy not use slice equality instead? Well, slice equality usually results in\na call out to the current platform's `libc` which might not be inlineable\nor have other overhead. This routine isn't guaranteed to be a win, but it\nmight be in some cases.\n\n# Safety\n\n* Both `x` and `y` must be valid for reads of up to `n` bytes.\n* Both `x` and `y` must point to an initialized value.\n* Both `x` and `y` must each point to an allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object. `x` and `y` do not need to point to the same allocated\nobject, but they may.\n* Both `x` and `y` must be _derived from_ a pointer to their respective\nallocated objects.\n* The distance between `x` and `x+n` must not overflow `isize`. Similarly\nfor `y` and `y+n`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["y",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["n",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2620":{"id":"0:72:2620","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[437,4],"end":[477,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:892:2682":{"id":"b:1:3092-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3300:260-0:949:2773":{"id":"a:1:3300:260-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3081-0:949:2773":{"id":"b:1:3081-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:952":{"id":"0:952","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,9],"end":[134,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:953:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3087-0:1000:3157":{"id":"b:1:3087-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:1151:2682":{"id":"a:1:32768:248-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42628:3941-0:1159:2694":{"id":"a:1:42628:3941-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:603:2373":{"id":"0:603:2373","crate_id":0,"name":"memrchr_iter","span":{"filename":"src/memchr.rs","begin":[223,0],"end":[225,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:41350:3861","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:1483:3944":{"id":"b:1:3081-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2804-0:1523:3967":{"id":"b:1:2804-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:871:2602":{"id":"b:1:3077-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:134:2772":{"id":"0:134:2772","crate_id":0,"name":"pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[107,4],"end":[109,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3077-0:1523:3967":{"id":"b:1:3077-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:760":{"id":"0:760","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[322,0],"end":[348,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:764:3843"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:324:1222":{"id":"0:324:1222","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[476,4],"end":[481,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:1180:2707":{"id":"b:1:2772-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2775-0:1538:3972":{"id":"b:1:2775-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2775-0:986:2771":{"id":"b:1:2775-0:986:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:359:184":{"id":"0:359:184","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[861,4],"end":[861,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"a:1:32827:9718-0:1180:2707":{"id":"a:1:32827:9718-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3092-0:1572:4015":{"id":"b:1:3092-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8442-0:1159:2694":{"id":"b:1:8442-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:10156","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:42629:3940-0:992:2771":{"id":"a:1:42629:3940-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1412":{"id":"0:1412","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[287,9],"end":[287,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1414:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42629:3940-0:1138:2661":{"id":"a:1:42629:3940-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:784-0:1264:2771":{"id":"b:5:784-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:743:3971":{"id":"0:743:3971","crate_id":0,"name":"rfind_iter","span":{"filename":"src/memmem/mod.rs","begin":[150,0],"end":[155,1]},"visibility":"public","docs":"Returns a reverse iterator over all non-overlapping occurrences of a\nsubstring in a haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet mut it = memmem::rfind_iter(haystack, b\"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"N"}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"type":{"bounds":[{"outlives":"'n"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:3045:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:957:2771":{"id":"b:5:784-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1155:494":{"id":"0:1155:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,9],"end":[515,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:946":{"id":"0:946","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,16],"end":[34,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:471:3653":{"id":"0:471:3653","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[453,4],"end":[462,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Two::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Two::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Two::new`":"0:469:1208"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:914:827":{"id":"0:914:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[567,16],"end":[567,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:957:2771":{"id":"b:1:2775-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1189":{"id":"0:1189","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,16],"end":[1241,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1192:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:957:2771":{"id":"0:957:2771","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[69,0],"end":[77,1]},"visibility":"public","docs":"A forward substring searcher using the Rabin-Karp algorithm.\n\nNote that, as a lower level API, a `Finder` does not have access to the\nneedle it was constructed with. For this reason, executing a search\nwith a `Finder` requires passing both the needle and the haystack,\nwhere the needle is exactly equivalent to the one given to the `Finder`\nat construction time. This design was chosen so that callers can have\nmore precise control over where and how many times a needle is stored.\nFor example, in cases where Rabin-Karp is just one of several possible\nsubstring search algorithms.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:154","a:1:32827:9718-0:957:2771","a:1:32768:248-0:957:2771","a:1:3335:10115-0:957:2771","a:1:42628:3941-0:957:2771","a:1:42629:3940-0:957:2771","a:1:3300:260-0:957:2771","b:1:2775-0:957:2771","b:1:2772-0:957:2771","b:1:3092-0:957:2771","b:1:3943-0:957:2771","b:1:2804-0:957:2771","b:1:3087-0:957:2771","b:1:3081-0:957:2771","b:1:3077-0:957:2771","b:5:784-0:957:2771","0:960","0:962"]}}},"0:757:184":{"id":"0:757:184","crate_id":0,"name":"Item","span":{"filename":"src/memmem/mod.rs","begin":[274,4],"end":[274,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:5:784-0:1138:2661":{"id":"b:5:784-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3081-0:957:2771":{"id":"b:1:3081-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3300:260-0:964:3157":{"id":"a:1:3300:260-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1226:494":{"id":"0:1226:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,9],"end":[404,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2807-0:892:2682":{"id":"b:1:2807-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:1538:3972":{"id":"a:1:32768:248-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:597:2365":{"id":"0:597:2365","crate_id":0,"name":"memchr3","span":{"filename":"src/memchr.rs","begin":[158,0],"end":[171,1]},"visibility":"public","docs":"Search for the first occurrence of three possible bytes in a haystack.\n\nThis returns the index corresponding to the first occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle1 || b == needle2 || b == needle3)`,\nthis routine will attempt to use highly optimized vector operations that\ncan be an order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the first position of one of three possible bytes in\na haystack.\n\n```\nuse memchr::memchr3;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr3(b'k', b'q', b'u', haystack), Some(4));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:655":{"id":"0:655","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[496,0],"end":[496,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8891:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13764:32667":{"id":"1:13764:32667","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:39884"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3087-0:1264:2771":{"id":"b:1:3087-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3092-0:871:2602":{"id":"b:1:3092-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:1251:2707":{"id":"a:1:32768:248-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:17-0:609:2372":{"id":"0:17-0:609:2372","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,48],"end":[205,61]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr3_iter","name":"memrchr3_iter","id":"0:609:2372","glob":false}}},"b:1:3077-0:1000:3157":{"id":"b:1:3077-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:76:1004":{"id":"0:76:1004","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[541,4],"end":[543,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of one of the needle bytes in\nthe given haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:780:2519":{"id":"0:780:2519","crate_id":0,"name":"needle","span":{"filename":"src/memmem/mod.rs","begin":[505,4],"end":[507,5]},"visibility":"public","docs":"Returns the needle that this finder searches for.\n\nNote that the lifetime of the needle returned is tied to the lifetime\nof the finder, and may be shorter than the `'n` lifetime. Namely, a\nfinder's needle can be either borrowed or owned, so the lifetime of the\nneedle returned must necessarily be the shorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3943-0:1222:2682":{"id":"b:1:3943-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:1408:2374":{"id":"a:1:32768:248-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13748:36030":{"id":"1:13748:36030","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12451:490","self::pattern":"1:13326:10079"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:15957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1247:494":{"id":"0:1247:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,9],"end":[701,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3943-0:957:2771":{"id":"b:1:3943-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1260":{"id":"0:1260","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,16],"end":[966,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1263:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:85:1222":{"id":"0:85:1222","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[579,4],"end":[584,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32768:248-0:964:3157":{"id":"a:1:32768:248-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:1138:2661":{"id":"b:1:2772-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2804-0:915:2702":{"id":"b:1:2804-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1440:827":{"id":"0:1440:827","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[431,16],"end":[431,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13678:32753":{"id":"1:13678:32753","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12451:490","self::pattern":"1:13326:10079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:15957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32827:9718-0:1130:2602":{"id":"a:1:32827:9718-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3077-0:1408:2374":{"id":"b:1:3077-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1214":{"id":"0:1214","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,9],"end":[355,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1217:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:901:827":{"id":"0:901:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[351,22],"end":[351,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32768:248-0:1552:2771":{"id":"a:1:32768:248-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:187:1208":{"id":"0:187:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/all/twoway.rs","begin":[114,4],"end":[126,5]},"visibility":"public","docs":"Create a searcher that finds occurrences of the given `needle`.\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:793":{"id":"0:793","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[658,0],"end":[713,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:794:1208","0:795:4016","0:798:4066","0:802:4047","0:805:4062"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3081-0:1172:2702":{"id":"b:1:3081-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3081-0:1000:3157":{"id":"b:1:3081-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1177":{"id":"0:1177","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,16],"end":[894,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:178:2618":{"id":"0:178:2618","crate_id":0,"name":"find","span":{"filename":"src/arch/all/shiftor.rs","begin":[61,4],"end":[74,5]},"visibility":"public","docs":"Return the first occurrence of the needle given to `Finder::new` in\nthe `haystack` given. If no such occurrence exists, then `None` is\nreturned.\n\nUnlike most other substring search implementations in this crate, this\nfinder does not require passing the needle at search time. A match can\nbe determined without the needle at all since the required information\nis already encoded into this finder at construction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3335:10115-0:1243:2702":{"id":"a:1:3335:10115-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3092-0:1429:2376":{"id":"b:1:3092-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:1130:2602":{"id":"b:1:3077-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42629:3940-0:1429:2376":{"id":"a:1:42629:3940-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3081-0:892:2682":{"id":"b:1:3081-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3092-0:1408:2374":{"id":"b:1:3092-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:155:1208":{"id":"0:155:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[87,4],"end":[99,5]},"visibility":"public","docs":"Create a new Rabin-Karp forward searcher for the given `needle`.\n\nThe needle may be empty. The empty needle matches at every byte offset.\n\nNote that callers must pass the same needle to all search calls using\nthis `Finder`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:379:2620":{"id":"0:379:2620","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1037,4],"end":[1079,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:957:2771":{"id":"b:1:2772-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:414:2778":{"id":"0:414:2778","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[49,4],"end":[58,5]},"visibility":"public","docs":"Create a new \"packed pair\" finder using the pair of bytes given.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.\n\nIf AVX2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:647:184":{"id":"0:647:184","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[462,4],"end":[462,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"1:13769:15863":{"id":"1:13769:15863","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5150:15863"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44713:14284","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3943-0:1193:2771":{"id":"b:1:3943-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:774:2618":{"id":"0:774:2618","crate_id":0,"name":"find","span":{"filename":"src/memmem/mod.rs","begin":[424,4],"end":[428,5]},"visibility":"public","docs":"Returns the index of the first occurrence of this needle in the given\nhaystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::Finder;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), Finder::new(\"foo\").find(haystack));\nassert_eq!(Some(4), Finder::new(\"bar\").find(haystack));\nassert_eq!(None, Finder::new(\"quux\").find(haystack));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13645:2747":{"id":"1:13645:2747","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12873:3422"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2804-0:1562:3157":{"id":"b:1:2804-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1579:60":{"id":"0:1579:60","crate_id":0,"name":"default","span":{"filename":"src/memmem/mod.rs","begin":[653,23],"end":[653,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32827:9718-0:1562:3157":{"id":"a:1:32827:9718-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:286:2032":{"id":"0:286:2032","crate_id":0,"name":"x86_64","span":{"filename":"src/arch/x86_64/mod.rs","begin":[1,0],"end":[8,22]},"visibility":"public","docs":"Vector algorithms for the `x86_64` target.","links":{},"attrs":["#[cfg(target_arch = \"x86_64\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:287:2117","0:423:2041"],"is_stripped":false}}},"a:1:3300:260-0:1552:2771":{"id":"a:1:3300:260-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:527:2677":{"id":"0:527:2677","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[991,4],"end":[996,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13757:36033":{"id":"1:13757:36033","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13287:148","`FromStr`":"1:13286:15659"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42667:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13286:15659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13286:15659","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:1159:2694":{"id":"b:1:3081-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3087-0:949:2773":{"id":"b:1:3087-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32827:9718-0:1209:2661":{"id":"a:1:32827:9718-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:1130:2602":{"id":"b:1:2772-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3300:260-0:1230:2694":{"id":"a:1:3300:260-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3300:260-0:1264:2771":{"id":"a:1:3300:260-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:489:1222":{"id":"0:489:1222","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[671,4],"end":[676,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3087-0:1159:2694":{"id":"b:1:3087-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2772-0:1264:2771":{"id":"b:1:2772-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:1201:2602":{"id":"b:1:3077-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1206":{"id":"0:1206","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,16],"end":[28,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:114:2676":{"id":"0:114:2676","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[855,4],"end":[857,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:506:2622":{"id":"0:506:2622","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[787,4],"end":[795,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:1000:3157":{"id":"b:1:2775-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2807-0:915:2702":{"id":"b:1:2807-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42629:3940-0:892:2682":{"id":"a:1:42629:3940-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:300:2618":{"id":"0:300:2618","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[117,4],"end":[125,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:1201:2602":{"id":"b:1:2775-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2807-0:1264:2771":{"id":"b:1:2807-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42629:3940-0:1572:4015":{"id":"a:1:42629:3940-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13745:32754":{"id":"1:13745:32754","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12451:490","self::pattern":"1:13326:10079"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:15957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1147":{"id":"0:1147","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,16],"end":[466,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1150:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:84:184":{"id":"0:84:184","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[576,4],"end":[576,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:468":{"id":"0:468","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[407,0],"end":[648,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:469:1208","0:470:1217","0:471:3653","0:472:2618","0:474:2622","0:476:2620","0:478:2623","0:482:1004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2804-0:1251:2707":{"id":"b:1:2804-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42628:3941-0:940:2771":{"id":"a:1:42628:3941-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:37:2618":{"id":"0:37:2618","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[65,4],"end":[73,5]},"visibility":"public","docs":"Return the first occurrence of the needle in the given haystack. If no\nsuch occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:353:1004":{"id":"0:353:1004","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[838,4],"end":[840,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1270":{"id":"0:1270","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1271:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3335:10115-0:964:3157":{"id":"a:1:3335:10115-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:936":{"id":"0:936","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[835,16],"end":[835,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:939:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3300:260-0:986:2771":{"id":"a:1:3300:260-0:986:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2775-0:964:3157":{"id":"b:1:2775-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:924":{"id":"0:924","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,16],"end":[607,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2772-0:992:2771":{"id":"b:1:2772-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1228":{"id":"0:1228","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,22],"end":[404,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1229:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32768:248-0:902:2694":{"id":"a:1:32768:248-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3087-0:1552:2771":{"id":"b:1:3087-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:1572:4015":{"id":"b:1:3077-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:1418:2375":{"id":"a:1:32768:248-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3087-0:1201:2602":{"id":"b:1:3087-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:629:1208":{"id":"0:629:1208","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[377,4],"end":[383,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:888":{"id":"0:888","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[302,16],"end":[302,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:891:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3081-0:915:2702":{"id":"b:1:3081-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:422:3580":{"id":"0:422:3580","crate_id":0,"name":"min_haystack_len","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[199,4],"end":[212,5]},"visibility":"public","docs":"Returns the minimum haystack length that this `Finder` can search.\n\nUsing a haystack with length smaller than this in a search will result\nin a panic. The reason for this restriction is that this finder is\nmeant to be a low-level component that is part of a larger substring\nstrategy. In that sense, it avoids trying to handle all cases and\ninstead only handles the cases that it can handle very well.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2804-0:1264:2771":{"id":"b:1:2804-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13734:36026":{"id":"1:13734:36026","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42629:3940-0:1193:2771":{"id":"a:1:42629:3940-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3092-0:957:2771":{"id":"b:1:3092-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:902:2694":{"id":"b:1:3943-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1256":{"id":"0:1256","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,9],"end":[966,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1259:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42629:3940-0:1408:2374":{"id":"a:1:42629:3940-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:521:1222":{"id":"0:521:1222","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[976,4],"end":[981,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1003":{"id":"0:1003","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1004:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:964:3157":{"id":"0:964:3157","crate_id":0,"name":"FinderRev","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[180,0],"end":[180,29]},"visibility":"public","docs":"A reverse substring searcher using the Rabin-Karp algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:158","a:1:32827:9718-0:964:3157","a:1:32768:248-0:964:3157","a:1:3335:10115-0:964:3157","a:1:42628:3941-0:964:3157","a:1:42629:3940-0:964:3157","a:1:3300:260-0:964:3157","b:1:2775-0:964:3157","b:1:2772-0:964:3157","b:1:3092-0:964:3157","b:1:3943-0:964:3157","b:1:2804-0:964:3157","b:1:3087-0:964:3157","b:1:3081-0:964:3157","b:1:3077-0:964:3157","b:5:784-0:964:3157","0:969","0:967"]}}},"0:332:2677":{"id":"0:332:2677","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[500,4],"end":[505,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:343:2622":{"id":"0:343:2622","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[620,4],"end":[628,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:879:2661":{"id":"b:1:3081-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:922":{"id":"0:922","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,9],"end":[607,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:923:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32768:248-0:1264:2771":{"id":"a:1:32768:248-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:465":{"id":"0:465","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[397,0],"end":[397,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8891:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:798:4066":{"id":"0:798:4066","crate_id":0,"name":"build_forward_with_ranker","span":{"filename":"src/memmem/mod.rs","begin":[676,4],"end":[690,5]},"visibility":"public","docs":"Build a forward finder using the given needle and a custom heuristic for\ndetermining the frequency of a given byte in the dataset.\nSee [`HeuristicFrequencyRank`] for more details.","links":{"`HeuristicFrequencyRank`":"0:142:2830"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ranker",{"generic":"R"}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:3045:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[617,0],"end":[822,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:94:1208","0:95:2618","0:97:2622","0:99:2620","0:101:2623","0:103:1004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:209:2517":{"id":"0:209:2517","crate_id":0,"name":"is_prefix","span":{"filename":"src/arch/all/mod.rs","begin":[26,0],"end":[29,1]},"visibility":"public","docs":"Returns true if and only if `needle` is a prefix of `haystack`.\n\nThis uses a latency optimized variant of `memcmp` internally which *might*\nmake this faster for very short strings.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3300:260-0:915:2702":{"id":"a:1:3300:260-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:42:2620":{"id":"0:42:2620","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[127,4],"end":[171,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3300:260-0:1429:2376":{"id":"a:1:3300:260-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:460":{"id":"0:460","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[387,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","nth_back","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:8476:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:463:2677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1130:2602":{"id":"0:1130:2602","crate_id":0,"name":"One","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[29,0],"end":[34,1]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:296","a:1:32827:9718-0:1130:2602","a:1:32768:248-0:1130:2602","a:1:3335:10115-0:1130:2602","a:1:42628:3941-0:1130:2602","a:1:42629:3940-0:1130:2602","a:1:3300:260-0:1130:2602","b:1:2775-0:1130:2602","b:1:2772-0:1130:2602","b:1:3092-0:1130:2602","b:1:3943-0:1130:2602","b:1:2807-0:1130:2602","b:1:2804-0:1130:2602","b:1:3087-0:1130:2602","b:1:3081-0:1130:2602","b:1:3077-0:1130:2602","b:5:784-0:1130:2602","0:1135","0:1136","0:1133"]}}},"b:1:2775-0:1222:2682":{"id":"b:1:2775-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1243:2702":{"id":"0:1243:2702","crate_id":0,"name":"Three","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[702,0],"end":[702,42]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:500","a:1:32827:9718-0:1243:2702","a:1:32768:248-0:1243:2702","a:1:3335:10115-0:1243:2702","a:1:42628:3941-0:1243:2702","a:1:42629:3940-0:1243:2702","a:1:3300:260-0:1243:2702","b:1:2775-0:1243:2702","b:1:2772-0:1243:2702","b:1:3092-0:1243:2702","b:1:3943-0:1243:2702","b:1:2807-0:1243:2702","b:1:2804-0:1243:2702","b:1:3087-0:1243:2702","b:1:3081-0:1243:2702","b:1:3077-0:1243:2702","b:5:784-0:1243:2702","0:1246","0:1248","0:1249"]}}},"0:1263:827":{"id":"0:1263:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,16],"end":[966,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1264:2771":{"id":"0:1264:2771","crate_id":0,"name":"Finder","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[23,0],"end":[23,47]},"visibility":"public","docs":"A \"packed pair\" finder that uses 128-bit vector operations.\n\nThis finder picks two bytes that it believes have high predictive power\nfor indicating an overall match of a needle. Depending on whether\n`Finder::find` or `Finder::find_prefilter` is used, it reports offsets\nwhere the needle matches or could match. In the prefilter case, candidates\nare reported whenever the [`Pair`] of bytes given matches.","links":{"`Pair`":"0:949:2773"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:537","a:1:32827:9718-0:1264:2771","a:1:32768:248-0:1264:2771","a:1:3335:10115-0:1264:2771","a:1:42628:3941-0:1264:2771","a:1:42629:3940-0:1264:2771","a:1:3300:260-0:1264:2771","b:1:2775-0:1264:2771","b:1:2772-0:1264:2771","b:1:3092-0:1264:2771","b:1:3943-0:1264:2771","b:1:2807-0:1264:2771","b:1:2804-0:1264:2771","b:1:3087-0:1264:2771","b:1:3081-0:1264:2771","b:1:3077-0:1264:2771","b:5:784-0:1264:2771","0:1269","0:1267","0:1270"]}}},"a:1:42628:3941-0:1429:2376":{"id":"a:1:42628:3941-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42628:3941-0:1538:3972":{"id":"a:1:42628:3941-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:792:2519":{"id":"0:792:2519","crate_id":0,"name":"needle","span":{"filename":"src/memmem/mod.rs","begin":[643,4],"end":[645,5]},"visibility":"public","docs":"Returns the needle that this finder searches for.\n\nNote that the lifetime of the needle returned is tied to the lifetime\nof the finder, and may be shorter than the `'n` lifetime. Namely, a\nfinder's needle can be either borrowed or owned, so the lifetime of the\nneedle returned must necessarily be the shorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:184":{"id":"0:111:184","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[844,4],"end":[844,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:2804-0:940:2771":{"id":"b:1:2804-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2804-0:1000:3157":{"id":"b:1:2804-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:1429:2376":{"id":"b:1:3943-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:786:3832":{"id":"5:786:3832","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:474:2622":{"id":"0:474:2622","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[486,4],"end":[494,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42628:3941-0:1243:2702":{"id":"a:1:42628:3941-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13685:2622":{"id":"1:13685:2622","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42537:202","prim@char":"4:12451:490","self::pattern":"1:13326:10079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:15957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3335:10115-0:1429:2376":{"id":"a:1:3335:10115-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13760:32664":{"id":"1:13760:32664","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40436:10120","Self::is_ascii":"1:13759:3860"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40436:10120","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:884":{"id":"0:884","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[302,9],"end":[302,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:887:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3943-0:1130:2602":{"id":"b:1:3943-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:532:2506":{"id":"0:532:2506","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[1,0],"end":[232,1]},"visibility":"public","docs":"A 128-bit vector implementation of the \"packed pair\" SIMD algorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1264:2771"],"is_stripped":false}}},"b:1:3943-0:1408:2374":{"id":"b:1:3943-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:783:1208":{"id":"0:783:1208","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[532,4],"end":[534,5]},"visibility":"public","docs":"Create a new reverse finder for the given needle.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:3045:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:787:3971":{"id":"0:787:3971","crate_id":0,"name":"rfind_iter","span":{"filename":"src/memmem/mod.rs","begin":[595,4],"end":[600,5]},"visibility":"public","docs":"Returns a reverse iterator over all occurrences of a substring in a\nhaystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::FinderRev;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet finder = FinderRev::new(b\"foo\");\nlet mut it = finder.rfind_iter(haystack);\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13754:36032":{"id":"1:13754:36032","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12451:490","self::pattern":"1:13326:10079"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:15957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:543:2788":{"id":"0:543:2788","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[114,4],"end":[117,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:547:3580"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:892:2682":{"id":"b:1:2772-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:781":{"id":"0:781","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[529,0],"end":[646,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:783:1208","0:785:2622","0:787:3971","0:790:3843","0:791:351","0:792:2519"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:372:1208":{"id":"0:372:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[912,4],"end":[919,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3087-0:1180:2707":{"id":"b:1:3087-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2807-0:1483:3944":{"id":"b:1:2807-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3300:260-0:1251:2707":{"id":"a:1:3300:260-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:8445:10156":{"id":"1:8445:10156","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"a:1:42629:3940-0:871:2602":{"id":"a:1:42629:3940-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13661:32739":{"id":"1:13661:32739","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13662:32740"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:871:2602":{"id":"b:1:3081-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:47:1004":{"id":"0:47:1004","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[276,4],"end":[278,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:547:3580":{"id":"0:547:3580","crate_id":0,"name":"min_haystack_len","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[173,4],"end":[175,5]},"visibility":"public","docs":"Returns the minimum haystack length that this `Finder` can search.\n\nUsing a haystack with length smaller than this in a search will result\nin a panic. The reason for this restriction is that this finder is\nmeant to be a low-level component that is part of a larger substring\nstrategy. In that sense, it avoids trying to handle all cases and\ninstead only handles the cases that it can handle very well.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3300:260-0:902:2694":{"id":"a:1:3300:260-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:968:494":{"id":"0:968:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,9],"end":[179,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42628:3941-0:957:2771":{"id":"a:1:42628:3941-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13732:36025":{"id":"1:13732:36025","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42628:3941-0:1523:3967":{"id":"a:1:42628:3941-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:784-0:964:3157":{"id":"b:5:784-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2804-0:1572:4015":{"id":"b:1:2804-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2804-0:992:2771":{"id":"b:1:2804-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:615:184":{"id":"0:615:184","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[309,4],"end":[309,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:3087-0:1483:3944":{"id":"b:1:3087-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1572:4015":{"id":"0:1572:4015","crate_id":0,"name":"FinderBuilder","span":{"filename":"src/memmem/mod.rs","begin":[654,0],"end":[656,1]},"visibility":"public","docs":"A builder for constructing non-default forward or reverse memmem finders.\n\nA builder is primarily useful for configuring a substring searcher.\nCurrently, the only configuration exposed is the ability to disable\nheuristic prefilters used to speed up certain searches.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:793","a:1:32827:9718-0:1572:4015","a:1:32768:248-0:1572:4015","a:1:3335:10115-0:1572:4015","a:1:42628:3941-0:1572:4015","a:1:42629:3940-0:1572:4015","a:1:3300:260-0:1572:4015","b:1:2775-0:1572:4015","b:1:2772-0:1572:4015","b:1:3092-0:1572:4015","b:1:3943-0:1572:4015","b:1:2804-0:1572:4015","b:1:3087-0:1572:4015","b:1:3081-0:1572:4015","b:1:3077-0:1572:4015","b:5:784-0:1572:4015","0:1576","0:1574","0:1578"]}}},"b:1:2772-0:1222:2682":{"id":"b:1:2772-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:517":{"id":"0:517","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[972,0],"end":[987,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","map_windows","skip_while","size_hint","intersperse","count","partial_cmp_by","chain","max_by","try_reduce","cloned","partition_in_place","fuse","take_while","cmp","intersperse_with","ne","eq_by","zip","max_by_key","find_map","cycle","is_partitioned","inspect","map_while","copied","for_each","next_chunk","rev","last","max","array_chunks","eq","try_find","is_sorted","try_fold","by_ref","map","scan","filter","find","advance_by","min","is_sorted_by","enumerate","sum","position","try_for_each","try_collect","flat_map","filter_map","nth","partial_cmp","is_sorted_by_key","take","product","rposition","min_by","fold","skip","collect_into","flatten","all","peekable","le","step_by","ge","collect","lt","__iterator_get_unchecked","any","cmp_by","unzip","min_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:520:184","0:521:1222","0:523:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1562:3157":{"id":"0:1562:3157","crate_id":0,"name":"FinderRev","span":{"filename":"src/memmem/mod.rs","begin":[524,0],"end":[527,1]},"visibility":"public","docs":"A single substring reverse searcher fixed to a particular needle.\n\nThe purpose of this type is to permit callers to construct a substring\nsearcher that can be used to search haystacks without the overhead of\nconstructing the searcher in the first place. This is a somewhat niche\nconcern when it's necessary to re-use the same needle to search multiple\ndifferent haystacks with as little overhead as possible. In general,\nusing [`rfind`] is good enough, but `FinderRev` is useful when you can\nmeaningfully observe searcher construction time in a profile.\n\nWhen the `std` feature is enabled, then this type has an `into_owned`\nversion which permits building a `FinderRev` that is not connected to\nthe lifetime of its needle.","links":{"`rfind`":"0:748:2622"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:781","a:1:32827:9718-0:1562:3157","a:1:32768:248-0:1562:3157","a:1:3335:10115-0:1562:3157","a:1:42628:3941-0:1562:3157","a:1:42629:3940-0:1562:3157","a:1:3300:260-0:1562:3157","b:1:2775-0:1562:3157","b:1:2772-0:1562:3157","b:1:3092-0:1562:3157","b:1:3943-0:1562:3157","b:1:2804-0:1562:3157","b:1:3087-0:1562:3157","b:1:3081-0:1562:3157","b:1:3077-0:1562:3157","b:5:784-0:1562:3157","0:1569","0:1566"]}}},"a:1:42628:3941-0:879:2661":{"id":"a:1:42628:3941-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3092-0:1138:2661":{"id":"b:1:3092-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:665-0:1483:3944":{"id":"0:665-0:1483:3944","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[69,0],"end":[69,62]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memmem::searcher::PrefilterConfig","name":"Prefilter","id":"0:1483:3944","glob":false}}},"0:141:2784":{"id":"0:141:2784","crate_id":0,"name":"index2","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[244,4],"end":[246,5]},"visibility":"public","docs":"Returns the second offset of the pair.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13668:27964":{"id":"1:13668:27964","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13667:27877"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44688:14391","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13710:32750":{"id":"1:13710:32750","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42629:3940-0:879:2661":{"id":"a:1:42629:3940-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[498,0],"end":[506,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","nth_back","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:8476:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:332:2677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:362:2676":{"id":"0:362:2676","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[872,4],"end":[874,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3335:10115-0:1193:2771":{"id":"a:1:3335:10115-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1429:2376":{"id":"0:1429:2376","crate_id":0,"name":"Memchr3","span":{"filename":"src/memchr.rs","begin":[432,0],"end":[437,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr2_iter`] or `[memrchr2_iter`]\nfunctions. It can also be created with the [`Memchr3::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`Memchr3::new`":"0:644:1208","`memchr2_iter`":"0:604:2364"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:642","a:1:32827:9718-0:1429:2376","a:1:32768:248-0:1429:2376","a:1:3335:10115-0:1429:2376","a:1:42628:3941-0:1429:2376","a:1:42629:3940-0:1429:2376","a:1:3300:260-0:1429:2376","b:1:2775-0:1429:2376","b:1:2772-0:1429:2376","b:1:3092-0:1429:2376","b:1:3943-0:1429:2376","b:1:2804-0:1429:2376","b:1:3087-0:1429:2376","b:1:8442-0:1429:2376","b:1:3081-0:1429:2376","b:1:3077-0:1429:2376","b:5:784-0:1429:2376","0:651","0:1438","0:1435","0:645","0:655"]}}},"0:1577:827":{"id":"0:1577:827","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[653,16],"end":[653,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:967":{"id":"0:967","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,9],"end":[179,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:968:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:784-0:1172:2702":{"id":"b:5:784-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13742:31665":{"id":"1:13742:31665","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12451:490","self::pattern":"1:13326:10079"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3077-0:1172:2702":{"id":"b:1:3077-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:441:2623":{"id":"0:441:2623","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[212,4],"end":[233,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2804-0:1201:2602":{"id":"b:1:2804-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42629:3940-0:1222:2682":{"id":"a:1:42629:3940-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1137:827":{"id":"0:1137:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:992:2771":{"id":"b:1:2775-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:633:1222":{"id":"0:633:1222","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[390,4],"end":[397,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:1230:2694":{"id":"b:1:2775-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1489:494":{"id":"0:1489:494","crate_id":0,"name":"clone","span":{"filename":"src/memmem/searcher.rs","begin":[542,9],"end":[542,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:1552:2771":{"id":"b:1:2775-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97:2622":{"id":"0:97:2622","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[667,4],"end":[675,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:421:2772":{"id":"0:421:2772","crate_id":0,"name":"pair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42628:3941-0:1264:2771":{"id":"a:1:42628:3941-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13704:32746":{"id":"1:13704:32746","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12451:490","self::pattern":"1:13326:10079","str::rsplitn":"1:13707:32748"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44509:14380","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13647:350":{"id":"1:13647:350","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13648:32717","`u8`":"4:12470:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:1251:2707":{"id":"b:1:3092-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3335:10115-0:1483:3944":{"id":"a:1:3335:10115-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1523:3967":{"id":"0:1523:3967","crate_id":0,"name":"FindIter","span":{"filename":"src/memmem/mod.rs","begin":[237,0],"end":[242,1]},"visibility":"public","docs":"An iterator over non-overlapping substring matches.\n\nMatches are reported by the byte offset at which they begin.\n\n`'h` is the lifetime of the haystack while `'n` is the lifetime of the\nneedle.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:749","a:1:32827:9718-0:1523:3967","a:1:32768:248-0:1523:3967","a:1:3335:10115-0:1523:3967","a:1:42628:3941-0:1523:3967","a:1:42629:3940-0:1523:3967","a:1:3300:260-0:1523:3967","b:1:2775-0:1523:3967","b:1:2772-0:1523:3967","b:1:3092-0:1523:3967","b:1:3943-0:1523:3967","b:1:2804-0:1523:3967","b:1:3087-0:1523:3967","b:1:8442-0:1523:3967","b:1:3081-0:1523:3967","b:1:3077-0:1523:3967","b:5:784-0:1523:3967","0:1530","0:754","0:1534"]}}},"b:1:2804-0:927:2707":{"id":"b:1:2804-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3087-0:1222:2682":{"id":"b:1:3087-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3335:10115-0:1172:2702":{"id":"a:1:3335:10115-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1154":{"id":"0:1154","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,9],"end":[515,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1155:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1171:827":{"id":"0:1171:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,16],"end":[854,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1428:827":{"id":"0:1428:827","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[363,16],"end":[363,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13689:32741":{"id":"1:13689:32741","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13326:10079","`DoubleEndedIterator`":"1:8476:133","prim@char":"4:12451:490","str::split_whitespace":"1:13667:27877","str::rsplit":"1:13695:32744"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44405:14018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2804-0:892:2682":{"id":"b:1:2804-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3300:260-0:1523:3967":{"id":"a:1:3300:260-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:176:1208":{"id":"0:176:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/all/shiftor.rs","begin":[32,4],"end":[46,5]},"visibility":"public","docs":"Create a new Shift-Or forward searcher for the given `needle`.\n\nThe needle may be empty. The empty needle matches at every byte offset.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:469:1208":{"id":"0:469:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[416,4],"end":[423,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1192:827":{"id":"0:1192:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,16],"end":[1241,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1179:827":{"id":"0:1179:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,22],"end":[894,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:541:3653":{"id":"0:541:3653","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[83,4],"end":[92,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Finder::with_pair`] will\nreturn a `Some` value. Similarly, when it is false, it is guaranteed\nthat `Finder::with_pair` will return a `None` value. Notice that this\ndoes not guarantee that [`Finder::new`] will return a `Finder`. Namely,\neven when `Finder::is_available` is true, it is not guaranteed that a\nvalid [`Pair`] can be found from the needle given.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Pair`":"0:949:2773","`Finder::new`":"0:538:1208","`Finder::with_pair`":"0:539:2778"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:542:2618":{"id":"0:542:2618","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[100,4],"end":[103,5]},"visibility":"public","docs":"Execute a search using SSE2 vectors and routines.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:547:3580"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:898:494":{"id":"0:898:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[351,9],"end":[351,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:1552:2771":{"id":"b:1:2772-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:784-0:902:2694":{"id":"b:5:784-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2807-0:1151:2682":{"id":"b:1:2807-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:784-0:1159:2694":{"id":"b:5:784-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:784-0:1243:2702":{"id":"b:5:784-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13675:32752":{"id":"1:13675:32752","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12451:490","self::pattern":"1:13326:10079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:463:2677":{"id":"0:463:2677","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[389,4],"end":[394,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:645":{"id":"0:645","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[461,0],"end":[480,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","map_windows","skip_while","size_hint","intersperse","count","partial_cmp_by","chain","max_by","try_reduce","cloned","partition_in_place","fuse","take_while","cmp","intersperse_with","ne","eq_by","zip","max_by_key","find_map","cycle","is_partitioned","inspect","map_while","copied","for_each","next_chunk","rev","last","max","array_chunks","eq","try_find","is_sorted","try_fold","by_ref","map","scan","filter","find","advance_by","min","is_sorted_by","enumerate","sum","position","try_for_each","try_collect","flat_map","filter_map","nth","partial_cmp","is_sorted_by_key","take","product","rposition","min_by","fold","skip","collect_into","flatten","all","peekable","le","step_by","ge","collect","lt","__iterator_get_unchecked","any","cmp_by","unzip","min_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:647:184","0:648:1222","0:650:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3300:260-0:1209:2661":{"id":"a:1:3300:260-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:784-0:1222:2682":{"id":"b:5:784-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:784-0:1201:2602":{"id":"b:5:784-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[336,0],"end":[344,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","nth_back","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:8476:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:64:2677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1238:494":{"id":"0:1238:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,9],"end":[661,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:1209:2661":{"id":"b:1:3092-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:1209:2661":{"id":"b:1:3943-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1172:2702":{"id":"0:1172:2702","crate_id":0,"name":"Three","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[895,0],"end":[900,1]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:371","a:1:32827:9718-0:1172:2702","a:1:32768:248-0:1172:2702","a:1:3335:10115-0:1172:2702","a:1:42628:3941-0:1172:2702","a:1:42629:3940-0:1172:2702","a:1:3300:260-0:1172:2702","b:1:2775-0:1172:2702","b:1:2772-0:1172:2702","b:1:3092-0:1172:2702","b:1:3943-0:1172:2702","b:1:2807-0:1172:2702","b:1:2804-0:1172:2702","b:1:3087-0:1172:2702","b:1:3081-0:1172:2702","b:1:3077-0:1172:2702","b:5:784-0:1172:2702","0:1177","0:1175","0:1178"]}}},"0:1007:827":{"id":"0:1007:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/twoway.rs","begin":[40,22],"end":[40,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1235":{"id":"0:1235","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,9],"end":[661,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1238:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:642":{"id":"0:642","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[439,0],"end":[459,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:644:1208"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13698:36018":{"id":"1:13698:36018","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13326:10079","str::split":"1:13689:32741","prim@char":"4:12451:490","`DoubleEndedIterator`":"1:8476:133","str::rsplit_terminator":"1:13701:36019"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44455:14377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:650:2676":{"id":"0:650:2676","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[477,4],"end":[479,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1575:494":{"id":"0:1575:494","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[653,9],"end":[653,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:770":{"id":"0:770","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[392,0],"end":[508,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:772:1208","0:774:2618","0:775:3965","0:778:3843","0:779:351","0:780:2519"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13638:3445":{"id":"1:13638:3445","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:902:2694":{"id":"b:1:3092-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3335:10115-0:1572:4015":{"id":"a:1:3335:10115-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:501:1208":{"id":"0:501:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[713,4],"end":[720,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:964:3157":{"id":"b:1:2772-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:772:1208":{"id":"0:772:1208","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[395,4],"end":[397,5]},"visibility":"public","docs":"Create a new finder for the given needle.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:3045:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1537:494":{"id":"0:1537:494","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[236,16],"end":[236,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:1429:2376":{"id":"b:1:2772-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/arch/all/shiftor.rs","begin":[25,0],"end":[75,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:176:1208","0:178:2618"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2777:27785":{"id":"1:2777:27785","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:520:184":{"id":"0:520:184","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[973,4],"end":[973,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:381:2623":{"id":"0:381:2623","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1105,4],"end":[1137,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1530":{"id":"0:1530","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[236,9],"end":[236,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1533:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:790:3843":{"id":"0:790:3843","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[611,4],"end":[616,5]},"visibility":"public","docs":"Convert this finder into its owned variant, such that it no longer\nborrows the needle.\n\nIf this is already an owned finder, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:1552:2771":{"id":"b:1:3081-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2804-0:1483:3944":{"id":"b:1:2804-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3092-0:1230:2694":{"id":"b:1:3092-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13681:2618":{"id":"1:13681:2618","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42537:202","prim@char":"4:12451:490","self::pattern":"1:13326:10079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3943-0:879:2661":{"id":"b:1:3943-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:902:2694":{"id":"b:1:3077-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3081-0:1230:2694":{"id":"b:1:3081-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1548":{"id":"0:1548","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[313,16],"end":[313,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1551:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1136":{"id":"0:1136","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1137:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5742:32412":{"id":"5:5742:32412","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13763:32415"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1207":{"id":"0:1207","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1208:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:27:322":{"id":"0:27:322","crate_id":0,"name":"all","span":{"filename":"src/arch/all/mod.rs","begin":[1,0],"end":[234,1]},"visibility":"public","docs":"Contains architecture independent routines.\n\nThese routines are often used as a \"fallback\" implementation when the more\nspecialized architecture dependent routines are unavailable.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:28:2362","0:124:2506","0:152:2507","0:171:2508","0:179:2509","0:209:2517","0:210:2522","0:211:2520","0:212:2533"],"is_stripped":false}}},"0:366:2677":{"id":"0:366:2677","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[879,4],"end":[884,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:915:2702":{"id":"b:1:3092-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2804-0:957:2771":{"id":"b:1:2804-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42629:3940-0:1172:2702":{"id":"a:1:42629:3940-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13770:36035":{"id":"1:13770:36035","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5147:36035"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44722:14292","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:949:2773":{"id":"b:1:3092-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:1251:2707":{"id":"b:1:3943-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:131:2778":{"id":"0:131:2778","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[56,4],"end":[62,5]},"visibility":"public","docs":"Create a new prefilter using the pair given.\n\nIf the prefilter could not be constructed, then `None` is returned.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3087-0:1230:2694":{"id":"b:1:3087-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3087-0:1193:2771":{"id":"b:1:3087-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3300:260-0:1138:2661":{"id":"a:1:3300:260-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3335:10115-0:1180:2707":{"id":"a:1:3335:10115-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1227":{"id":"0:1227","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,16],"end":[404,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1486:4217":{"id":"0:1486:4217","crate_id":0,"name":"Auto","span":{"filename":"src/memmem/searcher.rs","begin":[550,4],"end":[550,8]},"visibility":"default","docs":"Automatically detect whether a heuristic prefilter should be used. If\nit is used, then heuristics will be used to dynamically disable the\nprefilter if it is believed to not be carrying its weight.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:632:184":{"id":"0:632:184","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[387,4],"end":[387,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"a:1:42628:3941-0:1180:2707":{"id":"a:1:42628:3941-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:1562:3157":{"id":"b:1:2772-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:892:2682":{"id":"b:1:3077-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3081-0:1180:2707":{"id":"b:1:3081-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:990":{"id":"0:990","crate_id":0,"name":null,"span":{"filename":"src/arch/all/shiftor.rs","begin":[19,9],"end":[19,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:991:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42629:3940-0:1523:3967":{"id":"a:1:42629:3940-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:791:351":{"id":"0:791:351","crate_id":0,"name":"as_ref","span":{"filename":"src/memmem/mod.rs","begin":[629,4],"end":[634,5]},"visibility":"public","docs":"Convert this finder into its borrowed variant.\n\nThis is primarily useful if your finder is owned and you'd like to\nstore its borrowed variant in some intermediate data structure.\n\nNote that the lifetime parameter of the returned finder is tied to the\nlifetime of `self`, and may be shorter than the `'n` lifetime of the\nneedle itself. Namely, a finder's needle can be either borrowed or\nowned, so the lifetime of the needle returned must necessarily be the\nshorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3300:260-0:1572:4015":{"id":"a:1:3300:260-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1264,0],"end":[1272,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","nth_back","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:8476:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:400:2677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:455:1222":{"id":"0:455:1222","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[365,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3943-0:1552:2771":{"id":"b:1:3943-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:18-0:603:2373":{"id":"0:18-0:603:2373","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,63],"end":[205,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr_iter","name":"memrchr_iter","id":"0:603:2373","glob":false}}},"b:1:3943-0:1201:2602":{"id":"b:1:3943-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3087-0:1429:2376":{"id":"b:1:3087-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:1538:3972":{"id":"b:1:3943-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:1562:3157":{"id":"b:1:3077-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5739:36733":{"id":"5:5739:36733","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:3194","`String`":"5:7802:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2623":{"id":"0:44:2623","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[197,4],"end":[232,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32768:248-0:1193:2771":{"id":"a:1:32768:248-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3943-0:992:2771":{"id":"b:1:3943-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:1172:2702":{"id":"b:1:3943-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13765:32668":{"id":"1:13765:32668","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:39884"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:911":{"id":"0:911","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[567,16],"end":[567,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:914:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3943-0:1151:2682":{"id":"b:1:3943-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:940:2771":{"id":"b:1:3943-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1574":{"id":"0:1574","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,9],"end":[653,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1575:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3335:10115-0:871:2602":{"id":"a:1:3335:10115-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:706:60":{"id":"0:706:60","crate_id":0,"name":"default","span":{"filename":"src/memmem/searcher.rs","begin":[554,4],"end":[556,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13660:32736":{"id":"1:13660:32736","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13659:3346","str::split_at_mut_checked":"1:13662:32740"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:1138:2661":{"id":"b:1:2775-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3087-0:927:2707":{"id":"b:1:3087-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2804-0:1172:2702":{"id":"b:1:2804-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:878:827":{"id":"0:878:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1414:494":{"id":"0:1414:494","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[287,9],"end":[287,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:940:2771":{"id":"0:940:2771","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[35,0],"end":[39,1]},"visibility":"public","docs":"An architecture independent \"packed pair\" finder.\n\nThis finder picks two bytes that it believes have high predictive power for\nindicating an overall match of a needle. At search time, it reports offsets\nwhere the needle could match based on whether the pair of bytes it chose\nmatch.\n\nThis is architecture independent because it utilizes `memchr` to find the\noccurrence of one of the bytes in the pair, and then checks whether the\nsecond byte matches. If it does, in the case of [`Finder::find_prefilter`],\nthe location at which the needle could match is returned.\n\nIt is generally preferred to use architecture specific routines for a\n\"packed pair\" prefilter, but this can be a useful fallback when the\narchitecture independent routines are unavailable.","links":{"`Finder::find_prefilter`":"0:132:2788"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:129","a:1:32827:9718-0:940:2771","a:1:32768:248-0:940:2771","a:1:3335:10115-0:940:2771","a:1:42628:3941-0:940:2771","a:1:42629:3940-0:940:2771","a:1:3300:260-0:940:2771","b:1:2775-0:940:2771","b:1:2772-0:940:2771","b:1:3092-0:940:2771","b:1:3943-0:940:2771","b:1:2807-0:940:2771","b:1:2804-0:940:2771","b:1:3087-0:940:2771","b:1:3081-0:940:2771","b:1:3077-0:940:2771","b:5:784-0:940:2771","0:944","0:946","0:947"]}}},"0:1426":{"id":"0:1426","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[363,16],"end":[363,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1428:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2775-0:1429:2376":{"id":"b:1:2775-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2774:4532":{"id":"1:2774:4532","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:1562:3157":{"id":"b:5:784-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3335:10115-0:1552:2771":{"id":"a:1:3335:10115-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:995":{"id":"0:995","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:996:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1561:827":{"id":"0:1561:827","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[386,16],"end":[386,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:1000:3157":{"id":"b:1:2772-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1552:2771":{"id":"0:1552:2771","crate_id":0,"name":"Finder","span":{"filename":"src/memmem/mod.rs","begin":[387,0],"end":[390,1]},"visibility":"public","docs":"A single substring searcher fixed to a particular needle.\n\nThe purpose of this type is to permit callers to construct a substring\nsearcher that can be used to search haystacks without the overhead of\nconstructing the searcher in the first place. This is a somewhat niche\nconcern when it's necessary to re-use the same needle to search multiple\ndifferent haystacks with as little overhead as possible. In general, using\n[`find`] is good enough, but `Finder` is useful when you can meaningfully\nobserve searcher construction time in a profile.\n\nWhen the `std` feature is enabled, then this type has an `into_owned`\nversion which permits building a `Finder` that is not connected to\nthe lifetime of its needle.","links":{"`find`":"0:747:2618"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:770","a:1:32827:9718-0:1552:2771","a:1:32768:248-0:1552:2771","a:1:3335:10115-0:1552:2771","a:1:42628:3941-0:1552:2771","a:1:42629:3940-0:1552:2771","a:1:3300:260-0:1552:2771","b:1:2775-0:1552:2771","b:1:2772-0:1552:2771","b:1:3092-0:1552:2771","b:1:3943-0:1552:2771","b:1:2804-0:1552:2771","b:1:3087-0:1552:2771","b:1:3081-0:1552:2771","b:1:3077-0:1552:2771","b:5:784-0:1552:2771","0:1556","0:1559"]}}},"b:5:784-0:879:2661":{"id":"b:5:784-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3087-0:1138:2661":{"id":"b:1:3087-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:1222:2682":{"id":"a:1:32768:248-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3092-0:1552:2771":{"id":"b:1:3092-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:892:2682":{"id":"b:1:3943-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:940:2771":{"id":"a:1:32768:248-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:210:2522":{"id":"0:210:2522","crate_id":0,"name":"is_suffix","span":{"filename":"src/arch/all/mod.rs","begin":[42,0],"end":[45,1]},"visibility":"public","docs":"Returns true if and only if `needle` is a suffix of `haystack`.\n\nThis uses a latency optimized variant of `memcmp` internally which *might*\nmake this faster for very short strings.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:1408:2374":{"id":"b:5:784-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:998":{"id":"0:998","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,22],"end":[36,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:999:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:299:3653":{"id":"0:299:3653","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[86,4],"end":[109,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`One::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`One::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`One::new`":"0:297:1208"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:648:1222":{"id":"0:648:1222","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[465,4],"end":[474,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3335:10115-0:1222:2682":{"id":"a:1:3335:10115-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1006":{"id":"0:1006","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,22],"end":[40,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1007:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3335:10115-0:1264:2771":{"id":"a:1:3335:10115-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:211:2520":{"id":"0:211:2520","crate_id":0,"name":"is_equal","span":{"filename":"src/arch/all/mod.rs","begin":[65,0],"end":[73,1]},"visibility":"public","docs":"Compare corresponding bytes in `x` and `y` for equality.\n\nThat is, this returns true if and only if `x.len() == y.len()` and\n`x[i] == y[i]` for all `0 <= i < x.len()`.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.\n\n# Motivation\n\nWhy not use slice equality instead? Well, slice equality usually results in\na call out to the current platform's `libc` which might not be inlineable\nor have other overhead. This routine isn't guaranteed to be a win, but it\nmight be in some cases.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["y",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13722:36021":{"id":"1:13722:36021","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13326:10079","`DoubleEndedIterator`":"1:8476:133","prim@char":"4:12451:490","str::rmatch_indices":"1:13725:36022"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44555:14383","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8442-0:879:2661":{"id":"b:1:8442-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:10156","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:3335:10115-0:986:2771":{"id":"a:1:3335:10115-0:986:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2775-0:1130:2602":{"id":"b:1:2775-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42628:3941-0:1000:3157":{"id":"a:1:42628:3941-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:443:2625":{"id":"0:443:2625","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[257,4],"end":[271,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:317:1004":{"id":"0:317:1004","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[450,4],"end":[452,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:438:598":{"id":"0:438:598","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[122,4],"end":[130,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:1222:2682":{"id":"b:1:3092-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2772-0:1243:2702":{"id":"b:1:2772-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:879:2661":{"id":"0:879:2661","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/all/memchr.rs","begin":[303,0],"end":[308,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:871:2602","`One::iter`":"0:47:1004"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:32827:9718-0:879:2661","a:1:32768:248-0:879:2661","a:1:3335:10115-0:879:2661","a:1:42628:3941-0:879:2661","a:1:42629:3940-0:879:2661","a:1:3300:260-0:879:2661","b:1:2775-0:879:2661","b:1:2772-0:879:2661","b:1:3092-0:879:2661","b:1:3943-0:879:2661","b:1:2804-0:879:2661","b:1:3087-0:879:2661","b:1:8442-0:879:2661","b:1:3081-0:879:2661","b:1:3077-0:879:2661","b:5:784-0:879:2661","0:61","0:52","0:884","0:888"]}}},"b:1:3943-0:1243:2702":{"id":"b:1:3943-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:339:1217":{"id":"0:339:1217","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[556,4],"end":[561,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:964:3157":{"id":"b:1:3081-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3087-0:1408:2374":{"id":"b:1:3087-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8442-0:1429:2376":{"id":"b:1:8442-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:10156","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:644:1208":{"id":"0:644:1208","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[446,4],"end":[458,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1484:202":{"id":"0:1484:202","crate_id":0,"name":"None","span":{"filename":"src/memmem/searcher.rs","begin":[546,4],"end":[546,8]},"visibility":"default","docs":"Never used a prefilter in substring search.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:1:3092-0:1483:3944":{"id":"b:1:3092-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1193:2771":{"id":"0:1193:2771","crate_id":0,"name":"Finder","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[23,0],"end":[26,1]},"visibility":"public","docs":"A \"packed pair\" finder that uses 256-bit vector operations.\n\nThis finder picks two bytes that it believes have high predictive power\nfor indicating an overall match of a needle. Depending on whether\n`Finder::find` or `Finder::find_prefilter` is used, it reports offsets\nwhere the needle matches or could match. In the prefilter case, candidates\nare reported whenever the [`Pair`] of bytes given matches.","links":{"`Pair`":"0:949:2773"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:412","a:1:32827:9718-0:1193:2771","a:1:32768:248-0:1193:2771","a:1:3335:10115-0:1193:2771","a:1:42628:3941-0:1193:2771","a:1:42629:3940-0:1193:2771","a:1:3300:260-0:1193:2771","b:1:2775-0:1193:2771","b:1:2772-0:1193:2771","b:1:3092-0:1193:2771","b:1:3943-0:1193:2771","b:1:2807-0:1193:2771","b:1:2804-0:1193:2771","b:1:3087-0:1193:2771","b:1:3081-0:1193:2771","b:1:3077-0:1193:2771","b:5:784-0:1193:2771","0:1198","0:1196","0:1199"]}}},"1:13640:36012":{"id":"1:13640:36012","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1205:494":{"id":"0:1205:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13751:36031":{"id":"1:13751:36031","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12451:490","self::pattern":"1:13326:10079"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:944":{"id":"0:944","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:945:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42629:3940-0:1562:3157":{"id":"a:1:42629:3940-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:784-0:915:2702":{"id":"b:5:784-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5740:9664":{"id":"5:5740:9664","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:510:2623":{"id":"0:510:2623","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[879,4],"end":[902,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3087-0:879:2661":{"id":"b:1:3087-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5730:36731":{"id":"5:5730:36731","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32768:248-0:871:2602":{"id":"a:1:32768:248-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2804-0:1243:2702":{"id":"b:1:2804-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3087-0:1209:2661":{"id":"b:1:3087-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13671:27959":{"id":"1:13671:27959","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44697:14392","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:502:1217":{"id":"0:502:1217","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[736,4],"end":[742,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:664:2382":{"id":"0:664:2382","crate_id":0,"name":"memmem","span":{"filename":"src/memmem/mod.rs","begin":[1,0],"end":[737,1]},"visibility":"public","docs":"This module provides forward and reverse substring search routines.\n\nUnlike the standard library's substring search routines, these work on\narbitrary bytes. For all non-empty needles, these routines will report exactly\nthe same values as the corresponding routines in the standard library. For\nthe empty needle, the standard library reports matches only at valid UTF-8\nboundaries, where as these routines will report matches at every position.\n\nOther than being able to work on arbitrary bytes, the primary reason to prefer\nthese routines over the standard library routines is that these will generally\nbe faster. In some cases, significantly so.\n\n# Example: iterating over substring matches\n\nThis example shows how to use [`find_iter`] to find occurrences of a substring\nin a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches in reverse\n\nThis example shows how to use [`rfind_iter`] to find occurrences of a substring\nin a haystack starting from the end of the haystack.\n\n**NOTE:** This module does not implement double ended iterators, so reverse\nsearches aren't done by calling `rev` on a forward iterator.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::rfind_iter(haystack, \"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`Finder`] (or a [`FinderRev`] for\nreverse searches).\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```","links":{"`rfind_iter`":"0:743:3971","`FinderRev`":"0:1562:3157","`find_iter`":"0:739:3965","`Finder`":"0:1552:2771"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:665-0:1483:3944","0:739:3965","0:743:3971","0:747:2618","0:748:2622","0:1523:3967","0:1538:3972","0:1552:2771","0:1562:3157","0:1572:4015"],"is_stripped":false}}},"a:1:32827:9718-0:1408:2374":{"id":"a:1:32827:9718-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:1572:4015":{"id":"b:1:2772-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:95:2618":{"id":"0:95:2618","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[651,4],"end":[659,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:879:2661":{"id":"b:1:3092-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13713:32751":{"id":"1:13713:32751","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:15957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:524":{"id":"0:524","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[989,0],"end":[997,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","nth_back","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:8476:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:527:2677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3092-0:1193:2771":{"id":"b:1:3092-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3335:10115-0:1130:2602":{"id":"a:1:3335:10115-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42629:3940-0:1483:3944":{"id":"a:1:42629:3940-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1488":{"id":"0:1488","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,9],"end":[542,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1489:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42629:3940-0:1209:2661":{"id":"a:1:42629:3940-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2804-0:964:3157":{"id":"b:1:2804-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:1483:3944":{"id":"a:1:32768:248-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3077-0:949:2773":{"id":"b:1:3077-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:470:1217":{"id":"0:470:1217","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[439,4],"end":[441,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:598":{"id":"0:41:598","crate_id":0,"name":"count","span":{"filename":"src/arch/all/memchr.rs","begin":[93,4],"end":[101,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:418:2788":{"id":"0:418:2788","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[132,4],"end":[135,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:422:3580"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[79,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:155:1208","0:156:2618","0:157:2620"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1438":{"id":"0:1438","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[431,16],"end":[431,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1440:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:340:3653":{"id":"0:340:3653","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[573,4],"end":[596,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Two::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Two::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Two::new`":"0:338:1208"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:347:2623":{"id":"0:347:2623","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[720,4],"end":[750,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:1217":{"id":"0:298:1217","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[69,4],"end":[74,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:476:2620":{"id":"0:476:2620","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[520,4],"end":[550,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:439:2620":{"id":"0:439:2620","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[156,4],"end":[186,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:778:3843":{"id":"0:778:3843","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[473,4],"end":[478,5]},"visibility":"public","docs":"Convert this finder into its owned variant, such that it no longer\nborrows the needle.\n\nIf this is already an owned finder, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `alloc` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32768:248-0:1523:3967":{"id":"a:1:32768:248-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8442-0:1538:3972":{"id":"b:1:8442-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:10156","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:42628:3941-0:1130:2602":{"id":"a:1:42628:3941-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42628:3941-0:1251:2707":{"id":"a:1:42628:3941-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:754":{"id":"0:754","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[273,0],"end":[305,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","map_windows","skip_while","size_hint","intersperse","count","partial_cmp_by","chain","max_by","try_reduce","cloned","partition_in_place","fuse","take_while","cmp","intersperse_with","ne","eq_by","zip","max_by_key","find_map","cycle","is_partitioned","inspect","map_while","copied","for_each","next_chunk","rev","last","max","array_chunks","eq","try_find","is_sorted","try_fold","by_ref","map","scan","filter","find","advance_by","min","is_sorted_by","enumerate","sum","position","try_for_each","try_collect","flat_map","filter_map","nth","partial_cmp","is_sorted_by_key","take","product","rposition","min_by","fold","skip","collect_into","flatten","all","peekable","le","step_by","ge","collect","lt","__iterator_get_unchecked","any","cmp_by","unzip","min_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:757:184","0:758:1222","0:759:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13707:32748":{"id":"1:13707:32748","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12451:490","str::splitn":"1:13704:32746","self::pattern":"1:13326:10079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44527:14381","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:15957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:609:2372":{"id":"0:609:2372","crate_id":0,"name":"memrchr3_iter","span":{"filename":"src/memchr.rs","begin":[268,0],"end":[275,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:41350:3861","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:949:2773":{"id":"b:1:2775-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:323:184":{"id":"0:323:184","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[473,4],"end":[473,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"a:1:42628:3941-0:1418:2375":{"id":"a:1:42628:3941-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1175":{"id":"0:1175","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,9],"end":[894,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1176:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13692:27955":{"id":"1:13692:27955","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12451:490","self::pattern":"1:13326:10079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13141:14022","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3087-0:892:2682":{"id":"b:1:3087-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:11-0:607:2366":{"id":"0:11-0:607:2366","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,44],"end":[204,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr3_iter","name":"memchr3_iter","id":"0:607:2366","glob":false}}},"a:1:3300:260-0:892:2682":{"id":"a:1:3300:260-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:424:2362":{"id":"0:424:2362","crate_id":0,"name":"memchr","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[1,0],"end":[1077,1]},"visibility":"public","docs":"This module defines 128-bit vector implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers are\ntypically much faster than scalar routines accomplishing the same task.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:1243:2702","`One::count`":"0:438:598","`One`":"0:1201:2602","`Two`":"0:1222:2682","`One::find`":"0:434:2618","`OneIter`":"0:1209:2661"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1201:2602","0:1209:2661","0:1222:2682","0:1230:2694","0:1243:2702","0:1251:2707"],"is_stripped":false}}},"0:143:2834":{"id":"0:143:2834","crate_id":0,"name":"rank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[317,4],"end":[317,35]},"visibility":"default","docs":"Return the heuristic frequency rank of the given byte. A lower rank\nmeans the byte is believed to occur less frequently in the haystack.\n\nSome uses of this heuristic may treat arbitrary absolute rank values as\nsignificant. For example, an implementation detail in this crate may\ndetermine that heuristic prefilters are inappropriate if every byte in\nthe needle has a \"high\" rank.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:3077-0:1159:2694":{"id":"b:1:3077-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1199":{"id":"0:1199","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1200:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3081-0:1251:2707":{"id":"b:1:3081-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1176:494":{"id":"0:1176:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,9],"end":[894,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13664:14393":{"id":"1:13664:14393","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12451:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44375:14371","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2807-0:949:2773":{"id":"b:1:2807-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:939:827":{"id":"0:939:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[835,16],"end":[835,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:759:2676":{"id":"0:759:2676","crate_id":0,"name":"size_hint","span":{"filename":"src/memmem/mod.rs","begin":[288,4],"end":[304,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:892:2682":{"id":"b:5:784-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2804-0:1159:2694":{"id":"b:1:2804-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3092-0:1523:3967":{"id":"b:1:3092-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13719:36020":{"id":"1:13719:36020","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13326:10079","`DoubleEndedIterator`":"1:8476:133","prim@char":"4:12451:490","str::matches":"1:13716:4219"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44627:14387","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:15957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:805:4062":{"id":"0:805:4062","crate_id":0,"name":"prefilter","span":{"filename":"src/memmem/mod.rs","begin":[709,4],"end":[712,5]},"visibility":"public","docs":"Configure the prefilter setting for the finder.\n\nSee the documentation for [`Prefilter`] for more discussion on why\nyou might want to configure this.","links":{"`Prefilter`":"0:1483:3944"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["prefilter",{"resolved_path":{"name":"Prefilter","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8442-0:927:2707":{"id":"b:1:8442-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:10156","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[902,0],"end":[1228,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:372:1208","0:373:1217","0:374:3653","0:375:2618","0:377:2622","0:379:2620","0:381:2623","0:387:1004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2775-0:1209:2661":{"id":"b:1:2775-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:454:184":{"id":"0:454:184","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[362,4],"end":[362,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:2775-0:1193:2771":{"id":"b:1:2775-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32827:9718-0:1230:2694":{"id":"a:1:32827:9718-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42629:3940-0:1264:2771":{"id":"a:1:42629:3940-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3335:10115-0:1251:2707":{"id":"a:1:3335:10115-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3300:260-0:1201:2602":{"id":"a:1:3300:260-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:784-0:1230:2694":{"id":"b:5:784-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3081-0:1264:2771":{"id":"b:1:3081-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:784-0:1418:2375":{"id":"b:5:784-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1135":{"id":"0:1135","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,16],"end":[28,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:91:2677":{"id":"0:91:2677","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[594,4],"end":[599,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:433:3653":{"id":"0:433:3653","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[77,4],"end":[86,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`One::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`One::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`One::new`":"0:431:1208"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1204":{"id":"0:1204","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1205:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2804-0:1418:2375":{"id":"b:1:2804-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3092-0:1418:2375":{"id":"b:1:3092-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32827:9718-0:902:2694":{"id":"a:1:32827:9718-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3087-0:1130:2602":{"id":"b:1:3087-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:705":{"id":"0:705","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[553,0],"end":[557,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:706:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2804-0:879:2661":{"id":"b:1:2804-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8442-0:902:2694":{"id":"b:1:8442-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:10156","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:897":{"id":"0:897","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,9],"end":[351,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:898:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3300:260-0:871:2602":{"id":"a:1:3300:260-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[359,0],"end":[554,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1208","0:68:2618","0:70:2622","0:72:2620","0:74:2623","0:76:1004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2772-0:1193:2771":{"id":"b:1:2772-0:1193:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3081-0:1222:2682":{"id":"b:1:3081-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:495:2677":{"id":"0:495:2677","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[686,4],"end":[691,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1268:494":{"id":"0:1268:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42629:3940-0:957:2771":{"id":"a:1:42629:3940-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42628:3941-0:871:2602":{"id":"a:1:42628:3941-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:593:2363":{"id":"0:593:2363","crate_id":0,"name":"memchr2","span":{"filename":"src/memchr.rs","begin":[92,0],"end":[100,1]},"visibility":"public","docs":"Search for the first occurrence of two possible bytes in a haystack.\n\nThis returns the index corresponding to the first occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle1 || b == needle2)`, this routine\nwill attempt to use highly optimized vector operations that can be an order\nof magnitude faster (or more).\n\n# Example\n\nThis shows how to find the first position of one of two possible bytes in a\nhaystack.\n\n```\nuse memchr::memchr2;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr2(b'k', b'q', haystack), Some(4));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12-0:601:2367":{"id":"0:12-0:601:2367","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,58],"end":[204,69]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr_iter","name":"memchr_iter","id":"0:601:2367","glob":false}}},"0:16-0:599:2371":{"id":"0:16-0:599:2371","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,38],"end":[205,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr3","name":"memrchr3","id":"0:599:2371","glob":false}}},"5:5741:32411":{"id":"5:5741:32411","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13762:32414"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1547:494":{"id":"0:1547:494","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[313,9],"end":[313,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10-0:597:2365":{"id":"0:10-0:597:2365","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,35],"end":[204,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr3","name":"memchr3","id":"0:597:2365","glob":false}}},"0:618:598":{"id":"0:618:598","crate_id":0,"name":"count","span":{"filename":"src/memchr.rs","begin":[327,4],"end":[333,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3083:857":{"id":"1:3083:857","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[523,0],"end":[841,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:338:1208","0:339:1217","0:340:3653","0:341:2618","0:343:2622","0:345:2620","0:347:2623","0:353:1004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3300:260-0:1159:2694":{"id":"a:1:3300:260-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3300:260-0:1562:3157":{"id":"a:1:3300:260-0:1562:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:159:1208":{"id":"0:159:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[185,4],"end":[197,5]},"visibility":"public","docs":"Create a new Rabin-Karp reverse searcher for the given `needle`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42628:3941-0:1209:2661":{"id":"a:1:42628:3941-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1209:2661":{"id":"0:1209:2661","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[356,0],"end":[359,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:1201:2602","`One::iter`":"0:448:1004"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:32827:9718-0:1209:2661","a:1:32768:248-0:1209:2661","a:1:3335:10115-0:1209:2661","a:1:42628:3941-0:1209:2661","a:1:42629:3940-0:1209:2661","a:1:3300:260-0:1209:2661","b:1:2775-0:1209:2661","b:1:2772-0:1209:2661","b:1:3092-0:1209:2661","b:1:3943-0:1209:2661","b:1:2804-0:1209:2661","b:1:3087-0:1209:2661","b:1:8442-0:1209:2661","b:1:3081-0:1209:2661","b:1:3077-0:1209:2661","b:5:784-0:1209:2661","0:1218","0:451","0:1214","0:465","0:460"]}}},"0:21-0:1429:2376":{"id":"0:21-0:1429:2376","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,21],"end":[206,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr3","name":"Memchr3","id":"0:1429:2376","glob":false}}},"1:13672:3306":{"id":"1:13672:3306","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12451:490","self::pattern":"1:13326:10079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:2622":{"id":"0:160:2622","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[209,4],"end":[218,5]},"visibility":"public","docs":"Return the last occurrence of the `needle` in the `haystack`\ngiven. If no such occurrence exists, then `None` is returned.\n\nThe `needle` provided must match the needle given to this finder at\nconstruction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13730:36024":{"id":"1:13730:36024","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8442-0:1138:2661":{"id":"b:1:8442-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:10156","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:42629:3940-0:964:3157":{"id":"a:1:42629:3940-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:74:2623":{"id":"0:74:2623","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[503,4],"end":[534,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:612:1208":{"id":"0:612:1208","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[300,4],"end":[305,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[331,0],"end":[338,1]},"visibility":"default","docs":"This permits passing any implementation of `HeuristicFrequencyRank` as a\nborrowed version of itself.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"R"}}},"items":["0:151:2834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2804-0:1180:2707":{"id":"b:1:2804-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[843,0],"end":[858,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","map_windows","skip_while","size_hint","intersperse","count","partial_cmp_by","chain","max_by","try_reduce","cloned","partition_in_place","fuse","take_while","cmp","intersperse_with","ne","eq_by","zip","max_by_key","find_map","cycle","is_partitioned","inspect","map_while","copied","for_each","next_chunk","rev","last","max","array_chunks","eq","try_find","is_sorted","try_fold","by_ref","map","scan","filter","find","advance_by","min","is_sorted_by","enumerate","sum","position","try_for_each","try_collect","flat_map","filter_map","nth","partial_cmp","is_sorted_by_key","take","product","rposition","min_by","fold","skip","collect_into","flatten","all","peekable","le","step_by","ge","collect","lt","__iterator_get_unchecked","any","cmp_by","unzip","min_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:111:184","0:112:1222","0:114:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3077-0:1264:2771":{"id":"b:1:3077-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:1483:3944":{"id":"b:1:3943-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:320":{"id":"0:320","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[472,0],"end":[496,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","map_windows","skip_while","size_hint","intersperse","count","partial_cmp_by","chain","max_by","try_reduce","cloned","partition_in_place","fuse","take_while","cmp","intersperse_with","ne","eq_by","zip","max_by_key","find_map","cycle","is_partitioned","inspect","map_while","copied","for_each","next_chunk","rev","last","max","array_chunks","eq","try_find","is_sorted","try_fold","by_ref","map","scan","filter","find","advance_by","min","is_sorted_by","enumerate","sum","position","try_for_each","try_collect","flat_map","filter_map","nth","partial_cmp","is_sorted_by_key","take","product","rposition","min_by","fold","skip","collect_into","flatten","all","peekable","le","step_by","ge","collect","lt","__iterator_get_unchecked","any","cmp_by","unzip","min_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:323:184","0:324:1222","0:326:598","0:328:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:764:3843":{"id":"0:764:3843","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[341,4],"end":[347,5]},"visibility":"public","docs":"Convert this iterator into its owned variant, such that it no longer\nborrows the finder and needle.\n\nIf this is already an owned iterator, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13767:36034":{"id":"1:13767:36034","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5149:36034"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44704:14293","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42628:3941-0:992:2771":{"id":"a:1:42628:3941-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:877":{"id":"0:877","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:878:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3300:260-0:1408:2374":{"id":"a:1:3300:260-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:620:2676":{"id":"0:620:2676","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[336,4],"end":[338,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:910:494":{"id":"0:910:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[567,9],"end":[567,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3087-0:1572:4015":{"id":"b:1:3087-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2807-0:1172:2702":{"id":"b:1:2807-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:46:2625":{"id":"0:46:2625","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[256,4],"end":[269,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32768:248-0:927:2707":{"id":"a:1:32768:248-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32768:248-0:949:2773":{"id":"a:1:32768:248-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:309:2625":{"id":"0:309:2625","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[299,4],"end":[322,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42628:3941-0:1222:2682":{"id":"a:1:42628:3941-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3300:260-0:1538:3972":{"id":"a:1:3300:260-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42629:3940-0:1201:2602":{"id":"a:1:42629:3940-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3943-0:1000:3157":{"id":"b:1:3943-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3081-0:986:2771":{"id":"b:1:3081-0:986:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2775-0:1264:2771":{"id":"b:1:2775-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:758:1222":{"id":"0:758:1222","crate_id":0,"name":"next","span":{"filename":"src/memmem/mod.rs","begin":[276,4],"end":[286,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:996:494":{"id":"0:996:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/twoway.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:539:2778":{"id":"0:539:2778","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[46,4],"end":[55,5]},"visibility":"public","docs":"Create a new \"packed pair\" finder using the pair of bytes given.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:616:1222":{"id":"0:616:1222","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[312,4],"end":[324,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3335:10115-0:1523:3967":{"id":"a:1:3335:10115-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:787:27792":{"id":"5:787:27792","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42629:3940-0:1552:2771":{"id":"a:1:42629:3940-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13658:36016":{"id":"1:13658:36016","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12457:1765","crate::ops::IndexMut":"1:3605:10348","str::slice_unchecked":"1:13657:36015"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:871:2602":{"id":"b:5:784-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:137:2822":{"id":"0:137:2822","crate_id":0,"name":"with_ranker","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[163,4],"end":[197,5]},"visibility":"public","docs":"Create a new pair of offsets from the given needle and ranker.\n\nThis permits the caller to choose a background frequency distribution\nwith which bytes are selected. The idea is to select a pair of bytes\nthat is believed to strongly predict a match in the haystack. This\nusually means selecting bytes that occur rarely in a haystack.\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["ranker",{"generic":"R"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:1159:2694":{"id":"b:1:2775-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13762:32414":{"id":"1:13762:32414","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32768:248-0:1572:4015":{"id":"a:1:32768:248-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:970:827":{"id":"0:970:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,16],"end":[179,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13739:36029":{"id":"1:13739:36029","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12451:490","self::pattern":"1:13326:10079"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:986:2771":{"id":"b:1:3092-0:986:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3087-0:1172:2702":{"id":"b:1:3087-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:142:2830":{"id":"0:142:2830","crate_id":0,"name":"HeuristicFrequencyRank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[309,0],"end":[318,1]},"visibility":"public","docs":"This trait allows the user to customize the heuristic used to determine the\nrelative frequency of a given byte in the dataset being searched.\n\nThe use of this trait can have a dramatic impact on performance depending\non the type of data being searched. The details of why are explained in the\ndocs of [`crate::memmem::Prefilter`]. To summarize, the core algorithm uses\na prefilter to quickly identify candidate matches that are later verified\nmore slowly. This prefilter is implemented in terms of trying to find\n`rare` bytes at specific offsets that will occur less frequently in the\ndataset. While the concept of a `rare` byte is similar for most datasets,\nthere are some specific datasets (like binary executables) that have\ndramatically different byte distributions. For these datasets customizing\nthe byte frequency heuristic can have a massive impact on performance, and\nmight even need to be done at runtime.\n\nThe default implementation of `HeuristicFrequencyRank` reads from the\nstatic frequency table defined in `src/memmem/byte_frequencies.rs`. This\nis optimal for most inputs, so if you are unsure of the impact of using a\ncustom `HeuristicFrequencyRank` you should probably just use the default.\n\n# Example\n\n```\nuse memchr::{\n    arch::all::packedpair::HeuristicFrequencyRank,\n    memmem::FinderBuilder,\n};\n\n/// A byte-frequency table that is good for scanning binary executables.\nstruct Binary;\n\nimpl HeuristicFrequencyRank for Binary {\n    fn rank(&self, byte: u8) -> u8 {\n        const TABLE: [u8; 256] = [\n            255, 128, 61, 43, 50, 41, 27, 28, 57, 15, 21, 13, 24, 17, 17,\n            89, 58, 16, 11, 7, 14, 23, 7, 6, 24, 9, 6, 5, 9, 4, 7, 16,\n            68, 11, 9, 6, 88, 7, 4, 4, 23, 9, 4, 8, 8, 5, 10, 4, 30, 11,\n            9, 24, 11, 5, 5, 5, 19, 11, 6, 17, 9, 9, 6, 8,\n            48, 58, 11, 14, 53, 40, 9, 9, 254, 35, 3, 6, 52, 23, 6, 6, 27,\n            4, 7, 11, 14, 13, 10, 11, 11, 5, 2, 10, 16, 12, 6, 19,\n            19, 20, 5, 14, 16, 31, 19, 7, 14, 20, 4, 4, 19, 8, 18, 20, 24,\n            1, 25, 19, 58, 29, 10, 5, 15, 20, 2, 2, 9, 4, 3, 5,\n            51, 11, 4, 53, 23, 39, 6, 4, 13, 81, 4, 186, 5, 67, 3, 2, 15,\n            0, 0, 1, 3, 2, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0,\n            12, 2, 1, 1, 3, 1, 1, 1, 6, 1, 2, 1, 3, 1, 1, 2, 9, 1, 1, 0,\n            2, 2, 4, 4, 11, 6, 7, 3, 6, 9, 4, 5,\n            46, 18, 8, 18, 17, 3, 8, 20, 16, 10, 3, 7, 175, 4, 6, 7, 13,\n            3, 7, 3, 3, 1, 3, 3, 10, 3, 1, 5, 2, 0, 1, 2,\n            16, 3, 5, 1, 6, 1, 1, 2, 58, 20, 3, 14, 12, 2, 1, 3, 16, 3, 5,\n            8, 3, 1, 8, 6, 17, 6, 5, 3, 8, 6, 13, 175,\n        ];\n        TABLE[byte as usize]\n    }\n}\n// Create a new finder with the custom heuristic.\nlet finder = FinderBuilder::new()\n    .build_forward_with_ranker(Binary, b\"\\x00\\x00\\xdd\\xdd\");\n// Find needle with custom heuristic.\nassert!(finder.find(b\"\\x00\\x00\\x00\\xdd\\xdd\").is_some());\n```","links":{"`crate::memmem::Prefilter`":"0:1483:3944"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:143:2834"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:148"]}}},"0:1250:827":{"id":"0:1250:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,22],"end":[701,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13637:1024":{"id":"1:13637:1024","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12451:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:969":{"id":"0:969","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,16],"end":[179,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:970:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2807-0:871:2602":{"id":"b:1:2807-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2807-0:1243:2702":{"id":"b:1:2807-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1408:2374":{"id":"0:1408:2374","crate_id":0,"name":"Memchr","span":{"filename":"src/memchr.rs","begin":[288,0],"end":[291,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr_iter`] or `[memrchr_iter`]\nfunctions. It can also be created with the [`Memchr::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`memchr_iter`":"0:601:2367","`Memchr::new`":"0:612:1208"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:610","a:1:32827:9718-0:1408:2374","a:1:32768:248-0:1408:2374","a:1:3335:10115-0:1408:2374","a:1:42628:3941-0:1408:2374","a:1:42629:3940-0:1408:2374","a:1:3300:260-0:1408:2374","b:1:2775-0:1408:2374","b:1:2772-0:1408:2374","b:1:3092-0:1408:2374","b:1:3943-0:1408:2374","b:1:2804-0:1408:2374","b:1:3087-0:1408:2374","b:1:8442-0:1408:2374","b:1:3081-0:1408:2374","b:1:3077-0:1408:2374","b:5:784-0:1408:2374","0:621","0:1412","0:625","0:1415","0:613"]}}},"b:1:3081-0:1138:2661":{"id":"b:1:3081-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:949:2773":{"id":"b:1:3943-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2772-0:1408:2374":{"id":"b:1:2772-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13725:36022":{"id":"1:13725:36022","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13326:10079","`DoubleEndedIterator`":"1:8476:133","prim@char":"4:12451:490","str::match_indices":"1:13722:36021"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44573:14384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:15957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13761:32413":{"id":"1:13761:32413","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1208:827":{"id":"0:1208:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:1000:3157":{"id":"b:5:784-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:925":{"id":"0:925","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,22],"end":[607,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:926:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32768:248-0:1243:2702":{"id":"a:1:32768:248-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:374:3653":{"id":"0:374:3653","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[956,4],"end":[979,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Three::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Three::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Three::new`":"0:372:1208"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3335:10115-0:879:2661":{"id":"a:1:3335:10115-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:434:2618":{"id":"0:434:2618","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[94,4],"end":[102,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2804-0:871:2602":{"id":"b:1:2804-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3092-0:992:2771":{"id":"b:1:3092-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1159:2694":{"id":"0:1159:2694","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[855,0],"end":[858,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:1151:2682","`Two::iter`":"0:353:1004"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:32827:9718-0:1159:2694","a:1:32768:248-0:1159:2694","a:1:3335:10115-0:1159:2694","a:1:42628:3941-0:1159:2694","a:1:42629:3940-0:1159:2694","a:1:3300:260-0:1159:2694","b:1:2775-0:1159:2694","b:1:2772-0:1159:2694","b:1:3092-0:1159:2694","b:1:3943-0:1159:2694","b:1:2804-0:1159:2694","b:1:3087-0:1159:2694","b:1:8442-0:1159:2694","b:1:3081-0:1159:2694","b:1:3077-0:1159:2694","b:5:784-0:1159:2694","0:363","0:1168","0:1164","0:356","0:368"]}}},"0:373:1217":{"id":"0:373:1217","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[935,4],"end":[944,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3335:10115-0:949:2773":{"id":"a:1:3335:10115-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3300:260-0:940:2771":{"id":"a:1:3300:260-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:992:2771":{"id":"0:992:2771","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/twoway.rs","begin":[37,0],"end":[37,26]},"visibility":"public","docs":"A forward substring searcher that uses the Two-Way algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:186","a:1:32827:9718-0:992:2771","a:1:32768:248-0:992:2771","a:1:3335:10115-0:992:2771","a:1:42628:3941-0:992:2771","a:1:42629:3940-0:992:2771","a:1:3300:260-0:992:2771","b:1:2775-0:992:2771","b:1:2772-0:992:2771","b:1:3092-0:992:2771","b:1:3943-0:992:2771","b:1:2807-0:992:2771","b:1:2804-0:992:2771","b:1:3087-0:992:2771","b:1:3081-0:992:2771","b:1:3077-0:992:2771","b:5:784-0:992:2771","0:997","0:998","0:995"]}}},"b:5:784-0:1180:2707":{"id":"b:5:784-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8442-0:1230:2694":{"id":"b:1:8442-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:10156","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:32768:248-0:1209:2661":{"id":"a:1:32768:248-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:1209:2661":{"id":"b:1:2772-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:1251:2707":{"id":"b:1:3077-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13666:3406":{"id":"1:13666:3406","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44391:11138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13646:36014":{"id":"1:13646:36014","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:431:1208":{"id":"0:431:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[40,4],"end":[47,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle byte given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:960":{"id":"0:960","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:961:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:387:1004":{"id":"0:387:1004","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1225,4],"end":[1227,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1242:827":{"id":"0:1242:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,16],"end":[661,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3300:260-0:1243:2702":{"id":"a:1:3300:260-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42628:3941-0:927:2707":{"id":"a:1:42628:3941-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1571:827":{"id":"0:1571:827","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[523,16],"end":[523,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[40,0],"end":[289,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:36:1208","0:37:2618","0:39:2622","0:41:598","0:42:2620","0:44:2623","0:46:2625","0:47:1004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2775-0:1151:2682":{"id":"b:1:2775-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20-0:1418:2375":{"id":"0:20-0:1418:2375","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,12],"end":[206,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr2","name":"Memchr2","id":"0:1418:2375","glob":false}}},"b:1:3087-0:1151:2682":{"id":"b:1:3087-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3081-0:1209:2661":{"id":"b:1:3081-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1417:827":{"id":"0:1417:827","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[287,16],"end":[287,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32827:9718-0:1138:2661":{"id":"a:1:32827:9718-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:962":{"id":"0:962","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,16],"end":[68,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:963:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3090:149":{"id":"1:3090:149","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:68:2618":{"id":"0:68:2618","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[387,4],"end":[395,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400:2677":{"id":"0:400:2677","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1266,4],"end":[1271,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3943-0:1264:2771":{"id":"b:1:3943-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:1572:4015":{"id":"b:1:3943-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5727:36730":{"id":"5:5727:36730","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523:2676":{"id":"0:523:2676","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[984,4],"end":[986,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3087-0:986:2771":{"id":"b:1:3087-0:986:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32827:9718-0:949:2773":{"id":"a:1:32827:9718-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3335:10115-0:1201:2602":{"id":"a:1:3335:10115-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:28:2362":{"id":"0:28:2362","crate_id":0,"name":"memchr","span":{"filename":"src/arch/all/memchr.rs","begin":[1,0],"end":[1022,1]},"visibility":"public","docs":"Provides architecture independent implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers\nare typically slower than hand-coded vector routines accomplishing the same\ntask, but are also typically faster than naive scalar code. These routines\neffectively work by treating a `usize` as a vector of 8-bit lanes, and thus\nachieves some level of data parallelism even without explicit vector support.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:915:2702","`One::count`":"0:41:598","`One`":"0:871:2602","`Two`":"0:892:2682","`One::find`":"0:37:2618","`OneIter`":"0:879:2661"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:871:2602","0:879:2661","0:892:2682","0:902:2694","0:915:2702","0:927:2707"],"is_stripped":false}}},"1:8444:184":{"id":"1:8444:184","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[108,0],"end":[270,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:187:1208","0:188:2618"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:287:2117":{"id":"0:287:2117","crate_id":0,"name":"avx2","span":{"filename":"src/arch/x86_64/avx2/mod.rs","begin":[1,0],"end":[6,19]},"visibility":"public","docs":"Algorithms for the `x86_64` target using 256-bit vectors via AVX2.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:288:2362","0:405:2506"],"is_stripped":false}}},"0:1230:2694":{"id":"0:1230:2694","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[662,0],"end":[665,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:1222:2682","`Two::iter`":"0:482:1004"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:32827:9718-0:1230:2694","a:1:32768:248-0:1230:2694","a:1:3335:10115-0:1230:2694","a:1:42628:3941-0:1230:2694","a:1:42629:3940-0:1230:2694","a:1:3300:260-0:1230:2694","b:1:2775-0:1230:2694","b:1:2772-0:1230:2694","b:1:3092-0:1230:2694","b:1:3943-0:1230:2694","b:1:2804-0:1230:2694","b:1:3087-0:1230:2694","b:1:8442-0:1230:2694","b:1:3081-0:1230:2694","b:1:3077-0:1230:2694","b:5:784-0:1230:2694","0:485","0:497","0:492","0:1239","0:1235"]}}},"1:13670:36017":{"id":"1:13670:36017","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44669:14389","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:768:184":{"id":"0:768:184","crate_id":0,"name":"Item","span":{"filename":"src/memmem/mod.rs","begin":[351,4],"end":[351,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"a:1:42628:3941-0:915:2702":{"id":"a:1:42628:3941-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3943-0:1418:2375":{"id":"b:1:3943-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2775-0:892:2682":{"id":"b:1:2775-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:1222:2682":{"id":"b:1:3077-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13649:2738":{"id":"1:13649:2738","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42537:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3087-0:871:2602":{"id":"b:1:3087-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1200:827":{"id":"0:1200:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:2788":{"id":"0:132:2788","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[69,4],"end":[101,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3943-0:915:2702":{"id":"b:1:3943-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[310,0],"end":[334,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","map_windows","skip_while","size_hint","intersperse","count","partial_cmp_by","chain","max_by","try_reduce","cloned","partition_in_place","fuse","take_while","cmp","intersperse_with","ne","eq_by","zip","max_by_key","find_map","cycle","is_partitioned","inspect","map_while","copied","for_each","next_chunk","rev","last","max","array_chunks","eq","try_find","is_sorted","try_fold","by_ref","map","scan","filter","find","advance_by","min","is_sorted_by","enumerate","sum","position","try_for_each","try_collect","flat_map","filter_map","nth","partial_cmp","is_sorted_by_key","take","product","rposition","min_by","fold","skip","collect_into","flatten","all","peekable","le","step_by","ge","collect","lt","__iterator_get_unchecked","any","cmp_by","unzip","min_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:55:184","0:56:1222","0:58:598","0:60:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:338:1208":{"id":"0:338:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[533,4],"end":[540,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:1572:4015":{"id":"b:5:784-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:915:2702":{"id":"b:1:3077-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1196":{"id":"0:1196","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1197:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1418:2375":{"id":"0:1418:2375","crate_id":0,"name":"Memchr2","span":{"filename":"src/memchr.rs","begin":[364,0],"end":[368,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr2_iter`] or `[memrchr2_iter`]\nfunctions. It can also be created with the [`Memchr2::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`Memchr2::new`":"0:629:1208","`memchr2_iter`":"0:604:2364"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:627","a:1:32827:9718-0:1418:2375","a:1:32768:248-0:1418:2375","a:1:3335:10115-0:1418:2375","a:1:42628:3941-0:1418:2375","a:1:42629:3940-0:1418:2375","a:1:3300:260-0:1418:2375","b:1:2775-0:1418:2375","b:1:2772-0:1418:2375","b:1:3092-0:1418:2375","b:1:3943-0:1418:2375","b:1:2804-0:1418:2375","b:1:3087-0:1418:2375","b:1:8442-0:1418:2375","b:1:3081-0:1418:2375","b:1:3077-0:1418:2375","b:5:784-0:1418:2375","0:1423","0:636","0:1426","0:640","0:630"]}}},"b:1:2772-0:949:2773":{"id":"b:1:2772-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:538:1208":{"id":"0:538:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[34,4],"end":[36,5]},"visibility":"public","docs":"Create a new pair searcher. The searcher returned can either report\nexact matches of `needle` or act as a prefilter and report candidate\npositions of `needle`.\n\nIf SSE2 is unavailable in the current environment or if a [`Pair`]\ncould not be constructed from the needle given, then `None` is\nreturned.","links":{"`Pair`":"0:949:2773"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:1264:2771":{"id":"b:1:3092-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42628:3941-0:1552:2771":{"id":"a:1:42628:3941-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3087-0:902:2694":{"id":"b:1:3087-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:1151:2682":{"id":"b:1:3077-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1198":{"id":"0:1198","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,16],"end":[22,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1193:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:601:2367":{"id":"0:601:2367","crate_id":0,"name":"memchr_iter","span":{"filename":"src/memchr.rs","begin":[216,0],"end":[218,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:992:2771":{"id":"b:1:3081-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:8446:982":{"id":"1:8446:982","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3300:260-0:1172:2702":{"id":"a:1:3300:260-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2804-0:1552:2771":{"id":"b:1:2804-0:1552:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1552:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32827:9718-0:1264:2771":{"id":"a:1:32827:9718-0:1264:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1264:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:739:3965":{"id":"0:739:3965","crate_id":0,"name":"find_iter","span":{"filename":"src/memmem/mod.rs","begin":[116,0],"end":[121,1]},"visibility":"public","docs":"Returns an iterator over all non-overlapping occurrences of a substring in\na haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet mut it = memmem::find_iter(haystack, b\"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"N"}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"type":{"bounds":[{"outlives":"'n"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:3045:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1188:494":{"id":"0:1188:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,9],"end":[1241,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3091:1852":{"id":"1:3091:1852","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42667:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2807-0:992:2771":{"id":"b:1:2807-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32827:9718-0:1222:2682":{"id":"a:1:32827:9718-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:636":{"id":"0:636","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[405,0],"end":[417,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","nth_back","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:8476:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:638:2677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:871:2602":{"id":"0:871:2602","crate_id":0,"name":"One","span":{"filename":"src/arch/all/memchr.rs","begin":[35,0],"end":[38,1]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:34","a:1:32827:9718-0:871:2602","a:1:32768:248-0:871:2602","a:1:3335:10115-0:871:2602","a:1:42628:3941-0:871:2602","a:1:42629:3940-0:871:2602","a:1:3300:260-0:871:2602","b:1:2775-0:871:2602","b:1:2772-0:871:2602","b:1:3092-0:871:2602","b:1:3943-0:871:2602","b:1:2807-0:871:2602","b:1:2804-0:871:2602","b:1:3087-0:871:2602","b:1:3081-0:871:2602","b:1:3077-0:871:2602","b:5:784-0:871:2602","0:874","0:876","0:877"]}}},"b:1:3092-0:940:2771":{"id":"b:1:3092-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3092-0:964:3157":{"id":"b:1:3092-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2807-0:1000:3157":{"id":"b:1:2807-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:194:2622":{"id":"0:194:2622","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/twoway.rs","begin":[301,4],"end":[314,5]},"visibility":"public","docs":"Returns the last occurrence of `needle` in the given `haystack`, or\n`None` if no such occurrence could be found.\n\nThe `needle` given must be the same as the `needle` provided to\n[`FinderRev::new`].\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{"`FinderRev::new`":"0:193:1208"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3087-0:957:2771":{"id":"b:1:3087-0:957:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:957:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1178":{"id":"0:1178","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,22],"end":[894,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1179:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42629:3940-0:1243:2702":{"id":"a:1:42629:3940-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:638:2677":{"id":"0:638:2677","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[407,4],"end":[416,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:640":{"id":"0:640","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[419,0],"end":[419,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8891:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:748:2622":{"id":"0:748:2622","crate_id":0,"name":"rfind","span":{"filename":"src/memmem/mod.rs","begin":[222,0],"end":[228,1]},"visibility":"public","docs":"Returns the index of the last occurrence of the given needle.\n\nNote that if you're are searching for the same needle in many different\nsmall haystacks, it may be faster to initialize a [`FinderRev`] once,\nand reuse it for each search.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), memmem::rfind(haystack, b\"foo\"));\nassert_eq!(Some(4), memmem::rfind(haystack, b\"bar\"));\nassert_eq!(Some(8), memmem::rfind(haystack, b\"ba\"));\nassert_eq!(None, memmem::rfind(haystack, b\"quux\"));\n```","links":{"`FinderRev`":"0:1562:3157"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1544":{"id":"0:1544","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[313,9],"end":[313,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1547:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:55:184":{"id":"0:55:184","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[311,4],"end":[311,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:3087-0:915:2702":{"id":"b:1:3087-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32827:9718-0:1159:2694":{"id":"a:1:32827:9718-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1229:827":{"id":"0:1229:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,22],"end":[404,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:1429:2376":{"id":"b:5:784-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8442-0:1418:2375":{"id":"b:1:8442-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:10156","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:949:2773":{"id":"0:949:2773","crate_id":0,"name":"Pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[135,0],"end":[138,1]},"visibility":"public","docs":"A pair of byte offsets into a needle to use as a predicate.\n\nThis pair is used as a predicate to quickly filter out positions in a\nhaystack in which a needle cannot match. In some cases, this pair can even\nbe used in vector algorithms such that the vector algorithm only switches\nover to scalar code once this pair has been found.\n\nA pair of offsets can be used in both substring search implementations and\nin prefilters. The former will report matches of a needle in a haystack\nwhere as the latter will only report possible matches of a needle.\n\nThe offsets are limited each to a maximum of 255 to keep memory usage low.\nMoreover, it's rarely advantageous to create a predicate using offsets\ngreater than 255 anyway.\n\nThe only guarantee enforced on the pair of offsets is that they are not\nequivalent. It is not necessarily the case that `index1 < index2` for\nexample. By convention, `index1` corresponds to the byte in the needle\nthat is believed to be most the predictive. Note also that because of the\nrequirement that the indices be both valid for the needle used to build\nthe pair and not equal, it follows that a pair can only be constructed for\nneedles with length at least 2.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:135","a:1:32827:9718-0:949:2773","a:1:32768:248-0:949:2773","a:1:3335:10115-0:949:2773","a:1:42628:3941-0:949:2773","a:1:42629:3940-0:949:2773","a:1:3300:260-0:949:2773","b:1:2775-0:949:2773","b:1:2772-0:949:2773","b:1:3092-0:949:2773","b:1:3943-0:949:2773","b:1:2807-0:949:2773","b:1:2804-0:949:2773","b:1:3087-0:949:2773","b:1:3081-0:949:2773","b:1:3077-0:949:2773","b:5:784-0:949:2773","0:955","0:954","0:952"]}}},"b:1:3077-0:1230:2694":{"id":"b:1:3077-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:630":{"id":"0:630","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[386,0],"end":[403,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","map_windows","skip_while","size_hint","intersperse","count","partial_cmp_by","chain","max_by","try_reduce","cloned","partition_in_place","fuse","take_while","cmp","intersperse_with","ne","eq_by","zip","max_by_key","find_map","cycle","is_partitioned","inspect","map_while","copied","for_each","next_chunk","rev","last","max","array_chunks","eq","try_find","is_sorted","try_fold","by_ref","map","scan","filter","find","advance_by","min","is_sorted_by","enumerate","sum","position","try_for_each","try_collect","flat_map","filter_map","nth","partial_cmp","is_sorted_by_key","take","product","rposition","min_by","fold","skip","collect_into","flatten","all","peekable","le","step_by","ge","collect","lt","__iterator_get_unchecked","any","cmp_by","unzip","min_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:632:184","0:633:1222","0:635:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:788:27793":{"id":"5:788:27793","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:459:2676":{"id":"0:459:2676","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[382,4],"end":[384,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13648:32717":{"id":"1:13648:32717","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12470:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1201:2602":{"id":"0:1201:2602","crate_id":0,"name":"One","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[29,0],"end":[29,38]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:430","a:1:32827:9718-0:1201:2602","a:1:32768:248-0:1201:2602","a:1:3335:10115-0:1201:2602","a:1:42628:3941-0:1201:2602","a:1:42629:3940-0:1201:2602","a:1:3300:260-0:1201:2602","b:1:2775-0:1201:2602","b:1:2772-0:1201:2602","b:1:3092-0:1201:2602","b:1:3943-0:1201:2602","b:1:2807-0:1201:2602","b:1:2804-0:1201:2602","b:1:3087-0:1201:2602","b:1:3081-0:1201:2602","b:1:3077-0:1201:2602","b:5:784-0:1201:2602","0:1206","0:1207","0:1204"]}}},"a:1:42629:3940-0:1159:2694":{"id":"a:1:42629:3940-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3300:260-0:1180:2707":{"id":"a:1:3300:260-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1225":{"id":"0:1225","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,9],"end":[404,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1226:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42629:3940-0:1538:3972":{"id":"a:1:42629:3940-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3077-0:1418:2375":{"id":"b:1:3077-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:892:2682":{"id":"a:1:32768:248-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42628:3941-0:1572:4015":{"id":"a:1:42628:3941-0:1572:4015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:101:2623":{"id":"0:101:2623","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[767,4],"end":[798,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:1130:2602":{"id":"b:5:784-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:546:2772":{"id":"0:546:2772","crate_id":0,"name":"pair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[161,4],"end":[163,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32827:9718-0:1243:2702":{"id":"a:1:32827:9718-0:1243:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1243:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1483:3944":{"id":"0:1483:3944","crate_id":0,"name":"PrefilterConfig","span":{"filename":"src/memmem/searcher.rs","begin":[544,0],"end":[551,1]},"visibility":"public","docs":"Prefilter controls whether heuristics are used to accelerate searching.\n\nA prefilter refers to the idea of detecting candidate matches very quickly,\nand then confirming whether those candidates are full matches. This\nidea can be quite effective since it's often the case that looking for\ncandidates can be a lot faster than running a complete substring search\nover the entire input. Namely, looking for candidates can be done with\nextremely fast vectorized code.\n\nThe downside of a prefilter is that it assumes false positives (which are\ncandidates generated by a prefilter that aren't matches) are somewhat rare\nrelative to the frequency of full matches. That is, if a lot of false\npositives are generated, then it's possible for search time to be worse\nthan if the prefilter wasn't enabled in the first place.\n\nAnother downside of a prefilter is that it can result in highly variable\nperformance, where some cases are extraordinarily fast and others aren't.\nTypically, variable performance isn't a problem, but it may be for your use\ncase.\n\nThe use of prefilters in this implementation does use a heuristic to detect\nwhen a prefilter might not be carrying its weight, and will dynamically\ndisable its use. Nevertheless, this configuration option gives callers\nthe ability to disable prefilters if you have knowledge that they won't be\nuseful.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1484:202","0:1486:4217"],"impls":["a:1:32827:9718-0:1483:3944","a:1:32768:248-0:1483:3944","a:1:3335:10115-0:1483:3944","a:1:42628:3941-0:1483:3944","a:1:42629:3940-0:1483:3944","a:1:3300:260-0:1483:3944","b:1:2775-0:1483:3944","b:1:2772-0:1483:3944","b:1:3092-0:1483:3944","b:1:3943-0:1483:3944","b:1:2807-0:1483:3944","b:1:2804-0:1483:3944","b:1:3087-0:1483:3944","b:1:3081-0:1483:3944","b:1:3077-0:1483:3944","b:5:784-0:1483:3944","0:705","0:1488","0:1490","0:1491"]}}},"b:1:3081-0:1523:3967":{"id":"b:1:3081-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:992:2771":{"id":"a:1:32768:248-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42629:3940-0:1151:2682":{"id":"a:1:42629:3940-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1566":{"id":"0:1566","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[523,9],"end":[523,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1562:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1568:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1146:494":{"id":"0:1146:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,9],"end":[466,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:1538:3972":{"id":"b:5:784-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3943-0:986:2771":{"id":"b:1:3943-0:986:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3081-0:1418:2375":{"id":"b:1:3081-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:405:2506":{"id":"0:405:2506","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[1,0],"end":[272,1]},"visibility":"public","docs":"A 256-bit vector implementation of the \"packed pair\" SIMD algorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1193:2771"],"is_stripped":false}}},"1:13701:36019":{"id":"1:13701:36019","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13326:10079","str::split":"1:13689:32741","prim@char":"4:12451:490","str::split_terminator":"1:13698:36018"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44473:14378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:15957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:1483:3944":{"id":"b:5:784-0:1483:3944","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1483:3944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13759:3860":{"id":"1:13759:3860","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1164":{"id":"0:1164","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,9],"end":[854,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1167:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1221:827":{"id":"0:1221:827","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,16],"end":[355,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:504:2618":{"id":"0:504:2618","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[771,4],"end":[779,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2806:27786":{"id":"1:2806:27786","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:902:2694":{"id":"b:1:3081-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1538:3972":{"id":"0:1538:3972","crate_id":0,"name":"FindRevIter","span":{"filename":"src/memmem/mod.rs","begin":[314,0],"end":[320,1]},"visibility":"public","docs":"An iterator over non-overlapping substring matches in reverse.\n\nMatches are reported by the byte offset at which they begin.\n\n`'h` is the lifetime of the haystack while `'n` is the lifetime of the\nneedle.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:760","a:1:32827:9718-0:1538:3972","a:1:32768:248-0:1538:3972","a:1:3335:10115-0:1538:3972","a:1:42628:3941-0:1538:3972","a:1:42629:3940-0:1538:3972","a:1:3300:260-0:1538:3972","b:1:2775-0:1538:3972","b:1:2772-0:1538:3972","b:1:3092-0:1538:3972","b:1:3943-0:1538:3972","b:1:2804-0:1538:3972","b:1:3087-0:1538:3972","b:1:8442-0:1538:3972","b:1:3081-0:1538:3972","b:1:3077-0:1538:3972","b:5:784-0:1538:3972","0:1548","0:765","0:1544"]}}},"0:1134:494":{"id":"0:1134:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3943-0:1230:2694":{"id":"b:1:3943-0:1230:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1230:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2804-0:949:2773":{"id":"b:1:2804-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:307:2623":{"id":"0:307:2623","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[245,4],"end":[275,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:625":{"id":"0:625","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[351,0],"end":[351,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8891:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:436:2622":{"id":"0:436:2622","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[110,4],"end":[118,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:915:2702":{"id":"b:1:2772-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:326:598":{"id":"0:326:598","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[484,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:907":{"id":"0:907","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[567,9],"end":[567,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:910:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112:1222":{"id":"0:112:1222","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[847,4],"end":[852,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8442-0:1523:3967":{"id":"b:1:8442-0:1523:3967","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:10156","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:8-0:593:2363":{"id":"0:8-0:593:2363","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,12],"end":[204,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr2","name":"memchr2","id":"0:593:2363","glob":false}}},"a:1:32827:9718-0:892:2682":{"id":"a:1:32827:9718-0:892:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3077-0:940:2771":{"id":"b:1:3077-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:784-0:949:2773":{"id":"b:5:784-0:949:2773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:599:2371":{"id":"0:599:2371","crate_id":0,"name":"memrchr3","span":{"filename":"src/memchr.rs","begin":[196,0],"end":[209,1]},"visibility":"public","docs":"Search for the last occurrence of three possible bytes in a haystack.\n\nThis returns the index corresponding to the last occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle1 || b == needle2 || b == needle3)`,\nthis routine will attempt to use highly optimized vector operations that\ncan be an order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the last position of one of three possible bytes in\na haystack.\n\n```\nuse memchr::memrchr3;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr3(b'k', b'o', b'n', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:927:2707":{"id":"0:927:2707","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/all/memchr.rs","begin":[836,0],"end":[841,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:103:1004","`Three`":"0:915:2702"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:32827:9718-0:927:2707","a:1:32768:248-0:927:2707","a:1:3335:10115-0:927:2707","a:1:42628:3941-0:927:2707","a:1:42629:3940-0:927:2707","a:1:3300:260-0:927:2707","b:1:2775-0:927:2707","b:1:2772-0:927:2707","b:1:3092-0:927:2707","b:1:3943-0:927:2707","b:1:2804-0:927:2707","b:1:3087-0:927:2707","b:1:8442-0:927:2707","b:1:3081-0:927:2707","b:1:3077-0:927:2707","b:5:784-0:927:2707","0:932","0:115","0:108","0:936"]}}},"a:1:3335:10115-0:1209:2661":{"id":"a:1:3335:10115-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2804-0:1222:2682":{"id":"b:1:2804-0:1222:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1222:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:139:2850":{"id":"0:139:2850","crate_id":0,"name":"with_indices","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[214,4],"end":[234,5]},"visibility":"public","docs":"Create a new pair using the offsets given for the needle given.\n\nThis bypasses any sort of heuristic process for choosing the offsets\nand permits the caller to choose the offsets themselves.\n\nIndices are limited to valid `u8` values so that a `Pair` uses less\nmemory. It is not possible to create a `Pair` with offsets bigger than\n`u8::MAX`. It's likely that such a thing is not needed, but if it is,\nit's suggested to build your own bespoke algorithm because you're\nlikely working on a very niche case. (File an issue if this suggestion\ndoes not make sense to you.)\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["index1",{"primitive":"u8"}],["index2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:954":{"id":"0:954","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,16],"end":[134,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:949:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3943-0:1159:2694":{"id":"b:1:3943-0:1159:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1159:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32768:248-0:1201:2602":{"id":"a:1:32768:248-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3087-0:1251:2707":{"id":"b:1:3087-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:794:1208":{"id":"0:794:1208","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[660,4],"end":[662,5]},"visibility":"public","docs":"Create a new finder builder with default settings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:1538:3972":{"id":"b:1:2772-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:478:2623":{"id":"0:478:2623","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[576,4],"end":[597,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:940:2771":{"id":"b:1:3081-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:784-0:1251:2707":{"id":"b:5:784-0:1251:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1259:494":{"id":"0:1259:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,9],"end":[966,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3335:10115-0:902:2694":{"id":"a:1:3335:10115-0:902:2694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:902:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42629:3940-0:1130:2602":{"id":"a:1:42629:3940-0:1130:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:1201:2602":{"id":"b:1:2772-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:1138:2661":{"id":"b:1:3077-0:1138:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1138:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:377:2622":{"id":"0:377:2622","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1003,4],"end":[1011,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:635:2676":{"id":"0:635:2676","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[400,4],"end":[402,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2807-0:940:2771":{"id":"b:1:2807-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2809:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1578":{"id":"0:1578","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,23],"end":[653,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1572:4015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1579:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:430":{"id":"0:430","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[31,0],"end":[342,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:431:1208","0:432:1217","0:433:3653","0:434:2618","0:436:2622","0:438:598","0:439:2620","0:441:2623","0:443:2625","0:448:1004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:94:1208":{"id":"0:94:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[621,4],"end":[630,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the three needle bytes\ngiven.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3943-0:964:3157":{"id":"b:1:3943-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2772-0:986:2771":{"id":"b:1:2772-0:986:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:986:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2775-0:1172:2702":{"id":"b:1:2775-0:1172:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1172:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:503:3653":{"id":"0:503:3653","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[754,4],"end":[763,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Three::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Three::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Three::new`":"0:501:1208"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42628:3941-0:964:3157":{"id":"a:1:42628:3941-0:964:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:964:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3092-0:927:2707":{"id":"b:1:3092-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42628:3941-0:1151:2682":{"id":"a:1:42628:3941-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42629:3940-0:1180:2707":{"id":"a:1:42629:3940-0:1180:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3087-0:992:2771":{"id":"b:1:3087-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42628:3941-0:1201:2602":{"id":"a:1:42628:3941-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3335:10115-0:1418:2375":{"id":"a:1:3335:10115-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3300:260-0:879:2661":{"id":"a:1:3300:260-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[860,0],"end":[868,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","nth_back","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:8476:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:118:2677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42628:3941-0:1408:2374":{"id":"a:1:42628:3941-0:1408:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1408:2374","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32827:9718-0:1538:3972":{"id":"a:1:32827:9718-0:1538:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1538:3972","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13766:32669":{"id":"1:13766:32669","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:39884"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:1201:2602":{"id":"b:1:3081-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:124:2506":{"id":"0:124:2506","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[1,0],"end":[359,1]},"visibility":"public","docs":"Provides an architecture independent implementation of the \"packed pair\"\nalgorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for. Note that\nthis module provides an architecture independent version that doesn't do as\ngood of a job keeping the search for candidates inside a SIMD hot path. It\nhowever can be good enough in many circumstances.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:940:2771","0:949:2773","0:142:2830"],"is_stripped":false}}},"b:1:2772-0:1151:2682":{"id":"b:1:2772-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:472:2618":{"id":"0:472:2618","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[470,4],"end":[478,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:623:2677":{"id":"0:623:2677","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[343,4],"end":[348,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42629:3940-0:940:2771":{"id":"a:1:42629:3940-0:940:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2775-0:1418:2375":{"id":"b:1:2775-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:784-0:992:2771":{"id":"b:5:784-0:992:2771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:992:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3832","5:787:27792","5:788:27793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13736:36028":{"id":"1:13736:36028","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12451:490","self::pattern":"1:13326:10079"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13352:15956","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3077-0:927:2707":{"id":"b:1:3077-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3077-0:1429:2376":{"id":"b:1:3077-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3080:4523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2804-0:1429:2376":{"id":"b:1:2804-0:1429:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:4616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1429:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2806:27786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3092-0:1201:2602":{"id":"b:1:3092-0:1201:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1201:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:875:494":{"id":"0:875:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130:1208":{"id":"0:130:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[45,4],"end":[47,5]},"visibility":"public","docs":"Create a new prefilter that reports possible locations where the given\nneedle matches.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:940:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:1151:2682":{"id":"b:1:3092-0:1151:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1151:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1138:2661":{"id":"0:1138:2661","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[467,0],"end":[470,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:1130:2602","`One::iter`":"0:317:1004"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:32827:9718-0:1138:2661","a:1:32768:248-0:1138:2661","a:1:3335:10115-0:1138:2661","a:1:42628:3941-0:1138:2661","a:1:42629:3940-0:1138:2661","a:1:3300:260-0:1138:2661","b:1:2775-0:1138:2661","b:1:2772-0:1138:2661","b:1:3092-0:1138:2661","b:1:3943-0:1138:2661","b:1:2804-0:1138:2661","b:1:3087-0:1138:2661","b:1:8442-0:1138:2661","b:1:3081-0:1138:2661","b:1:3077-0:1138:2661","b:5:784-0:1138:2661","0:329","0:1147","0:320","0:1143","0:334"]}}},"0:156:2618":{"id":"0:156:2618","crate_id":0,"name":"find","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[111,4],"end":[120,5]},"visibility":"public","docs":"Return the first occurrence of the `needle` in the `haystack`\ngiven. If no such occurrence exists, then `None` is returned.\n\nThe `needle` provided must match the needle given to this finder at\nconstruction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193:1208":{"id":"0:193:1208","crate_id":0,"name":"new","span":{"filename":"src/arch/all/twoway.rs","begin":[278,4],"end":[290,5]},"visibility":"public","docs":"Create a searcher that finds occurrences of the given `needle`.\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1185":{"id":"0:1185","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,9],"end":[1241,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1180:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1188:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:19-0:1408:2374":{"id":"0:19-0:1408:2374","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,4],"end":[206,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr","name":"Memchr","id":"0:1408:2374","glob":false}}},"0:1425:494":{"id":"0:1425:494","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[363,9],"end":[363,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13716:4219":{"id":"1:13716:4219","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13326:10079","`DoubleEndedIterator`":"1:8476:133","prim@char":"4:12451:490","str::rmatches":"1:13719:36020"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44609:14386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:15078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:341:2618":{"id":"0:341:2618","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[604,4],"end":[612,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:879:2661":{"id":"b:1:2772-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2774:4532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1004:494":{"id":"0:1004:494","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/twoway.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:775:3965":{"id":"0:775:3965","crate_id":0,"name":"find_iter","span":{"filename":"src/memmem/mod.rs","begin":[457,4],"end":[462,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of a substring in a haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::Finder;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet finder = Finder::new(b\"foo\");\nlet mut it = finder.find_iter(haystack);\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1523:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:892:2682":{"id":"0:892:2682","crate_id":0,"name":"Two","span":{"filename":"src/arch/all/memchr.rs","begin":[352,0],"end":[357,1]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:66","a:1:32827:9718-0:892:2682","a:1:32768:248-0:892:2682","a:1:3335:10115-0:892:2682","a:1:42628:3941-0:892:2682","a:1:42629:3940-0:892:2682","a:1:3300:260-0:892:2682","b:1:2775-0:892:2682","b:1:2772-0:892:2682","b:1:3092-0:892:2682","b:1:3943-0:892:2682","b:1:2807-0:892:2682","b:1:2804-0:892:2682","b:1:3087-0:892:2682","b:1:3081-0:892:2682","b:1:3077-0:892:2682","b:5:784-0:892:2682","0:899","0:900","0:897"]}}},"a:1:3335:10115-0:927:2707":{"id":"a:1:3335:10115-0:927:2707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:927:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3087-0:1418:2375":{"id":"b:1:3087-0:1418:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1418:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2775-0:915:2702":{"id":"b:1:2775-0:915:2702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:915:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:529":{"id":"0:529","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[999,0],"end":[999,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8891:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1251:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7-0:589:2362":{"id":"0:7-0:589:2362","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr","name":"memchr","id":"0:589:2362","glob":false}}},"0:360:1222":{"id":"0:360:1222","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[864,4],"end":[869,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:915:2702":{"id":"0:915:2702","crate_id":0,"name":"Three","span":{"filename":"src/arch/all/memchr.rs","begin":[608,0],"end":[615,1]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:93","a:1:32827:9718-0:915:2702","a:1:32768:248-0:915:2702","a:1:3335:10115-0:915:2702","a:1:42628:3941-0:915:2702","a:1:42629:3940-0:915:2702","a:1:3300:260-0:915:2702","b:1:2775-0:915:2702","b:1:2772-0:915:2702","b:1:3092-0:915:2702","b:1:3943-0:915:2702","b:1:2807-0:915:2702","b:1:2804-0:915:2702","b:1:3087-0:915:2702","b:1:3081-0:915:2702","b:1:3077-0:915:2702","b:5:784-0:915:2702","0:925","0:924","0:922"]}}},"b:1:8442-0:1209:2661":{"id":"b:1:8442-0:1209:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1209:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:10156","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1000:3157":{"id":"0:1000:3157","crate_id":0,"name":"FinderRev","span":{"filename":"src/arch/all/twoway.rs","begin":[41,0],"end":[41,29]},"visibility":"public","docs":"A reverse substring searcher that uses the Two-Way algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:192","a:1:32827:9718-0:1000:3157","a:1:32768:248-0:1000:3157","a:1:3335:10115-0:1000:3157","a:1:42628:3941-0:1000:3157","a:1:42629:3940-0:1000:3157","a:1:3300:260-0:1000:3157","b:1:2775-0:1000:3157","b:1:2772-0:1000:3157","b:1:3092-0:1000:3157","b:1:3943-0:1000:3157","b:1:2807-0:1000:3157","b:1:2804-0:1000:3157","b:1:3087-0:1000:3157","b:1:3081-0:1000:3157","b:1:3077-0:1000:3157","b:5:784-0:1000:3157","0:1006","0:1003","0:1005"]}}},"0:899":{"id":"0:899","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,16],"end":[351,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:892:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32768:248-0:879:2661":{"id":"a:1:32768:248-0:879:2661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:879:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:296":{"id":"0:296","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[36,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:1130:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:297:1208","0:298:1217","0:299:3653","0:300:2618","0:302:2622","0:304:598","0:305:2620","0:307:2623","0:309:2625","0:317:1004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32827:9718-0:871:2602":{"id":"a:1:32827:9718-0:871:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:9718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:871:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:9-0:604:2364":{"id":"0:9-0:604:2364","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,21],"end":[204,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr2_iter","name":"memchr2_iter","id":"0:604:2364","glob":false}}},"a:1:3335:10115-0:1000:3157":{"id":"a:1:3335:10115-0:1000:3157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:10115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1000:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"1:23285:14037":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:14997:11606":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:7578:13946":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:2966:12163":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:4349:16426":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:16036:11905":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:7058:12345":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:46972:14507":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:8273:13793":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:7971:9657":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:11592:11112":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:6043:14894":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:46372:14448":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:10562:10208":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:7114:16543":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:46611:14474":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:44375:14371":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:12052:13988":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:6823:13582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:15836:11851":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"4:1635:12659":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"11:2380:2664":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:2640:12148":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:14374:4631":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:4921:13999":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:506:11073":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"11:102:12647":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:10500:237":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:10555:122":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:13951:15089":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:11358:23610":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7969:12485":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5570:13317":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6852:12320":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:6537:231":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:32827:9718":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"6:6564:13479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:22121:16012":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:42515:14334":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:40923:14290":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:1696:12955":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:682:14939":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:12018:14748":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:11949:14969":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12736:14781":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:7959:12484":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:23217:14035":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:23435:14060":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:3352:14962":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:473:12758":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:948:14907":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"9:236:14358":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:8578:15026":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:6813:13579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:15689:11812":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:15077:11614":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:11248:13938":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:8516:16359":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:3054:156":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"5:1636:14906":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"14:220:12644":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:4370:2664":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"11:1085:36994":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:44722:14292":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:3373:10325":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:6544:13463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5295:13195":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12605:11171":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11985:14746":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:11998:14747":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:9271:16496":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13983:11391":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:5282:13190":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:11810:14023":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:3126:22665":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:10566:10210":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:9156:13938":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"17:10097:23584":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"4:990:14885":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:44230:14026":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"8:0:4596":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:8694:13913":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:4778:10219":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"0:26:2379":{"crate_id":0,"path":["memchr","arch"],"kind":"module"},"1:7854:9691":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:12762:14783":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:4575:35788":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:7621:13840":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:16297:11991":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:908:14700":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"0:0:2362":{"crate_id":0,"path":["memchr"],"kind":"module"},"1:46845:14486":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:32692:12668":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:11838:13984":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:45208:15981":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:46693:14478":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:23164:14034":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:2880:12159":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:10519:155":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:45339:238":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"11:785:12658":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"4:12477:1456":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"5:7541:10156":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:5493:1004":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:12470:1895":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:10958:13955":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:42756:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:6443:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:2648:14954":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:8635:15027":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8447:9677":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:11016:14719":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:1085:12432":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"11:2495:22592":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:46951:14506":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:41236:9694":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:1521:12841":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:43128:10083":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:44697:14392":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:10564:10209":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"9:355:22533":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:5872:13850":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:789:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:40967:15888":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"0:152:2507":{"crate_id":0,"path":["memchr","arch","all","rabinkarp"],"kind":"module"},"17:13547:14796":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"5:1539:10240":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:2585:13826":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:41548:9706":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:13491:11308":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:12476:1957":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:13341:3947":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:47084:14511":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:515:11003":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:13157:14791":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:34130:10333":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:7951:32507":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:2718:14956":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:10781:168":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"16:7716:37009":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"11:2551:36995":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:45014:14417":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:15602:11795":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:46763:14482":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:2013:16340":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:12392:11205":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:0:2362":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:16701:12091":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"11:685:10240":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:5973:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:44713:14284":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:15286:11630":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:7949:12179":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:4177:16405":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:22288:16360":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:1415:14892":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:11065:14720":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:12472:1883":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"17:13070:11171":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:11319:37016":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:16520:12033":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:46539:14462":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:15:4574":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:14312:11476":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"4:507:32509":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:9323:31661":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:15418:11736":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:22192:3201":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:2732:15942":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"0:171:2508":{"crate_id":0,"path":["memchr","arch","all","shiftor"],"kind":"module"},"4:11021:31674":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"4:7397:32493":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:16132:11943":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:5285:14975":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:13991:9698":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"11:1907:12660":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12095:11184":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:9241:16495":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:45380:15109":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"13:0:4595":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:1539:12852":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:41047:14297":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:23349:14047":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:22072:31576":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:8553:11138":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:47662:9646":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:5586:13322":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:45155:13967":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:7259:12396":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:9751:15357":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:16775:12111":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:14483:11505":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"7:32:22505":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:9190:2664":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:6666:13528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:8000:12181":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:12466:918":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"6:6521:13450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:15760:11833":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:7554:23532":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:3576:154":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:3096:15353":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:10218:23588":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:3140:149":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:13286:15659":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12816:11250":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:47590:14556":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:7487:13703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:4152:12195":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:6708:13546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:4921:13058":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:8010:16360":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5488:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:47519:14553":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:43493:14352":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:14375:11488":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:8736:16459":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6781:12312":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:630:16285":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:47764:9652":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:41265:9696":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:8249:130":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"4:11261:13939":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:9746:15013":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"4:380:14931":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:14947:11589":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:16750:12106":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"4:12471:1877":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"16:7350:12404":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:2530:12143":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:23008:15826":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:2666:15826":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:45197:14432":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"0:1180:2707":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"4:8753:13924":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:14859:11576":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:41274:14304":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:11291:37021":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:830:14893":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:10696:11136":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:1626:14894":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:3092:15352":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:7044:12173":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:4875:13034":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:1584:12883":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"14:165:22599":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:23442:14063":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:9397:13949":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:6998:12334":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:5576:16522":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:15064:11613":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:40848:14284":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:42329:15918":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:16613:11367":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:5562:13315":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11757:23633":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:15655:11809":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:4978:15872":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4914:13054":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:9442:246":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:8077:16289":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:9739:150":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:22070:31578":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:6599:13501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:7549:13838":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"0:1151:2682":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"17:12869:11306":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:8879:13932":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:2335:16342":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:44202:14024":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:7532:4632":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:4163:35761":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:40155:226":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:22994:16098":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:553:12807":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:3987:11031":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:23623:14077":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:15557:11786":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13385:11301":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:7838:23533":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"0:902:2694":{"crate_id":0,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"17:13205:14795":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:45143:14427":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:42441:27891":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:45173:134":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"6:5603:13329":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:5088:13129":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"0:1222:2682":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"4:8368:16391":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6696:14826":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6758:13563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:4984:13084":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"18:581:10130":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:2148:13815":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:10963:13858":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:6173:12237":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4890:13041":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:1907:14946":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"11:1914:12661":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"4:9344:15041":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:22576:16014":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:5318:12218":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:8209:12172":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:10574:10213":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:1984:14949":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"17:14640:11526":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:15946:11882":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"15:394:22626":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:6527:16562":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"17:12035:12663":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:6952:244":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:43560:149":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:11272:31690":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"4:8112:15012":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:33724:10329":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:45139:14426":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:1569:12871":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"11:434:15239":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"0:212:2533":{"crate_id":0,"path":["memchr","arch","all","is_equal_raw"],"kind":"function"},"1:47122:14513":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:5165:13135":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:3300:260":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:2142:1393":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:10560:132":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:15410:11733":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:42793:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:42941:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:42297:14316":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4805:12982":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:623:3362":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:40087:10349":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"4:1647:12661":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:15864:11859":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:6731:13552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:11617:14722":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"11:2566:13841":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:42579:10156":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:523:12789":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:32768:248":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:5051:13117":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:8137:12183":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:5865:231":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:613:3278":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:3695:12192":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:6489:13850":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"0:957:2771":{"crate_id":0,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"4:4569:14973":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:8438:176":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:5658:13356":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"4:3042:14960":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4:8196:11067":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"15:306:15226":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:22:842":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:45329:230":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:2020:810":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:23357:14048":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:1555:10156":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:0:582":{"crate_id":1,"path":["core"],"kind":"module"},"17:16642:12078":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:12962:23728":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:12723:14780":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:8213:13859":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:6910:9708":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:4694:12200":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:1214:15244":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13871:11374":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:44704:14293":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13537:11268":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:6401:9686":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:2378:23658":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:14612:11522":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:4633:15864":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:2415:22635":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:41399:9690":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:47647:9645":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:46714:14479":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:7743:31714":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:11432:23612":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"14:7:14874":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"11:1888:14894":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:11465:11152":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:10729:11137":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:3297:2664":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:10406:15047":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:8626:12557":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:47726:9650":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:6748:13556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:40436:10120":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"11:881:14886":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"9:53:15282":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:6876:13593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:11045:15012":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:8585:14870":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13970:11390":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"4:6600:197":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8203:9660":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:45438:14439":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:15785:11838":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:8839:16472":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"6:5230:13161":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11733:23632":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:6111:12232":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"4:6020:14987":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:282:35761":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:42667:237":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:1727:12967":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:11903:14381":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:11655:14018":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"16:5689:12224":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:15549:11785":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:3786:10355":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:43233:10208":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:12897:11264":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:881:15660":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:14114:11428":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11902:11176":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:4614:4615":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12044:14754":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:44669:14389":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:10115:23585":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:8296:13799":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:3866:14908":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:16362:12009":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:7986:13774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:6302:12258":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:9305:15035":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:929:16305":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:6837:14838":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:3458:10339":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"5:985:16306":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:904:10156":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:2403:4628":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:8612:12186":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:44902:14406":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:6794:12313":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"16:2486:12141":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:12473:1889":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:47294:14548":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:765:4170":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:5622:13343":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:14083:216":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10977:37019":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:10843:11141":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"11:708:14878":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:9536:9828":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"17:14520:11509":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:4529:13950":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12066:11180":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:14750:11558":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:1597:12890":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"18:643:11000":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:44211:14025":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:386:14933":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:3720:10240":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:1605:14878":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13798:11357":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:8320:23536":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:12474:1871":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"0:532:2506":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","packedpair"],"kind":"module"},"6:5271:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:889:14901":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:16595:11357":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:3587:12191":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"17:16656:12082":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:6808:12165":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13014:14786":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:44473:14378":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12008:11066":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:12952:11270":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:16507:11353":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:6159:13836":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:2748:12153":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4902:13045":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:40854:14285":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:41389:9703":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:5311:13202":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:7766:13846":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:7919:14861":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:15963:11886":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:4298:13950":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:10167:23587":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:1108:14888":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13945:11387":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:7802:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:2266:13816":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:5217:13157":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4829:13000":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:14299:11474":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"11:2301:12432":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:11249:30080":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:11163:11171":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:46472:14458":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:3350:14961":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:41757:9663":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6419:13399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5025:13106":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7907:12480":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:7368:13659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:7263:35792":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:46553:14463":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:12487:15836":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:3048:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"11:2148:14888":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:1898:15778":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:6827:16490":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:5449:12222":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:7168:12370":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:7016:12341":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:15739:11829":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13719:11338":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"0:1523:3967":{"crate_id":0,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:8572:15024":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:9198:15034":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:4186:10156":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:7604:13768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:16019:11898":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:6716:13550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"4:663:14936":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4929:13060":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:7099:9688":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:3759:10351":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:15973:11889":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:22174:16008":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:1507:12836":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:10274:23590":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"18:563:11005":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:47167:14514":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"16:896:14797":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:13933:11384":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:4499:35788":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:9768:130":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"4:8049:11209":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:8235:151":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:13332:15078":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:8201:15013":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:938:14894":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:44627:14387":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:1491:167":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:6310:32498":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:11280:13967":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:45347:218":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:47688:9648":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:3077:149":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:42629:3940":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:8284:13815":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:8199:13788":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:0:1757":{"crate_id":4,"path":["std"],"kind":"module"},"4:4825:13670":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:12873:3422":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4792:12973":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:44151:15103":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:46649:14476":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6843:12319":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13733:11339":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13349:11299":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:14220:11440":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:3916:14969":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:5341:13211":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:6931:35761":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:5551:13309":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11515:14727":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:8894:9674":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:2652:694":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:5195:16455":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:15136:11268":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:22055:31573":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:5426:16519":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"6:479:12761":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:903:14699":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"4:6895:15001":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"5:3707:2664":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:5127:13132":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:6759:35761":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:11421:14725":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:14438:11499":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:2482:16345":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"4:912:12657":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:12465:936":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"6:5255:13173":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:6480:13429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:6123:12170":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5357:13213":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"18:735:4090":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:768:165":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:8566:14388":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:11931:15084":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:2368:13825":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6942:12332":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:10332:23592":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:2859:146":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:2508:16355":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"5:4562:13950":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"11:671:2664":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:44351:14367":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:10501:10207":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:6287:9697":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:2480:15815":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:12204:11194":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:4495:14972":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:14547:11514":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5629:13346":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:3075:237":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"17:13006:11276":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:13968:15092":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:583:14702":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:12451:490":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"16:5144:12212":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:11029:31685":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"9:445:22518":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:3310:32346":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:14108:15093":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"0:940:2771":{"crate_id":0,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"1:40944:14292":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:2796:12155":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:10394:23594":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:6269:12251":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:589:3217":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:7825:32462":{"crate_id":4,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"16:2820:12156":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:2766:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:1099:14887":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11232:23613":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:1401:14887":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:15315:11650":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:3694:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"0:210:2522":{"crate_id":0,"path":["memchr","arch","all","is_suffix"],"kind":"function"},"4:439:196":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:43757:14357":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"18:689:3157":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:3048:22664":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:11281:14723":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"0:211:2520":{"crate_id":0,"path":["memchr","arch","all","is_equal"],"kind":"function"},"4:4815:16405":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:16218:11970":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5117:13131":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:6881:14997":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:15160:11628":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:16209:11968":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:10572:10212":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:7920:15253":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:45131:14424":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:12840:11257":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:10975:30111":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"5:2348:36942":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:2366:14899":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"0:1193:2771":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"1:32859:117":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:10928:14718":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:5541:13303":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11606:11171":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:7839:32450":{"crate_id":4,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"11:1158:14892":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:14573:11517":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10141:23586":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12319:14764":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:14533:11211":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:8906:13935":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:3774:158":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:14933:11587":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:12260:23702":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:16385:12013":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6205:23524":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:6210:13950":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:33996:10331":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:8267:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:32828:10118":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:23373:27980":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:7518:13729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:8598:14873":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:9437:245":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:41340:9701":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"4:575:15445":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:10663:11135":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12826:11252":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:11141:32497":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:34063:10335":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:4330:13950":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:6064:12171":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:3780:10353":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5494:13290":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:13781:11354":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:22172:16360":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:6381:13372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:11787:15061":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:6573:12301":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:8260:13864":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:578:12820":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"4:11832:13983":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:13064:14379":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:13087:14382":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:15121:11621":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:4899:16450":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:3341:10117":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:6211:13850":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:11539:11155":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:1105:14890":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:43505:12522":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:5366:13217":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:15829:11850":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12163:11189":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"14:0:4601":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:7361:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:23535:14069":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:11309:14724":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:15896:11867":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:5113:12211":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:2215:13994":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:2282:200":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"9:500:12734":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:11698:14022":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:4113:16401":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"4:1641:12660":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:7469:13692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:10773:164":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:23455:14064":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12776:14784":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13958:11389":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"11:396:15236":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:47101:14512":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:4829:13674":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"4:9496:13952":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:5282:12217":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:884:201":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:32857:4617":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:13028:14788":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:5477:13285":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:8031:13787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:14796:11568":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:9425:14991":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:14672:11530":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:8711:12564":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"4:10974:13961":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"4:3539:9665":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:22957:15826":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:34582:10337":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:41534:9705":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4970:13076":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:7539:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:12449:434":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"17:16494:11339":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"4:8268:15015":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:12457:1765":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:1220:14703":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:6144:23523":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:12857:15087":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:15753:11832":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:12038:34634":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:10387:14946":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:3330:12661":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:23612:14076":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"4:4119:16400":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:44929:14407":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:3769:267":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:3851:131":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:3295:120":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:46778:14483":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:9356:15043":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:41006:14295":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11864:14742":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:2860:12158":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:7900:14928":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:13347:15957":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"14:202:16527":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:10408:15046":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:1494:12830":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:16555:12063":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:5450:13267":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:23408:27927":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:11459:251":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12711:14779":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:485:12764":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:9351:15042":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:5650:14979":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:45325:175":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:12402:15064":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:3573:153":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:7722:13842":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"14:187:22606":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:7789:37011":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:46664:14477":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:41073:14299":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:984:14883":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:15939:11881":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"0:142:2830":{"crate_id":0,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"4:2754:14955":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:42275:181":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:43766:168":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:41099:14300":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12673:14773":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:41139:14000":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:12931:11268":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"4:12469:911":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"11:1064:22596":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:4133:14894":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:3061:270":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7938:12481":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:5441:13261":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:7316:13631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:1117:14892":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:10193:31555":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:5471:13282":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"14:31:14874":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:23335:27886":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:41111:11138":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:8891:161":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:42659:4626":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"5:3931:14907":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:8319:13805":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"0:1159:2694":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"17:12687:14777":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:7358:12175":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:3570:152":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"5:1230:15351":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:4902:12205":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:44509:14380":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:6437:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11566:14730":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:532:12795":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:8097:16330":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"5:1627:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:2816:10110":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"11:2533:12664":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"14:214:12642":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:7391:13677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:5676:13365":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:4852:15071":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:3799:28069":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:11851:14741":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:7463:13690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:23546:14070":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:16187:11962":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:42723:10156":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:4208:10240":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:12462:763":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:44391:11138":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:7414:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:4404:12199":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:40083:10347":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:47063:14510":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:4163:16403":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:43015:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:1657:12938":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"0:287:2117":{"crate_id":0,"path":["memchr","arch","x86_64","avx2"],"kind":"module"},"0:1230:2694":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"16:6914:12330":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:14738:11555":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:12851:11261":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:15106:11617":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:4902:16428":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"4:2326:150":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:47461:14551":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:41359:9702":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12293:14762":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:6625:12307":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:32770:257":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:12699:14778":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:5451:15075":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:7471:12421":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:15731:11826":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"11:1140:14891":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:6652:13526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:47217:14516":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:13921:11383":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"10:36:12673":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5593:13324":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5019:13103":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:8298:12507":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:2435:22662":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:6411:13397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:5085:12210":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11457:11151":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"4:12454:1348":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:3305:3535":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"0:748:2622":{"crate_id":0,"path":["memchr","memmem","rfind"],"kind":"function"},"4:3677:16358":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:22943:16097":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"11:430:15238":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:1632:12919":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:43778:14358":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:4997:13090":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:1589:12885":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:40215:10350":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"11:2539:12665":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:14886:11580":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:11026:37020":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6640:14807":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:11449:16360":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:34928:10340":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"0:949:2773":{"crate_id":0,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"17:14393:11489":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"11:740:14879":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:10816:15920":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:1577:12657":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:22089:31570":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"0:1201:2602":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"4:4943:16419":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:8261:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:44220:15104":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13890:11379":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:40100:224":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:9433:13950":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:46524:14461":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:40263:14155":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:43240:10210":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:8249:13789":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:8233:23535":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:3851:16399":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:15050:11610":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:43521:27970":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:4957:13071":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11401:11148":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"15:0:4602":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:15905:11868":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:7751:15912":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:14043:11404":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"18:670:3972":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:6028:12166":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:15812:11842":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"4:8536:9693":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"0:1538:3972":{"crate_id":0,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:41524:9704":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"11:2545:12666":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:5405:13240":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"4:4941:16418":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:3941:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"16:8267:12503":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:23524:14068":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:13193:14794":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"4:7428:15602":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:14845:11575":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13635:11320":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:7696:13841":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:10983:13859":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:14346:11483":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4937:13062":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"0:927:2707":{"crate_id":0,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"5:7288:35800":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:4567:15068":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:11037:15028":{"crate_id":4,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:43054:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:14872:11577":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:41318:9700":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:43543:10217":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:14832:11573":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:2206:15838":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10534:11129":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:10516:23598":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8900:9675":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:5305:14714":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"11:2228:12663":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:6672:13531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:15475:11774":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:22300:3201":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:6368:12267":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:46340:14444":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:8636:23537":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:8617:13910":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:11407:15060":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:45001:14413":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:23324:14045":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:15036:11609":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11678:14733":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:41084:15912":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7980:12180":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"4:8363:15018":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"16:2704:12151":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:43091:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:10568:10211":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:41246:145":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:4184:12196":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:4990:13087":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:706:3947":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:5649:12223":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:41790:9671":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:7542:12431":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:16632:12077":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:22598:14033":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:5682:116":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"6:6765:13564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:14282:14032":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"4:5807:16477":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:47416:14550":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:11821:15005":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:9377:31676":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:42475:13910":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:7332:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:12450:1204":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:8583:16398":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"16:2620:12147":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:5179:13136":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:517:12786":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:46568:14464":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"9:0:4597":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:7738:13843":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"9:328:12711":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:41205:9693":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:16026:11900":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:22729:16360":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12798:23727":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"4:4827:13672":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:22571:16360":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:2105:693":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:41772:9667":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:2896:213":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:23568:14072":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:44854:14404":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:42588:9826":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:6526:13451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:23301:14041":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:10953:13953":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"0:915:2702":{"crate_id":0,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"5:7605:10156":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:15351:11681":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"0:1000:3157":{"crate_id":0,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"17:11448:14726":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:31528:207":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:46632:14475":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:7192:23530":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:46387:14449":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:14327:11478":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:45322:162":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"9:176:15292":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:9169:13939":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:42867:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:12464:758":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"17:15989:11892":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:2437:14709":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"0:179:2509":{"crate_id":0,"path":["memchr","arch","all","twoway"],"kind":"module"},"17:16332:12004":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:22298:16009":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"0:747:2618":{"crate_id":0,"path":["memchr","memmem","find"],"kind":"function"},"1:10821:14015":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:1667:12944":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:16323:12000":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:4241:12197":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:963:14879":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"10:44:12674":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:10938:37023":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:835:14880":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:5302:13836":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:5387:13228":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"4:7801:32452":{"crate_id":4,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"4:3307:35153":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:6042:12169":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:38735:10343":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6389:14800":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:11831:11155":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:538:11004":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:8290:13798":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11706:14735":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:3335:10115":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:5993:14986":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:10817:11209":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:15090:11615":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:12416:15085":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:12335:14766":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:16798:12116":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"4:9420:198":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:4780:16446":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:6738:37010":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:8672:13659":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:8031:13855":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"5:1370:12432":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:14072:11413":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:3668:34606":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:12625:11242":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:44312:15107":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:2840:12157":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:12234:11283":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:12028:14749":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"0:1251:2707":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"17:10784:14716":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"4:9145:210":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:14460:11500":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:11775:15081":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11503:11154":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:39424:10346":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:6434:14989":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:46404:14450":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:3338:12659":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:12841:15926":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"11:798:14894":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:5475:214":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"18:598:3272":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:14917:11586":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:40175:225":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:9686:15078":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:667:11119":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:2173:14909":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:7577:13762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12082:11182":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:13471:11250":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:8066:23534":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:11606:2664":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:13145:14790":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:7815:13849":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:5224:13158":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:3364:12662":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:43796:14361":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:22101:31565":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:16714:12097":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:4964:13074":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:45317:14435":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"4:9139:15033":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"5:3304:12660":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:7350:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:16159:11955":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:12135:11187":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:4999:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:41149:15098":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"16:2450:12133":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6749:12309":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:564:12812":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:11777:11168":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"4:11068:31671":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:44332:15108":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12122:11186":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:3400:4619":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:7448:13684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:212:4635":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:2208:15839":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:42732:207":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"11:873:14885":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:7215:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:40910:14289":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:9212:13941":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:7180:16498":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:2900:12160":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:7454:13686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:33300:10327":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:14773:11567":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6658:14817":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5334:13210":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:7223:12383":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6421:12125":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:5736:14981":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:15981:11890":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:7765:12462":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:11173:37022":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12191:11193":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:546:12122":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:31155:10261":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:6902:13608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:15953:11883":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:43788:14360":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:14239:118":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:9292:13945":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:11000:13964":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:40895:27870":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:45123:14422":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:5507:13296":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:1563:12869":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12537:14770":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:3620:14967":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:23645:14079":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"16:6904:12329":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:6180:15354":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:6507:13449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:16668:12084":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:41350:3861":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:15621:11796":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:44322:14028":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6876:12326":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13570:23603":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:47371:14549":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:43476:10217":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"4:11781:13976":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"10:0:4598":{"crate_id":10,"path":["adler"],"kind":"module"},"1:47616:9643":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:5527:35761":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:41782:9669":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:10570:217":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"13:229:12646":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:41040:14296":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:1500:12833":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:4873:12204":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:2029:13950":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"4:881:2664":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:3535:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:8284:13797":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:41734:14311":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:1002:2664":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:14335:11480":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:16084:11942":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:3025:15606":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:4844:12203":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:11075:37017":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:959:14878":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:38680:10342":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:1703:12958":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:15148:11624":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"11:1005:12432":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:299:12649":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10630:11134":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:7521:12429":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:9182:13940":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"16:6822:23527":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:5709:23522":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:14019:11400":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:3851:13815":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:7586:13765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5069:13128":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:1623:10156":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:44679:14390":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:10700:32502":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:40137:223":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:23487:16360":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:41306:9707":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:12941:11269":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"4:11717:14358":{"crate_id":4,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"4:6706:9661":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"6:5044:13115":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:5635:13349":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"0:423:2041":{"crate_id":0,"path":["memchr","arch","x86_64","sse2"],"kind":"module"},"5:3800:35761":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:4730:13998":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"11:772:12657":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:11315:13968":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"4:5362:215":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"11:351:15231":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:3141:11018":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11386:23611":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:2854:212":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:40115:221":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:5375:13223":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:2227:14705":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:6723:13551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:2990:12164":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5325:13207":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:8026:15008":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"17:16684:12089":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:4053:14894":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"5:7124:16544":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:13055:11155":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:4579:15069":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:7561:14894":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"0:986:2771":{"crate_id":0,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"16:6953:12333":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:8096:14869":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:4931:10220":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"6:8343:13810":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:45032:14419":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:44364:14370":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:44609:14386":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:42904:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:41256:9695":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"4:3913:14968":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:12045:13988":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:47196:14515":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:47627:9644":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:9229:13942":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:3086:36958":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:32752:10220":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:46486:14459":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:5641:13352":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:14692:11531":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:3889:11023":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:5186:13138":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:11129:32491":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:6402:32506":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:7105:14013":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:40039:4623":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:4484:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:545:12802":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:16145:11949":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:8330:13806":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:6561:16499":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:15496:11779":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"11:854:14883":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:465:12753":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"18:573:11000":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11971:14745":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13306:11297":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:4983:12208":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:8091:16290":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:46746:14481":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:7613:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:16812:12117":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:22955:29761":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:14405:11491":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:10031:23583":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:42571:10240":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:22823:16094":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:42978:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5349:13212":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:8353:13812":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:14140:11433":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:41218:9684":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:11737:15080":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:13818:11367":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13119:11279":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"11:2420:10156":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"11:809:14907":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"4:4702:16429":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:10474:16479":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:10442:23596":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:14560:11515":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:32745:15097":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:38790:10344":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:5316:14975":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:5105:16447":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14507:11506":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:7641:10156":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:11085:13940":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7990:12486":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:46862:14487":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:9206:10156":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:4939:16416":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:5131:14713":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:6659:13527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:8507:13905":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"17:472:14701":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:10803:11138":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:297:3194":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:15701:11815":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:40884:14286":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:14084:11416":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"11:1023:14887":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:10778:14715":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"16:4120:12194":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:6239:12245":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:12463:779":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:4591:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"11:1900:12659":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:12583:11241":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:1250:15245":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:5224:12215":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:0:4599":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:8669:12479":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7508:12426":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:2550:12144":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:12475:993":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"17:11691:14734":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:23084:16089":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"4:1854:719":{"crate_id":4,"path":["std","env"],"kind":"module"},"16:7282:12397":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:44980:15971":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:5009:10106":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:6631:13514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5107:13130":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10487:23597":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:3548:4624":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:46824:14485":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:16399:12016":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:9316:15037":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"4:12026:13987":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"6:6449:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:34755:10338":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:5413:30281":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:10338:10229":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:11630:10240":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"0:288:2362":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr"],"kind":"module"},"17:13592:11316":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:4341:15248":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:481:3829":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:1652:12662":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13222:23599":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:15844:11852":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:42707:2664":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:3814:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:44455:14377":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:3405:14964":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:16377:12010":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:7749:9681":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:42497:14333":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:42619:9827":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10549:11130":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:16241:11983":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:14708:11536":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:8668:15028":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"9:390:22519":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:15769:11834":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:8105:12491":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:10418:23595":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"0:743:3971":{"crate_id":0,"path":["memchr","memmem","rfind_iter"],"kind":"function"},"4:6824:14995":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:5172:12213":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:41288:9698":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:8889:2664":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"6:5682:13368":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11630:11157":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:10280:14329":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:5220:15882":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:6462:23526":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:7896:11119":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:14480:2032":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"6:8014:13777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:6285:13950":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:2920:12161":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:3448:14966":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:4956:12207":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:10777:14965":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:11889:14380":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4881:13036":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:5727:11129":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:12423:16291":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:11720:11161":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:15024:11608":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:23590:14074":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"11:1884:10156":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:5742:11130":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:11363:13969":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:11952:14743":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:22867:16095":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:23079:16091":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:32734:15096":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:491:12766":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:5060:12209":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:12458:1855":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:46457:14457":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:8058:14868":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:5128:16449":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:3388:10328":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:322:14700":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:43998:14364":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:7495:12422":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12249:14759":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:13838:11368":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:5879:13851":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:13562:122":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:4233:16410":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:43994:14363":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:9581:14947":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:43581:10218":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:31149:10112":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:46507:14460":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"0:286:2032":{"crate_id":0,"path":["memchr","arch","x86_64"],"kind":"module"},"1:23466:15673":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:47607:3643":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:2256:16271":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:1514:12838":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:2112:10258":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:14586:11518":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:659:3967":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:2660:12149":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:2467:12135":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"11:2466:14907":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:30887:15643":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:2724:12152":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:11298:13951":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:12280:14760":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"18:651:11000":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:42357:14325":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:11053:14981":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:22905:16096":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:5462:13276":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:4929:12206":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:6534:13456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:47569:14555":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14821:11572":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:41763:9665":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:13103:14385":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:1630:14907":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:44966:14408":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12570:14772":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"15:288:15222":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13169:14792":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:8308:13801":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:8824:13927":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:7305:12398":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:3129:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:6623:13513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:7030:12343":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:11553:14729":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:15431:11743":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:16198:11967":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:11012:13905":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:23270:14036":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:754:3948":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:45388:14436":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:16728:12100":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"4:3313:32334":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:1932:14948":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"0:964:3157":{"crate_id":0,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"4:11793:13980":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:42830:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:23557:14071":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:11114:14721":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:586:12824":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"11:2349:14888":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:41227:9685":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5420:13246":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:7110:14011":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"0:209:2517":{"crate_id":0,"path":["memchr","arch","all","is_prefix"],"kind":"function"},"5:5572:16521":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:44290:15106":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:23037:16360":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:15852:11853":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:1930:14947":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:3854:14712":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"0:1243:2702":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"0:1264:2771":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"0:1130:2602":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"16:4267:12198":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:34197:10332":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:7090:16542":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:10657:15033":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:3085:3832":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:39:4633":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:16822:11384":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:41176:9682":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:780:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"11:1580:14895":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"12:0:4600":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:8165:12174":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:40933:14291":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4947:13068":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:5428:13251":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:44240:15105":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:3110:12187":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:11475:23613":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"5:3088:13822":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:8223:12495":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:12069:32495":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"16:7372:12176":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:5392:452":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:11818:14740":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:2772:12154":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:5666:14980":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:3051:174":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:5543:132":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"5:1889:14907":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"0:1572:4015":{"crate_id":0,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:41327:9687":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13290:11087":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"0:1562:3157":{"crate_id":0,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:42313:14318":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:80:2374":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:8649:13912":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:3564:9717":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:42463:14332":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12347:14767":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4869:13033":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:16264:11984":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:6065:14988":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:44837:14403":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:4311:15246":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:1711:12962":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:5007:13097":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:4149:16402":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:32759:14145":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:6740:13555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"16:6084:12227":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:8546:12551":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:23634:14078":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:317:14699":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:3602:13908":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"6:5241:13168":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"11:1601:14896":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:7813:32459":{"crate_id":4,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:2668:15827":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:16761:12107":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:8498:13904":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:42535:205":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:47803:9653":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:6611:13506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:5255:12216":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:4018:14970":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:11805:14739":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:491:3830":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6188:12239":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:0:4604":{"crate_id":17,"path":["object"],"kind":"module"},"17:12216:11196":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"4:11473:12731":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:41297:9699":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"11:328:12652":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:6408:12271":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:9364:13946":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:3371:1270":{"crate_id":1,"path":["core","ops"],"kind":"module"},"17:12886:11263":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:14416:11492":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:14001:11399":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:5265:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:2245:132":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:47548:14554":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:2890:206":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:8938:31559":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:1871:14945":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"11:2400:10240":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:3024:16360":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:45422:191":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:5020:16415":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12976:11272":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:9573:9829":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"11:698:10156":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:15641:11804":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6917:13619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:12467:924":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"16:2590:12146":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"0:1172:2702":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"4:5986:14982":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:31170:10217":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:11909:14968":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:1619:2664":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:5379:12220":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:44277:9682":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:45127:14423":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13427:11304":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"4:12468:930":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:47673:9647":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:7548:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:43466:14341":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:11653:11159":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13554:11311":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:40952:14284":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:10774:14963":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"5:3309:36906":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:43741:14354":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:15540:11784":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:15997:11893":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"15:327:15279":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:13352:15956":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11788:14736":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:12418:15301":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:2792:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:43749:14356":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:6770:13565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:10793:11015":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"16:6440:23525":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:40003:10241":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"0:27:322":{"crate_id":0,"path":["memchr","arch","all"],"kind":"module"},"17:15586:11792":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:41741:9659":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"11:2323:14887":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:5057:13119":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:1643:12927":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:7212:12382":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:11848:15082":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:15679:11811":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"13:110:10311":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:23051:16090":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:5151:13134":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7337:12402":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:16739:12105":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:46795:14484":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:5670:13363":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:16283:11989":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:42715:10240":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:41121:15898":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:13322:23601":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:38845:10345":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:5196:13145":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"4:9310:118":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:11563:32511":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:41748:9661":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:6493:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:47741:9651":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7386:12406":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:5040:10222":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:12461:760":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"17:13662:11326":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:1684:12951":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:4211:16406":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:2162:14908":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:13326:10079":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:3408:4621":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:3045:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:5616:14976":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"18:698:4015":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:5114:16448":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"4:3446:14965":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:9460:173":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"11:1920:12662":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:1690:12954":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:2440:14894":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"4:4997:14974":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:726:11012":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:7649:10156":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:15439:11744":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:6473:13425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:8151:12184":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:7581:13839":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:14975:11595":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:6700:13542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:14599:11520":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"0:1552:2771":{"crate_id":0,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:45119:14421":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:11147:32501":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:14902:11582":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:4987:10221":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"6:5249:13171":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:1489:12828":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:3553:4625":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"4:10771:14961":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"4:973:16304":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6970:12168":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:16311:11998":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:2083:209":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"11:1564:22597":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:7424:23531":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:45135:14425":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:15531:11780":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:6882:13594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:1530:12846":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:2793:14959":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:4896:13042":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:26497:281":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11222:14722":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12176:11190":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:14269:11465":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"0:879:2661":{"crate_id":0,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"5:7884:14907":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:8302:13800":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:41196:9683":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:11886:15252":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:7495:15250":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:7906:15006":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:7707:16303":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:15887:11864":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:42563:2664":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:13181:14793":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"7:79:22512":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:46419:14451":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:3378:10330":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:2554:4538":{"crate_id":4,"path":["std","io"],"kind":"module"},"6:6777:13566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:31181:27875":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"4:925:12658":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:4225:16408":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:3503:14710":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:3456:14907":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:12225:11197":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"0:664:2382":{"crate_id":0,"path":["memchr","memmem"],"kind":"module"},"16:8565:12554":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:5139:13133":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:6127:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:47636:3644":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:8427:157":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:46582:14465":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:46440:14456":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4976:13079":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11124:37018":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:8255:13790":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12906:11265":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:32769:250":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:40252:14154":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:14358:11485":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:2295:13819":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:6746:13853":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:8483:12544":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:2802:4616":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"4:8206:13858":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:6984:12185":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:3403:4620":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:11112:30107":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"11:123:12648":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:45147:14428":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:13082:14722":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"11:2559:12669":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:15919:11875":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"4:3659:10207":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:15931:11878":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5482:13287":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11878:11171":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:16786:12113":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:45401:30067":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:8584:189":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:2769:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:8223:13860":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"5:7591:36909":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:5348:12219":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:14152:11436":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13610:11319":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:559:12810":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10368:23593":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:16179:11961":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:5381:13225":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:14284:11469":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:155:12120":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:8895:13934":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:14127:11432":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:7855:9692":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:570:12815":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:2328:14953":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"9:480:22517":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:8043:37006":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"0:424:2362":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr"],"kind":"module"},"5:3343:36905":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:3517:4622":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:4857:15072":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:16341:12006":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:5804:13580":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"16:6502:22634":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5288:13193":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:42650:9803":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:1595:14893":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:12983:23729":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:13854:11372":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:680:2771":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10597:11133":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:2845:501":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"1:3293:276":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:22929:16360":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:12550:11238":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:15876:11860":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5648:13355":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:1675:12945":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12920:11266":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:23393:27903":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:13451:11306":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:31555:10130":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:42554:184":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"2:0:524":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:7341:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:3308:12132":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"14:40:11354":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:8028:12487":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:46989:14508":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:44823:14400":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:40245:10352":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:6691:13536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:8179:12493":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:13266:23600":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:6337:12261":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"11:1049:14888":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:1524:2664":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:15010:11607":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:22180:16011":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:7308:13626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:10007:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:8255:13861":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:4810:12202":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:22087:31568":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:11527:14728":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"0:1209:2661":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"1:34409:10336":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:14099:11422":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6256:12250":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:41055:14298":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:7416:14839":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:5417:12221":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:6227:231":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:1869:14944":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:12434:31686":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:12456:1731":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:43535:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:497:12769":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:5301:13198":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:9447:15003":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:22119:16360":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"18:608:3277":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:8503:12545":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:2684:12150":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:41169:15099":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"4:11333:173":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:2570:12145":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:12749:14782":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"3:0:4594":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"16:3834:12193":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:894:10240":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:13095:11278":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:12371:11203":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13909:11380":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:7075:23529":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:44405:14018":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:4221:16407":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:2498:16350":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:10823:11140":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:13361:11300":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:234:237":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:8528:12548":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:2521:16357":{"crate_id":4,"path":["std","fs","exists"],"kind":"function"},"4:534:16271":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:6790:13573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:11970:14970":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:44303:14027":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"11:1674:15600":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:10993:151":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:16008:11897":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13515:23602":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:5198:12214":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:44527:14381":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:8629:16427":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:15665:11810":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:954:14893":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7462:14840":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:7825:14927":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:507:11000":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:42628:3941":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:41068:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:1616:14879":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:8476:133":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:3605:10348":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:4489:13950":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"5:5836:16542":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:5319:13206":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:2209:15815":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"0:992:2771":{"crate_id":0,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"11:1893:14907":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:1386:14888":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10564:11131":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:7431:13679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:3057:271":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:11926:11178":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:46325:14441":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:5036:13111":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:1625:12915":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7159:12369":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12306:11200":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"4:8358:15017":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:47490:14552":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:13400:15964":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6098:14798":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:44251:14365":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:5533:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4842:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:41375:3364":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:10296:23591":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:15573:11787":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:33512:10326":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:5395:13233":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:13692:11330":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"4:8276:15016":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:4362:15249":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:538:12798":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:3181:15067":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:1339:14704":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"0:28:2362":{"crate_id":0,"path":["memchr","arch","all","memchr"],"kind":"module"},"4:8011:13854":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:9478:13951":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"4:10548:116":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"4:6386:14030":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:8559:14018":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"11:2121:12432":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:11958:14744":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:6710:14994":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:23579:14073":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:12992:11273":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:22033:10130":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12409:23703":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8529:9676":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:8727:15029":{"crate_id":4,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"14:160:14874":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:43226:10209":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:4848:232":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"5:726:14900":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:45461:14440":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"11:364:15234":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:1785:35761":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14963:11593":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:531:3946":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:40195:227":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:6840:10156":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:5143:13950":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:1123:35761":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:635:3260":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"4:5630:14978":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:12056:11179":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:3403:14963":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:8624:13911":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:10934:15055":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:13141:14022":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12149:11188":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"0:739:3965":{"crate_id":0,"path":["memchr","memmem","find_iter"],"kind":"function"},"1:43981:14362":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"17:14652:11527":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:679:14937":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:14807:11570":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:46355:14445":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"0:871:2602":{"crate_id":0,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"1:43247:10211":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:4414:14971":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:7571:14925":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:8394:9678":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:7401:37007":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:11807:13981":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6462:13417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"11:2137:14887":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:45151:14429":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:10198:15303":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:4333:15247":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:10012:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:44808:14395":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:12648:11243":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:10246:23589":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:8801:14358":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:3696:222":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:7883:12275":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12524:14769":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:599:14935":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:34264:10334":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:14262:14030":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:8643:15024":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:5520:13297":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:44787:15970":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:47711:9649":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:9256:16494":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:8546:9704":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"16:5757:12225":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:44573:14384":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"11:842:16304":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"0:405:2506":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","packedpair"],"kind":"module"},"1:47034:14509":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8143:4181":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:13041:14789":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"4:4680:16428":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"11:1880:2664":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:12455:349":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"18:521:3945":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:2496:16349":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"16:3441:12190":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:4:1288":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:12478:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:45449:4630":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:12237:15603":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:44688:14391":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:4171:16404":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:22610:31571":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"4:10565:15358":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"4:7335:32454":{"crate_id":4,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:44381:14372":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:11917:15083":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:2086:208":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:46922:14505":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"18:718:11009":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12108:11185":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:2331:2555":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:687:16287":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:24097:247":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:44991:14409":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:32738:12479":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"18:96:2375":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11579:14731":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:6731:14835":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:44659:14388":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"16:6866:23528":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:7790:14926":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:16832:11389":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:7563:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:4766:12201":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:3014:22663":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:6588:12304":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"16:7731:9826":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:4816:12990":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:8014:12182":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:46877:14488":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:2950:12162":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:14056:31297":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:2506:12142":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:22043:31573":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:15777:11836":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:44423:14023":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:11105:30110":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"16:6680:14823":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"17:3720:14711":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:7807:37013":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:15714:11821":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:8008:13775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6890:12167":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:44555:14383":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"9:422:22520":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:12860:11262":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12359:14768":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:40960:14293":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"0:124:2506":{"crate_id":0,"path":["memchr","arch","all","packedpair"],"kind":"module"},"1:23601:14075":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:13398:11303":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:6713:14894":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:14055:11405":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:12452:1917":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:4699:15070":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:7778:13848":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6713:14827":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:6159:12234":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:14031:11403":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:12787:11245":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:36804:10341":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:13757:11353":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:996:14886":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:31117:10260":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:13027:14374":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:6680:13533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:1551:12861":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"0:1138:2661":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"4:3569:13950":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"5:2816:13829":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"18:113:2376":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:12449:15086":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:45412:15111":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:6638:13515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:46731:14480":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:14627:11525":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:16171:11958":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"0:892:2682":{"crate_id":0,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"4:967:14880":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:2406:14706":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:1586:12658":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8390:9679":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:3687:16379":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"5:6580:16500":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"4:8489:4181":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:14319:163":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:3496:16386":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:9452:15004":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"16:0:4603":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:5205:13150":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:22731:16010":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":31}